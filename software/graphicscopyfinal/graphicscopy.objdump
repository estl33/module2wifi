
graphicscopy.elf:     file format elf32-littlenios2
graphicscopy.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00027464 memsz 0x00027464 flags r-x
    LOAD off    0x00028484 vaddr 0x08027484 paddr 0x08028fec align 2**12
         filesz 0x00001b68 memsz 0x00001b68 flags rw-
    LOAD off    0x0002ab54 vaddr 0x0802ab54 paddr 0x0802ab54 align 2**12
         filesz 0x00000000 memsz 0x00000224 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001be80  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000b448  0801c03c  0801c03c  0001d03c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b68  08027484  08028fec  00028484  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000224  0802ab54  0802ab54  0002ab54  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0802ad78  0802ad78  00029fec  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00029fec  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000012f8  00000000  00000000  0002a010  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00034e93  00000000  00000000  0002b308  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000d283  00000000  00000000  0006019b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000fdad  00000000  00000000  0006d41e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00004488  00000000  00000000  0007d1cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000488d  00000000  00000000  00081654  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001c458  00000000  00000000  00085ee1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  000a233c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000015c8  00000000  00000000  000a2390  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000a91d1  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000a91d4  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000a91e0  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000a91e1  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000a91e2  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000a91ed  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000a91f8  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  000a9203  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001c  00000000  00000000  000a920e  2**0
                  CONTENTS, READONLY
 26 .jdi          00006481  00000000  00000000  000a922a  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000859a2  00000000  00000000  000af6ab  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001bc l    d  .text	00000000 .text
0801c03c l    d  .rodata	00000000 .rodata
08027484 l    d  .rwdata	00000000 .rwdata
0802ab54 l    d  .bss	00000000 .bss
0802ad78 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../graphicscopy_bsp//obj/HAL/src/crt0.o
080001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
08000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 Bounds.c
08028f70 l     O .rwdata	00000006 __FUNCTION__.2602
0801c088 l     O .rodata	0000000a __FUNCTION__.2608
00000000 l    df *ABS*	00000000 Button.c
08000fa4 l     F .text	000000c0 Button_ctor
08001064 l     F .text	0000012c Button_draw
00000000 l    df *ABS*	00000000 ColourPallette.c
00000000 l    df *ABS*	00000000 DE1_SOC_graphics.c
00000000 l    df *ABS*	00000000 DE1_SOC_touchscreen.c
00000000 l    df *ABS*	00000000 DrawOperations.c
0801c524 l     O .rodata	0000000b __FUNCTION__.2195
0801c530 l     O .rodata	0000000b __FUNCTION__.2204
0801c53c l     O .rodata	0000000a __FUNCTION__.2214
0801c548 l     O .rodata	0000000a __FUNCTION__.2225
0801c554 l     O .rodata	00000010 __FUNCTION__.2237
0801c564 l     O .rodata	0000001a __FUNCTION__.2251
0801c580 l     O .rodata	0000000c __FUNCTION__.2258
0801c58c l     O .rodata	00000012 __FUNCTION__.2273
0801c5a0 l     O .rodata	0000001e __FUNCTION__.2291
0801c5c0 l     O .rodata	0000001b __FUNCTION__.2309
00000000 l    df *ABS*	00000000 Equalizer.c
00000000 l    df *ABS*	00000000 Event.c
08002c34 l     F .text	00000068 Event_ctor
08002c9c l     F .text	00000048 EventClass_ctor
00000000 l    df *ABS*	00000000 EventHandler.c
00000000 l    df *ABS*	00000000 Fonts.c
00000000 l    df *ABS*	00000000 Gps.c
00000000 l    df *ABS*	00000000 Histogram.c
08003548 l     F .text	00000058 Histogram_ctor
080035a0 l     F .text	000003c4 Histogram_draw
08026b90 l     O .rodata	0000000d __FUNCTION__.3046
00000000 l    df *ABS*	00000000 ListView.c
08003b8c l     F .text	00000064 ListView_ctor
08003bf0 l     F .text	00000048 ListView_draw
08003c38 l     F .text	000000c4 ListView_measure
00000000 l    df *ABS*	00000000 MainEntry.c
08003ec0 l     F .text	00000040 onPlayClick.3756
080048d4 l     F .text	00000040 onCh1Click.3759
08004914 l     F .text	00000040 onCh2Click.3762
08004954 l     F .text	000000dc onSettingsClick.3765
08004a30 l     F .text	00000054 onEQClick.3772
08004a84 l     F .text	00000054 onColorClick.3777
08004ad8 l     F .text	00000038 onBlueClick.3782
08004b10 l     F .text	0000003c onMagentaClick.3785
08004b4c l     F .text	00000038 onRedClick.3788
00000000 l    df *ABS*	00000000 Object.c
08004ed8 l     F .text	00000028 Object_ctor
08004f00 l     F .text	00000024 Object_dtor
08004f24 l     F .text	00000034 Object_differ
08028f80 l     O .rwdata	00000008 __FUNCTION__.2987
08004ffc l     F .text	000001cc Class_ctor
08026d74 l     O .rodata	0000000b __FUNCTION__.2998
080051c8 l     F .text	00000060 Class_dtor
08028f88 l     O .rwdata	00000006 __FUNCTION__.3014
08026c94 l     O .rodata	00000038 object
08028f90 l     O .rwdata	00000004 __FUNCTION__.3024
08028f94 l     O .rwdata	00000005 __FUNCTION__.3033
08026d80 l     O .rodata	0000000b __FUNCTION__.3040
08028f9c l     O .rwdata	00000005 __FUNCTION__.3045
08026d8c l     O .rodata	0000000b __FUNCTION__.3051
08028fa4 l     O .rwdata	00000007 __FUNCTION__.3057
08026d98 l     O .rodata	0000000d __FUNCTION__.3064
00000000 l    df *ABS*	00000000 OutGraphicsCharFont.c
00000000 l    df *ABS*	00000000 PlayPauseButton.c
08005b04 l     F .text	000000d8 PlayPauseButton_ctor
08005bdc l     F .text	00000260 PlayPauseButton_draw
00000000 l    df *ABS*	00000000 ProgressBar.c
08006010 l     F .text	00000088 ProgressBar_ctor
08006098 l     F .text	0000016c ProgressBar_draw
08026df8 l     O .rodata	0000000e __FUNCTION__.3076
00000000 l    df *ABS*	00000000 Renderer.c
00000000 l    df *ABS*	00000000 ScreenView.c
080066f8 l     F .text	000000b0 ScreenView_ctor
080067a8 l     F .text	0000007c ScreenView_draw
00000000 l    df *ABS*	00000000 Shapes.c
080068b8 l     F .text	00000068 Rect_ctor
08006920 l     F .text	00000088 Rect_draw
00000000 l    df *ABS*	00000000 TestLib.c
08026f8c l     O .rodata	0000000b __FUNCTION__.2076
00000000 l    df *ABS*	00000000 TextView.c
08006e38 l     F .text	00000070 TextView_ctor
08006ea8 l     F .text	000000ec TextView_draw
00000000 l    df *ABS*	00000000 TouchEventHandler.c
00000000 l    df *ABS*	00000000 TouchInterrupt.c
08007844 l     F .text	00000044 timer_isr
00000000 l    df *ABS*	00000000 View.c
08007910 l     F .text	000000e0 View_ctor
080079f0 l     F .text	00000024 View_draw
08007ab0 l     F .text	000000cc View_measure
08008198 l     F .text	000000c8 ViewClass_ctor
00000000 l    df *ABS*	00000000 Volume.c
00000000 l    df *ABS*	00000000 Wifi.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0800ba04 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 impure.c
08027484 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
08027276 l     O .rodata	00000010 zeroes.4166
08027286 l     O .rodata	00000010 blanks.4165
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 vfprintf.c
08027296 l     O .rodata	00000010 zeroes.4181
080272a6 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 dtoa.c
08010c18 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08012798 l     F .text	00000008 __fp_lock
080127a0 l     F .text	00000008 __fp_unlock
080127b4 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
08027cd0 l     O .rwdata	00000020 lc_ctype_charset
08027cb0 l     O .rwdata	00000020 lc_message_charset
08027cf0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
080272d4 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
080273f8 l     O .rodata	00000010 zeroes.4110
08027408 l     O .rodata	00000010 blanks.4109
00000000 l    df *ABS*	00000000 vfprintf.c
080167b0 l     F .text	000000fc __sprint_r.part.0
08027428 l     O .rodata	00000010 blanks.4125
08027418 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
080190ac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
080191cc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0801922c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0801961c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
08019710 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
08019890 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
08019974 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
08019b50 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08028fe0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
08019ddc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08019f24 l     F .text	00000038 alt_dev_reg
08027ed0 l     O .rwdata	00001060 jtag_uart_0
08028f30 l     O .rwdata	0000002c character_lcd_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0801a228 l     F .text	00000204 altera_avalon_jtag_uart_irq
0801a42c l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0801aa4c l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0801b2a4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0801b510 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0801b648 l     F .text	00000050 alt_get_errno
0801b698 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0800c7cc g     F .text	00000018 putchar
08014850 g     F .text	00000074 _mprec_log10
0801493c g     F .text	0000008c __any_on
080181ac g     F .text	00000054 _isatty_r
080272e0 g     O .rodata	00000028 __mprec_tinytens
08019a98 g     F .text	00000078 alt_main
0802ac38 g     O .bss	0000000c mouseLocation
08000374 g     F .text	0000018c merge
08002f90 g     F .text	00000044 propagateEvent
0800c7e4 g     F .text	000000b8 _puts_r
0802ac78 g     O .bss	00000100 alt_irq
08018200 g     F .text	0000005c _lseek_r
08001760 g     F .text	0000035c DE1_getLastTouchLocation
0802ab6c g     O .bss	00000004 audioScreen
08028fec g       *ABS*	00000000 __flash_rwdata_start
0801abbc g     F .text	0000003c alt_up_character_lcd_send_cmd
08028f64 g     O .rwdata	00000004 RIGHT
0800a368 g     F .text	00000084 .hidden __eqdf2
0802ad78 g       *ABS*	00000000 __alt_heap_start
08005828 g     F .text	00000190 OutGraphicsCharFont2
080153e8 g     F .text	00000058 _kill_r
08005364 g     F .text	00000040 delete
0800c788 g     F .text	0000003c printf
08006ff0 g     F .text	00000094 initTextView
0801c88a g     O .rodata	00000a64 Font10x14
080182b8 g     F .text	0000009c _wcrtomb_r
080151ac g     F .text	00000084 _signal_r
08005508 g     F .text	0000007c super_dtor
0801551c g     F .text	0000005c __sseek
08012ae8 g     F .text	00000010 __sinit
08017c44 g     F .text	00000154 __swbuf_r
080086a8 g     F .text	000000c4 setVolume
08013560 g     F .text	0000007c _setlocale_r
08012954 g     F .text	00000064 __sfmoreglue
08001da8 g     F .text	00000104 writeLine
08019b30 g     F .text	00000020 __malloc_unlock
080076e8 g     F .text	00000110 generateTouchListChildren
080138e0 g     F .text	0000015c memmove
08012ad0 g     F .text	00000018 _cleanup
08013a3c g     F .text	000000a8 _Balloc
0802ab70 g     O .bss	00000004 redButton
08009054 g     F .text	00000078 .hidden __fixsfsi
08005a94 g     F .text	00000070 onPlayPauseButtonClick
08005a28 g     F .text	0000006c onPlayPauseButtonUp
08001300 g     F .text	00000100 DE1_writeHLine
08001afc g     F .text	00000028 setClippingBounds
08001abc g     F .text	00000040 DE1_clearLastTouchLocation
0800a3ec g     F .text	000000e0 .hidden __gtdf2
08000500 g     F .text	0000019c intersect
00000000  w      *UND*	00000000 __errno
0801ab48 g     F .text	00000074 get_DDRAM_addr
08003964 g     F .text	00000124 setAmplitude
08002ce4 g     F .text	000000c4 initEvent
08000000 g     F .entry	0000001c __reset
08007c18 g     F .text	000000cc setX
08000020 g       *ABS*	00000000 __flash_exceptions_start
08001690 g     F .text	00000048 getcharTouch
08018154 g     F .text	00000058 _fstat_r
0802abe8 g     O .bss	00000004 errno
08015498 g     F .text	00000008 __seofread
0802ab74 g     O .bss	00000004 bassText
08015748 g     F .text	00001068 ___svfiprintf_internal_r
08008b3c g     F .text	000000b0 wifi_setup_command
0802ab78 g     O .bss	00000004 channel1Button
080073f0 g     F .text	00000104 handleTouch
0802ac00 g     O .bss	00000004 alt_argv
08030f5c g       *ABS*	00000000 _gp
08019dac g     F .text	00000030 usleep
0801932c g     F .text	00000020 getpid
08002ebc g     F .text	000000d4 propagateChildren
080059b8 g     F .text	00000070 onPlayPauseButtonDown
080074f4 g     F .text	000001f4 propagateTouchEvent
0802ab64 g     O .bss	00000004 Histogram
08027d50 g     O .rwdata	00000180 alt_fd_list
080055f8 g     F .text	00000084 super_differ
08006204 g     F .text	00000124 setPercentage
0800c7c4 g     F .text	00000008 _putchar_r
0801b450 g     F .text	00000090 alt_find_dev
0800c500 g     F .text	00000138 memcpy
0801ad58 g     F .text	00000050 alt_up_character_lcd_write_fd
080127a8 g     F .text	0000000c _cleanup_r
0800b628 g     F .text	000000d0 .hidden __floatsidf
0801b5d0 g     F .text	00000078 alt_io_redirect
0800a4cc g     F .text	000000e0 .hidden __ltdf2
0802ac44 g     O .bss	00000024 touchHandler
0801c03c g       *ABS*	00000000 __DTOR_END__
0800c89c g     F .text	00000014 puts
080150d0 g     F .text	00000074 __fpclassifyd
08003060 g     F .text	00000044 getcharGPS
080147ac g     F .text	000000a4 __ratio
08017c20 g     F .text	00000024 __vfiprintf_internal
08008660 g     F .text	00000048 getCharArduino
0801a628 g     F .text	0000020c altera_avalon_jtag_uart_read
0800bd30 g     F .text	00000014 malloc
0800c75c g     F .text	0000002c _printf_r
0800bb20 g     F .text	00000008 .hidden __udivsi3
080072a8 g     F .text	00000148 handleUp
0801966c g     F .text	000000a4 isatty
08015230 g     F .text	000000bc _raise_r
0800bb30 g     F .text	00000064 __assert_func
08027330 g     O .rodata	000000c8 __mprec_tens
08021380 g     O .rodata	00005794 Font38x59
080135dc g     F .text	0000000c __locale_charset
0802abcc g     O .bss	00000004 TextView
08028f78 g     O .rwdata	00000004 Object
0801bc40 g     F .text	0000008c alt_icache_flush
0802abe4 g     O .bss	00000004 __malloc_top_pad
08007db0 g     F .text	000000cc setWidth
08015440 g     F .text	00000004 _getpid_r
08028fbc g     O .rwdata	00000004 __mb_cur_max
0801360c g     F .text	0000000c _localeconv_r
08013e3c g     F .text	0000003c __i2b
08012f4c g     F .text	000004a4 __sfvwrite_r
080152ec g     F .text	000000a8 __sigtramp_r
0800c8b0 g     F .text	00000054 _sbrk_r
0802ab7c g     O .bss	00000004 menuScreen
080002f4 g     F .text	00000080 doIntersect
08005228 g     F .text	00000068 super
08005ed0 g     F .text	000000fc onProgressBarDown
0802ab80 g     O .bss	00000004 trebleControl
0802ab84 g     O .bss	00000004 magentaButton
0801825c g     F .text	0000005c _read_r
08028fd4 g     O .rwdata	00000004 alt_max_fd
08017e64 g     F .text	00000100 _fclose_r
08001400 g     F .text	00000100 DE1_writeVLine
08012768 g     F .text	00000030 fflush
0802abe0 g     O .bss	00000004 __malloc_max_sbrked_mem
08002fd4 g     F .text	0000003c initGPS
0800b6f8 g     F .text	00000110 .hidden __extendsfdf2
0802ab54 g     O .bss	00000004 Button
08009200 g     F .text	0000089c .hidden __adddf3
08003010 g     F .text	00000050 putcharGPS
08014554 g     F .text	0000011c __b2d
08028f6c g     O .rwdata	00000004 TOP
08018a78 g     F .text	00000590 .hidden __umoddi3
080199c4 g     F .text	000000d4 lseek
08028fac g     O .rwdata	00000004 _global_impure_ptr
080087bc g     F .text	00000084 putcharWifi
08001cd8 g     F .text	000000d0 writeVline
08014b30 g     F .text	000005a0 _realloc_r
0802ad78 g       *ABS*	00000000 __bss_end
0801952c g     F .text	000000f0 alt_iic_isr_register
08007b7c g     F .text	0000004c measure
0802ab58 g     O .bss	00000004 internal_clip
0801b954 g     F .text	00000104 alt_tick
080184b8 g     F .text	000005c0 .hidden __udivdi3
08017f78 g     F .text	00000184 _fputwc_r
08027308 g     O .rodata	00000028 __mprec_bigtens
08013c20 g     F .text	00000104 __s2b
08010c00 g     F .text	00000018 abort
08019008 g     F .text	000000a4 .hidden __floatunsidf
080142fc g     F .text	00000060 __mcmp
08003a88 g     F .text	00000094 initHistogram
08012b08 g     F .text	00000018 __fp_lock_all
080194e0 g     F .text	0000004c alt_ic_irq_enabled
08008884 g     F .text	00000094 waitWifi
08007124 g     F .text	0000007c handleDown
08001730 g     F .text	00000030 DE1_isScreenTouched
08008aac g     F .text	00000090 getreply
0801b8bc g     F .text	00000098 alt_alarm_stop
0801d2ee g     O .rodata	0000140a Font16x27
0802abf8 g     O .bss	00000004 alt_irq_active
08002e3c g     F .text	00000080 consumeEvents
080000ec g     F .exceptions	000000d0 alt_irq_handler
08027d28 g     O .rwdata	00000028 alt_dev_null
08008ef8 g     F .text	00000104 wifi_ch3_command
0800567c g     F .text	000001ac OutGraphicsCharFont1
0801afec g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0801b288 g     F .text	0000001c alt_dcache_flush_all
08013d24 g     F .text	00000068 __hi0bits
0800bba8 g     F .text	0000001c calloc
0800b5a0 g     F .text	00000088 .hidden __fixdfsi
08008088 g     F .text	000000ac addEventListener
08028fec g       *ABS*	00000000 __ram_rwdata_end
0802abc4 g     O .bss	00000004 ScreenView
08028fcc g     O .rwdata	00000008 alt_dev_list
08019e2c g     F .text	000000f8 write
080149c8 g     F .text	000000a0 _putc_r
08006f94 g     F .text	0000005c setText
08007bc8 g     F .text	00000050 super_measure
08027484 g       *ABS*	00000000 __ram_rodata_end
0801927c g     F .text	000000b0 fstat
0800bd0c g     F .text	00000024 fprintf
080007f0 g     F .text	000006d8 cohen_sutherland
08005fcc g     F .text	00000044 onProgressBarMove
08019760 g     F .text	00000130 kill
080020d4 g     F .text	0000003c clear
0802abbc g     O .bss	00000004 PlayPauseButton
0800a4cc g     F .text	000000e0 .hidden __ledf2
08001640 g     F .text	00000050 putcharTouch
08006a10 g     F .text	00000094 initShapes
08001eac g     F .text	0000012c writeRect
08002b84 g     F .text	00000058 update_bass
08014074 g     F .text	00000140 __pow5mult
0802abf4 g     O .bss	00000004 __nlocale_changed
080168c4 g     F .text	0000135c ___vfiprintf_internal_r
0800bb28 g     F .text	00000008 .hidden __umodsi3
08008134 g     F .text	00000064 setRenderer
08000ec8 g     F .text	00000070 onButtonDown
0802ad78 g       *ABS*	00000000 end
08003f00 g     F .text	000009d4 displayScreen
080032a8 g     F .text	000002a0 getGPSInfo
08008594 g     F .text	00000050 Init_Volume
08005418 g     F .text	00000084 super_ctor
0801a164 g     F .text	000000c4 altera_avalon_jtag_uart_init
0802abc0 g     O .bss	00000004 ProgressBar
0801c03c g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
0801aac0 g     F .text	00000088 alt_avalon_timer_sc_init
0800b9a0 g     F .text	00000064 .hidden __clzsi2
08004fc0 g     F .text	0000003c sizeOf
08008bec g     F .text	00000104 wifi_play_pause_command
0801a834 g     F .text	00000218 altera_avalon_jtag_uart_write
08012af8 g     F .text	00000004 __sfp_lock_acquire
080137f8 g     F .text	000000e8 memchr
0801ac6c g     F .text	00000078 alt_up_character_lcd_write
0800eab0 g     F .text	00001ffc ___vfprintf_internal_r
0800c904 g     F .text	00000058 _sprintf_r
08012c5c g     F .text	000002f0 _free_r
0802abd4 g     O .bss	00000004 View
080135e8 g     F .text	00000010 __locale_mb_cur_max
0801bea8 g     F .text	00000194 __call_exitprocs
0800642c g     F .text	000000dc renderChildren
08002bdc g     F .text	0000002c get_treble
0802abf0 g     O .bss	00000004 __mlocale_changed
08028fb4 g     O .rwdata	00000004 __malloc_sbrk_base
080001bc g     F .text	0000003c _start
0802ac08 g     O .bss	00000004 _alt_tick_rate
08001190 g     F .text	00000060 setChar
080053a4 g     F .text	00000074 ctor
08007ce4 g     F .text	000000cc setY
080141b4 g     F .text	00000148 __lshift
0802ac0c g     O .bss	00000004 _alt_nticks
080153a8 g     F .text	0000001c signal
08019ba0 g     F .text	000000fc read
08019f90 g     F .text	00000070 alt_sys_init
080089fc g     F .text	000000b0 check_wifi_command
0801aea4 g     F .text	00000088 alt_up_character_lcd_shift_display
08001284 g     F .text	0000007c DE1_writePixel
080090cc g     F .text	00000134 .hidden __floatsisf
08015580 g     F .text	000001c8 __ssprint_r
08007f48 g     F .text	0000006c setVisible
0802ab88 g     O .bss	00000004 bassControl
0801bd94 g     F .text	00000114 __register_exitproc
08002884 g     F .text	000002a8 writeFilledTopFlatTriangle
080011f0 g     F .text	00000094 initButton
08006508 g     F .text	00000080 render
080030a4 g     F .text	00000028 readGPSDataToConsole
08013e78 g     F .text	000001fc __multiply
0801af2c g     F .text	0000008c alt_up_character_lcd_erase_pos
0801a4d4 g     F .text	00000068 altera_avalon_jtag_uart_close
0802ac68 g     O .bss	00000010 renderer
08006588 g     F .text	0000009c partialRender
08003b1c g     F .text	00000070 onListMove
0802ab8c g     O .bss	00000004 eqButton
08027484 g       *ABS*	00000000 __ram_rwdata_start
0801c03c g       *ABS*	00000000 __ram_rodata_start
0802ac10 g     O .bss	00000028 __malloc_current_mallinfo
08014670 g     F .text	0000013c __d2b
08008ffc g     F .text	00000058 wifi_commands_init
08000f38 g     F .text	0000006c onButtonUp
0801a000 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08001b24 g     F .text	00000040 writeAPixel
0801bb8c g     F .text	000000b4 alt_get_fd
0801b160 g     F .text	00000128 alt_busy_sleep
08017e10 g     F .text	00000054 _close_r
0802ab90 g     O .bss	00000004 colorScreen
080015a0 g     F .text	000000a0 DE1_writeRect
0801bd18 g     F .text	0000007c memcmp
0801a0c0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0802ad78 g       *ABS*	00000000 __alt_stack_base
0801a110 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0802ab94 g     O .bss	00000004 rootView
08010ad0 g     F .text	00000130 __swsetup_r
08003da8 g     F .text	00000118 init
08009a9c g     F .text	000008cc .hidden __divdf3
080129b8 g     F .text	00000118 __sfp
08002b2c g     F .text	00000058 update_treble
080148c4 g     F .text	00000078 __copybits
0802ab98 g     O .bss	00000004 eqScreen
080278a8 g     O .rwdata	00000408 __malloc_av_
08012b04 g     F .text	00000004 __sinit_lock_release
0800a5ac g     F .text	00000724 .hidden __muldf3
08015444 g     F .text	00000054 __sread
08008354 g     F .text	00000240 volume_control
08006aa4 g     F .text	00000028 testAll
0801ba78 g     F .text	00000114 alt_find_file
08028f60 g     O .rwdata	00000004 LEFT
0801b2f4 g     F .text	000000a4 alt_dev_llist_insert
08019b10 g     F .text	00000020 __malloc_lock
0800bce4 g     F .text	00000028 _fprintf_r
08019cfc g     F .text	000000b0 sbrk
0800cb04 g     F .text	00001f90 ___svfprintf_internal_r
08012540 g     F .text	00000228 _fflush_r
0802ab5c g     O .bss	00000004 EventClass
0800bbc4 g     F .text	000000c4 _calloc_r
08028f68 g     O .rwdata	00000004 BOTTOM
08028f5c g     O .rwdata	00000004 INSIDE
08005290 g     F .text	000000d4 new
0802ab54 g       *ABS*	00000000 __bss_start
08007084 g     F .text	000000a0 removeRestOfPath
0800c638 g     F .text	00000124 memset
08004b84 g     F .text	00000354 main
0802ac04 g     O .bss	00000004 alt_envp
0802abdc g     O .bss	00000004 __malloc_max_total_mem
0801a060 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08017d98 g     F .text	0000001c __swbuf
0801ae1c g     F .text	00000088 alt_up_character_lcd_shift_cursor
08015578 g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
08017f64 g     F .text	00000014 fclose
08005584 g     F .text	00000074 differ
0800b808 g     F .text	00000198 .hidden __truncdfsf2
08010e18 g     F .text	00001728 _dtoa_r
0800bd58 g     F .text	000007a8 _malloc_r
0801842c g     F .text	00000030 __ascii_wctomb
08028fd8 g     O .rwdata	00000004 alt_errno
0800bc88 g     F .text	00000020 _fiprintf_r
080153c4 g     F .text	00000010 _init_signal
080133f0 g     F .text	000000b8 _fwalk
0802ab60 g     O .bss	00000004 Event
08007fb4 g     F .text	000000d4 attachView
08014a68 g     F .text	000000c8 putc
0800ba70 g     F .text	00000054 .hidden __divsi3
0802ab9c g     O .bss	00000004 histogramView
0801ac2c g     F .text	00000040 alt_up_character_lcd_open_dev
08012b38 g     F .text	00000124 _malloc_trim_r
080030cc g     F .text	000001dc parseTime
0801c03c g       *ABS*	00000000 __CTOR_END__
0801abf8 g     F .text	00000034 alt_up_character_lcd_init
0800c9c8 g     F .text	000000a4 strcmp
08008cf0 g     F .text	00000104 wifi_ch1_command
0801c03c g       *ABS*	00000000 __flash_rodata_start
0801c03c g       *ABS*	00000000 __DTOR_LIST__
0802abd0 g     O .bss	00000004 count
08001fd8 g     F .text	000000fc writeFilledRect
0802abc8 g     O .bss	00000004 Rect
0800a368 g     F .text	00000084 .hidden __nedf2
08019f5c g     F .text	00000034 alt_irq_init
08019c9c g     F .text	00000060 alt_release_fd
08006624 g     F .text	000000d4 invalidate
0800c95c g     F .text	0000006c sprintf
0801afb8 g     F .text	00000034 alt_up_character_lcd_cursor_off
080270ec g     O .rodata	00000100 .hidden __clz_tab
0802abec g     O .bss	00000004 _PathLocale
080063bc g     F .text	00000070 setRoot
0801bccc g     F .text	00000014 atexit
08017db4 g     F .text	0000005c _write_r
08013618 g     F .text	0000001c setlocale
08002c08 g     F .text	0000002c get_bass
080001f8 g     F .text	0000005c containsPoint
08028fb0 g     O .rwdata	00000004 _impure_ptr
0802abfc g     O .bss	00000004 alt_argc
08008918 g     F .text	000000e4 dofile_command
0801b3f4 g     F .text	0000005c _do_dtors
08013604 g     F .text	00000008 __locale_cjk_lang
080077f8 g     F .text	0000004c generateTouchList
08006acc g     F .text	0000036c testBounds
0801c5f0 g     O .rodata	00000299 Font5x7
08000020 g       .exceptions	00000000 alt_irq_entry
080144f4 g     F .text	00000060 __ulp
08012b20 g     F .text	00000018 __fp_unlock_all
08007888 g     F .text	00000088 Init_Interrupt
08028fc4 g     O .rwdata	00000008 alt_fs_list
080025dc g     F .text	000002a8 writeFilledBottomFlatTriangle
08005e3c g     F .text	00000094 initPlayPauseButton
0802abd8 g     O .bss	00000004 ViewClass
08002110 g     F .text	000000cc writeFilledRectWithBorder
08000020 g       *ABS*	00000000 __ram_exceptions_start
08013634 g     F .text	0000000c localeconv
08006328 g     F .text	00000094 initProgressBar
08001500 g     F .text	000000a0 DE1_writeLine
0802aba0 g     O .bss	00000004 settingsButton
0801934c g     F .text	00000050 alt_ic_isr_register
080071a0 g     F .text	00000108 handleMove
08028fec g       *ABS*	00000000 _edata
0802ad78 g       *ABS*	00000000 _end
0800876c g     F .text	00000050 Init_Wifi
080001bc g       *ABS*	00000000 __ram_exceptions_end
0801a53c g     F .text	000000ec altera_avalon_jtag_uart_ioctl
080069a8 g     F .text	00000068 setRectColour
0800549c g     F .text	0000006c dtor
0801943c g     F .text	000000a4 alt_ic_irq_disable
080002a4 g     F .text	00000050 containsX
080154a0 g     F .text	0000007c __swrite
08028f7c g     O .rwdata	00000004 Class
08028fb8 g     O .rwdata	00000004 __malloc_trim_threshold
0801ba58 g     F .text	00000020 altera_nios2_qsys_irq_init
080135f8 g     F .text	0000000c __locale_msgcharset
0801bce0 g     F .text	00000038 exit
0800bca8 g     F .text	0000003c fiprintf
0800ea94 g     F .text	0000001c _vfiprintf_r
0800240c g     F .text	000001d0 writeFilledCircle
080134a8 g     F .text	000000b8 _fwalk_reent
0802ab68 g     O .bss	00000004 ListView
0801435c g     F .text	00000198 __mdiff
08007a60 g     F .text	00000050 super_draw
0800bac4 g     F .text	0000005c .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08012afc g     F .text	00000004 __sfp_lock_release
080085e4 g     F .text	0000007c getSensorReading
08000000 g       *ABS*	00000000 __alt_mem_sdram
080021dc g     F .text	00000230 writeCircle
0801c09c g     O .rodata	00000400 ColourPalletteData
0801ace4 g     F .text	00000074 alt_up_character_lcd_string
0801e6f8 g     O .rodata	00002c88 Font22x40
0802aba4 g     O .bss	00000004 trebleText
08003cfc g     F .text	000000ac initListView
08000254 g     F .text	00000050 containsY
08007a14 g     F .text	0000004c draw
08007e7c g     F .text	000000cc setHeight
080191f8 g     F .text	00000034 _exit
0801b020 g     F .text	00000140 alt_alarm_start
08002da8 g     F .text	00000094 addEvent
08013640 g     F .text	000001b8 __smakebuf_r
08008260 g     F .text	000000f4 initView
0800ca6c g     F .text	00000098 strlen
08015144 g     F .text	00000068 _init_signal_r
0801b764 g     F .text	00000158 open
08001b64 g     F .text	00000028 readAPixel
0800a3ec g     F .text	000000e0 .hidden __gedf2
0800bb94 g     F .text	00000014 __assert
08001b8c g     F .text	0000007c programPalette
08028fc0 g     O .rwdata	00000004 __wctomb
0802aba8 g     O .bss	00000004 blueButton
080168ac g     F .text	00000018 __sprint_r
0801b4e0 g     F .text	00000030 alt_icache_flush_all
0801ada8 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
08028fdc g     O .rwdata	00000004 alt_priority_mask
0801939c g     F .text	000000a0 alt_ic_irq_enable
08010aac g     F .text	00000024 __vfprintf_internal
0801845c g     F .text	0000005c _wctomb_r
08001c08 g     F .text	000000d0 writeHline
0802abac g     O .bss	00000004 playButton
0800069c g     F .text	00000154 computeOutCode
08008840 g     F .text	00000044 getcharWifi
0800acd0 g     F .text	000008d0 .hidden __subdf3
08006824 g     F .text	00000094 initScreenView
08013d8c g     F .text	000000b0 __lo0bits
080016d8 g     F .text	00000058 DE1_touchInit
0802abb0 g     O .bss	00000004 channel2Button
08028fe4 g     O .rwdata	00000008 alt_alarm_list
0801b398 g     F .text	0000005c _do_ctors
080153d4 g     F .text	00000014 __sigtramp
08008df4 g     F .text	00000104 wifi_ch2_command
08018354 g     F .text	000000d8 wcrtomb
0802abb4 g     O .bss	00000004 timeText
080190fc g     F .text	000000d0 close
080198f4 g     F .text	00000080 alt_load
08004f58 g     F .text	00000068 classOf
080180fc g     F .text	00000058 fputwc
08015394 g     F .text	00000014 raise
0800bd44 g     F .text	00000014 free
08012b00 g     F .text	00000004 __sinit_lock_acquire
08013b0c g     F .text	00000114 __multadd
08013ae4 g     F .text	00000028 _Bfree
0802abb8 g     O .bss	00000004 colorButton



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__alt_data_end+0xfc000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08406f14 	ori	at,at,444
    jmp r1
 8000018:	0800683a 	jmp	at
 800001c:	00000000 	call	0 <__reset-0x8000000>

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)

08000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 80000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000100:	0005313a 	rdctl	r2,ipending
 8000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000114:	00800044 	movi	r2,1
 8000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800011c:	e0fffb17 	ldw	r3,-20(fp)
 8000120:	e0bffc17 	ldw	r2,-16(fp)
 8000124:	1884703a 	and	r2,r3,r2
 8000128:	10001426 	beq	r2,zero,800017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	008200f4 	movhi	r2,2051
 8000130:	10ab1e04 	addi	r2,r2,-21384
 8000134:	e0fffd17 	ldw	r3,-12(fp)
 8000138:	180690fa 	slli	r3,r3,3
 800013c:	10c5883a 	add	r2,r2,r3
 8000140:	10c00017 	ldw	r3,0(r2)
 8000144:	008200f4 	movhi	r2,2051
 8000148:	10ab1e04 	addi	r2,r2,-21384
 800014c:	e13ffd17 	ldw	r4,-12(fp)
 8000150:	200890fa 	slli	r4,r4,3
 8000154:	1105883a 	add	r2,r2,r4
 8000158:	10800104 	addi	r2,r2,4
 800015c:	10800017 	ldw	r2,0(r2)
 8000160:	1009883a 	mov	r4,r2
 8000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800016c:	0005313a 	rdctl	r2,ipending
 8000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000174:	e0bfff17 	ldw	r2,-4(fp)
 8000178:	00000706 	br	8000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800017c:	e0bffc17 	ldw	r2,-16(fp)
 8000180:	1085883a 	add	r2,r2,r2
 8000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000188:	e0bffd17 	ldw	r2,-12(fp)
 800018c:	10800044 	addi	r2,r2,1
 8000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 8000194:	003fe106 	br	800011c <__alt_data_end+0xfc00011c>

    active = alt_irq_pending ();
 8000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 800019c:	e0bffb17 	ldw	r2,-20(fp)
 80001a0:	103fdb1e 	bne	r2,zero,8000110 <__alt_data_end+0xfc000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001a4:	0001883a 	nop
}
 80001a8:	e037883a 	mov	sp,fp
 80001ac:	dfc00117 	ldw	ra,4(sp)
 80001b0:	df000017 	ldw	fp,0(sp)
 80001b4:	dec00204 	addi	sp,sp,8
 80001b8:	f800283a 	ret

Disassembly of section .text:

080001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001bc:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 80001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 80001c4:	068200f4 	movhi	gp,2051
    ori gp, gp, %lo(_gp)
 80001c8:	d683d714 	ori	gp,gp,3932
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001cc:	008200b4 	movhi	r2,2050
    ori r2, r2, %lo(__bss_start)
 80001d0:	10aad514 	ori	r2,r2,43860

    movhi r3, %hi(__bss_end)
 80001d4:	00c200b4 	movhi	r3,2050
    ori r3, r3, %lo(__bss_end)
 80001d8:	18eb5e14 	ori	r3,r3,44408

    beq r2, r3, 1f
 80001dc:	10c00326 	beq	r2,r3,80001ec <_start+0x30>

0:
    stw zero, (r2)
 80001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001e8:	10fffd36 	bltu	r2,r3,80001e0 <__alt_data_end+0xfc0001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001ec:	80198f40 	call	80198f4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001f0:	8019a980 	call	8019a98 <alt_main>

080001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001f4:	003fff06 	br	80001f4 <__alt_data_end+0xfc0001f4>

080001f8 <containsPoint>:

/**
 * Verifies if the provided point is within the bounds
 */
int containsPoint(int x, int y, struct Bounds* a)
{
 80001f8:	defffb04 	addi	sp,sp,-20
 80001fc:	dfc00415 	stw	ra,16(sp)
 8000200:	df000315 	stw	fp,12(sp)
 8000204:	df000304 	addi	fp,sp,12
 8000208:	e13ffd15 	stw	r4,-12(fp)
 800020c:	e17ffe15 	stw	r5,-8(fp)
 8000210:	e1bfff15 	stw	r6,-4(fp)
	return containsX(x, a) && containsY(y, a);
 8000214:	e13ffd17 	ldw	r4,-12(fp)
 8000218:	e17fff17 	ldw	r5,-4(fp)
 800021c:	80002a40 	call	80002a4 <containsX>
 8000220:	10000626 	beq	r2,zero,800023c <containsPoint+0x44>
 8000224:	e13ffe17 	ldw	r4,-8(fp)
 8000228:	e17fff17 	ldw	r5,-4(fp)
 800022c:	80002540 	call	8000254 <containsY>
 8000230:	10000226 	beq	r2,zero,800023c <containsPoint+0x44>
 8000234:	00800044 	movi	r2,1
 8000238:	00000106 	br	8000240 <containsPoint+0x48>
 800023c:	0005883a 	mov	r2,zero
}
 8000240:	e037883a 	mov	sp,fp
 8000244:	dfc00117 	ldw	ra,4(sp)
 8000248:	df000017 	ldw	fp,0(sp)
 800024c:	dec00204 	addi	sp,sp,8
 8000250:	f800283a 	ret

08000254 <containsY>:

/**
 * Verifies if the provided y value is within the bounds
 */
int containsY(int y, struct Bounds* a)
{
 8000254:	defffd04 	addi	sp,sp,-12
 8000258:	df000215 	stw	fp,8(sp)
 800025c:	df000204 	addi	fp,sp,8
 8000260:	e13ffe15 	stw	r4,-8(fp)
 8000264:	e17fff15 	stw	r5,-4(fp)
	if(y < a -> y1 || y > a -> y2)
 8000268:	e0bfff17 	ldw	r2,-4(fp)
 800026c:	10800217 	ldw	r2,8(r2)
 8000270:	e0fffe17 	ldw	r3,-8(fp)
 8000274:	18800416 	blt	r3,r2,8000288 <containsY+0x34>
 8000278:	e0bfff17 	ldw	r2,-4(fp)
 800027c:	10c00317 	ldw	r3,12(r2)
 8000280:	e0bffe17 	ldw	r2,-8(fp)
 8000284:	1880020e 	bge	r3,r2,8000290 <containsY+0x3c>
		return 0;
 8000288:	0005883a 	mov	r2,zero
 800028c:	00000106 	br	8000294 <containsY+0x40>

	return 1;
 8000290:	00800044 	movi	r2,1
}
 8000294:	e037883a 	mov	sp,fp
 8000298:	df000017 	ldw	fp,0(sp)
 800029c:	dec00104 	addi	sp,sp,4
 80002a0:	f800283a 	ret

080002a4 <containsX>:

/**
 * Verifies if the provided x value is within the bounds
 */
int containsX(int x, struct Bounds* a)
{
 80002a4:	defffd04 	addi	sp,sp,-12
 80002a8:	df000215 	stw	fp,8(sp)
 80002ac:	df000204 	addi	fp,sp,8
 80002b0:	e13ffe15 	stw	r4,-8(fp)
 80002b4:	e17fff15 	stw	r5,-4(fp)
	if(x < a -> x1 || x > a -> x2)
 80002b8:	e0bfff17 	ldw	r2,-4(fp)
 80002bc:	10800017 	ldw	r2,0(r2)
 80002c0:	e0fffe17 	ldw	r3,-8(fp)
 80002c4:	18800416 	blt	r3,r2,80002d8 <containsX+0x34>
 80002c8:	e0bfff17 	ldw	r2,-4(fp)
 80002cc:	10c00117 	ldw	r3,4(r2)
 80002d0:	e0bffe17 	ldw	r2,-8(fp)
 80002d4:	1880020e 	bge	r3,r2,80002e0 <containsX+0x3c>
		return 0;
 80002d8:	0005883a 	mov	r2,zero
 80002dc:	00000106 	br	80002e4 <containsX+0x40>

	return 1;
 80002e0:	00800044 	movi	r2,1
}
 80002e4:	e037883a 	mov	sp,fp
 80002e8:	df000017 	ldw	fp,0(sp)
 80002ec:	dec00104 	addi	sp,sp,4
 80002f0:	f800283a 	ret

080002f4 <doIntersect>:

/**
 * Returns 1 if the two bounds intersect
 */
int doIntersect(struct Bounds* a, struct Bounds* b)
{
 80002f4:	defffd04 	addi	sp,sp,-12
 80002f8:	df000215 	stw	fp,8(sp)
 80002fc:	df000204 	addi	fp,sp,8
 8000300:	e13ffe15 	stw	r4,-8(fp)
 8000304:	e17fff15 	stw	r5,-4(fp)
	return (a->x1 < b->x2 && a->x2 > b->x1 &&
 8000308:	e0bffe17 	ldw	r2,-8(fp)
 800030c:	10c00017 	ldw	r3,0(r2)
 8000310:	e0bfff17 	ldw	r2,-4(fp)
 8000314:	10800117 	ldw	r2,4(r2)
    a->y1 < b->y2 && a->y2 > b->y1);
 8000318:	1880110e 	bge	r3,r2,8000360 <doIntersect+0x6c>
/**
 * Returns 1 if the two bounds intersect
 */
int doIntersect(struct Bounds* a, struct Bounds* b)
{
	return (a->x1 < b->x2 && a->x2 > b->x1 &&
 800031c:	e0bffe17 	ldw	r2,-8(fp)
 8000320:	10800117 	ldw	r2,4(r2)
 8000324:	e0ffff17 	ldw	r3,-4(fp)
 8000328:	18c00017 	ldw	r3,0(r3)
 800032c:	18800c0e 	bge	r3,r2,8000360 <doIntersect+0x6c>
    a->y1 < b->y2 && a->y2 > b->y1);
 8000330:	e0bffe17 	ldw	r2,-8(fp)
 8000334:	10c00217 	ldw	r3,8(r2)
 8000338:	e0bfff17 	ldw	r2,-4(fp)
 800033c:	10800317 	ldw	r2,12(r2)
/**
 * Returns 1 if the two bounds intersect
 */
int doIntersect(struct Bounds* a, struct Bounds* b)
{
	return (a->x1 < b->x2 && a->x2 > b->x1 &&
 8000340:	1880070e 	bge	r3,r2,8000360 <doIntersect+0x6c>
    a->y1 < b->y2 && a->y2 > b->y1);
 8000344:	e0bffe17 	ldw	r2,-8(fp)
 8000348:	10800317 	ldw	r2,12(r2)
 800034c:	e0ffff17 	ldw	r3,-4(fp)
 8000350:	18c00217 	ldw	r3,8(r3)
 8000354:	1880020e 	bge	r3,r2,8000360 <doIntersect+0x6c>
 8000358:	00800044 	movi	r2,1
 800035c:	00000106 	br	8000364 <doIntersect+0x70>
 8000360:	0005883a 	mov	r2,zero
}
 8000364:	e037883a 	mov	sp,fp
 8000368:	df000017 	ldw	fp,0(sp)
 800036c:	dec00104 	addi	sp,sp,4
 8000370:	f800283a 	ret

08000374 <merge>:
/**
 * Finds the smallest bound surrounding the two provided bounds
 */
struct Bounds* merge(struct Bounds* a, struct Bounds* b)
{
 8000374:	defffb04 	addi	sp,sp,-20
 8000378:	dfc00415 	stw	ra,16(sp)
 800037c:	df000315 	stw	fp,12(sp)
 8000380:	df000304 	addi	fp,sp,12
 8000384:	e13ffe15 	stw	r4,-8(fp)
 8000388:	e17fff15 	stw	r5,-4(fp)
	assert(a->x1 <= a->x2);
 800038c:	e0bffe17 	ldw	r2,-8(fp)
 8000390:	10800017 	ldw	r2,0(r2)
 8000394:	e0fffe17 	ldw	r3,-8(fp)
 8000398:	18c00117 	ldw	r3,4(r3)
 800039c:	1880070e 	bge	r3,r2,80003bc <merge+0x48>
 80003a0:	010200b4 	movhi	r4,2050
 80003a4:	21300f04 	addi	r4,r4,-16324
 80003a8:	01400dc4 	movi	r5,55
 80003ac:	d1a00504 	addi	r6,gp,-32748
 80003b0:	01c200b4 	movhi	r7,2050
 80003b4:	39f01204 	addi	r7,r7,-16312
 80003b8:	800bb300 	call	800bb30 <__assert_func>
	assert(a->y1 <= a->y2);
 80003bc:	e0bffe17 	ldw	r2,-8(fp)
 80003c0:	10800217 	ldw	r2,8(r2)
 80003c4:	e0fffe17 	ldw	r3,-8(fp)
 80003c8:	18c00317 	ldw	r3,12(r3)
 80003cc:	1880070e 	bge	r3,r2,80003ec <merge+0x78>
 80003d0:	010200b4 	movhi	r4,2050
 80003d4:	21300f04 	addi	r4,r4,-16324
 80003d8:	01400e04 	movi	r5,56
 80003dc:	d1a00504 	addi	r6,gp,-32748
 80003e0:	01c200b4 	movhi	r7,2050
 80003e4:	39f01604 	addi	r7,r7,-16296
 80003e8:	800bb300 	call	800bb30 <__assert_func>
	assert(b->x1 <= b->x2);
 80003ec:	e0bfff17 	ldw	r2,-4(fp)
 80003f0:	10800017 	ldw	r2,0(r2)
 80003f4:	e0ffff17 	ldw	r3,-4(fp)
 80003f8:	18c00117 	ldw	r3,4(r3)
 80003fc:	1880070e 	bge	r3,r2,800041c <merge+0xa8>
 8000400:	010200b4 	movhi	r4,2050
 8000404:	21300f04 	addi	r4,r4,-16324
 8000408:	01400e44 	movi	r5,57
 800040c:	d1a00504 	addi	r6,gp,-32748
 8000410:	01c200b4 	movhi	r7,2050
 8000414:	39f01a04 	addi	r7,r7,-16280
 8000418:	800bb300 	call	800bb30 <__assert_func>
	assert(b->y1 <= b->y2);
 800041c:	e0bfff17 	ldw	r2,-4(fp)
 8000420:	10800217 	ldw	r2,8(r2)
 8000424:	e0ffff17 	ldw	r3,-4(fp)
 8000428:	18c00317 	ldw	r3,12(r3)
 800042c:	1880070e 	bge	r3,r2,800044c <merge+0xd8>
 8000430:	010200b4 	movhi	r4,2050
 8000434:	21300f04 	addi	r4,r4,-16324
 8000438:	01400e84 	movi	r5,58
 800043c:	d1a00504 	addi	r6,gp,-32748
 8000440:	01c200b4 	movhi	r7,2050
 8000444:	39f01e04 	addi	r7,r7,-16264
 8000448:	800bb300 	call	800bb30 <__assert_func>

	struct Bounds* result = malloc(sizeof(struct Bounds));
 800044c:	01000404 	movi	r4,16
 8000450:	800bd300 	call	800bd30 <malloc>
 8000454:	e0bffd15 	stw	r2,-12(fp)
	result->x1 = MIN(a->x1, b->x1);
 8000458:	e0bfff17 	ldw	r2,-4(fp)
 800045c:	11000017 	ldw	r4,0(r2)
 8000460:	e0bffe17 	ldw	r2,-8(fp)
 8000464:	10c00017 	ldw	r3,0(r2)
 8000468:	2005883a 	mov	r2,r4
 800046c:	1880010e 	bge	r3,r2,8000474 <merge+0x100>
 8000470:	1805883a 	mov	r2,r3
 8000474:	e0fffd17 	ldw	r3,-12(fp)
 8000478:	18800015 	stw	r2,0(r3)
	result->y1 = MIN(a->y1, b->y1);
 800047c:	e0bfff17 	ldw	r2,-4(fp)
 8000480:	11000217 	ldw	r4,8(r2)
 8000484:	e0bffe17 	ldw	r2,-8(fp)
 8000488:	10c00217 	ldw	r3,8(r2)
 800048c:	2005883a 	mov	r2,r4
 8000490:	1880010e 	bge	r3,r2,8000498 <merge+0x124>
 8000494:	1805883a 	mov	r2,r3
 8000498:	e0fffd17 	ldw	r3,-12(fp)
 800049c:	18800215 	stw	r2,8(r3)
	result->x2 = MAX(a->x2, b->x2);
 80004a0:	e0bfff17 	ldw	r2,-4(fp)
 80004a4:	11000117 	ldw	r4,4(r2)
 80004a8:	e0bffe17 	ldw	r2,-8(fp)
 80004ac:	10c00117 	ldw	r3,4(r2)
 80004b0:	2005883a 	mov	r2,r4
 80004b4:	10c0010e 	bge	r2,r3,80004bc <merge+0x148>
 80004b8:	1805883a 	mov	r2,r3
 80004bc:	e0fffd17 	ldw	r3,-12(fp)
 80004c0:	18800115 	stw	r2,4(r3)
	result->y2 = MAX(a->y2, b->y2);
 80004c4:	e0bfff17 	ldw	r2,-4(fp)
 80004c8:	11000317 	ldw	r4,12(r2)
 80004cc:	e0bffe17 	ldw	r2,-8(fp)
 80004d0:	10c00317 	ldw	r3,12(r2)
 80004d4:	2005883a 	mov	r2,r4
 80004d8:	10c0010e 	bge	r2,r3,80004e0 <merge+0x16c>
 80004dc:	1805883a 	mov	r2,r3
 80004e0:	e0fffd17 	ldw	r3,-12(fp)
 80004e4:	18800315 	stw	r2,12(r3)

	return result;
 80004e8:	e0bffd17 	ldw	r2,-12(fp)
}
 80004ec:	e037883a 	mov	sp,fp
 80004f0:	dfc00117 	ldw	ra,4(sp)
 80004f4:	df000017 	ldw	fp,0(sp)
 80004f8:	dec00204 	addi	sp,sp,8
 80004fc:	f800283a 	ret

08000500 <intersect>:

/**
 * Finds the intersection of two bounds
 */
struct Bounds* intersect(struct Bounds* a, struct Bounds* b)
{
 8000500:	defffb04 	addi	sp,sp,-20
 8000504:	dfc00415 	stw	ra,16(sp)
 8000508:	df000315 	stw	fp,12(sp)
 800050c:	df000304 	addi	fp,sp,12
 8000510:	e13ffe15 	stw	r4,-8(fp)
 8000514:	e17fff15 	stw	r5,-4(fp)
	assert(a->x1 <= a->x2);
 8000518:	e0bffe17 	ldw	r2,-8(fp)
 800051c:	10800017 	ldw	r2,0(r2)
 8000520:	e0fffe17 	ldw	r3,-8(fp)
 8000524:	18c00117 	ldw	r3,4(r3)
 8000528:	1880080e 	bge	r3,r2,800054c <intersect+0x4c>
 800052c:	010200b4 	movhi	r4,2050
 8000530:	21300f04 	addi	r4,r4,-16324
 8000534:	01401284 	movi	r5,74
 8000538:	018200b4 	movhi	r6,2050
 800053c:	31b02204 	addi	r6,r6,-16248
 8000540:	01c200b4 	movhi	r7,2050
 8000544:	39f01204 	addi	r7,r7,-16312
 8000548:	800bb300 	call	800bb30 <__assert_func>
	assert(a->y1 <= a->y2);
 800054c:	e0bffe17 	ldw	r2,-8(fp)
 8000550:	10800217 	ldw	r2,8(r2)
 8000554:	e0fffe17 	ldw	r3,-8(fp)
 8000558:	18c00317 	ldw	r3,12(r3)
 800055c:	1880080e 	bge	r3,r2,8000580 <intersect+0x80>
 8000560:	010200b4 	movhi	r4,2050
 8000564:	21300f04 	addi	r4,r4,-16324
 8000568:	014012c4 	movi	r5,75
 800056c:	018200b4 	movhi	r6,2050
 8000570:	31b02204 	addi	r6,r6,-16248
 8000574:	01c200b4 	movhi	r7,2050
 8000578:	39f01604 	addi	r7,r7,-16296
 800057c:	800bb300 	call	800bb30 <__assert_func>
	assert(b->x1 <= b->x2);
 8000580:	e0bfff17 	ldw	r2,-4(fp)
 8000584:	10800017 	ldw	r2,0(r2)
 8000588:	e0ffff17 	ldw	r3,-4(fp)
 800058c:	18c00117 	ldw	r3,4(r3)
 8000590:	1880080e 	bge	r3,r2,80005b4 <intersect+0xb4>
 8000594:	010200b4 	movhi	r4,2050
 8000598:	21300f04 	addi	r4,r4,-16324
 800059c:	01401304 	movi	r5,76
 80005a0:	018200b4 	movhi	r6,2050
 80005a4:	31b02204 	addi	r6,r6,-16248
 80005a8:	01c200b4 	movhi	r7,2050
 80005ac:	39f01a04 	addi	r7,r7,-16280
 80005b0:	800bb300 	call	800bb30 <__assert_func>
	assert(b->y1 <= b->y2);
 80005b4:	e0bfff17 	ldw	r2,-4(fp)
 80005b8:	10800217 	ldw	r2,8(r2)
 80005bc:	e0ffff17 	ldw	r3,-4(fp)
 80005c0:	18c00317 	ldw	r3,12(r3)
 80005c4:	1880080e 	bge	r3,r2,80005e8 <intersect+0xe8>
 80005c8:	010200b4 	movhi	r4,2050
 80005cc:	21300f04 	addi	r4,r4,-16324
 80005d0:	01401344 	movi	r5,77
 80005d4:	018200b4 	movhi	r6,2050
 80005d8:	31b02204 	addi	r6,r6,-16248
 80005dc:	01c200b4 	movhi	r7,2050
 80005e0:	39f01e04 	addi	r7,r7,-16264
 80005e4:	800bb300 	call	800bb30 <__assert_func>

	struct Bounds* result = malloc(sizeof(struct Bounds));
 80005e8:	01000404 	movi	r4,16
 80005ec:	800bd300 	call	800bd30 <malloc>
 80005f0:	e0bffd15 	stw	r2,-12(fp)
	result->x1 = MAX(a->x1, b->x1);
 80005f4:	e0bfff17 	ldw	r2,-4(fp)
 80005f8:	11000017 	ldw	r4,0(r2)
 80005fc:	e0bffe17 	ldw	r2,-8(fp)
 8000600:	10c00017 	ldw	r3,0(r2)
 8000604:	2005883a 	mov	r2,r4
 8000608:	10c0010e 	bge	r2,r3,8000610 <intersect+0x110>
 800060c:	1805883a 	mov	r2,r3
 8000610:	e0fffd17 	ldw	r3,-12(fp)
 8000614:	18800015 	stw	r2,0(r3)
	result->y1 = MAX(a->y1, b->y1);
 8000618:	e0bfff17 	ldw	r2,-4(fp)
 800061c:	11000217 	ldw	r4,8(r2)
 8000620:	e0bffe17 	ldw	r2,-8(fp)
 8000624:	10c00217 	ldw	r3,8(r2)
 8000628:	2005883a 	mov	r2,r4
 800062c:	10c0010e 	bge	r2,r3,8000634 <intersect+0x134>
 8000630:	1805883a 	mov	r2,r3
 8000634:	e0fffd17 	ldw	r3,-12(fp)
 8000638:	18800215 	stw	r2,8(r3)
	result->x2 = MIN(a->x2, b->x2);
 800063c:	e0bfff17 	ldw	r2,-4(fp)
 8000640:	11000117 	ldw	r4,4(r2)
 8000644:	e0bffe17 	ldw	r2,-8(fp)
 8000648:	10c00117 	ldw	r3,4(r2)
 800064c:	2005883a 	mov	r2,r4
 8000650:	1880010e 	bge	r3,r2,8000658 <intersect+0x158>
 8000654:	1805883a 	mov	r2,r3
 8000658:	e0fffd17 	ldw	r3,-12(fp)
 800065c:	18800115 	stw	r2,4(r3)
	result->y2 = MIN(a->y2, b->y2);
 8000660:	e0bfff17 	ldw	r2,-4(fp)
 8000664:	11000317 	ldw	r4,12(r2)
 8000668:	e0bffe17 	ldw	r2,-8(fp)
 800066c:	10c00317 	ldw	r3,12(r2)
 8000670:	2005883a 	mov	r2,r4
 8000674:	1880010e 	bge	r3,r2,800067c <intersect+0x17c>
 8000678:	1805883a 	mov	r2,r3
 800067c:	e0fffd17 	ldw	r3,-12(fp)
 8000680:	18800315 	stw	r2,12(r3)

	return result;
 8000684:	e0bffd17 	ldw	r2,-12(fp)
}
 8000688:	e037883a 	mov	sp,fp
 800068c:	dfc00117 	ldw	ra,4(sp)
 8000690:	df000017 	ldw	fp,0(sp)
 8000694:	dec00204 	addi	sp,sp,8
 8000698:	f800283a 	ret

0800069c <computeOutCode>:

int computeOutCode(double x, double y, struct Bounds* clip)
{
 800069c:	defff504 	addi	sp,sp,-44
 80006a0:	dfc00a15 	stw	ra,40(sp)
 80006a4:	df000915 	stw	fp,36(sp)
 80006a8:	df000904 	addi	fp,sp,36
 80006ac:	e13ffc15 	stw	r4,-16(fp)
 80006b0:	e17ffd15 	stw	r5,-12(fp)
 80006b4:	e1bffe15 	stw	r6,-8(fp)
 80006b8:	e1ffff15 	stw	r7,-4(fp)
	int xmin = clip -> x1;
 80006bc:	e0800217 	ldw	r2,8(fp)
 80006c0:	10800017 	ldw	r2,0(r2)
 80006c4:	e0bff815 	stw	r2,-32(fp)
	int xmax = clip -> x2;
 80006c8:	e0800217 	ldw	r2,8(fp)
 80006cc:	10800117 	ldw	r2,4(r2)
 80006d0:	e0bff915 	stw	r2,-28(fp)
	int ymin = clip -> y1;
 80006d4:	e0800217 	ldw	r2,8(fp)
 80006d8:	10800217 	ldw	r2,8(r2)
 80006dc:	e0bffa15 	stw	r2,-24(fp)
	int ymax = clip -> y2;
 80006e0:	e0800217 	ldw	r2,8(fp)
 80006e4:	10800317 	ldw	r2,12(r2)
 80006e8:	e0bffb15 	stw	r2,-20(fp)

	int code;

	code = INSIDE;          // initialised as being inside of [[clip window]]
 80006ec:	e03ff715 	stw	zero,-36(fp)

	if (x < xmin)           // to the left of clip window
 80006f0:	e13ff817 	ldw	r4,-32(fp)
 80006f4:	800b6280 	call	800b628 <__floatsidf>
 80006f8:	100b883a 	mov	r5,r2
 80006fc:	180d883a 	mov	r6,r3
 8000700:	2809883a 	mov	r4,r5
 8000704:	300b883a 	mov	r5,r6
 8000708:	e1bffc17 	ldw	r6,-16(fp)
 800070c:	e1fffd17 	ldw	r7,-12(fp)
 8000710:	800a3ec0 	call	800a3ec <__gedf2>
 8000714:	0080050e 	bge	zero,r2,800072c <computeOutCode+0x90>
		code |= LEFT;
 8000718:	00800044 	movi	r2,1
 800071c:	e0fff717 	ldw	r3,-36(fp)
 8000720:	1884b03a 	or	r2,r3,r2
 8000724:	e0bff715 	stw	r2,-36(fp)
 8000728:	00000e06 	br	8000764 <computeOutCode+0xc8>
	else if (x > xmax)      // to the right of clip window
 800072c:	e13ff917 	ldw	r4,-28(fp)
 8000730:	800b6280 	call	800b628 <__floatsidf>
 8000734:	100b883a 	mov	r5,r2
 8000738:	180d883a 	mov	r6,r3
 800073c:	2809883a 	mov	r4,r5
 8000740:	300b883a 	mov	r5,r6
 8000744:	e1bffc17 	ldw	r6,-16(fp)
 8000748:	e1fffd17 	ldw	r7,-12(fp)
 800074c:	800a4cc0 	call	800a4cc <__ledf2>
 8000750:	1000040e 	bge	r2,zero,8000764 <computeOutCode+0xc8>
		code |= RIGHT;
 8000754:	00800084 	movi	r2,2
 8000758:	e0fff717 	ldw	r3,-36(fp)
 800075c:	1884b03a 	or	r2,r3,r2
 8000760:	e0bff715 	stw	r2,-36(fp)
	if (y < ymin)           // below the clip window
 8000764:	e13ffa17 	ldw	r4,-24(fp)
 8000768:	800b6280 	call	800b628 <__floatsidf>
 800076c:	100b883a 	mov	r5,r2
 8000770:	180d883a 	mov	r6,r3
 8000774:	2809883a 	mov	r4,r5
 8000778:	300b883a 	mov	r5,r6
 800077c:	e1bffe17 	ldw	r6,-8(fp)
 8000780:	e1ffff17 	ldw	r7,-4(fp)
 8000784:	800a3ec0 	call	800a3ec <__gedf2>
 8000788:	0080050e 	bge	zero,r2,80007a0 <computeOutCode+0x104>
		code |= BOTTOM;
 800078c:	00800104 	movi	r2,4
 8000790:	e0fff717 	ldw	r3,-36(fp)
 8000794:	1884b03a 	or	r2,r3,r2
 8000798:	e0bff715 	stw	r2,-36(fp)
 800079c:	00000e06 	br	80007d8 <computeOutCode+0x13c>
	else if (y > ymax)      // above the clip window
 80007a0:	e13ffb17 	ldw	r4,-20(fp)
 80007a4:	800b6280 	call	800b628 <__floatsidf>
 80007a8:	100b883a 	mov	r5,r2
 80007ac:	180d883a 	mov	r6,r3
 80007b0:	2809883a 	mov	r4,r5
 80007b4:	300b883a 	mov	r5,r6
 80007b8:	e1bffe17 	ldw	r6,-8(fp)
 80007bc:	e1ffff17 	ldw	r7,-4(fp)
 80007c0:	800a4cc0 	call	800a4cc <__ledf2>
 80007c4:	1000040e 	bge	r2,zero,80007d8 <computeOutCode+0x13c>
		code |= TOP;
 80007c8:	00800204 	movi	r2,8
 80007cc:	e0fff717 	ldw	r3,-36(fp)
 80007d0:	1884b03a 	or	r2,r3,r2
 80007d4:	e0bff715 	stw	r2,-36(fp)

	return code;
 80007d8:	e0bff717 	ldw	r2,-36(fp)
}
 80007dc:	e037883a 	mov	sp,fp
 80007e0:	dfc00117 	ldw	ra,4(sp)
 80007e4:	df000017 	ldw	fp,0(sp)
 80007e8:	dec00204 	addi	sp,sp,8
 80007ec:	f800283a 	ret

080007f0 <cohen_sutherland>:

/**
 * Returns the coordinate of a line clipped by the provided bounds TODO
 */
struct Bounds* cohen_sutherland(struct Bounds* line, struct Bounds* clip)
{
 80007f0:	deffe404 	addi	sp,sp,-112
 80007f4:	dfc01b15 	stw	ra,108(sp)
 80007f8:	df001a15 	stw	fp,104(sp)
 80007fc:	dc401915 	stw	r17,100(sp)
 8000800:	dc001815 	stw	r16,96(sp)
 8000804:	df001a04 	addi	fp,sp,104
 8000808:	e13ffc15 	stw	r4,-16(fp)
 800080c:	e17ffd15 	stw	r5,-12(fp)
	double x0 = line -> x1;
 8000810:	e0bffc17 	ldw	r2,-16(fp)
 8000814:	10800017 	ldw	r2,0(r2)
 8000818:	1009883a 	mov	r4,r2
 800081c:	800b6280 	call	800b628 <__floatsidf>
 8000820:	1009883a 	mov	r4,r2
 8000824:	180b883a 	mov	r5,r3
 8000828:	e13fe715 	stw	r4,-100(fp)
 800082c:	e17fe815 	stw	r5,-96(fp)
	double y0 = line -> y1;
 8000830:	e0bffc17 	ldw	r2,-16(fp)
 8000834:	10800217 	ldw	r2,8(r2)
 8000838:	1009883a 	mov	r4,r2
 800083c:	800b6280 	call	800b628 <__floatsidf>
 8000840:	1009883a 	mov	r4,r2
 8000844:	180b883a 	mov	r5,r3
 8000848:	e13fe915 	stw	r4,-92(fp)
 800084c:	e17fea15 	stw	r5,-88(fp)
	double x1 = line -> x2;
 8000850:	e0bffc17 	ldw	r2,-16(fp)
 8000854:	10800117 	ldw	r2,4(r2)
 8000858:	1009883a 	mov	r4,r2
 800085c:	800b6280 	call	800b628 <__floatsidf>
 8000860:	1009883a 	mov	r4,r2
 8000864:	180b883a 	mov	r5,r3
 8000868:	e13feb15 	stw	r4,-84(fp)
 800086c:	e17fec15 	stw	r5,-80(fp)
	double y1 = line -> y2;
 8000870:	e0bffc17 	ldw	r2,-16(fp)
 8000874:	10800317 	ldw	r2,12(r2)
 8000878:	1009883a 	mov	r4,r2
 800087c:	800b6280 	call	800b628 <__floatsidf>
 8000880:	1009883a 	mov	r4,r2
 8000884:	180b883a 	mov	r5,r3
 8000888:	e13fed15 	stw	r4,-76(fp)
 800088c:	e17fee15 	stw	r5,-72(fp)

	int xmin = clip -> x1;
 8000890:	e0bffd17 	ldw	r2,-12(fp)
 8000894:	10800017 	ldw	r2,0(r2)
 8000898:	e0bff615 	stw	r2,-40(fp)
	int xmax = clip -> x2;
 800089c:	e0bffd17 	ldw	r2,-12(fp)
 80008a0:	10800117 	ldw	r2,4(r2)
 80008a4:	e0bff715 	stw	r2,-36(fp)
	int ymin = clip -> y1;
 80008a8:	e0bffd17 	ldw	r2,-12(fp)
 80008ac:	10800217 	ldw	r2,8(r2)
 80008b0:	e0bff815 	stw	r2,-32(fp)
	int ymax = clip -> y2;
 80008b4:	e0bffd17 	ldw	r2,-12(fp)
 80008b8:	10800317 	ldw	r2,12(r2)
 80008bc:	e0bff915 	stw	r2,-28(fp)

	// compute outcodes for P0, P1, and whatever point lies outside the clip rectangle
	int outcode0 = computeOutCode(x0, y0, clip);
 80008c0:	e0bffd17 	ldw	r2,-12(fp)
 80008c4:	d8800015 	stw	r2,0(sp)
 80008c8:	e13fe717 	ldw	r4,-100(fp)
 80008cc:	e17fe817 	ldw	r5,-96(fp)
 80008d0:	e1bfe917 	ldw	r6,-92(fp)
 80008d4:	e1ffea17 	ldw	r7,-88(fp)
 80008d8:	800069c0 	call	800069c <computeOutCode>
 80008dc:	e0bfef15 	stw	r2,-68(fp)
	int outcode1 = computeOutCode(x1, y1, clip);
 80008e0:	e0bffd17 	ldw	r2,-12(fp)
 80008e4:	d8800015 	stw	r2,0(sp)
 80008e8:	e13feb17 	ldw	r4,-84(fp)
 80008ec:	e17fec17 	ldw	r5,-80(fp)
 80008f0:	e1bfed17 	ldw	r6,-76(fp)
 80008f4:	e1ffee17 	ldw	r7,-72(fp)
 80008f8:	800069c0 	call	800069c <computeOutCode>
 80008fc:	e0bff015 	stw	r2,-64(fp)
	int accept = 0;
 8000900:	e03ff115 	stw	zero,-60(fp)

	while (1) {
		if (!(outcode0 | outcode1)) {
 8000904:	e0ffef17 	ldw	r3,-68(fp)
 8000908:	e0bff017 	ldw	r2,-64(fp)
 800090c:	1884b03a 	or	r2,r3,r2
 8000910:	1000031e 	bne	r2,zero,8000920 <cohen_sutherland+0x130>
			// bitwise OR is 0: both points inside window; trivially accept and exit loop
			accept = 1;
 8000914:	00800044 	movi	r2,1
 8000918:	e0bff115 	stw	r2,-60(fp)
			break;
 800091c:	00014306 	br	8000e2c <cohen_sutherland+0x63c>
		} else if (outcode0 & outcode1) {
 8000920:	e0ffef17 	ldw	r3,-68(fp)
 8000924:	e0bff017 	ldw	r2,-64(fp)
 8000928:	1884703a 	and	r2,r3,r2
 800092c:	10000126 	beq	r2,zero,8000934 <cohen_sutherland+0x144>
			// bitwise AND is not 0: both points share an outside zone (LEFT, RIGHT, TOP,
			// or BOTTOM), so both must be outside window; exit loop (accept is false)
			break;
 8000930:	00013e06 	br	8000e2c <cohen_sutherland+0x63c>
			// failed both tests, so calculate the line segment to clip
			// from an outside point to an intersection with clip edge
			double x, y;

			// At least one endpoint is outside the clip rectangle; pick it.
			int outcodeOut = outcode0 ? outcode0 : outcode1;
 8000934:	e0bfef17 	ldw	r2,-68(fp)
 8000938:	10000226 	beq	r2,zero,8000944 <cohen_sutherland+0x154>
 800093c:	e0bfef17 	ldw	r2,-68(fp)
 8000940:	00000106 	br	8000948 <cohen_sutherland+0x158>
 8000944:	e0bff017 	ldw	r2,-64(fp)
 8000948:	e0bffa15 	stw	r2,-24(fp)
			//   slope = (y1 - y0) / (x1 - x0)
			//   x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax
			//   y = y0 + slope * (xm - x0), where xm is xmin or xmax
			// No need to worry about divide-by-zero because, in each case, the
			// outcode bit being tested guarantees the denominator is non-zero
			if (outcodeOut & TOP) {           // point is above the clip window
 800094c:	00c00204 	movi	r3,8
 8000950:	e0bffa17 	ldw	r2,-24(fp)
 8000954:	1884703a 	and	r2,r3,r2
 8000958:	10004126 	beq	r2,zero,8000a60 <cohen_sutherland+0x270>
				x = x0 + (x1 - x0) * (ymax - y0) / (y1 - y0);
 800095c:	e13feb17 	ldw	r4,-84(fp)
 8000960:	e17fec17 	ldw	r5,-80(fp)
 8000964:	e1bfe717 	ldw	r6,-100(fp)
 8000968:	e1ffe817 	ldw	r7,-96(fp)
 800096c:	800acd00 	call	800acd0 <__subdf3>
 8000970:	1009883a 	mov	r4,r2
 8000974:	180b883a 	mov	r5,r3
 8000978:	2021883a 	mov	r16,r4
 800097c:	2823883a 	mov	r17,r5
 8000980:	e13ff917 	ldw	r4,-28(fp)
 8000984:	800b6280 	call	800b628 <__floatsidf>
 8000988:	100b883a 	mov	r5,r2
 800098c:	180d883a 	mov	r6,r3
 8000990:	2809883a 	mov	r4,r5
 8000994:	300b883a 	mov	r5,r6
 8000998:	e1bfe917 	ldw	r6,-92(fp)
 800099c:	e1ffea17 	ldw	r7,-88(fp)
 80009a0:	800acd00 	call	800acd0 <__subdf3>
 80009a4:	1009883a 	mov	r4,r2
 80009a8:	180b883a 	mov	r5,r3
 80009ac:	2005883a 	mov	r2,r4
 80009b0:	2807883a 	mov	r3,r5
 80009b4:	8009883a 	mov	r4,r16
 80009b8:	880b883a 	mov	r5,r17
 80009bc:	100d883a 	mov	r6,r2
 80009c0:	180f883a 	mov	r7,r3
 80009c4:	800a5ac0 	call	800a5ac <__muldf3>
 80009c8:	1009883a 	mov	r4,r2
 80009cc:	180b883a 	mov	r5,r3
 80009d0:	2021883a 	mov	r16,r4
 80009d4:	2823883a 	mov	r17,r5
 80009d8:	e13fed17 	ldw	r4,-76(fp)
 80009dc:	e17fee17 	ldw	r5,-72(fp)
 80009e0:	e1bfe917 	ldw	r6,-92(fp)
 80009e4:	e1ffea17 	ldw	r7,-88(fp)
 80009e8:	800acd00 	call	800acd0 <__subdf3>
 80009ec:	1009883a 	mov	r4,r2
 80009f0:	180b883a 	mov	r5,r3
 80009f4:	2005883a 	mov	r2,r4
 80009f8:	2807883a 	mov	r3,r5
 80009fc:	8009883a 	mov	r4,r16
 8000a00:	880b883a 	mov	r5,r17
 8000a04:	100d883a 	mov	r6,r2
 8000a08:	180f883a 	mov	r7,r3
 8000a0c:	8009a9c0 	call	8009a9c <__divdf3>
 8000a10:	1009883a 	mov	r4,r2
 8000a14:	180b883a 	mov	r5,r3
 8000a18:	2005883a 	mov	r2,r4
 8000a1c:	2807883a 	mov	r3,r5
 8000a20:	1009883a 	mov	r4,r2
 8000a24:	180b883a 	mov	r5,r3
 8000a28:	e1bfe717 	ldw	r6,-100(fp)
 8000a2c:	e1ffe817 	ldw	r7,-96(fp)
 8000a30:	80092000 	call	8009200 <__adddf3>
 8000a34:	1009883a 	mov	r4,r2
 8000a38:	180b883a 	mov	r5,r3
 8000a3c:	e13ff215 	stw	r4,-56(fp)
 8000a40:	e17ff315 	stw	r5,-52(fp)
				y = ymax;
 8000a44:	e13ff917 	ldw	r4,-28(fp)
 8000a48:	800b6280 	call	800b628 <__floatsidf>
 8000a4c:	1009883a 	mov	r4,r2
 8000a50:	180b883a 	mov	r5,r3
 8000a54:	e13ff415 	stw	r4,-48(fp)
 8000a58:	e17ff515 	stw	r5,-44(fp)
 8000a5c:	0000ce06 	br	8000d98 <cohen_sutherland+0x5a8>
			} else if (outcodeOut & BOTTOM) { // point is below the clip window
 8000a60:	00c00104 	movi	r3,4
 8000a64:	e0bffa17 	ldw	r2,-24(fp)
 8000a68:	1884703a 	and	r2,r3,r2
 8000a6c:	10004126 	beq	r2,zero,8000b74 <cohen_sutherland+0x384>
				x = x0 + (x1 - x0) * (ymin - y0) / (y1 - y0);
 8000a70:	e13feb17 	ldw	r4,-84(fp)
 8000a74:	e17fec17 	ldw	r5,-80(fp)
 8000a78:	e1bfe717 	ldw	r6,-100(fp)
 8000a7c:	e1ffe817 	ldw	r7,-96(fp)
 8000a80:	800acd00 	call	800acd0 <__subdf3>
 8000a84:	1009883a 	mov	r4,r2
 8000a88:	180b883a 	mov	r5,r3
 8000a8c:	2021883a 	mov	r16,r4
 8000a90:	2823883a 	mov	r17,r5
 8000a94:	e13ff817 	ldw	r4,-32(fp)
 8000a98:	800b6280 	call	800b628 <__floatsidf>
 8000a9c:	100b883a 	mov	r5,r2
 8000aa0:	180d883a 	mov	r6,r3
 8000aa4:	2809883a 	mov	r4,r5
 8000aa8:	300b883a 	mov	r5,r6
 8000aac:	e1bfe917 	ldw	r6,-92(fp)
 8000ab0:	e1ffea17 	ldw	r7,-88(fp)
 8000ab4:	800acd00 	call	800acd0 <__subdf3>
 8000ab8:	1009883a 	mov	r4,r2
 8000abc:	180b883a 	mov	r5,r3
 8000ac0:	2005883a 	mov	r2,r4
 8000ac4:	2807883a 	mov	r3,r5
 8000ac8:	8009883a 	mov	r4,r16
 8000acc:	880b883a 	mov	r5,r17
 8000ad0:	100d883a 	mov	r6,r2
 8000ad4:	180f883a 	mov	r7,r3
 8000ad8:	800a5ac0 	call	800a5ac <__muldf3>
 8000adc:	1009883a 	mov	r4,r2
 8000ae0:	180b883a 	mov	r5,r3
 8000ae4:	2021883a 	mov	r16,r4
 8000ae8:	2823883a 	mov	r17,r5
 8000aec:	e13fed17 	ldw	r4,-76(fp)
 8000af0:	e17fee17 	ldw	r5,-72(fp)
 8000af4:	e1bfe917 	ldw	r6,-92(fp)
 8000af8:	e1ffea17 	ldw	r7,-88(fp)
 8000afc:	800acd00 	call	800acd0 <__subdf3>
 8000b00:	1009883a 	mov	r4,r2
 8000b04:	180b883a 	mov	r5,r3
 8000b08:	2005883a 	mov	r2,r4
 8000b0c:	2807883a 	mov	r3,r5
 8000b10:	8009883a 	mov	r4,r16
 8000b14:	880b883a 	mov	r5,r17
 8000b18:	100d883a 	mov	r6,r2
 8000b1c:	180f883a 	mov	r7,r3
 8000b20:	8009a9c0 	call	8009a9c <__divdf3>
 8000b24:	1009883a 	mov	r4,r2
 8000b28:	180b883a 	mov	r5,r3
 8000b2c:	2005883a 	mov	r2,r4
 8000b30:	2807883a 	mov	r3,r5
 8000b34:	1009883a 	mov	r4,r2
 8000b38:	180b883a 	mov	r5,r3
 8000b3c:	e1bfe717 	ldw	r6,-100(fp)
 8000b40:	e1ffe817 	ldw	r7,-96(fp)
 8000b44:	80092000 	call	8009200 <__adddf3>
 8000b48:	1009883a 	mov	r4,r2
 8000b4c:	180b883a 	mov	r5,r3
 8000b50:	e13ff215 	stw	r4,-56(fp)
 8000b54:	e17ff315 	stw	r5,-52(fp)
				y = ymin;
 8000b58:	e13ff817 	ldw	r4,-32(fp)
 8000b5c:	800b6280 	call	800b628 <__floatsidf>
 8000b60:	1009883a 	mov	r4,r2
 8000b64:	180b883a 	mov	r5,r3
 8000b68:	e13ff415 	stw	r4,-48(fp)
 8000b6c:	e17ff515 	stw	r5,-44(fp)
 8000b70:	00008906 	br	8000d98 <cohen_sutherland+0x5a8>
			} else if (outcodeOut & RIGHT) {  // point is to the right of clip window
 8000b74:	00c00084 	movi	r3,2
 8000b78:	e0bffa17 	ldw	r2,-24(fp)
 8000b7c:	1884703a 	and	r2,r3,r2
 8000b80:	10004126 	beq	r2,zero,8000c88 <cohen_sutherland+0x498>
				y = y0 + (y1 - y0) * (xmax - x0) / (x1 - x0);
 8000b84:	e13fed17 	ldw	r4,-76(fp)
 8000b88:	e17fee17 	ldw	r5,-72(fp)
 8000b8c:	e1bfe917 	ldw	r6,-92(fp)
 8000b90:	e1ffea17 	ldw	r7,-88(fp)
 8000b94:	800acd00 	call	800acd0 <__subdf3>
 8000b98:	1009883a 	mov	r4,r2
 8000b9c:	180b883a 	mov	r5,r3
 8000ba0:	2021883a 	mov	r16,r4
 8000ba4:	2823883a 	mov	r17,r5
 8000ba8:	e13ff717 	ldw	r4,-36(fp)
 8000bac:	800b6280 	call	800b628 <__floatsidf>
 8000bb0:	100b883a 	mov	r5,r2
 8000bb4:	180d883a 	mov	r6,r3
 8000bb8:	2809883a 	mov	r4,r5
 8000bbc:	300b883a 	mov	r5,r6
 8000bc0:	e1bfe717 	ldw	r6,-100(fp)
 8000bc4:	e1ffe817 	ldw	r7,-96(fp)
 8000bc8:	800acd00 	call	800acd0 <__subdf3>
 8000bcc:	1009883a 	mov	r4,r2
 8000bd0:	180b883a 	mov	r5,r3
 8000bd4:	2005883a 	mov	r2,r4
 8000bd8:	2807883a 	mov	r3,r5
 8000bdc:	8009883a 	mov	r4,r16
 8000be0:	880b883a 	mov	r5,r17
 8000be4:	100d883a 	mov	r6,r2
 8000be8:	180f883a 	mov	r7,r3
 8000bec:	800a5ac0 	call	800a5ac <__muldf3>
 8000bf0:	1009883a 	mov	r4,r2
 8000bf4:	180b883a 	mov	r5,r3
 8000bf8:	2021883a 	mov	r16,r4
 8000bfc:	2823883a 	mov	r17,r5
 8000c00:	e13feb17 	ldw	r4,-84(fp)
 8000c04:	e17fec17 	ldw	r5,-80(fp)
 8000c08:	e1bfe717 	ldw	r6,-100(fp)
 8000c0c:	e1ffe817 	ldw	r7,-96(fp)
 8000c10:	800acd00 	call	800acd0 <__subdf3>
 8000c14:	1009883a 	mov	r4,r2
 8000c18:	180b883a 	mov	r5,r3
 8000c1c:	2005883a 	mov	r2,r4
 8000c20:	2807883a 	mov	r3,r5
 8000c24:	8009883a 	mov	r4,r16
 8000c28:	880b883a 	mov	r5,r17
 8000c2c:	100d883a 	mov	r6,r2
 8000c30:	180f883a 	mov	r7,r3
 8000c34:	8009a9c0 	call	8009a9c <__divdf3>
 8000c38:	1009883a 	mov	r4,r2
 8000c3c:	180b883a 	mov	r5,r3
 8000c40:	2005883a 	mov	r2,r4
 8000c44:	2807883a 	mov	r3,r5
 8000c48:	1009883a 	mov	r4,r2
 8000c4c:	180b883a 	mov	r5,r3
 8000c50:	e1bfe917 	ldw	r6,-92(fp)
 8000c54:	e1ffea17 	ldw	r7,-88(fp)
 8000c58:	80092000 	call	8009200 <__adddf3>
 8000c5c:	1009883a 	mov	r4,r2
 8000c60:	180b883a 	mov	r5,r3
 8000c64:	e13ff415 	stw	r4,-48(fp)
 8000c68:	e17ff515 	stw	r5,-44(fp)
				x = xmax;
 8000c6c:	e13ff717 	ldw	r4,-36(fp)
 8000c70:	800b6280 	call	800b628 <__floatsidf>
 8000c74:	1009883a 	mov	r4,r2
 8000c78:	180b883a 	mov	r5,r3
 8000c7c:	e13ff215 	stw	r4,-56(fp)
 8000c80:	e17ff315 	stw	r5,-52(fp)
 8000c84:	00004406 	br	8000d98 <cohen_sutherland+0x5a8>
			} else if (outcodeOut & LEFT) {   // point is to the left of clip window
 8000c88:	00c00044 	movi	r3,1
 8000c8c:	e0bffa17 	ldw	r2,-24(fp)
 8000c90:	1884703a 	and	r2,r3,r2
 8000c94:	10004026 	beq	r2,zero,8000d98 <cohen_sutherland+0x5a8>
				y = y0 + (y1 - y0) * (xmin - x0) / (x1 - x0);
 8000c98:	e13fed17 	ldw	r4,-76(fp)
 8000c9c:	e17fee17 	ldw	r5,-72(fp)
 8000ca0:	e1bfe917 	ldw	r6,-92(fp)
 8000ca4:	e1ffea17 	ldw	r7,-88(fp)
 8000ca8:	800acd00 	call	800acd0 <__subdf3>
 8000cac:	1009883a 	mov	r4,r2
 8000cb0:	180b883a 	mov	r5,r3
 8000cb4:	2021883a 	mov	r16,r4
 8000cb8:	2823883a 	mov	r17,r5
 8000cbc:	e13ff617 	ldw	r4,-40(fp)
 8000cc0:	800b6280 	call	800b628 <__floatsidf>
 8000cc4:	100b883a 	mov	r5,r2
 8000cc8:	180d883a 	mov	r6,r3
 8000ccc:	2809883a 	mov	r4,r5
 8000cd0:	300b883a 	mov	r5,r6
 8000cd4:	e1bfe717 	ldw	r6,-100(fp)
 8000cd8:	e1ffe817 	ldw	r7,-96(fp)
 8000cdc:	800acd00 	call	800acd0 <__subdf3>
 8000ce0:	1009883a 	mov	r4,r2
 8000ce4:	180b883a 	mov	r5,r3
 8000ce8:	2005883a 	mov	r2,r4
 8000cec:	2807883a 	mov	r3,r5
 8000cf0:	8009883a 	mov	r4,r16
 8000cf4:	880b883a 	mov	r5,r17
 8000cf8:	100d883a 	mov	r6,r2
 8000cfc:	180f883a 	mov	r7,r3
 8000d00:	800a5ac0 	call	800a5ac <__muldf3>
 8000d04:	1009883a 	mov	r4,r2
 8000d08:	180b883a 	mov	r5,r3
 8000d0c:	2021883a 	mov	r16,r4
 8000d10:	2823883a 	mov	r17,r5
 8000d14:	e13feb17 	ldw	r4,-84(fp)
 8000d18:	e17fec17 	ldw	r5,-80(fp)
 8000d1c:	e1bfe717 	ldw	r6,-100(fp)
 8000d20:	e1ffe817 	ldw	r7,-96(fp)
 8000d24:	800acd00 	call	800acd0 <__subdf3>
 8000d28:	1009883a 	mov	r4,r2
 8000d2c:	180b883a 	mov	r5,r3
 8000d30:	2005883a 	mov	r2,r4
 8000d34:	2807883a 	mov	r3,r5
 8000d38:	8009883a 	mov	r4,r16
 8000d3c:	880b883a 	mov	r5,r17
 8000d40:	100d883a 	mov	r6,r2
 8000d44:	180f883a 	mov	r7,r3
 8000d48:	8009a9c0 	call	8009a9c <__divdf3>
 8000d4c:	1009883a 	mov	r4,r2
 8000d50:	180b883a 	mov	r5,r3
 8000d54:	2005883a 	mov	r2,r4
 8000d58:	2807883a 	mov	r3,r5
 8000d5c:	1009883a 	mov	r4,r2
 8000d60:	180b883a 	mov	r5,r3
 8000d64:	e1bfe917 	ldw	r6,-92(fp)
 8000d68:	e1ffea17 	ldw	r7,-88(fp)
 8000d6c:	80092000 	call	8009200 <__adddf3>
 8000d70:	1009883a 	mov	r4,r2
 8000d74:	180b883a 	mov	r5,r3
 8000d78:	e13ff415 	stw	r4,-48(fp)
 8000d7c:	e17ff515 	stw	r5,-44(fp)
				x = xmin;
 8000d80:	e13ff617 	ldw	r4,-40(fp)
 8000d84:	800b6280 	call	800b628 <__floatsidf>
 8000d88:	1009883a 	mov	r4,r2
 8000d8c:	180b883a 	mov	r5,r3
 8000d90:	e13ff215 	stw	r4,-56(fp)
 8000d94:	e17ff315 	stw	r5,-52(fp)
			}

			// Now we move outside point to intersection point to clip
			// and get ready for next pass.
			if (outcodeOut == outcode0) {
 8000d98:	e0fffa17 	ldw	r3,-24(fp)
 8000d9c:	e0bfef17 	ldw	r2,-68(fp)
 8000da0:	1880111e 	bne	r3,r2,8000de8 <cohen_sutherland+0x5f8>
				x0 = x;
 8000da4:	e0bff217 	ldw	r2,-56(fp)
 8000da8:	e0bfe715 	stw	r2,-100(fp)
 8000dac:	e0bff317 	ldw	r2,-52(fp)
 8000db0:	e0bfe815 	stw	r2,-96(fp)
				y0 = y;
 8000db4:	e0bff417 	ldw	r2,-48(fp)
 8000db8:	e0bfe915 	stw	r2,-92(fp)
 8000dbc:	e0bff517 	ldw	r2,-44(fp)
 8000dc0:	e0bfea15 	stw	r2,-88(fp)
				outcode0 = computeOutCode(x0, y0, clip);
 8000dc4:	e0bffd17 	ldw	r2,-12(fp)
 8000dc8:	d8800015 	stw	r2,0(sp)
 8000dcc:	e13fe717 	ldw	r4,-100(fp)
 8000dd0:	e17fe817 	ldw	r5,-96(fp)
 8000dd4:	e1bfe917 	ldw	r6,-92(fp)
 8000dd8:	e1ffea17 	ldw	r7,-88(fp)
 8000ddc:	800069c0 	call	800069c <computeOutCode>
 8000de0:	e0bfef15 	stw	r2,-68(fp)
 8000de4:	00001006 	br	8000e28 <cohen_sutherland+0x638>
			} else {
				x1 = x;
 8000de8:	e0bff217 	ldw	r2,-56(fp)
 8000dec:	e0bfeb15 	stw	r2,-84(fp)
 8000df0:	e0bff317 	ldw	r2,-52(fp)
 8000df4:	e0bfec15 	stw	r2,-80(fp)
				y1 = y;
 8000df8:	e0bff417 	ldw	r2,-48(fp)
 8000dfc:	e0bfed15 	stw	r2,-76(fp)
 8000e00:	e0bff517 	ldw	r2,-44(fp)
 8000e04:	e0bfee15 	stw	r2,-72(fp)
				outcode1 = computeOutCode(x1, y1, clip);
 8000e08:	e0bffd17 	ldw	r2,-12(fp)
 8000e0c:	d8800015 	stw	r2,0(sp)
 8000e10:	e13feb17 	ldw	r4,-84(fp)
 8000e14:	e17fec17 	ldw	r5,-80(fp)
 8000e18:	e1bfed17 	ldw	r6,-76(fp)
 8000e1c:	e1ffee17 	ldw	r7,-72(fp)
 8000e20:	800069c0 	call	800069c <computeOutCode>
 8000e24:	e0bff015 	stw	r2,-64(fp)
			}
		}
	}
 8000e28:	003eb606 	br	8000904 <__alt_data_end+0xfc000904>

	if(accept) {
 8000e2c:	e0bff117 	ldw	r2,-60(fp)
 8000e30:	10001d26 	beq	r2,zero,8000ea8 <cohen_sutherland+0x6b8>
		struct Bounds* result = malloc(sizeof(struct Bounds));
 8000e34:	01000404 	movi	r4,16
 8000e38:	800bd300 	call	800bd30 <malloc>
 8000e3c:	e0bffb15 	stw	r2,-20(fp)
		result -> x1 = x0;
 8000e40:	e13fe717 	ldw	r4,-100(fp)
 8000e44:	e17fe817 	ldw	r5,-96(fp)
 8000e48:	800b5a00 	call	800b5a0 <__fixdfsi>
 8000e4c:	1007883a 	mov	r3,r2
 8000e50:	e0bffb17 	ldw	r2,-20(fp)
 8000e54:	10c00015 	stw	r3,0(r2)
		result -> x2 = x1;
 8000e58:	e13feb17 	ldw	r4,-84(fp)
 8000e5c:	e17fec17 	ldw	r5,-80(fp)
 8000e60:	800b5a00 	call	800b5a0 <__fixdfsi>
 8000e64:	1007883a 	mov	r3,r2
 8000e68:	e0bffb17 	ldw	r2,-20(fp)
 8000e6c:	10c00115 	stw	r3,4(r2)
		result -> y1 = y0;
 8000e70:	e13fe917 	ldw	r4,-92(fp)
 8000e74:	e17fea17 	ldw	r5,-88(fp)
 8000e78:	800b5a00 	call	800b5a0 <__fixdfsi>
 8000e7c:	1007883a 	mov	r3,r2
 8000e80:	e0bffb17 	ldw	r2,-20(fp)
 8000e84:	10c00215 	stw	r3,8(r2)
		result -> y2 = y1;
 8000e88:	e13fed17 	ldw	r4,-76(fp)
 8000e8c:	e17fee17 	ldw	r5,-72(fp)
 8000e90:	800b5a00 	call	800b5a0 <__fixdfsi>
 8000e94:	1007883a 	mov	r3,r2
 8000e98:	e0bffb17 	ldw	r2,-20(fp)
 8000e9c:	10c00315 	stw	r3,12(r2)

		return result;
 8000ea0:	e0bffb17 	ldw	r2,-20(fp)
 8000ea4:	00000106 	br	8000eac <cohen_sutherland+0x6bc>
	} else {
		return 0;
 8000ea8:	0005883a 	mov	r2,zero
	}
}
 8000eac:	e6fffe04 	addi	sp,fp,-8
 8000eb0:	dfc00317 	ldw	ra,12(sp)
 8000eb4:	df000217 	ldw	fp,8(sp)
 8000eb8:	dc400117 	ldw	r17,4(sp)
 8000ebc:	dc000017 	ldw	r16,0(sp)
 8000ec0:	dec00404 	addi	sp,sp,16
 8000ec4:	f800283a 	ret

08000ec8 <onButtonDown>:
#include <stdlib.h>
#include "Button.h"
#include "TouchEventHandler.h"

int onButtonDown(void* _self, int x, int y)
{
 8000ec8:	defffa04 	addi	sp,sp,-24
 8000ecc:	dfc00515 	stw	ra,20(sp)
 8000ed0:	df000415 	stw	fp,16(sp)
 8000ed4:	df000404 	addi	fp,sp,16
 8000ed8:	e13ffd15 	stw	r4,-12(fp)
 8000edc:	e17ffe15 	stw	r5,-8(fp)
 8000ee0:	e1bfff15 	stw	r6,-4(fp)
  (void) x;
  (void) y;
  struct Button* self = _self;
 8000ee4:	e0bffd17 	ldw	r2,-12(fp)
 8000ee8:	e0bffc15 	stw	r2,-16(fp)
  if(!self->focused) {
 8000eec:	e0bffc17 	ldw	r2,-16(fp)
 8000ef0:	10800f17 	ldw	r2,60(r2)
 8000ef4:	10000a1e 	bne	r2,zero,8000f20 <onButtonDown+0x58>
	  self -> focused = 1;
 8000ef8:	e0bffc17 	ldw	r2,-16(fp)
 8000efc:	00c00044 	movi	r3,1
 8000f00:	10c00f15 	stw	r3,60(r2)
	  invalidate(renderer(self), bounds(self));
 8000f04:	e0bffc17 	ldw	r2,-16(fp)
 8000f08:	10c00a17 	ldw	r3,40(r2)
 8000f0c:	e0bffc17 	ldw	r2,-16(fp)
 8000f10:	10800517 	ldw	r2,20(r2)
 8000f14:	1809883a 	mov	r4,r3
 8000f18:	100b883a 	mov	r5,r2
 8000f1c:	80066240 	call	8006624 <invalidate>
  }
  return 1;
 8000f20:	00800044 	movi	r2,1
}
 8000f24:	e037883a 	mov	sp,fp
 8000f28:	dfc00117 	ldw	ra,4(sp)
 8000f2c:	df000017 	ldw	fp,0(sp)
 8000f30:	dec00204 	addi	sp,sp,8
 8000f34:	f800283a 	ret

08000f38 <onButtonUp>:

int onButtonUp(void* _self, int x, int y)
{
 8000f38:	defffa04 	addi	sp,sp,-24
 8000f3c:	dfc00515 	stw	ra,20(sp)
 8000f40:	df000415 	stw	fp,16(sp)
 8000f44:	df000404 	addi	fp,sp,16
 8000f48:	e13ffd15 	stw	r4,-12(fp)
 8000f4c:	e17ffe15 	stw	r5,-8(fp)
 8000f50:	e1bfff15 	stw	r6,-4(fp)
  (void) x;
  (void) y;
  struct Button* self = _self;
 8000f54:	e0bffd17 	ldw	r2,-12(fp)
 8000f58:	e0bffc15 	stw	r2,-16(fp)
  if(self->focused) {
 8000f5c:	e0bffc17 	ldw	r2,-16(fp)
 8000f60:	10800f17 	ldw	r2,60(r2)
 8000f64:	10000926 	beq	r2,zero,8000f8c <onButtonUp+0x54>
	  self -> focused = 0;
 8000f68:	e0bffc17 	ldw	r2,-16(fp)
 8000f6c:	10000f15 	stw	zero,60(r2)
	  invalidate(renderer(self), bounds(self));
 8000f70:	e0bffc17 	ldw	r2,-16(fp)
 8000f74:	10c00a17 	ldw	r3,40(r2)
 8000f78:	e0bffc17 	ldw	r2,-16(fp)
 8000f7c:	10800517 	ldw	r2,20(r2)
 8000f80:	1809883a 	mov	r4,r3
 8000f84:	100b883a 	mov	r5,r2
 8000f88:	80066240 	call	8006624 <invalidate>
  }
  return 1;
 8000f8c:	00800044 	movi	r2,1
}
 8000f90:	e037883a 	mov	sp,fp
 8000f94:	dfc00117 	ldw	ra,4(sp)
 8000f98:	df000017 	ldw	fp,0(sp)
 8000f9c:	dec00204 	addi	sp,sp,8
 8000fa0:	f800283a 	ret

08000fa4 <Button_ctor>:

static void* Button_ctor(void* _self, va_list* app)
{
 8000fa4:	defffb04 	addi	sp,sp,-20
 8000fa8:	dfc00415 	stw	ra,16(sp)
 8000fac:	df000315 	stw	fp,12(sp)
 8000fb0:	df000304 	addi	fp,sp,12
 8000fb4:	e13ffe15 	stw	r4,-8(fp)
 8000fb8:	e17fff15 	stw	r5,-4(fp)
	struct Button* self = super_ctor(Button, _self, app);
 8000fbc:	d0a6fe17 	ldw	r2,-25608(gp)
 8000fc0:	1009883a 	mov	r4,r2
 8000fc4:	e17ffe17 	ldw	r5,-8(fp)
 8000fc8:	e1bfff17 	ldw	r6,-4(fp)
 8000fcc:	80054180 	call	8005418 <super_ctor>
 8000fd0:	e0bffd15 	stw	r2,-12(fp)

	self -> colour = va_arg(*app, int);
 8000fd4:	e0bfff17 	ldw	r2,-4(fp)
 8000fd8:	10800017 	ldw	r2,0(r2)
 8000fdc:	11000104 	addi	r4,r2,4
 8000fe0:	e0ffff17 	ldw	r3,-4(fp)
 8000fe4:	19000015 	stw	r4,0(r3)
 8000fe8:	10c00017 	ldw	r3,0(r2)
 8000fec:	e0bffd17 	ldw	r2,-12(fp)
 8000ff0:	10c00c15 	stw	r3,48(r2)
	self -> focusColour = va_arg(*app, int);
 8000ff4:	e0bfff17 	ldw	r2,-4(fp)
 8000ff8:	10800017 	ldw	r2,0(r2)
 8000ffc:	11000104 	addi	r4,r2,4
 8001000:	e0ffff17 	ldw	r3,-4(fp)
 8001004:	19000015 	stw	r4,0(r3)
 8001008:	10c00017 	ldw	r3,0(r2)
 800100c:	e0bffd17 	ldw	r2,-12(fp)
 8001010:	10c00d15 	stw	r3,52(r2)

	self -> focused = 0;
 8001014:	e0bffd17 	ldw	r2,-12(fp)
 8001018:	10000f15 	stw	zero,60(r2)

	self -> c = 0;
 800101c:	e0bffd17 	ldw	r2,-12(fp)
 8001020:	10000e05 	stb	zero,56(r2)

	addEventListener(self, DOWN_EVENT, onButtonDown);
 8001024:	e13ffd17 	ldw	r4,-12(fp)
 8001028:	01400044 	movi	r5,1
 800102c:	01820034 	movhi	r6,2048
 8001030:	3183b204 	addi	r6,r6,3784
 8001034:	80080880 	call	8008088 <addEventListener>
	addEventListener(self, UP_EVENT, onButtonUp);
 8001038:	e13ffd17 	ldw	r4,-12(fp)
 800103c:	01400084 	movi	r5,2
 8001040:	01820034 	movhi	r6,2048
 8001044:	3183ce04 	addi	r6,r6,3896
 8001048:	80080880 	call	8008088 <addEventListener>

	return self;
 800104c:	e0bffd17 	ldw	r2,-12(fp)
}
 8001050:	e037883a 	mov	sp,fp
 8001054:	dfc00117 	ldw	ra,4(sp)
 8001058:	df000017 	ldw	fp,0(sp)
 800105c:	dec00204 	addi	sp,sp,8
 8001060:	f800283a 	ret

08001064 <Button_draw>:

static void Button_draw(void* _self, struct Bounds* clip)
{
 8001064:	defff804 	addi	sp,sp,-32
 8001068:	dfc00715 	stw	ra,28(sp)
 800106c:	df000615 	stw	fp,24(sp)
 8001070:	df000604 	addi	fp,sp,24
 8001074:	e13ffe15 	stw	r4,-8(fp)
 8001078:	e17fff15 	stw	r5,-4(fp)
	struct Button* self = _self;
 800107c:	e0bffe17 	ldw	r2,-8(fp)
 8001080:	e0bffc15 	stw	r2,-16(fp)
	super_draw(Button, _self, clip);
 8001084:	d0a6fe17 	ldw	r2,-25608(gp)
 8001088:	1009883a 	mov	r4,r2
 800108c:	e17ffe17 	ldw	r5,-8(fp)
 8001090:	e1bfff17 	ldw	r6,-4(fp)
 8001094:	8007a600 	call	8007a60 <super_draw>

	struct Bounds* bounds = bounds(self);
 8001098:	e0bffc17 	ldw	r2,-16(fp)
 800109c:	10800517 	ldw	r2,20(r2)
 80010a0:	e0bffd15 	stw	r2,-12(fp)

	writeFilledRect(bounds->x1, bounds->y1, bounds->x2, bounds->y2, self -> focused ? self -> focusColour : self -> colour);
 80010a4:	e0bffd17 	ldw	r2,-12(fp)
 80010a8:	11000017 	ldw	r4,0(r2)
 80010ac:	e0bffd17 	ldw	r2,-12(fp)
 80010b0:	11400217 	ldw	r5,8(r2)
 80010b4:	e0bffd17 	ldw	r2,-12(fp)
 80010b8:	11800117 	ldw	r6,4(r2)
 80010bc:	e0bffd17 	ldw	r2,-12(fp)
 80010c0:	10c00317 	ldw	r3,12(r2)
 80010c4:	e0bffc17 	ldw	r2,-16(fp)
 80010c8:	10800f17 	ldw	r2,60(r2)
 80010cc:	10000326 	beq	r2,zero,80010dc <Button_draw+0x78>
 80010d0:	e0bffc17 	ldw	r2,-16(fp)
 80010d4:	10800d17 	ldw	r2,52(r2)
 80010d8:	00000206 	br	80010e4 <Button_draw+0x80>
 80010dc:	e0bffc17 	ldw	r2,-16(fp)
 80010e0:	10800c17 	ldw	r2,48(r2)
 80010e4:	d8800015 	stw	r2,0(sp)
 80010e8:	180f883a 	mov	r7,r3
 80010ec:	8001fd80 	call	8001fd8 <writeFilledRect>
	if(self->c) OutGraphicsCharFont2((bounds->x1+bounds->x2)/2 - 5, (bounds->y1+bounds->y2)/2 - 7, WHITE, BLACK, self->c, 0);
 80010f0:	e0bffc17 	ldw	r2,-16(fp)
 80010f4:	10800e03 	ldbu	r2,56(r2)
 80010f8:	10803fcc 	andi	r2,r2,255
 80010fc:	1080201c 	xori	r2,r2,128
 8001100:	10bfe004 	addi	r2,r2,-128
 8001104:	10001d26 	beq	r2,zero,800117c <Button_draw+0x118>
 8001108:	e0bffd17 	ldw	r2,-12(fp)
 800110c:	10c00017 	ldw	r3,0(r2)
 8001110:	e0bffd17 	ldw	r2,-12(fp)
 8001114:	10800117 	ldw	r2,4(r2)
 8001118:	1885883a 	add	r2,r3,r2
 800111c:	1006d7fa 	srli	r3,r2,31
 8001120:	1885883a 	add	r2,r3,r2
 8001124:	1005d07a 	srai	r2,r2,1
 8001128:	113ffec4 	addi	r4,r2,-5
 800112c:	e0bffd17 	ldw	r2,-12(fp)
 8001130:	10c00217 	ldw	r3,8(r2)
 8001134:	e0bffd17 	ldw	r2,-12(fp)
 8001138:	10800317 	ldw	r2,12(r2)
 800113c:	1885883a 	add	r2,r3,r2
 8001140:	1006d7fa 	srli	r3,r2,31
 8001144:	1885883a 	add	r2,r3,r2
 8001148:	1005d07a 	srai	r2,r2,1
 800114c:	10fffe44 	addi	r3,r2,-7
 8001150:	e0bffc17 	ldw	r2,-16(fp)
 8001154:	10800e03 	ldbu	r2,56(r2)
 8001158:	10803fcc 	andi	r2,r2,255
 800115c:	1080201c 	xori	r2,r2,128
 8001160:	10bfe004 	addi	r2,r2,-128
 8001164:	d8800015 	stw	r2,0(sp)
 8001168:	d8000115 	stw	zero,4(sp)
 800116c:	180b883a 	mov	r5,r3
 8001170:	01800044 	movi	r6,1
 8001174:	000f883a 	mov	r7,zero
 8001178:	80058280 	call	8005828 <OutGraphicsCharFont2>
}
 800117c:	e037883a 	mov	sp,fp
 8001180:	dfc00117 	ldw	ra,4(sp)
 8001184:	df000017 	ldw	fp,0(sp)
 8001188:	dec00204 	addi	sp,sp,8
 800118c:	f800283a 	ret

08001190 <setChar>:

void setChar(void* _self, char c) {
 8001190:	defffb04 	addi	sp,sp,-20
 8001194:	dfc00415 	stw	ra,16(sp)
 8001198:	df000315 	stw	fp,12(sp)
 800119c:	df000304 	addi	fp,sp,12
 80011a0:	e13ffe15 	stw	r4,-8(fp)
 80011a4:	2805883a 	mov	r2,r5
 80011a8:	e0bfff05 	stb	r2,-4(fp)
	struct Button* self = _self;
 80011ac:	e0bffe17 	ldw	r2,-8(fp)
 80011b0:	e0bffd15 	stw	r2,-12(fp)
	self->c = c;
 80011b4:	e0bffd17 	ldw	r2,-12(fp)
 80011b8:	e0ffff03 	ldbu	r3,-4(fp)
 80011bc:	10c00e05 	stb	r3,56(r2)
	invalidate(renderer(self), bounds(self));
 80011c0:	e0bffd17 	ldw	r2,-12(fp)
 80011c4:	10c00a17 	ldw	r3,40(r2)
 80011c8:	e0bffd17 	ldw	r2,-12(fp)
 80011cc:	10800517 	ldw	r2,20(r2)
 80011d0:	1809883a 	mov	r4,r3
 80011d4:	100b883a 	mov	r5,r2
 80011d8:	80066240 	call	8006624 <invalidate>
}
 80011dc:	e037883a 	mov	sp,fp
 80011e0:	dfc00117 	ldw	ra,4(sp)
 80011e4:	df000017 	ldw	fp,0(sp)
 80011e8:	dec00204 	addi	sp,sp,8
 80011ec:	f800283a 	ret

080011f0 <initButton>:

const void* Button;

void initButton()
{
 80011f0:	defff904 	addi	sp,sp,-28
 80011f4:	dfc00615 	stw	ra,24(sp)
 80011f8:	df000515 	stw	fp,20(sp)
 80011fc:	df000504 	addi	fp,sp,20
	if(!Button)
 8001200:	d0a6fe17 	ldw	r2,-25608(gp)
 8001204:	10001a1e 	bne	r2,zero,8001270 <initButton+0x80>
		{
			initView();
 8001208:	80082600 	call	8008260 <initView>
			Button = new(ViewClass, "Button", View,
 800120c:	008200f4 	movhi	r2,2051
 8001210:	10aaf604 	addi	r2,r2,-21544
 8001214:	11000017 	ldw	r4,0(r2)
 8001218:	008200f4 	movhi	r2,2051
 800121c:	10aaf504 	addi	r2,r2,-21548
 8001220:	10c00017 	ldw	r3,0(r2)
 8001224:	00820034 	movhi	r2,2048
 8001228:	1094e904 	addi	r2,r2,21412
 800122c:	d8800015 	stw	r2,0(sp)
 8001230:	00820034 	movhi	r2,2048
 8001234:	1083e904 	addi	r2,r2,4004
 8001238:	d8800115 	stw	r2,4(sp)
 800123c:	00820034 	movhi	r2,2048
 8001240:	109e8504 	addi	r2,r2,31252
 8001244:	d8800215 	stw	r2,8(sp)
 8001248:	00820034 	movhi	r2,2048
 800124c:	10841904 	addi	r2,r2,4196
 8001250:	d8800315 	stw	r2,12(sp)
 8001254:	d8000415 	stw	zero,16(sp)
 8001258:	014200b4 	movhi	r5,2050
 800125c:	29702504 	addi	r5,r5,-16236
 8001260:	180d883a 	mov	r6,r3
 8001264:	01c01004 	movi	r7,64
 8001268:	80052900 	call	8005290 <new>
 800126c:	d0a6fe15 	stw	r2,-25608(gp)
						 sizeof(struct Button), ctor, Button_ctor,
						 draw, Button_draw,0);
		}
}
 8001270:	e037883a 	mov	sp,fp
 8001274:	dfc00117 	ldw	ra,4(sp)
 8001278:	df000017 	ldw	fp,0(sp)
 800127c:	dec00204 	addi	sp,sp,8
 8001280:	f800283a 	ret

08001284 <DE1_writePixel>:
}

#else

void DE1_writePixel (int x, int y, int Colour)
{
 8001284:	defffc04 	addi	sp,sp,-16
 8001288:	df000315 	stw	fp,12(sp)
 800128c:	df000304 	addi	fp,sp,12
 8001290:	e13ffd15 	stw	r4,-12(fp)
 8001294:	e17ffe15 	stw	r5,-8(fp)
 8001298:	e1bfff15 	stw	r6,-4(fp)
	WAIT_FOR_GRAPHICS;			// is graphics ready for new command
 800129c:	0001883a 	nop
 80012a0:	00a10034 	movhi	r2,33792
 80012a4:	1080000b 	ldhu	r2,0(r2)
 80012a8:	10bfffcc 	andi	r2,r2,65535
 80012ac:	1080004c 	andi	r2,r2,1
 80012b0:	103ffb26 	beq	r2,zero,80012a0 <__alt_data_end+0xfc0012a0>

	GraphicsX1Reg = x;			// write coords to x1, y1
 80012b4:	00a10034 	movhi	r2,33792
 80012b8:	10800084 	addi	r2,r2,2
 80012bc:	e0fffd17 	ldw	r3,-12(fp)
 80012c0:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y;
 80012c4:	00a10034 	movhi	r2,33792
 80012c8:	10800104 	addi	r2,r2,4
 80012cc:	e0fffe17 	ldw	r3,-8(fp)
 80012d0:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = Colour;		// set pixel colour with a palette number
 80012d4:	00a10034 	movhi	r2,33792
 80012d8:	10800384 	addi	r2,r2,14
 80012dc:	e0ffff17 	ldw	r3,-4(fp)
 80012e0:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = PutAPixel;		// give graphics a "write pixel" command
 80012e4:	00a10034 	movhi	r2,33792
 80012e8:	00c00284 	movi	r3,10
 80012ec:	10c0000d 	sth	r3,0(r2)
}
 80012f0:	e037883a 	mov	sp,fp
 80012f4:	df000017 	ldw	fp,0(sp)
 80012f8:	dec00104 	addi	sp,sp,4
 80012fc:	f800283a 	ret

08001300 <DE1_writeHLine>:

void DE1_writeHLine (int y, int x1, int x2, int Colour)
{
 8001300:	defffb04 	addi	sp,sp,-20
 8001304:	df000415 	stw	fp,16(sp)
 8001308:	df000404 	addi	fp,sp,16
 800130c:	e13ffc15 	stw	r4,-16(fp)
 8001310:	e17ffd15 	stw	r5,-12(fp)
 8001314:	e1bffe15 	stw	r6,-8(fp)
 8001318:	e1ffff15 	stw	r7,-4(fp)
	if(x1 < 0) x1 = 0;
 800131c:	e0bffd17 	ldw	r2,-12(fp)
 8001320:	1000010e 	bge	r2,zero,8001328 <DE1_writeHLine+0x28>
 8001324:	e03ffd15 	stw	zero,-12(fp)
	if(x1 > 799) x1 = 799;
 8001328:	e0bffd17 	ldw	r2,-12(fp)
 800132c:	1080c810 	cmplti	r2,r2,800
 8001330:	1000021e 	bne	r2,zero,800133c <DE1_writeHLine+0x3c>
 8001334:	0080c7c4 	movi	r2,799
 8001338:	e0bffd15 	stw	r2,-12(fp)

	if(x2 < 0) x2 = 0;
 800133c:	e0bffe17 	ldw	r2,-8(fp)
 8001340:	1000010e 	bge	r2,zero,8001348 <DE1_writeHLine+0x48>
 8001344:	e03ffe15 	stw	zero,-8(fp)
	if(x2 > 799) x2 = 799;
 8001348:	e0bffe17 	ldw	r2,-8(fp)
 800134c:	1080c810 	cmplti	r2,r2,800
 8001350:	1000021e 	bne	r2,zero,800135c <DE1_writeHLine+0x5c>
 8001354:	0080c7c4 	movi	r2,799
 8001358:	e0bffe15 	stw	r2,-8(fp)

	if(y < 0) y = 0;
 800135c:	e0bffc17 	ldw	r2,-16(fp)
 8001360:	1000010e 	bge	r2,zero,8001368 <DE1_writeHLine+0x68>
 8001364:	e03ffc15 	stw	zero,-16(fp)
	if(y > 479) y = 479;
 8001368:	e0bffc17 	ldw	r2,-16(fp)
 800136c:	10807810 	cmplti	r2,r2,480
 8001370:	1000021e 	bne	r2,zero,800137c <DE1_writeHLine+0x7c>
 8001374:	008077c4 	movi	r2,479
 8001378:	e0bffc15 	stw	r2,-16(fp)

	WAIT_FOR_GRAPHICS;			// is graphics ready for new command
 800137c:	0001883a 	nop
 8001380:	00a10034 	movhi	r2,33792
 8001384:	1080000b 	ldhu	r2,0(r2)
 8001388:	10bfffcc 	andi	r2,r2,65535
 800138c:	1080004c 	andi	r2,r2,1
 8001390:	103ffb26 	beq	r2,zero,8001380 <__alt_data_end+0xfc001380>

	GraphicsX1Reg = x1;			// write coords to x1, y1
 8001394:	00a10034 	movhi	r2,33792
 8001398:	10800084 	addi	r2,r2,2
 800139c:	e0fffd17 	ldw	r3,-12(fp)
 80013a0:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y;
 80013a4:	00a10034 	movhi	r2,33792
 80013a8:	10800104 	addi	r2,r2,4
 80013ac:	e0fffc17 	ldw	r3,-16(fp)
 80013b0:	10c0000d 	sth	r3,0(r2)
	GraphicsX2Reg = x2;			// write coords to x2, y2
 80013b4:	00a10034 	movhi	r2,33792
 80013b8:	10800184 	addi	r2,r2,6
 80013bc:	e0fffe17 	ldw	r3,-8(fp)
 80013c0:	10c0000d 	sth	r3,0(r2)
	GraphicsY2Reg = y;
 80013c4:	00a10034 	movhi	r2,33792
 80013c8:	10800204 	addi	r2,r2,8
 80013cc:	e0fffc17 	ldw	r3,-16(fp)
 80013d0:	10c0000d 	sth	r3,0(r2)

	GraphicsColourReg = Colour;		// set pixel colour with a palette number
 80013d4:	00a10034 	movhi	r2,33792
 80013d8:	10800384 	addi	r2,r2,14
 80013dc:	e0ffff17 	ldw	r3,-4(fp)
 80013e0:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawHLine;		// give graphics a "draw H line" command
 80013e4:	00a10034 	movhi	r2,33792
 80013e8:	00c00044 	movi	r3,1
 80013ec:	10c0000d 	sth	r3,0(r2)
}
 80013f0:	e037883a 	mov	sp,fp
 80013f4:	df000017 	ldw	fp,0(sp)
 80013f8:	dec00104 	addi	sp,sp,4
 80013fc:	f800283a 	ret

08001400 <DE1_writeVLine>:

void DE1_writeVLine (int x, int y1, int y2, int Colour)
{
 8001400:	defffb04 	addi	sp,sp,-20
 8001404:	df000415 	stw	fp,16(sp)
 8001408:	df000404 	addi	fp,sp,16
 800140c:	e13ffc15 	stw	r4,-16(fp)
 8001410:	e17ffd15 	stw	r5,-12(fp)
 8001414:	e1bffe15 	stw	r6,-8(fp)
 8001418:	e1ffff15 	stw	r7,-4(fp)
	if(y1 < 0) y1 = 0;
 800141c:	e0bffd17 	ldw	r2,-12(fp)
 8001420:	1000010e 	bge	r2,zero,8001428 <DE1_writeVLine+0x28>
 8001424:	e03ffd15 	stw	zero,-12(fp)
	if(y1 > 479) y1 = 479;
 8001428:	e0bffd17 	ldw	r2,-12(fp)
 800142c:	10807810 	cmplti	r2,r2,480
 8001430:	1000021e 	bne	r2,zero,800143c <DE1_writeVLine+0x3c>
 8001434:	008077c4 	movi	r2,479
 8001438:	e0bffd15 	stw	r2,-12(fp)

	if(y2 > 0) y2 = 0;
 800143c:	e0bffe17 	ldw	r2,-8(fp)
 8001440:	0080010e 	bge	zero,r2,8001448 <DE1_writeVLine+0x48>
 8001444:	e03ffe15 	stw	zero,-8(fp)
	if(y2 > 479) y2 = 479;
 8001448:	e0bffe17 	ldw	r2,-8(fp)
 800144c:	10807810 	cmplti	r2,r2,480
 8001450:	1000021e 	bne	r2,zero,800145c <DE1_writeVLine+0x5c>
 8001454:	008077c4 	movi	r2,479
 8001458:	e0bffe15 	stw	r2,-8(fp)

	if(x < 0) x = 0;
 800145c:	e0bffc17 	ldw	r2,-16(fp)
 8001460:	1000010e 	bge	r2,zero,8001468 <DE1_writeVLine+0x68>
 8001464:	e03ffc15 	stw	zero,-16(fp)
	if(x > 799) x = 799;
 8001468:	e0bffc17 	ldw	r2,-16(fp)
 800146c:	1080c810 	cmplti	r2,r2,800
 8001470:	1000021e 	bne	r2,zero,800147c <DE1_writeVLine+0x7c>
 8001474:	0080c7c4 	movi	r2,799
 8001478:	e0bffc15 	stw	r2,-16(fp)

	WAIT_FOR_GRAPHICS;			// is graphics ready for new command
 800147c:	0001883a 	nop
 8001480:	00a10034 	movhi	r2,33792
 8001484:	1080000b 	ldhu	r2,0(r2)
 8001488:	10bfffcc 	andi	r2,r2,65535
 800148c:	1080004c 	andi	r2,r2,1
 8001490:	103ffb26 	beq	r2,zero,8001480 <__alt_data_end+0xfc001480>

	GraphicsX1Reg = x;			// write coords to x1, y1
 8001494:	00a10034 	movhi	r2,33792
 8001498:	10800084 	addi	r2,r2,2
 800149c:	e0fffc17 	ldw	r3,-16(fp)
 80014a0:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y1;
 80014a4:	00a10034 	movhi	r2,33792
 80014a8:	10800104 	addi	r2,r2,4
 80014ac:	e0fffd17 	ldw	r3,-12(fp)
 80014b0:	10c0000d 	sth	r3,0(r2)
	GraphicsX2Reg = x;			// write coords to x2, y2
 80014b4:	00a10034 	movhi	r2,33792
 80014b8:	10800184 	addi	r2,r2,6
 80014bc:	e0fffc17 	ldw	r3,-16(fp)
 80014c0:	10c0000d 	sth	r3,0(r2)
	GraphicsY2Reg = y2;
 80014c4:	00a10034 	movhi	r2,33792
 80014c8:	10800204 	addi	r2,r2,8
 80014cc:	e0fffe17 	ldw	r3,-8(fp)
 80014d0:	10c0000d 	sth	r3,0(r2)

	GraphicsColourReg = Colour;		// set pixel colour with a palette number
 80014d4:	00a10034 	movhi	r2,33792
 80014d8:	10800384 	addi	r2,r2,14
 80014dc:	e0ffff17 	ldw	r3,-4(fp)
 80014e0:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawVLine;		// give graphics a "draw H line" command
 80014e4:	00a10034 	movhi	r2,33792
 80014e8:	00c00084 	movi	r3,2
 80014ec:	10c0000d 	sth	r3,0(r2)
}
 80014f0:	e037883a 	mov	sp,fp
 80014f4:	df000017 	ldw	fp,0(sp)
 80014f8:	dec00104 	addi	sp,sp,4
 80014fc:	f800283a 	ret

08001500 <DE1_writeLine>:

void DE1_writeLine (int x1, int y1, int x2, int y2, int color)
{
 8001500:	defffb04 	addi	sp,sp,-20
 8001504:	df000415 	stw	fp,16(sp)
 8001508:	df000404 	addi	fp,sp,16
 800150c:	e13ffc15 	stw	r4,-16(fp)
 8001510:	e17ffd15 	stw	r5,-12(fp)
 8001514:	e1bffe15 	stw	r6,-8(fp)
 8001518:	e1ffff15 	stw	r7,-4(fp)
	WAIT_FOR_GRAPHICS;			// is graphics ready for new command
 800151c:	0001883a 	nop
 8001520:	00a10034 	movhi	r2,33792
 8001524:	1080000b 	ldhu	r2,0(r2)
 8001528:	10bfffcc 	andi	r2,r2,65535
 800152c:	1080004c 	andi	r2,r2,1
 8001530:	103ffb26 	beq	r2,zero,8001520 <__alt_data_end+0xfc001520>

	GraphicsX1Reg = x1;			// write coords to x1, y1
 8001534:	00a10034 	movhi	r2,33792
 8001538:	10800084 	addi	r2,r2,2
 800153c:	e0fffc17 	ldw	r3,-16(fp)
 8001540:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y1;
 8001544:	00a10034 	movhi	r2,33792
 8001548:	10800104 	addi	r2,r2,4
 800154c:	e0fffd17 	ldw	r3,-12(fp)
 8001550:	10c0000d 	sth	r3,0(r2)
	GraphicsX2Reg = x2;			// write coords to x2, y2
 8001554:	00a10034 	movhi	r2,33792
 8001558:	10800184 	addi	r2,r2,6
 800155c:	e0fffe17 	ldw	r3,-8(fp)
 8001560:	10c0000d 	sth	r3,0(r2)
	GraphicsY2Reg = y2;
 8001564:	00a10034 	movhi	r2,33792
 8001568:	10800204 	addi	r2,r2,8
 800156c:	e0ffff17 	ldw	r3,-4(fp)
 8001570:	10c0000d 	sth	r3,0(r2)

	GraphicsColourReg = color;		// set pixel colour with a palette number
 8001574:	00a10034 	movhi	r2,33792
 8001578:	10800384 	addi	r2,r2,14
 800157c:	e0c00117 	ldw	r3,4(fp)
 8001580:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawLine;		// give graphics a "draw H line" command
 8001584:	00a10034 	movhi	r2,33792
 8001588:	00c000c4 	movi	r3,3
 800158c:	10c0000d 	sth	r3,0(r2)
}
 8001590:	e037883a 	mov	sp,fp
 8001594:	df000017 	ldw	fp,0(sp)
 8001598:	dec00104 	addi	sp,sp,4
 800159c:	f800283a 	ret

080015a0 <DE1_writeRect>:

void DE1_writeRect (int x1, int y1, int x2, int y2, int color)
{
 80015a0:	defffb04 	addi	sp,sp,-20
 80015a4:	df000415 	stw	fp,16(sp)
 80015a8:	df000404 	addi	fp,sp,16
 80015ac:	e13ffc15 	stw	r4,-16(fp)
 80015b0:	e17ffd15 	stw	r5,-12(fp)
 80015b4:	e1bffe15 	stw	r6,-8(fp)
 80015b8:	e1ffff15 	stw	r7,-4(fp)
	WAIT_FOR_GRAPHICS;			// is graphics ready for new command
 80015bc:	0001883a 	nop
 80015c0:	00a10034 	movhi	r2,33792
 80015c4:	1080000b 	ldhu	r2,0(r2)
 80015c8:	10bfffcc 	andi	r2,r2,65535
 80015cc:	1080004c 	andi	r2,r2,1
 80015d0:	103ffb26 	beq	r2,zero,80015c0 <__alt_data_end+0xfc0015c0>

	GraphicsX1Reg = x1;			// write coords to x1, y1
 80015d4:	00a10034 	movhi	r2,33792
 80015d8:	10800084 	addi	r2,r2,2
 80015dc:	e0fffc17 	ldw	r3,-16(fp)
 80015e0:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y1;
 80015e4:	00a10034 	movhi	r2,33792
 80015e8:	10800104 	addi	r2,r2,4
 80015ec:	e0fffd17 	ldw	r3,-12(fp)
 80015f0:	10c0000d 	sth	r3,0(r2)
	GraphicsX2Reg = x2;			// write coords to x2, y2
 80015f4:	00a10034 	movhi	r2,33792
 80015f8:	10800184 	addi	r2,r2,6
 80015fc:	e0fffe17 	ldw	r3,-8(fp)
 8001600:	10c0000d 	sth	r3,0(r2)
	GraphicsY2Reg = y2;
 8001604:	00a10034 	movhi	r2,33792
 8001608:	10800204 	addi	r2,r2,8
 800160c:	e0ffff17 	ldw	r3,-4(fp)
 8001610:	10c0000d 	sth	r3,0(r2)

	GraphicsColourReg = color;		// set pixel colour with a palette number
 8001614:	00a10034 	movhi	r2,33792
 8001618:	10800384 	addi	r2,r2,14
 800161c:	e0c00117 	ldw	r3,4(fp)
 8001620:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawRect;		// give graphics a "draw H line" command
 8001624:	00a10034 	movhi	r2,33792
 8001628:	00c00104 	movi	r3,4
 800162c:	10c0000d 	sth	r3,0(r2)
}
 8001630:	e037883a 	mov	sp,fp
 8001634:	df000017 	ldw	fp,0(sp)
 8001638:	dec00104 	addi	sp,sp,4
 800163c:	f800283a 	ret

08001640 <putcharTouch>:
}

#else

int putcharTouch(int c)
{
 8001640:	defffe04 	addi	sp,sp,-8
 8001644:	df000115 	stw	fp,4(sp)
 8001648:	df000104 	addi	fp,sp,4
 800164c:	e13fff15 	stw	r4,-4(fp)
 // poll Tx bit(bit 0) in 6850 status register. Wait for it to become '1'
 while((TOUCH_STATUS >> 1) % 2 == 0);
 8001650:	0001883a 	nop
 8001654:	00a10034 	movhi	r2,33792
 8001658:	10808c04 	addi	r2,r2,560
 800165c:	10800003 	ldbu	r2,0(r2)
 8001660:	1080008c 	andi	r2,r2,2
 8001664:	10803fcc 	andi	r2,r2,255
 8001668:	103ffa26 	beq	r2,zero,8001654 <__alt_data_end+0xfc001654>
 TOUCH_TXDATA = c;
 800166c:	00a10034 	movhi	r2,33792
 8001670:	10808c84 	addi	r2,r2,562
 8001674:	e0ffff17 	ldw	r3,-4(fp)
 8001678:	10c00005 	stb	r3,0(r2)
 return c;
 800167c:	e0bfff17 	ldw	r2,-4(fp)
}
 8001680:	e037883a 	mov	sp,fp
 8001684:	df000017 	ldw	fp,0(sp)
 8001688:	dec00104 	addi	sp,sp,4
 800168c:	f800283a 	ret

08001690 <getcharTouch>:

int getcharTouch()
{
 8001690:	deffff04 	addi	sp,sp,-4
 8001694:	df000015 	stw	fp,0(sp)
 8001698:	d839883a 	mov	fp,sp
 // poll Rx bit in 6850 status register. Wait for it to become '1'
 while(TOUCH_STATUS % 2 == 0);
 800169c:	0001883a 	nop
 80016a0:	00a10034 	movhi	r2,33792
 80016a4:	10808c04 	addi	r2,r2,560
 80016a8:	10800003 	ldbu	r2,0(r2)
 80016ac:	1080004c 	andi	r2,r2,1
 80016b0:	10803fcc 	andi	r2,r2,255
 80016b4:	103ffa26 	beq	r2,zero,80016a0 <__alt_data_end+0xfc0016a0>
 return TOUCH_RXDATA;
 80016b8:	00a10034 	movhi	r2,33792
 80016bc:	10808c84 	addi	r2,r2,562
 80016c0:	10800003 	ldbu	r2,0(r2)
 80016c4:	10803fcc 	andi	r2,r2,255
}
 80016c8:	e037883a 	mov	sp,fp
 80016cc:	df000017 	ldw	fp,0(sp)
 80016d0:	dec00104 	addi	sp,sp,4
 80016d4:	f800283a 	ret

080016d8 <DE1_touchInit>:

void DE1_touchInit()
{
 80016d8:	defffe04 	addi	sp,sp,-8
 80016dc:	dfc00115 	stw	ra,4(sp)
 80016e0:	df000015 	stw	fp,0(sp)
 80016e4:	d839883a 	mov	fp,sp
  printf("Init touch\n");
 80016e8:	010200b4 	movhi	r4,2050
 80016ec:	21312704 	addi	r4,r4,-15204
 80016f0:	800c89c0 	call	800c89c <puts>
  TOUCH_CONTROL = 0x15;
 80016f4:	00a10034 	movhi	r2,33792
 80016f8:	10808c04 	addi	r2,r2,560
 80016fc:	00c00544 	movi	r3,21
 8001700:	10c00005 	stb	r3,0(r2)
  TOUCH_BAUD = 0x05; //9600
 8001704:	00a10034 	movhi	r2,33792
 8001708:	10808d04 	addi	r2,r2,564
 800170c:	00c00144 	movi	r3,5
 8001710:	10c00005 	stb	r3,0(r2)
  putcharTouch(0x12);
 8001714:	01000484 	movi	r4,18
 8001718:	80016400 	call	8001640 <putcharTouch>
}
 800171c:	e037883a 	mov	sp,fp
 8001720:	dfc00117 	ldw	ra,4(sp)
 8001724:	df000017 	ldw	fp,0(sp)
 8001728:	dec00204 	addi	sp,sp,8
 800172c:	f800283a 	ret

08001730 <DE1_isScreenTouched>:

int DE1_isScreenTouched()
{
 8001730:	deffff04 	addi	sp,sp,-4
 8001734:	df000015 	stw	fp,0(sp)
 8001738:	d839883a 	mov	fp,sp
  return 0x01 & TOUCH_STATUS;
 800173c:	00a10034 	movhi	r2,33792
 8001740:	10808c04 	addi	r2,r2,560
 8001744:	10800003 	ldbu	r2,0(r2)
 8001748:	10803fcc 	andi	r2,r2,255
 800174c:	1080004c 	andi	r2,r2,1
}
 8001750:	e037883a 	mov	sp,fp
 8001754:	df000017 	ldw	fp,0(sp)
 8001758:	dec00104 	addi	sp,sp,4
 800175c:	f800283a 	ret

08001760 <DE1_getLastTouchLocation>:

struct Point DE1_getLastTouchLocation()
{
 8001760:	defff704 	addi	sp,sp,-36
 8001764:	dfc00815 	stw	ra,32(sp)
 8001768:	df000715 	stw	fp,28(sp)
 800176c:	dc400615 	stw	r17,24(sp)
 8001770:	dc000515 	stw	r16,20(sp)
 8001774:	df000704 	addi	fp,sp,28
 8001778:	e13ffd15 	stw	r4,-12(fp)
	if(DE1_isScreenTouched()) {
 800177c:	80017300 	call	8001730 <DE1_isScreenTouched>
 8001780:	1000bd26 	beq	r2,zero,8001a78 <DE1_getLastTouchLocation+0x318>
		char byte1 = getcharTouch();
 8001784:	80016900 	call	8001690 <getcharTouch>
 8001788:	e0bff905 	stb	r2,-28(fp)
		if((byte1 & 0xff) == 0x80) {
 800178c:	e0bff907 	ldb	r2,-28(fp)
 8001790:	10803fcc 	andi	r2,r2,255
 8001794:	10802018 	cmpnei	r2,r2,128
 8001798:	1000051e 	bne	r2,zero,80017b0 <DE1_getLastTouchLocation+0x50>
			mouseLocation.status = RELEASED;
 800179c:	008200f4 	movhi	r2,2051
 80017a0:	10ab0e04 	addi	r2,r2,-21448
 80017a4:	00c00084 	movi	r3,2
 80017a8:	10c00015 	stw	r3,0(r2)
 80017ac:	00001606 	br	8001808 <DE1_getLastTouchLocation+0xa8>
		} else if((byte1 & 0xff) == 0x81) {
 80017b0:	e0bff907 	ldb	r2,-28(fp)
 80017b4:	10803fcc 	andi	r2,r2,255
 80017b8:	10802058 	cmpnei	r2,r2,129
 80017bc:	1000051e 	bne	r2,zero,80017d4 <DE1_getLastTouchLocation+0x74>
			mouseLocation.status = PRESSED;
 80017c0:	008200f4 	movhi	r2,2051
 80017c4:	10ab0e04 	addi	r2,r2,-21448
 80017c8:	00c00044 	movi	r3,1
 80017cc:	10c00015 	stw	r3,0(r2)
 80017d0:	00000d06 	br	8001808 <DE1_getLastTouchLocation+0xa8>
		} else {
			mouseLocation.status = NONE;
 80017d4:	008200f4 	movhi	r2,2051
 80017d8:	10ab0e04 	addi	r2,r2,-21448
 80017dc:	10000015 	stw	zero,0(r2)
			return mouseLocation;
 80017e0:	e0fffd17 	ldw	r3,-12(fp)
 80017e4:	008200f4 	movhi	r2,2051
 80017e8:	10ab0e04 	addi	r2,r2,-21448
 80017ec:	11000017 	ldw	r4,0(r2)
 80017f0:	19000015 	stw	r4,0(r3)
 80017f4:	11000117 	ldw	r4,4(r2)
 80017f8:	19000115 	stw	r4,4(r3)
 80017fc:	10800217 	ldw	r2,8(r2)
 8001800:	18800215 	stw	r2,8(r3)
 8001804:	0000a506 	br	8001a9c <DE1_getLastTouchLocation+0x33c>
		}

		char byte2 = getcharTouch();
 8001808:	80016900 	call	8001690 <getcharTouch>
 800180c:	e0bff945 	stb	r2,-27(fp)
		char byte3 = getcharTouch();
 8001810:	80016900 	call	8001690 <getcharTouch>
 8001814:	e0bff985 	stb	r2,-26(fp)
		char byte4 = getcharTouch();
 8001818:	80016900 	call	8001690 <getcharTouch>
 800181c:	e0bff9c5 	stb	r2,-25(fp)
		char byte5 = getcharTouch();
 8001820:	80016900 	call	8001690 <getcharTouch>
 8001824:	e0bffa05 	stb	r2,-24(fp)

		int x = ((double) (byte2 >> 1) + (byte3 << 7)) / 4096 * 770 + 30 + 0.5;
 8001828:	e0bff947 	ldb	r2,-27(fp)
 800182c:	1005d07a 	srai	r2,r2,1
 8001830:	10803fcc 	andi	r2,r2,255
 8001834:	1080201c 	xori	r2,r2,128
 8001838:	10bfe004 	addi	r2,r2,-128
 800183c:	1009883a 	mov	r4,r2
 8001840:	800b6280 	call	800b628 <__floatsidf>
 8001844:	1021883a 	mov	r16,r2
 8001848:	1823883a 	mov	r17,r3
 800184c:	e0bff987 	ldb	r2,-26(fp)
 8001850:	100491fa 	slli	r2,r2,7
 8001854:	1009883a 	mov	r4,r2
 8001858:	800b6280 	call	800b628 <__floatsidf>
 800185c:	100f883a 	mov	r7,r2
 8001860:	1811883a 	mov	r8,r3
 8001864:	8009883a 	mov	r4,r16
 8001868:	880b883a 	mov	r5,r17
 800186c:	380d883a 	mov	r6,r7
 8001870:	400f883a 	mov	r7,r8
 8001874:	80092000 	call	8009200 <__adddf3>
 8001878:	1009883a 	mov	r4,r2
 800187c:	180b883a 	mov	r5,r3
 8001880:	2005883a 	mov	r2,r4
 8001884:	2807883a 	mov	r3,r5
 8001888:	1009883a 	mov	r4,r2
 800188c:	180b883a 	mov	r5,r3
 8001890:	000d883a 	mov	r6,zero
 8001894:	01d02c34 	movhi	r7,16560
 8001898:	8009a9c0 	call	8009a9c <__divdf3>
 800189c:	1009883a 	mov	r4,r2
 80018a0:	180b883a 	mov	r5,r3
 80018a4:	2005883a 	mov	r2,r4
 80018a8:	2807883a 	mov	r3,r5
 80018ac:	1009883a 	mov	r4,r2
 80018b0:	180b883a 	mov	r5,r3
 80018b4:	000d883a 	mov	r6,zero
 80018b8:	01d02234 	movhi	r7,16520
 80018bc:	39c40004 	addi	r7,r7,4096
 80018c0:	800a5ac0 	call	800a5ac <__muldf3>
 80018c4:	1009883a 	mov	r4,r2
 80018c8:	180b883a 	mov	r5,r3
 80018cc:	2005883a 	mov	r2,r4
 80018d0:	2807883a 	mov	r3,r5
 80018d4:	1009883a 	mov	r4,r2
 80018d8:	180b883a 	mov	r5,r3
 80018dc:	000d883a 	mov	r6,zero
 80018e0:	01d00fb4 	movhi	r7,16446
 80018e4:	80092000 	call	8009200 <__adddf3>
 80018e8:	1009883a 	mov	r4,r2
 80018ec:	180b883a 	mov	r5,r3
 80018f0:	2005883a 	mov	r2,r4
 80018f4:	2807883a 	mov	r3,r5
 80018f8:	1009883a 	mov	r4,r2
 80018fc:	180b883a 	mov	r5,r3
 8001900:	000d883a 	mov	r6,zero
 8001904:	01cff834 	movhi	r7,16352
 8001908:	80092000 	call	8009200 <__adddf3>
 800190c:	1009883a 	mov	r4,r2
 8001910:	180b883a 	mov	r5,r3
 8001914:	2005883a 	mov	r2,r4
 8001918:	2807883a 	mov	r3,r5
 800191c:	1009883a 	mov	r4,r2
 8001920:	180b883a 	mov	r5,r3
 8001924:	800b5a00 	call	800b5a0 <__fixdfsi>
 8001928:	e0bffb15 	stw	r2,-20(fp)
		int y = ((double) (byte4 >> 1) + (byte5 << 7)) / 4096 * 480 + 0.5;
 800192c:	e0bff9c7 	ldb	r2,-25(fp)
 8001930:	1005d07a 	srai	r2,r2,1
 8001934:	10803fcc 	andi	r2,r2,255
 8001938:	1080201c 	xori	r2,r2,128
 800193c:	10bfe004 	addi	r2,r2,-128
 8001940:	1009883a 	mov	r4,r2
 8001944:	800b6280 	call	800b628 <__floatsidf>
 8001948:	1021883a 	mov	r16,r2
 800194c:	1823883a 	mov	r17,r3
 8001950:	e0bffa07 	ldb	r2,-24(fp)
 8001954:	100491fa 	slli	r2,r2,7
 8001958:	1009883a 	mov	r4,r2
 800195c:	800b6280 	call	800b628 <__floatsidf>
 8001960:	100f883a 	mov	r7,r2
 8001964:	1811883a 	mov	r8,r3
 8001968:	8009883a 	mov	r4,r16
 800196c:	880b883a 	mov	r5,r17
 8001970:	380d883a 	mov	r6,r7
 8001974:	400f883a 	mov	r7,r8
 8001978:	80092000 	call	8009200 <__adddf3>
 800197c:	1009883a 	mov	r4,r2
 8001980:	180b883a 	mov	r5,r3
 8001984:	2005883a 	mov	r2,r4
 8001988:	2807883a 	mov	r3,r5
 800198c:	1009883a 	mov	r4,r2
 8001990:	180b883a 	mov	r5,r3
 8001994:	000d883a 	mov	r6,zero
 8001998:	01d02c34 	movhi	r7,16560
 800199c:	8009a9c0 	call	8009a9c <__divdf3>
 80019a0:	1009883a 	mov	r4,r2
 80019a4:	180b883a 	mov	r5,r3
 80019a8:	2005883a 	mov	r2,r4
 80019ac:	2807883a 	mov	r3,r5
 80019b0:	1009883a 	mov	r4,r2
 80019b4:	180b883a 	mov	r5,r3
 80019b8:	000d883a 	mov	r6,zero
 80019bc:	01d01fb4 	movhi	r7,16510
 80019c0:	800a5ac0 	call	800a5ac <__muldf3>
 80019c4:	1009883a 	mov	r4,r2
 80019c8:	180b883a 	mov	r5,r3
 80019cc:	2005883a 	mov	r2,r4
 80019d0:	2807883a 	mov	r3,r5
 80019d4:	1009883a 	mov	r4,r2
 80019d8:	180b883a 	mov	r5,r3
 80019dc:	000d883a 	mov	r6,zero
 80019e0:	01cff834 	movhi	r7,16352
 80019e4:	80092000 	call	8009200 <__adddf3>
 80019e8:	1009883a 	mov	r4,r2
 80019ec:	180b883a 	mov	r5,r3
 80019f0:	2005883a 	mov	r2,r4
 80019f4:	2807883a 	mov	r3,r5
 80019f8:	1009883a 	mov	r4,r2
 80019fc:	180b883a 	mov	r5,r3
 8001a00:	800b5a00 	call	800b5a0 <__fixdfsi>
 8001a04:	e0bffc15 	stw	r2,-16(fp)

		if(x >= 0 && x <= 800 && y >= 0 && y <= 480) {
 8001a08:	e0bffb17 	ldw	r2,-20(fp)
 8001a0c:	10001016 	blt	r2,zero,8001a50 <DE1_getLastTouchLocation+0x2f0>
 8001a10:	e0bffb17 	ldw	r2,-20(fp)
 8001a14:	1080c848 	cmpgei	r2,r2,801
 8001a18:	10000d1e 	bne	r2,zero,8001a50 <DE1_getLastTouchLocation+0x2f0>
 8001a1c:	e0bffc17 	ldw	r2,-16(fp)
 8001a20:	10000b16 	blt	r2,zero,8001a50 <DE1_getLastTouchLocation+0x2f0>
 8001a24:	e0bffc17 	ldw	r2,-16(fp)
 8001a28:	10807848 	cmpgei	r2,r2,481
 8001a2c:	1000081e 	bne	r2,zero,8001a50 <DE1_getLastTouchLocation+0x2f0>
			mouseLocation.x = x;
 8001a30:	008200f4 	movhi	r2,2051
 8001a34:	10ab0e04 	addi	r2,r2,-21448
 8001a38:	e0fffb17 	ldw	r3,-20(fp)
 8001a3c:	10c00115 	stw	r3,4(r2)
			mouseLocation.y = y;
 8001a40:	008200f4 	movhi	r2,2051
 8001a44:	10ab0e04 	addi	r2,r2,-21448
 8001a48:	e0fffc17 	ldw	r3,-16(fp)
 8001a4c:	10c00215 	stw	r3,8(r2)
		}

		return mouseLocation;
 8001a50:	e0fffd17 	ldw	r3,-12(fp)
 8001a54:	008200f4 	movhi	r2,2051
 8001a58:	10ab0e04 	addi	r2,r2,-21448
 8001a5c:	11000017 	ldw	r4,0(r2)
 8001a60:	19000015 	stw	r4,0(r3)
 8001a64:	11000117 	ldw	r4,4(r2)
 8001a68:	19000115 	stw	r4,4(r3)
 8001a6c:	10800217 	ldw	r2,8(r2)
 8001a70:	18800215 	stw	r2,8(r3)
 8001a74:	00000906 	br	8001a9c <DE1_getLastTouchLocation+0x33c>

	} else {
		return mouseLocation;
 8001a78:	e0fffd17 	ldw	r3,-12(fp)
 8001a7c:	008200f4 	movhi	r2,2051
 8001a80:	10ab0e04 	addi	r2,r2,-21448
 8001a84:	11000017 	ldw	r4,0(r2)
 8001a88:	19000015 	stw	r4,0(r3)
 8001a8c:	11000117 	ldw	r4,4(r2)
 8001a90:	19000115 	stw	r4,4(r3)
 8001a94:	10800217 	ldw	r2,8(r2)
 8001a98:	18800215 	stw	r2,8(r3)
	}
}
 8001a9c:	e0bffd17 	ldw	r2,-12(fp)
 8001aa0:	e6fffe04 	addi	sp,fp,-8
 8001aa4:	dfc00317 	ldw	ra,12(sp)
 8001aa8:	df000217 	ldw	fp,8(sp)
 8001aac:	dc400117 	ldw	r17,4(sp)
 8001ab0:	dc000017 	ldw	r16,0(sp)
 8001ab4:	dec00404 	addi	sp,sp,16
 8001ab8:	f800283a 	ret

08001abc <DE1_clearLastTouchLocation>:

void DE1_clearLastTouchLocation()
{
 8001abc:	deffff04 	addi	sp,sp,-4
 8001ac0:	df000015 	stw	fp,0(sp)
 8001ac4:	d839883a 	mov	fp,sp
	mouseLocation.x = 0;
 8001ac8:	008200f4 	movhi	r2,2051
 8001acc:	10ab0e04 	addi	r2,r2,-21448
 8001ad0:	10000115 	stw	zero,4(r2)
	mouseLocation.y = 0;
 8001ad4:	008200f4 	movhi	r2,2051
 8001ad8:	10ab0e04 	addi	r2,r2,-21448
 8001adc:	10000215 	stw	zero,8(r2)
	mouseLocation.status = NONE;
 8001ae0:	008200f4 	movhi	r2,2051
 8001ae4:	10ab0e04 	addi	r2,r2,-21448
 8001ae8:	10000015 	stw	zero,0(r2)
}
 8001aec:	e037883a 	mov	sp,fp
 8001af0:	df000017 	ldw	fp,0(sp)
 8001af4:	dec00104 	addi	sp,sp,4
 8001af8:	f800283a 	ret

08001afc <setClippingBounds>:
struct Bounds* internal_clip;

/**
 * Used to set partial rerendering
 */
void setClippingBounds(struct Bounds* clip) {
 8001afc:	defffe04 	addi	sp,sp,-8
 8001b00:	df000115 	stw	fp,4(sp)
 8001b04:	df000104 	addi	fp,sp,4
 8001b08:	e13fff15 	stw	r4,-4(fp)
	internal_clip = clip;
 8001b0c:	e0bfff17 	ldw	r2,-4(fp)
 8001b10:	d0a6ff15 	stw	r2,-25604(gp)
}
 8001b14:	e037883a 	mov	sp,fp
 8001b18:	df000017 	ldw	fp,0(sp)
 8001b1c:	dec00104 	addi	sp,sp,4
 8001b20:	f800283a 	ret

08001b24 <writeAPixel>:

void writeAPixel (int x, int y, int color)
{
 8001b24:	defffb04 	addi	sp,sp,-20
 8001b28:	dfc00415 	stw	ra,16(sp)
 8001b2c:	df000315 	stw	fp,12(sp)
 8001b30:	df000304 	addi	fp,sp,12
 8001b34:	e13ffd15 	stw	r4,-12(fp)
 8001b38:	e17ffe15 	stw	r5,-8(fp)
 8001b3c:	e1bfff15 	stw	r6,-4(fp)
		DE1_writePixel(x, y, color);
 8001b40:	e13ffd17 	ldw	r4,-12(fp)
 8001b44:	e17ffe17 	ldw	r5,-8(fp)
 8001b48:	e1bfff17 	ldw	r6,-4(fp)
 8001b4c:	80012840 	call	8001284 <DE1_writePixel>
}
 8001b50:	e037883a 	mov	sp,fp
 8001b54:	dfc00117 	ldw	ra,4(sp)
 8001b58:	df000017 	ldw	fp,0(sp)
 8001b5c:	dec00204 	addi	sp,sp,8
 8001b60:	f800283a 	ret

08001b64 <readAPixel>:

int readAPixel (int x, int y)
{
 8001b64:	defffd04 	addi	sp,sp,-12
 8001b68:	df000215 	stw	fp,8(sp)
 8001b6c:	df000204 	addi	fp,sp,8
 8001b70:	e13ffe15 	stw	r4,-8(fp)
 8001b74:	e17fff15 	stw	r5,-4(fp)
	(void) x;
	(void) y;
	return 0;
 8001b78:	0005883a 	mov	r2,zero
}
 8001b7c:	e037883a 	mov	sp,fp
 8001b80:	df000017 	ldw	fp,0(sp)
 8001b84:	dec00104 	addi	sp,sp,4
 8001b88:	f800283a 	ret

08001b8c <programPalette>:

void programPalette(int PaletteNumber, int RGB)
{
 8001b8c:	defffd04 	addi	sp,sp,-12
 8001b90:	df000215 	stw	fp,8(sp)
 8001b94:	df000204 	addi	fp,sp,8
 8001b98:	e13ffe15 	stw	r4,-8(fp)
 8001b9c:	e17fff15 	stw	r5,-4(fp)
	WAIT_FOR_GRAPHICS;
 8001ba0:	0001883a 	nop
 8001ba4:	00a10034 	movhi	r2,33792
 8001ba8:	1080000b 	ldhu	r2,0(r2)
 8001bac:	10bfffcc 	andi	r2,r2,65535
 8001bb0:	1080004c 	andi	r2,r2,1
 8001bb4:	103ffb26 	beq	r2,zero,8001ba4 <__alt_data_end+0xfc001ba4>
	GraphicsColourReg = PaletteNumber;
 8001bb8:	00a10034 	movhi	r2,33792
 8001bbc:	10800384 	addi	r2,r2,14
 8001bc0:	e0fffe17 	ldw	r3,-8(fp)
 8001bc4:	10c0000d 	sth	r3,0(r2)
	GraphicsX1Reg = RGB >> 16;
 8001bc8:	00a10034 	movhi	r2,33792
 8001bcc:	10800084 	addi	r2,r2,2
 8001bd0:	e0ffff17 	ldw	r3,-4(fp)
 8001bd4:	1807d43a 	srai	r3,r3,16
 8001bd8:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = RGB;
 8001bdc:	00a10034 	movhi	r2,33792
 8001be0:	10800104 	addi	r2,r2,4
 8001be4:	e0ffff17 	ldw	r3,-4(fp)
 8001be8:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = ProgramPaletteColour;
 8001bec:	00a10034 	movhi	r2,33792
 8001bf0:	00c00404 	movi	r3,16
 8001bf4:	10c0000d 	sth	r3,0(r2)
}
 8001bf8:	e037883a 	mov	sp,fp
 8001bfc:	df000017 	ldw	fp,0(sp)
 8001c00:	dec00104 	addi	sp,sp,4
 8001c04:	f800283a 	ret

08001c08 <writeHline>:

void writeHline (int y, int x1, int x2, int color)
{
 8001c08:	defff504 	addi	sp,sp,-44
 8001c0c:	dfc00a15 	stw	ra,40(sp)
 8001c10:	df000915 	stw	fp,36(sp)
 8001c14:	df000904 	addi	fp,sp,36
 8001c18:	e13ffc15 	stw	r4,-16(fp)
 8001c1c:	e17ffd15 	stw	r5,-12(fp)
 8001c20:	e1bffe15 	stw	r6,-8(fp)
 8001c24:	e1ffff15 	stw	r7,-4(fp)
	assert(x1 <= x2);
 8001c28:	e0bffd17 	ldw	r2,-12(fp)
 8001c2c:	e0fffe17 	ldw	r3,-8(fp)
 8001c30:	1880080e 	bge	r3,r2,8001c54 <writeHline+0x4c>
 8001c34:	010200b4 	movhi	r4,2050
 8001c38:	21312a04 	addi	r4,r4,-15192
 8001c3c:	014009c4 	movi	r5,39
 8001c40:	018200b4 	movhi	r6,2050
 8001c44:	31b14904 	addi	r6,r6,-15068
 8001c48:	01c200b4 	movhi	r7,2050
 8001c4c:	39f12f04 	addi	r7,r7,-15172
 8001c50:	800bb300 	call	800bb30 <__assert_func>

	struct Bounds line;
	line.x1 = x1;
 8001c54:	e0bffd17 	ldw	r2,-12(fp)
 8001c58:	e0bff815 	stw	r2,-32(fp)
	line.x2 = x2;
 8001c5c:	e0bffe17 	ldw	r2,-8(fp)
 8001c60:	e0bff915 	stw	r2,-28(fp)
	line.y1 = y;
 8001c64:	e0bffc17 	ldw	r2,-16(fp)
 8001c68:	e0bffa15 	stw	r2,-24(fp)
	line.y2 = y;
 8001c6c:	e0bffc17 	ldw	r2,-16(fp)
 8001c70:	e0bffb15 	stw	r2,-20(fp)

	struct Bounds* result = cohen_sutherland(&line, internal_clip);
 8001c74:	d0a6ff17 	ldw	r2,-25604(gp)
 8001c78:	e0fff804 	addi	r3,fp,-32
 8001c7c:	1809883a 	mov	r4,r3
 8001c80:	100b883a 	mov	r5,r2
 8001c84:	80007f00 	call	80007f0 <cohen_sutherland>
 8001c88:	e0bff715 	stw	r2,-36(fp)

	if(result) {
 8001c8c:	e0bff717 	ldw	r2,-36(fp)
 8001c90:	10000c26 	beq	r2,zero,8001cc4 <writeHline+0xbc>
		DE1_writeHLine(result -> y1, result -> x1, result -> x2, color);
 8001c94:	e0bff717 	ldw	r2,-36(fp)
 8001c98:	11000217 	ldw	r4,8(r2)
 8001c9c:	e0bff717 	ldw	r2,-36(fp)
 8001ca0:	10c00017 	ldw	r3,0(r2)
 8001ca4:	e0bff717 	ldw	r2,-36(fp)
 8001ca8:	10800117 	ldw	r2,4(r2)
 8001cac:	180b883a 	mov	r5,r3
 8001cb0:	100d883a 	mov	r6,r2
 8001cb4:	e1ffff17 	ldw	r7,-4(fp)
 8001cb8:	80013000 	call	8001300 <DE1_writeHLine>
		free(result);
 8001cbc:	e13ff717 	ldw	r4,-36(fp)
 8001cc0:	800bd440 	call	800bd44 <free>
	}
}
 8001cc4:	e037883a 	mov	sp,fp
 8001cc8:	dfc00117 	ldw	ra,4(sp)
 8001ccc:	df000017 	ldw	fp,0(sp)
 8001cd0:	dec00204 	addi	sp,sp,8
 8001cd4:	f800283a 	ret

08001cd8 <writeVline>:

void writeVline (int x, int y1, int y2, int color)
{
 8001cd8:	defff504 	addi	sp,sp,-44
 8001cdc:	dfc00a15 	stw	ra,40(sp)
 8001ce0:	df000915 	stw	fp,36(sp)
 8001ce4:	df000904 	addi	fp,sp,36
 8001ce8:	e13ffc15 	stw	r4,-16(fp)
 8001cec:	e17ffd15 	stw	r5,-12(fp)
 8001cf0:	e1bffe15 	stw	r6,-8(fp)
 8001cf4:	e1ffff15 	stw	r7,-4(fp)
	assert(y1 <= y2);
 8001cf8:	e0bffd17 	ldw	r2,-12(fp)
 8001cfc:	e0fffe17 	ldw	r3,-8(fp)
 8001d00:	1880080e 	bge	r3,r2,8001d24 <writeVline+0x4c>
 8001d04:	010200b4 	movhi	r4,2050
 8001d08:	21312a04 	addi	r4,r4,-15192
 8001d0c:	01400e44 	movi	r5,57
 8001d10:	018200b4 	movhi	r6,2050
 8001d14:	31b14c04 	addi	r6,r6,-15056
 8001d18:	01c200b4 	movhi	r7,2050
 8001d1c:	39f13204 	addi	r7,r7,-15160
 8001d20:	800bb300 	call	800bb30 <__assert_func>

	struct Bounds line;
	line.x1 = x;
 8001d24:	e0bffc17 	ldw	r2,-16(fp)
 8001d28:	e0bff815 	stw	r2,-32(fp)
	line.x2 = x;
 8001d2c:	e0bffc17 	ldw	r2,-16(fp)
 8001d30:	e0bff915 	stw	r2,-28(fp)
	line.y1 = y1;
 8001d34:	e0bffd17 	ldw	r2,-12(fp)
 8001d38:	e0bffa15 	stw	r2,-24(fp)
	line.y2 = y2;
 8001d3c:	e0bffe17 	ldw	r2,-8(fp)
 8001d40:	e0bffb15 	stw	r2,-20(fp)

	struct Bounds* result = cohen_sutherland(&line, internal_clip);
 8001d44:	d0a6ff17 	ldw	r2,-25604(gp)
 8001d48:	e0fff804 	addi	r3,fp,-32
 8001d4c:	1809883a 	mov	r4,r3
 8001d50:	100b883a 	mov	r5,r2
 8001d54:	80007f00 	call	80007f0 <cohen_sutherland>
 8001d58:	e0bff715 	stw	r2,-36(fp)

	if(result) {
 8001d5c:	e0bff717 	ldw	r2,-36(fp)
 8001d60:	10000c26 	beq	r2,zero,8001d94 <writeVline+0xbc>
		DE1_writeVLine(result -> x1, result -> y1, result -> y2, color);
 8001d64:	e0bff717 	ldw	r2,-36(fp)
 8001d68:	11000017 	ldw	r4,0(r2)
 8001d6c:	e0bff717 	ldw	r2,-36(fp)
 8001d70:	10c00217 	ldw	r3,8(r2)
 8001d74:	e0bff717 	ldw	r2,-36(fp)
 8001d78:	10800317 	ldw	r2,12(r2)
 8001d7c:	180b883a 	mov	r5,r3
 8001d80:	100d883a 	mov	r6,r2
 8001d84:	e1ffff17 	ldw	r7,-4(fp)
 8001d88:	80014000 	call	8001400 <DE1_writeVLine>
		free(result);
 8001d8c:	e13ff717 	ldw	r4,-36(fp)
 8001d90:	800bd440 	call	800bd44 <free>
	}
}
 8001d94:	e037883a 	mov	sp,fp
 8001d98:	dfc00117 	ldw	ra,4(sp)
 8001d9c:	df000017 	ldw	fp,0(sp)
 8001da0:	dec00204 	addi	sp,sp,8
 8001da4:	f800283a 	ret

08001da8 <writeLine>:


void writeLine(int x1, int y1, int x2, int y2, int color)
{
 8001da8:	defff404 	addi	sp,sp,-48
 8001dac:	dfc00b15 	stw	ra,44(sp)
 8001db0:	df000a15 	stw	fp,40(sp)
 8001db4:	df000a04 	addi	fp,sp,40
 8001db8:	e13ffc15 	stw	r4,-16(fp)
 8001dbc:	e17ffd15 	stw	r5,-12(fp)
 8001dc0:	e1bffe15 	stw	r6,-8(fp)
 8001dc4:	e1ffff15 	stw	r7,-4(fp)
	assert(x1 <= x2);
 8001dc8:	e0bffc17 	ldw	r2,-16(fp)
 8001dcc:	e0fffe17 	ldw	r3,-8(fp)
 8001dd0:	1880080e 	bge	r3,r2,8001df4 <writeLine+0x4c>
 8001dd4:	010200b4 	movhi	r4,2050
 8001dd8:	21312a04 	addi	r4,r4,-15192
 8001ddc:	01401304 	movi	r5,76
 8001de0:	018200b4 	movhi	r6,2050
 8001de4:	31b14f04 	addi	r6,r6,-15044
 8001de8:	01c200b4 	movhi	r7,2050
 8001dec:	39f12f04 	addi	r7,r7,-15172
 8001df0:	800bb300 	call	800bb30 <__assert_func>
	assert(y1 <= y2);
 8001df4:	e0bffd17 	ldw	r2,-12(fp)
 8001df8:	e0ffff17 	ldw	r3,-4(fp)
 8001dfc:	1880080e 	bge	r3,r2,8001e20 <writeLine+0x78>
 8001e00:	010200b4 	movhi	r4,2050
 8001e04:	21312a04 	addi	r4,r4,-15192
 8001e08:	01401344 	movi	r5,77
 8001e0c:	018200b4 	movhi	r6,2050
 8001e10:	31b14f04 	addi	r6,r6,-15044
 8001e14:	01c200b4 	movhi	r7,2050
 8001e18:	39f13204 	addi	r7,r7,-15160
 8001e1c:	800bb300 	call	800bb30 <__assert_func>

	struct Bounds line;
	line.x1 = x1;
 8001e20:	e0bffc17 	ldw	r2,-16(fp)
 8001e24:	e0bff815 	stw	r2,-32(fp)
	line.x2 = x2;
 8001e28:	e0bffe17 	ldw	r2,-8(fp)
 8001e2c:	e0bff915 	stw	r2,-28(fp)
	line.y1 = y1;
 8001e30:	e0bffd17 	ldw	r2,-12(fp)
 8001e34:	e0bffa15 	stw	r2,-24(fp)
	line.y2 = y2;
 8001e38:	e0bfff17 	ldw	r2,-4(fp)
 8001e3c:	e0bffb15 	stw	r2,-20(fp)

	struct Bounds* result = cohen_sutherland(&line, internal_clip);
 8001e40:	d0a6ff17 	ldw	r2,-25604(gp)
 8001e44:	e0fff804 	addi	r3,fp,-32
 8001e48:	1809883a 	mov	r4,r3
 8001e4c:	100b883a 	mov	r5,r2
 8001e50:	80007f00 	call	80007f0 <cohen_sutherland>
 8001e54:	e0bff715 	stw	r2,-36(fp)

	if(result) {
 8001e58:	e0bff717 	ldw	r2,-36(fp)
 8001e5c:	10000e26 	beq	r2,zero,8001e98 <writeLine+0xf0>
		DE1_writeLine(result -> x1, result -> y1, result -> x2, result -> y2, color);
 8001e60:	e0bff717 	ldw	r2,-36(fp)
 8001e64:	11000017 	ldw	r4,0(r2)
 8001e68:	e0bff717 	ldw	r2,-36(fp)
 8001e6c:	11400217 	ldw	r5,8(r2)
 8001e70:	e0bff717 	ldw	r2,-36(fp)
 8001e74:	11800117 	ldw	r6,4(r2)
 8001e78:	e0bff717 	ldw	r2,-36(fp)
 8001e7c:	10c00317 	ldw	r3,12(r2)
 8001e80:	e0800217 	ldw	r2,8(fp)
 8001e84:	d8800015 	stw	r2,0(sp)
 8001e88:	180f883a 	mov	r7,r3
 8001e8c:	80015000 	call	8001500 <DE1_writeLine>
		free(result);
 8001e90:	e13ff717 	ldw	r4,-36(fp)
 8001e94:	800bd440 	call	800bd44 <free>
	}
}
 8001e98:	e037883a 	mov	sp,fp
 8001e9c:	dfc00117 	ldw	ra,4(sp)
 8001ea0:	df000017 	ldw	fp,0(sp)
 8001ea4:	dec00204 	addi	sp,sp,8
 8001ea8:	f800283a 	ret

08001eac <writeRect>:

void writeRect(int x1, int y1, int x2, int y2, int borderWidth, int color)
{
 8001eac:	defff904 	addi	sp,sp,-28
 8001eb0:	dfc00615 	stw	ra,24(sp)
 8001eb4:	df000515 	stw	fp,20(sp)
 8001eb8:	df000504 	addi	fp,sp,20
 8001ebc:	e13ffc15 	stw	r4,-16(fp)
 8001ec0:	e17ffd15 	stw	r5,-12(fp)
 8001ec4:	e1bffe15 	stw	r6,-8(fp)
 8001ec8:	e1ffff15 	stw	r7,-4(fp)
	assert(x1 <= x2);
 8001ecc:	e0bffc17 	ldw	r2,-16(fp)
 8001ed0:	e0fffe17 	ldw	r3,-8(fp)
 8001ed4:	1880080e 	bge	r3,r2,8001ef8 <writeRect+0x4c>
 8001ed8:	010200b4 	movhi	r4,2050
 8001edc:	21312a04 	addi	r4,r4,-15192
 8001ee0:	014017c4 	movi	r5,95
 8001ee4:	018200b4 	movhi	r6,2050
 8001ee8:	31b15204 	addi	r6,r6,-15032
 8001eec:	01c200b4 	movhi	r7,2050
 8001ef0:	39f12f04 	addi	r7,r7,-15172
 8001ef4:	800bb300 	call	800bb30 <__assert_func>
	assert(y1 <= y2);
 8001ef8:	e0bffd17 	ldw	r2,-12(fp)
 8001efc:	e0ffff17 	ldw	r3,-4(fp)
 8001f00:	1880080e 	bge	r3,r2,8001f24 <writeRect+0x78>
 8001f04:	010200b4 	movhi	r4,2050
 8001f08:	21312a04 	addi	r4,r4,-15192
 8001f0c:	01401804 	movi	r5,96
 8001f10:	018200b4 	movhi	r6,2050
 8001f14:	31b15204 	addi	r6,r6,-15032
 8001f18:	01c200b4 	movhi	r7,2050
 8001f1c:	39f13204 	addi	r7,r7,-15160
 8001f20:	800bb300 	call	800bb30 <__assert_func>

	int i;
	for(i = 0; i < borderWidth; i++)
 8001f24:	e03ffb15 	stw	zero,-20(fp)
 8001f28:	00002306 	br	8001fb8 <writeRect+0x10c>
	{
		writeHline(y1 + i, x1, x2, color);
 8001f2c:	e0fffd17 	ldw	r3,-12(fp)
 8001f30:	e0bffb17 	ldw	r2,-20(fp)
 8001f34:	1885883a 	add	r2,r3,r2
 8001f38:	1009883a 	mov	r4,r2
 8001f3c:	e17ffc17 	ldw	r5,-16(fp)
 8001f40:	e1bffe17 	ldw	r6,-8(fp)
 8001f44:	e1c00317 	ldw	r7,12(fp)
 8001f48:	8001c080 	call	8001c08 <writeHline>
		writeHline(y2 - i, x1, x2, color);
 8001f4c:	e0ffff17 	ldw	r3,-4(fp)
 8001f50:	e0bffb17 	ldw	r2,-20(fp)
 8001f54:	1885c83a 	sub	r2,r3,r2
 8001f58:	1009883a 	mov	r4,r2
 8001f5c:	e17ffc17 	ldw	r5,-16(fp)
 8001f60:	e1bffe17 	ldw	r6,-8(fp)
 8001f64:	e1c00317 	ldw	r7,12(fp)
 8001f68:	8001c080 	call	8001c08 <writeHline>
		writeVline(x1 + i, y1, y2, color);
 8001f6c:	e0fffc17 	ldw	r3,-16(fp)
 8001f70:	e0bffb17 	ldw	r2,-20(fp)
 8001f74:	1885883a 	add	r2,r3,r2
 8001f78:	1009883a 	mov	r4,r2
 8001f7c:	e17ffd17 	ldw	r5,-12(fp)
 8001f80:	e1bfff17 	ldw	r6,-4(fp)
 8001f84:	e1c00317 	ldw	r7,12(fp)
 8001f88:	8001cd80 	call	8001cd8 <writeVline>
		writeVline(x2 - i, y1, y2, color);
 8001f8c:	e0fffe17 	ldw	r3,-8(fp)
 8001f90:	e0bffb17 	ldw	r2,-20(fp)
 8001f94:	1885c83a 	sub	r2,r3,r2
 8001f98:	1009883a 	mov	r4,r2
 8001f9c:	e17ffd17 	ldw	r5,-12(fp)
 8001fa0:	e1bfff17 	ldw	r6,-4(fp)
 8001fa4:	e1c00317 	ldw	r7,12(fp)
 8001fa8:	8001cd80 	call	8001cd8 <writeVline>
{
	assert(x1 <= x2);
	assert(y1 <= y2);

	int i;
	for(i = 0; i < borderWidth; i++)
 8001fac:	e0bffb17 	ldw	r2,-20(fp)
 8001fb0:	10800044 	addi	r2,r2,1
 8001fb4:	e0bffb15 	stw	r2,-20(fp)
 8001fb8:	e0fffb17 	ldw	r3,-20(fp)
 8001fbc:	e0800217 	ldw	r2,8(fp)
 8001fc0:	18bfda16 	blt	r3,r2,8001f2c <__alt_data_end+0xfc001f2c>
		writeHline(y1 + i, x1, x2, color);
		writeHline(y2 - i, x1, x2, color);
		writeVline(x1 + i, y1, y2, color);
		writeVline(x2 - i, y1, y2, color);
	}
}
 8001fc4:	e037883a 	mov	sp,fp
 8001fc8:	dfc00117 	ldw	ra,4(sp)
 8001fcc:	df000017 	ldw	fp,0(sp)
 8001fd0:	dec00204 	addi	sp,sp,8
 8001fd4:	f800283a 	ret

08001fd8 <writeFilledRect>:

void writeFilledRect(int x1, int y1, int x2, int y2, int color)
{
 8001fd8:	defff404 	addi	sp,sp,-48
 8001fdc:	dfc00b15 	stw	ra,44(sp)
 8001fe0:	df000a15 	stw	fp,40(sp)
 8001fe4:	df000a04 	addi	fp,sp,40
 8001fe8:	e13ffc15 	stw	r4,-16(fp)
 8001fec:	e17ffd15 	stw	r5,-12(fp)
 8001ff0:	e1bffe15 	stw	r6,-8(fp)
 8001ff4:	e1ffff15 	stw	r7,-4(fp)
	assert(x1 <= x2);
 8001ff8:	e0bffc17 	ldw	r2,-16(fp)
 8001ffc:	e0fffe17 	ldw	r3,-8(fp)
 8002000:	1880080e 	bge	r3,r2,8002024 <writeFilledRect+0x4c>
 8002004:	010200b4 	movhi	r4,2050
 8002008:	21312a04 	addi	r4,r4,-15192
 800200c:	01401b84 	movi	r5,110
 8002010:	018200b4 	movhi	r6,2050
 8002014:	31b15504 	addi	r6,r6,-15020
 8002018:	01c200b4 	movhi	r7,2050
 800201c:	39f12f04 	addi	r7,r7,-15172
 8002020:	800bb300 	call	800bb30 <__assert_func>
	assert(y1 <= y2);
 8002024:	e0bffd17 	ldw	r2,-12(fp)
 8002028:	e0ffff17 	ldw	r3,-4(fp)
 800202c:	1880080e 	bge	r3,r2,8002050 <writeFilledRect+0x78>
 8002030:	010200b4 	movhi	r4,2050
 8002034:	21312a04 	addi	r4,r4,-15192
 8002038:	01401bc4 	movi	r5,111
 800203c:	018200b4 	movhi	r6,2050
 8002040:	31b15504 	addi	r6,r6,-15020
 8002044:	01c200b4 	movhi	r7,2050
 8002048:	39f13204 	addi	r7,r7,-15160
 800204c:	800bb300 	call	800bb30 <__assert_func>

	struct Bounds bounds;
	bounds.x1 = x1;
 8002050:	e0bffc17 	ldw	r2,-16(fp)
 8002054:	e0bff815 	stw	r2,-32(fp)
	bounds.x2 = x2;
 8002058:	e0bffe17 	ldw	r2,-8(fp)
 800205c:	e0bff915 	stw	r2,-28(fp)
	bounds.y1 = y1;
 8002060:	e0bffd17 	ldw	r2,-12(fp)
 8002064:	e0bffa15 	stw	r2,-24(fp)
	bounds.y2 = y2;
 8002068:	e0bfff17 	ldw	r2,-4(fp)
 800206c:	e0bffb15 	stw	r2,-20(fp)

	struct Bounds* result = intersect(&bounds, internal_clip);
 8002070:	d0a6ff17 	ldw	r2,-25604(gp)
 8002074:	e0fff804 	addi	r3,fp,-32
 8002078:	1809883a 	mov	r4,r3
 800207c:	100b883a 	mov	r5,r2
 8002080:	80005000 	call	8000500 <intersect>
 8002084:	e0bff715 	stw	r2,-36(fp)
	DE1_writeRect (result->x1, result->y1, result->x2, result->y2, color);
 8002088:	e0bff717 	ldw	r2,-36(fp)
 800208c:	11000017 	ldw	r4,0(r2)
 8002090:	e0bff717 	ldw	r2,-36(fp)
 8002094:	11400217 	ldw	r5,8(r2)
 8002098:	e0bff717 	ldw	r2,-36(fp)
 800209c:	11800117 	ldw	r6,4(r2)
 80020a0:	e0bff717 	ldw	r2,-36(fp)
 80020a4:	10c00317 	ldw	r3,12(r2)
 80020a8:	e0800217 	ldw	r2,8(fp)
 80020ac:	d8800015 	stw	r2,0(sp)
 80020b0:	180f883a 	mov	r7,r3
 80020b4:	80015a00 	call	80015a0 <DE1_writeRect>
	free(result);
 80020b8:	e13ff717 	ldw	r4,-36(fp)
 80020bc:	800bd440 	call	800bd44 <free>
}
 80020c0:	e037883a 	mov	sp,fp
 80020c4:	dfc00117 	ldw	ra,4(sp)
 80020c8:	df000017 	ldw	fp,0(sp)
 80020cc:	dec00204 	addi	sp,sp,8
 80020d0:	f800283a 	ret

080020d4 <clear>:

void clear() {
 80020d4:	defffd04 	addi	sp,sp,-12
 80020d8:	dfc00215 	stw	ra,8(sp)
 80020dc:	df000115 	stw	fp,4(sp)
 80020e0:	df000104 	addi	fp,sp,4
	writeFilledRect(0,0,770,480,BLACK);
 80020e4:	d8000015 	stw	zero,0(sp)
 80020e8:	0009883a 	mov	r4,zero
 80020ec:	000b883a 	mov	r5,zero
 80020f0:	0180c084 	movi	r6,770
 80020f4:	01c07804 	movi	r7,480
 80020f8:	8001fd80 	call	8001fd8 <writeFilledRect>
}
 80020fc:	e037883a 	mov	sp,fp
 8002100:	dfc00117 	ldw	ra,4(sp)
 8002104:	df000017 	ldw	fp,0(sp)
 8002108:	dec00204 	addi	sp,sp,8
 800210c:	f800283a 	ret

08002110 <writeFilledRectWithBorder>:

void writeFilledRectWithBorder(int x1, int y1, int x2, int y2, int borderWidth, int color, int colorBorder)
{
 8002110:	defff804 	addi	sp,sp,-32
 8002114:	dfc00715 	stw	ra,28(sp)
 8002118:	df000615 	stw	fp,24(sp)
 800211c:	df000604 	addi	fp,sp,24
 8002120:	e13ffc15 	stw	r4,-16(fp)
 8002124:	e17ffd15 	stw	r5,-12(fp)
 8002128:	e1bffe15 	stw	r6,-8(fp)
 800212c:	e1ffff15 	stw	r7,-4(fp)
	assert(x1 <= x2);
 8002130:	e0bffc17 	ldw	r2,-16(fp)
 8002134:	e0fffe17 	ldw	r3,-8(fp)
 8002138:	1880080e 	bge	r3,r2,800215c <writeFilledRectWithBorder+0x4c>
 800213c:	010200b4 	movhi	r4,2050
 8002140:	21312a04 	addi	r4,r4,-15192
 8002144:	01402084 	movi	r5,130
 8002148:	018200b4 	movhi	r6,2050
 800214c:	31b15904 	addi	r6,r6,-15004
 8002150:	01c200b4 	movhi	r7,2050
 8002154:	39f12f04 	addi	r7,r7,-15172
 8002158:	800bb300 	call	800bb30 <__assert_func>
	assert(y1 <= y2);
 800215c:	e0bffd17 	ldw	r2,-12(fp)
 8002160:	e0ffff17 	ldw	r3,-4(fp)
 8002164:	1880080e 	bge	r3,r2,8002188 <writeFilledRectWithBorder+0x78>
 8002168:	010200b4 	movhi	r4,2050
 800216c:	21312a04 	addi	r4,r4,-15192
 8002170:	014020c4 	movi	r5,131
 8002174:	018200b4 	movhi	r6,2050
 8002178:	31b15904 	addi	r6,r6,-15004
 800217c:	01c200b4 	movhi	r7,2050
 8002180:	39f13204 	addi	r7,r7,-15160
 8002184:	800bb300 	call	800bb30 <__assert_func>

	writeFilledRect(x1, y1, x2, y2, color);
 8002188:	e0800317 	ldw	r2,12(fp)
 800218c:	d8800015 	stw	r2,0(sp)
 8002190:	e13ffc17 	ldw	r4,-16(fp)
 8002194:	e17ffd17 	ldw	r5,-12(fp)
 8002198:	e1bffe17 	ldw	r6,-8(fp)
 800219c:	e1ffff17 	ldw	r7,-4(fp)
 80021a0:	8001fd80 	call	8001fd8 <writeFilledRect>
	writeRect(x1, y1, x2, y2, borderWidth, colorBorder);
 80021a4:	e0800217 	ldw	r2,8(fp)
 80021a8:	d8800015 	stw	r2,0(sp)
 80021ac:	e0800417 	ldw	r2,16(fp)
 80021b0:	d8800115 	stw	r2,4(sp)
 80021b4:	e13ffc17 	ldw	r4,-16(fp)
 80021b8:	e17ffd17 	ldw	r5,-12(fp)
 80021bc:	e1bffe17 	ldw	r6,-8(fp)
 80021c0:	e1ffff17 	ldw	r7,-4(fp)
 80021c4:	8001eac0 	call	8001eac <writeRect>
}
 80021c8:	e037883a 	mov	sp,fp
 80021cc:	dfc00117 	ldw	ra,4(sp)
 80021d0:	df000017 	ldw	fp,0(sp)
 80021d4:	dec00204 	addi	sp,sp,8
 80021d8:	f800283a 	ret

080021dc <writeCircle>:

void writeCircle(int x1, int y1, int r, int color)
{
 80021dc:	defff504 	addi	sp,sp,-44
 80021e0:	dfc00a15 	stw	ra,40(sp)
 80021e4:	df000915 	stw	fp,36(sp)
 80021e8:	df000904 	addi	fp,sp,36
 80021ec:	e13ffc15 	stw	r4,-16(fp)
 80021f0:	e17ffd15 	stw	r5,-12(fp)
 80021f4:	e1bffe15 	stw	r6,-8(fp)
 80021f8:	e1ffff15 	stw	r7,-4(fp)
	assert(r > 0);
 80021fc:	e0bffe17 	ldw	r2,-8(fp)
 8002200:	00800816 	blt	zero,r2,8002224 <writeCircle+0x48>
 8002204:	010200b4 	movhi	r4,2050
 8002208:	21312a04 	addi	r4,r4,-15192
 800220c:	014022c4 	movi	r5,139
 8002210:	018200b4 	movhi	r6,2050
 8002214:	31b16004 	addi	r6,r6,-14976
 8002218:	01c200b4 	movhi	r7,2050
 800221c:	39f13504 	addi	r7,r7,-15148
 8002220:	800bb300 	call	800bb30 <__assert_func>

	int x = r - 1;
 8002224:	e0bffe17 	ldw	r2,-8(fp)
 8002228:	10bfffc4 	addi	r2,r2,-1
 800222c:	e0bff715 	stw	r2,-36(fp)
	int y = 0;
 8002230:	e03ff815 	stw	zero,-32(fp)
	int dx = 1;
 8002234:	00800044 	movi	r2,1
 8002238:	e0bff915 	stw	r2,-28(fp)
	int dy = 1;
 800223c:	00800044 	movi	r2,1
 8002240:	e0bffa15 	stw	r2,-24(fp)
	int err = dx - (r << 1);
 8002244:	e0bffe17 	ldw	r2,-8(fp)
 8002248:	1085883a 	add	r2,r2,r2
 800224c:	1007883a 	mov	r3,r2
 8002250:	e0bff917 	ldw	r2,-28(fp)
 8002254:	10c5c83a 	sub	r2,r2,r3
 8002258:	e0bffb15 	stw	r2,-20(fp)

	while(x >= y) {
 800225c:	00006306 	br	80023ec <writeCircle+0x210>
		writeAPixel(x1 + x, y1 + y, color);
 8002260:	e0fffc17 	ldw	r3,-16(fp)
 8002264:	e0bff717 	ldw	r2,-36(fp)
 8002268:	1889883a 	add	r4,r3,r2
 800226c:	e0fffd17 	ldw	r3,-12(fp)
 8002270:	e0bff817 	ldw	r2,-32(fp)
 8002274:	1885883a 	add	r2,r3,r2
 8002278:	100b883a 	mov	r5,r2
 800227c:	e1bfff17 	ldw	r6,-4(fp)
 8002280:	8001b240 	call	8001b24 <writeAPixel>
		writeAPixel(x1 + y, y1 + x, color);
 8002284:	e0fffc17 	ldw	r3,-16(fp)
 8002288:	e0bff817 	ldw	r2,-32(fp)
 800228c:	1889883a 	add	r4,r3,r2
 8002290:	e0fffd17 	ldw	r3,-12(fp)
 8002294:	e0bff717 	ldw	r2,-36(fp)
 8002298:	1885883a 	add	r2,r3,r2
 800229c:	100b883a 	mov	r5,r2
 80022a0:	e1bfff17 	ldw	r6,-4(fp)
 80022a4:	8001b240 	call	8001b24 <writeAPixel>
		writeAPixel(x1 - y, y1 + x, color);
 80022a8:	e0fffc17 	ldw	r3,-16(fp)
 80022ac:	e0bff817 	ldw	r2,-32(fp)
 80022b0:	1889c83a 	sub	r4,r3,r2
 80022b4:	e0fffd17 	ldw	r3,-12(fp)
 80022b8:	e0bff717 	ldw	r2,-36(fp)
 80022bc:	1885883a 	add	r2,r3,r2
 80022c0:	100b883a 	mov	r5,r2
 80022c4:	e1bfff17 	ldw	r6,-4(fp)
 80022c8:	8001b240 	call	8001b24 <writeAPixel>
		writeAPixel(x1 - x, y1 + y, color);
 80022cc:	e0fffc17 	ldw	r3,-16(fp)
 80022d0:	e0bff717 	ldw	r2,-36(fp)
 80022d4:	1889c83a 	sub	r4,r3,r2
 80022d8:	e0fffd17 	ldw	r3,-12(fp)
 80022dc:	e0bff817 	ldw	r2,-32(fp)
 80022e0:	1885883a 	add	r2,r3,r2
 80022e4:	100b883a 	mov	r5,r2
 80022e8:	e1bfff17 	ldw	r6,-4(fp)
 80022ec:	8001b240 	call	8001b24 <writeAPixel>
		writeAPixel(x1 - x, y1 - y, color);
 80022f0:	e0fffc17 	ldw	r3,-16(fp)
 80022f4:	e0bff717 	ldw	r2,-36(fp)
 80022f8:	1889c83a 	sub	r4,r3,r2
 80022fc:	e0fffd17 	ldw	r3,-12(fp)
 8002300:	e0bff817 	ldw	r2,-32(fp)
 8002304:	1885c83a 	sub	r2,r3,r2
 8002308:	100b883a 	mov	r5,r2
 800230c:	e1bfff17 	ldw	r6,-4(fp)
 8002310:	8001b240 	call	8001b24 <writeAPixel>
		writeAPixel(x1 - y, y1 - x, color);
 8002314:	e0fffc17 	ldw	r3,-16(fp)
 8002318:	e0bff817 	ldw	r2,-32(fp)
 800231c:	1889c83a 	sub	r4,r3,r2
 8002320:	e0fffd17 	ldw	r3,-12(fp)
 8002324:	e0bff717 	ldw	r2,-36(fp)
 8002328:	1885c83a 	sub	r2,r3,r2
 800232c:	100b883a 	mov	r5,r2
 8002330:	e1bfff17 	ldw	r6,-4(fp)
 8002334:	8001b240 	call	8001b24 <writeAPixel>
		writeAPixel(x1 + y, y1 - x, color);
 8002338:	e0fffc17 	ldw	r3,-16(fp)
 800233c:	e0bff817 	ldw	r2,-32(fp)
 8002340:	1889883a 	add	r4,r3,r2
 8002344:	e0fffd17 	ldw	r3,-12(fp)
 8002348:	e0bff717 	ldw	r2,-36(fp)
 800234c:	1885c83a 	sub	r2,r3,r2
 8002350:	100b883a 	mov	r5,r2
 8002354:	e1bfff17 	ldw	r6,-4(fp)
 8002358:	8001b240 	call	8001b24 <writeAPixel>
		writeAPixel(x1 + x, y1 - y, color);
 800235c:	e0fffc17 	ldw	r3,-16(fp)
 8002360:	e0bff717 	ldw	r2,-36(fp)
 8002364:	1889883a 	add	r4,r3,r2
 8002368:	e0fffd17 	ldw	r3,-12(fp)
 800236c:	e0bff817 	ldw	r2,-32(fp)
 8002370:	1885c83a 	sub	r2,r3,r2
 8002374:	100b883a 	mov	r5,r2
 8002378:	e1bfff17 	ldw	r6,-4(fp)
 800237c:	8001b240 	call	8001b24 <writeAPixel>

		if(err <= 0) {
 8002380:	e0bffb17 	ldw	r2,-20(fp)
 8002384:	00800b16 	blt	zero,r2,80023b4 <writeCircle+0x1d8>
			y++;
 8002388:	e0bff817 	ldw	r2,-32(fp)
 800238c:	10800044 	addi	r2,r2,1
 8002390:	e0bff815 	stw	r2,-32(fp)
			err += dy;
 8002394:	e0fffb17 	ldw	r3,-20(fp)
 8002398:	e0bffa17 	ldw	r2,-24(fp)
 800239c:	1885883a 	add	r2,r3,r2
 80023a0:	e0bffb15 	stw	r2,-20(fp)
			dy += 2;
 80023a4:	e0bffa17 	ldw	r2,-24(fp)
 80023a8:	10800084 	addi	r2,r2,2
 80023ac:	e0bffa15 	stw	r2,-24(fp)
 80023b0:	00000e06 	br	80023ec <writeCircle+0x210>
		} else {
			x--;
 80023b4:	e0bff717 	ldw	r2,-36(fp)
 80023b8:	10bfffc4 	addi	r2,r2,-1
 80023bc:	e0bff715 	stw	r2,-36(fp)
			dx += 2;
 80023c0:	e0bff917 	ldw	r2,-28(fp)
 80023c4:	10800084 	addi	r2,r2,2
 80023c8:	e0bff915 	stw	r2,-28(fp)
			err += dx - (r << 1);
 80023cc:	e0bffe17 	ldw	r2,-8(fp)
 80023d0:	1085883a 	add	r2,r2,r2
 80023d4:	1007883a 	mov	r3,r2
 80023d8:	e0bff917 	ldw	r2,-28(fp)
 80023dc:	10c5c83a 	sub	r2,r2,r3
 80023e0:	e0fffb17 	ldw	r3,-20(fp)
 80023e4:	1885883a 	add	r2,r3,r2
 80023e8:	e0bffb15 	stw	r2,-20(fp)
	int y = 0;
	int dx = 1;
	int dy = 1;
	int err = dx - (r << 1);

	while(x >= y) {
 80023ec:	e0fff717 	ldw	r3,-36(fp)
 80023f0:	e0bff817 	ldw	r2,-32(fp)
 80023f4:	18bf9a0e 	bge	r3,r2,8002260 <__alt_data_end+0xfc002260>
			x--;
			dx += 2;
			err += dx - (r << 1);
		}
	}
}
 80023f8:	e037883a 	mov	sp,fp
 80023fc:	dfc00117 	ldw	ra,4(sp)
 8002400:	df000017 	ldw	fp,0(sp)
 8002404:	dec00204 	addi	sp,sp,8
 8002408:	f800283a 	ret

0800240c <writeFilledCircle>:

void writeFilledCircle(int x1, int y1, int r, int color)
{
 800240c:	defff504 	addi	sp,sp,-44
 8002410:	dfc00a15 	stw	ra,40(sp)
 8002414:	df000915 	stw	fp,36(sp)
 8002418:	df000904 	addi	fp,sp,36
 800241c:	e13ffc15 	stw	r4,-16(fp)
 8002420:	e17ffd15 	stw	r5,-12(fp)
 8002424:	e1bffe15 	stw	r6,-8(fp)
 8002428:	e1ffff15 	stw	r7,-4(fp)
	assert(r > 0);
 800242c:	e0bffe17 	ldw	r2,-8(fp)
 8002430:	00800816 	blt	zero,r2,8002454 <writeFilledCircle+0x48>
 8002434:	010200b4 	movhi	r4,2050
 8002438:	21312a04 	addi	r4,r4,-15192
 800243c:	01402ac4 	movi	r5,171
 8002440:	018200b4 	movhi	r6,2050
 8002444:	31b16304 	addi	r6,r6,-14964
 8002448:	01c200b4 	movhi	r7,2050
 800244c:	39f13504 	addi	r7,r7,-15148
 8002450:	800bb300 	call	800bb30 <__assert_func>

	int x = r - 1;
 8002454:	e0bffe17 	ldw	r2,-8(fp)
 8002458:	10bfffc4 	addi	r2,r2,-1
 800245c:	e0bff715 	stw	r2,-36(fp)
	int y = 0;
 8002460:	e03ff815 	stw	zero,-32(fp)
	int dx = 1;
 8002464:	00800044 	movi	r2,1
 8002468:	e0bff915 	stw	r2,-28(fp)
	int dy = 1;
 800246c:	00800044 	movi	r2,1
 8002470:	e0bffa15 	stw	r2,-24(fp)
	int err = dx - (r << 1);
 8002474:	e0bffe17 	ldw	r2,-8(fp)
 8002478:	1085883a 	add	r2,r2,r2
 800247c:	1007883a 	mov	r3,r2
 8002480:	e0bff917 	ldw	r2,-28(fp)
 8002484:	10c5c83a 	sub	r2,r2,r3
 8002488:	e0bffb15 	stw	r2,-20(fp)

	while(x >= y) {
 800248c:	00004b06 	br	80025bc <writeFilledCircle+0x1b0>
		writeHline(y1 + y, x1 - x, x1 + x, color);
 8002490:	e0fffd17 	ldw	r3,-12(fp)
 8002494:	e0bff817 	ldw	r2,-32(fp)
 8002498:	1889883a 	add	r4,r3,r2
 800249c:	e0fffc17 	ldw	r3,-16(fp)
 80024a0:	e0bff717 	ldw	r2,-36(fp)
 80024a4:	188bc83a 	sub	r5,r3,r2
 80024a8:	e0fffc17 	ldw	r3,-16(fp)
 80024ac:	e0bff717 	ldw	r2,-36(fp)
 80024b0:	1885883a 	add	r2,r3,r2
 80024b4:	100d883a 	mov	r6,r2
 80024b8:	e1ffff17 	ldw	r7,-4(fp)
 80024bc:	8001c080 	call	8001c08 <writeHline>
		writeHline(y1 + x, x1 - y, x1 + y, color);
 80024c0:	e0fffd17 	ldw	r3,-12(fp)
 80024c4:	e0bff717 	ldw	r2,-36(fp)
 80024c8:	1889883a 	add	r4,r3,r2
 80024cc:	e0fffc17 	ldw	r3,-16(fp)
 80024d0:	e0bff817 	ldw	r2,-32(fp)
 80024d4:	188bc83a 	sub	r5,r3,r2
 80024d8:	e0fffc17 	ldw	r3,-16(fp)
 80024dc:	e0bff817 	ldw	r2,-32(fp)
 80024e0:	1885883a 	add	r2,r3,r2
 80024e4:	100d883a 	mov	r6,r2
 80024e8:	e1ffff17 	ldw	r7,-4(fp)
 80024ec:	8001c080 	call	8001c08 <writeHline>
		writeHline(y1 - y, x1 - x, x1 + x, color);
 80024f0:	e0fffd17 	ldw	r3,-12(fp)
 80024f4:	e0bff817 	ldw	r2,-32(fp)
 80024f8:	1889c83a 	sub	r4,r3,r2
 80024fc:	e0fffc17 	ldw	r3,-16(fp)
 8002500:	e0bff717 	ldw	r2,-36(fp)
 8002504:	188bc83a 	sub	r5,r3,r2
 8002508:	e0fffc17 	ldw	r3,-16(fp)
 800250c:	e0bff717 	ldw	r2,-36(fp)
 8002510:	1885883a 	add	r2,r3,r2
 8002514:	100d883a 	mov	r6,r2
 8002518:	e1ffff17 	ldw	r7,-4(fp)
 800251c:	8001c080 	call	8001c08 <writeHline>
		writeHline(y1 - x, x1 - y, x1 + y, color);
 8002520:	e0fffd17 	ldw	r3,-12(fp)
 8002524:	e0bff717 	ldw	r2,-36(fp)
 8002528:	1889c83a 	sub	r4,r3,r2
 800252c:	e0fffc17 	ldw	r3,-16(fp)
 8002530:	e0bff817 	ldw	r2,-32(fp)
 8002534:	188bc83a 	sub	r5,r3,r2
 8002538:	e0fffc17 	ldw	r3,-16(fp)
 800253c:	e0bff817 	ldw	r2,-32(fp)
 8002540:	1885883a 	add	r2,r3,r2
 8002544:	100d883a 	mov	r6,r2
 8002548:	e1ffff17 	ldw	r7,-4(fp)
 800254c:	8001c080 	call	8001c08 <writeHline>

		if(err <= 0) {
 8002550:	e0bffb17 	ldw	r2,-20(fp)
 8002554:	00800b16 	blt	zero,r2,8002584 <writeFilledCircle+0x178>
			y++;
 8002558:	e0bff817 	ldw	r2,-32(fp)
 800255c:	10800044 	addi	r2,r2,1
 8002560:	e0bff815 	stw	r2,-32(fp)
			err += dy;
 8002564:	e0fffb17 	ldw	r3,-20(fp)
 8002568:	e0bffa17 	ldw	r2,-24(fp)
 800256c:	1885883a 	add	r2,r3,r2
 8002570:	e0bffb15 	stw	r2,-20(fp)
			dy += 2;
 8002574:	e0bffa17 	ldw	r2,-24(fp)
 8002578:	10800084 	addi	r2,r2,2
 800257c:	e0bffa15 	stw	r2,-24(fp)
 8002580:	00000e06 	br	80025bc <writeFilledCircle+0x1b0>
		} else {
			x--;
 8002584:	e0bff717 	ldw	r2,-36(fp)
 8002588:	10bfffc4 	addi	r2,r2,-1
 800258c:	e0bff715 	stw	r2,-36(fp)
			dx += 2;
 8002590:	e0bff917 	ldw	r2,-28(fp)
 8002594:	10800084 	addi	r2,r2,2
 8002598:	e0bff915 	stw	r2,-28(fp)
			err += dx - (r << 1);
 800259c:	e0bffe17 	ldw	r2,-8(fp)
 80025a0:	1085883a 	add	r2,r2,r2
 80025a4:	1007883a 	mov	r3,r2
 80025a8:	e0bff917 	ldw	r2,-28(fp)
 80025ac:	10c5c83a 	sub	r2,r2,r3
 80025b0:	e0fffb17 	ldw	r3,-20(fp)
 80025b4:	1885883a 	add	r2,r3,r2
 80025b8:	e0bffb15 	stw	r2,-20(fp)
	int y = 0;
	int dx = 1;
	int dy = 1;
	int err = dx - (r << 1);

	while(x >= y) {
 80025bc:	e0fff717 	ldw	r3,-36(fp)
 80025c0:	e0bff817 	ldw	r2,-32(fp)
 80025c4:	18bfb20e 	bge	r3,r2,8002490 <__alt_data_end+0xfc002490>
			x--;
			dx += 2;
			err += dx - (r << 1);
		}
	}
}
 80025c8:	e037883a 	mov	sp,fp
 80025cc:	dfc00117 	ldw	ra,4(sp)
 80025d0:	df000017 	ldw	fp,0(sp)
 80025d4:	dec00204 	addi	sp,sp,8
 80025d8:	f800283a 	ret

080025dc <writeFilledBottomFlatTriangle>:

void writeFilledBottomFlatTriangle(int x1, int y1, int x2, int y2, int x3, int y3, int color) {
 80025dc:	defff104 	addi	sp,sp,-60
 80025e0:	dfc00e15 	stw	ra,56(sp)
 80025e4:	df000d15 	stw	fp,52(sp)
 80025e8:	dc400c15 	stw	r17,48(sp)
 80025ec:	dc000b15 	stw	r16,44(sp)
 80025f0:	df000d04 	addi	fp,sp,52
 80025f4:	e13ffa15 	stw	r4,-24(fp)
 80025f8:	e17ffb15 	stw	r5,-20(fp)
 80025fc:	e1bffc15 	stw	r6,-16(fp)
 8002600:	e1fffd15 	stw	r7,-12(fp)
	assert(y1 <= y2);
 8002604:	e0bffb17 	ldw	r2,-20(fp)
 8002608:	e0fffd17 	ldw	r3,-12(fp)
 800260c:	1880080e 	bge	r3,r2,8002630 <writeFilledBottomFlatTriangle+0x54>
 8002610:	010200b4 	movhi	r4,2050
 8002614:	21312a04 	addi	r4,r4,-15192
 8002618:	01403184 	movi	r5,198
 800261c:	018200b4 	movhi	r6,2050
 8002620:	31b16804 	addi	r6,r6,-14944
 8002624:	01c200b4 	movhi	r7,2050
 8002628:	39f13204 	addi	r7,r7,-15160
 800262c:	800bb300 	call	800bb30 <__assert_func>
	assert(y1 <= y3);
 8002630:	e0bffb17 	ldw	r2,-20(fp)
 8002634:	e0c00317 	ldw	r3,12(fp)
 8002638:	1880080e 	bge	r3,r2,800265c <writeFilledBottomFlatTriangle+0x80>
 800263c:	010200b4 	movhi	r4,2050
 8002640:	21312a04 	addi	r4,r4,-15192
 8002644:	014031c4 	movi	r5,199
 8002648:	018200b4 	movhi	r6,2050
 800264c:	31b16804 	addi	r6,r6,-14944
 8002650:	01c200b4 	movhi	r7,2050
 8002654:	39f13704 	addi	r7,r7,-15140
 8002658:	800bb300 	call	800bb30 <__assert_func>
	assert(y2 == y3);
 800265c:	e0fffd17 	ldw	r3,-12(fp)
 8002660:	e0800317 	ldw	r2,12(fp)
 8002664:	18800826 	beq	r3,r2,8002688 <writeFilledBottomFlatTriangle+0xac>
 8002668:	010200b4 	movhi	r4,2050
 800266c:	21312a04 	addi	r4,r4,-15192
 8002670:	01403204 	movi	r5,200
 8002674:	018200b4 	movhi	r6,2050
 8002678:	31b16804 	addi	r6,r6,-14944
 800267c:	01c200b4 	movhi	r7,2050
 8002680:	39f13a04 	addi	r7,r7,-15128
 8002684:	800bb300 	call	800bb30 <__assert_func>
	assert(x2 <= x3);
 8002688:	e0bffc17 	ldw	r2,-16(fp)
 800268c:	e0c00217 	ldw	r3,8(fp)
 8002690:	1880080e 	bge	r3,r2,80026b4 <writeFilledBottomFlatTriangle+0xd8>
 8002694:	010200b4 	movhi	r4,2050
 8002698:	21312a04 	addi	r4,r4,-15192
 800269c:	01403244 	movi	r5,201
 80026a0:	018200b4 	movhi	r6,2050
 80026a4:	31b16804 	addi	r6,r6,-14944
 80026a8:	01c200b4 	movhi	r7,2050
 80026ac:	39f13d04 	addi	r7,r7,-15116
 80026b0:	800bb300 	call	800bb30 <__assert_func>

	double slope1 = ((double)(x2 - x1)) / (y2 - y1);
 80026b4:	e0fffc17 	ldw	r3,-16(fp)
 80026b8:	e0bffa17 	ldw	r2,-24(fp)
 80026bc:	1885c83a 	sub	r2,r3,r2
 80026c0:	1009883a 	mov	r4,r2
 80026c4:	800b6280 	call	800b628 <__floatsidf>
 80026c8:	1021883a 	mov	r16,r2
 80026cc:	1823883a 	mov	r17,r3
 80026d0:	e0fffd17 	ldw	r3,-12(fp)
 80026d4:	e0bffb17 	ldw	r2,-20(fp)
 80026d8:	1885c83a 	sub	r2,r3,r2
 80026dc:	1009883a 	mov	r4,r2
 80026e0:	800b6280 	call	800b628 <__floatsidf>
 80026e4:	100f883a 	mov	r7,r2
 80026e8:	1811883a 	mov	r8,r3
 80026ec:	8009883a 	mov	r4,r16
 80026f0:	880b883a 	mov	r5,r17
 80026f4:	380d883a 	mov	r6,r7
 80026f8:	400f883a 	mov	r7,r8
 80026fc:	8009a9c0 	call	8009a9c <__divdf3>
 8002700:	1009883a 	mov	r4,r2
 8002704:	180b883a 	mov	r5,r3
 8002708:	e13ff615 	stw	r4,-40(fp)
 800270c:	e17ff715 	stw	r5,-36(fp)
	double slope2 = ((double)(x3 - x1)) / (y3 - y1);
 8002710:	e0c00217 	ldw	r3,8(fp)
 8002714:	e0bffa17 	ldw	r2,-24(fp)
 8002718:	1885c83a 	sub	r2,r3,r2
 800271c:	1009883a 	mov	r4,r2
 8002720:	800b6280 	call	800b628 <__floatsidf>
 8002724:	1021883a 	mov	r16,r2
 8002728:	1823883a 	mov	r17,r3
 800272c:	e0c00317 	ldw	r3,12(fp)
 8002730:	e0bffb17 	ldw	r2,-20(fp)
 8002734:	1885c83a 	sub	r2,r3,r2
 8002738:	1009883a 	mov	r4,r2
 800273c:	800b6280 	call	800b628 <__floatsidf>
 8002740:	100f883a 	mov	r7,r2
 8002744:	1811883a 	mov	r8,r3
 8002748:	8009883a 	mov	r4,r16
 800274c:	880b883a 	mov	r5,r17
 8002750:	380d883a 	mov	r6,r7
 8002754:	400f883a 	mov	r7,r8
 8002758:	8009a9c0 	call	8009a9c <__divdf3>
 800275c:	1009883a 	mov	r4,r2
 8002760:	180b883a 	mov	r5,r3
 8002764:	e13ff815 	stw	r4,-32(fp)
 8002768:	e17ff915 	stw	r5,-28(fp)

	float currX1 = x1;
 800276c:	e13ffa17 	ldw	r4,-24(fp)
 8002770:	80090cc0 	call	80090cc <__floatsisf>
 8002774:	1007883a 	mov	r3,r2
 8002778:	e0fff315 	stw	r3,-52(fp)
	float currX2 = x1;
 800277c:	e13ffa17 	ldw	r4,-24(fp)
 8002780:	80090cc0 	call	80090cc <__floatsisf>
 8002784:	1007883a 	mov	r3,r2
 8002788:	e0fff415 	stw	r3,-48(fp)

	int y;
	for(y = y1; y <= y2; y++) {
 800278c:	e0bffb17 	ldw	r2,-20(fp)
 8002790:	e0bff515 	stw	r2,-44(fp)
 8002794:	00003106 	br	800285c <writeFilledBottomFlatTriangle+0x280>
		writeHline(y, currX1, currX2, color);
 8002798:	e13ff317 	ldw	r4,-52(fp)
 800279c:	80090540 	call	8009054 <__fixsfsi>
 80027a0:	1021883a 	mov	r16,r2
 80027a4:	e13ff417 	ldw	r4,-48(fp)
 80027a8:	80090540 	call	8009054 <__fixsfsi>
 80027ac:	e13ff517 	ldw	r4,-44(fp)
 80027b0:	800b883a 	mov	r5,r16
 80027b4:	100d883a 	mov	r6,r2
 80027b8:	e1c00417 	ldw	r7,16(fp)
 80027bc:	8001c080 	call	8001c08 <writeHline>
		currX1 += slope1;
 80027c0:	e13ff317 	ldw	r4,-52(fp)
 80027c4:	800b6f80 	call	800b6f8 <__extendsfdf2>
 80027c8:	100b883a 	mov	r5,r2
 80027cc:	180d883a 	mov	r6,r3
 80027d0:	2809883a 	mov	r4,r5
 80027d4:	300b883a 	mov	r5,r6
 80027d8:	e1bff617 	ldw	r6,-40(fp)
 80027dc:	e1fff717 	ldw	r7,-36(fp)
 80027e0:	80092000 	call	8009200 <__adddf3>
 80027e4:	1009883a 	mov	r4,r2
 80027e8:	180b883a 	mov	r5,r3
 80027ec:	2005883a 	mov	r2,r4
 80027f0:	2807883a 	mov	r3,r5
 80027f4:	1009883a 	mov	r4,r2
 80027f8:	180b883a 	mov	r5,r3
 80027fc:	800b8080 	call	800b808 <__truncdfsf2>
 8002800:	1007883a 	mov	r3,r2
 8002804:	e0fff315 	stw	r3,-52(fp)
		currX2 += slope2;
 8002808:	e13ff417 	ldw	r4,-48(fp)
 800280c:	800b6f80 	call	800b6f8 <__extendsfdf2>
 8002810:	100b883a 	mov	r5,r2
 8002814:	180d883a 	mov	r6,r3
 8002818:	2809883a 	mov	r4,r5
 800281c:	300b883a 	mov	r5,r6
 8002820:	e1bff817 	ldw	r6,-32(fp)
 8002824:	e1fff917 	ldw	r7,-28(fp)
 8002828:	80092000 	call	8009200 <__adddf3>
 800282c:	1009883a 	mov	r4,r2
 8002830:	180b883a 	mov	r5,r3
 8002834:	2005883a 	mov	r2,r4
 8002838:	2807883a 	mov	r3,r5
 800283c:	1009883a 	mov	r4,r2
 8002840:	180b883a 	mov	r5,r3
 8002844:	800b8080 	call	800b808 <__truncdfsf2>
 8002848:	1007883a 	mov	r3,r2
 800284c:	e0fff415 	stw	r3,-48(fp)

	float currX1 = x1;
	float currX2 = x1;

	int y;
	for(y = y1; y <= y2; y++) {
 8002850:	e0bff517 	ldw	r2,-44(fp)
 8002854:	10800044 	addi	r2,r2,1
 8002858:	e0bff515 	stw	r2,-44(fp)
 800285c:	e0bff517 	ldw	r2,-44(fp)
 8002860:	e0fffd17 	ldw	r3,-12(fp)
 8002864:	18bfcc0e 	bge	r3,r2,8002798 <__alt_data_end+0xfc002798>
		writeHline(y, currX1, currX2, color);
		currX1 += slope1;
		currX2 += slope2;
	}
}
 8002868:	e6fffe04 	addi	sp,fp,-8
 800286c:	dfc00317 	ldw	ra,12(sp)
 8002870:	df000217 	ldw	fp,8(sp)
 8002874:	dc400117 	ldw	r17,4(sp)
 8002878:	dc000017 	ldw	r16,0(sp)
 800287c:	dec00404 	addi	sp,sp,16
 8002880:	f800283a 	ret

08002884 <writeFilledTopFlatTriangle>:

void writeFilledTopFlatTriangle(int x1, int y1, int x2, int y2, int x3, int y3, int color) {
 8002884:	defff104 	addi	sp,sp,-60
 8002888:	dfc00e15 	stw	ra,56(sp)
 800288c:	df000d15 	stw	fp,52(sp)
 8002890:	dc400c15 	stw	r17,48(sp)
 8002894:	dc000b15 	stw	r16,44(sp)
 8002898:	df000d04 	addi	fp,sp,52
 800289c:	e13ffa15 	stw	r4,-24(fp)
 80028a0:	e17ffb15 	stw	r5,-20(fp)
 80028a4:	e1bffc15 	stw	r6,-16(fp)
 80028a8:	e1fffd15 	stw	r7,-12(fp)
	assert(y1 == y2);
 80028ac:	e0fffb17 	ldw	r3,-20(fp)
 80028b0:	e0bffd17 	ldw	r2,-12(fp)
 80028b4:	18800826 	beq	r3,r2,80028d8 <writeFilledTopFlatTriangle+0x54>
 80028b8:	010200b4 	movhi	r4,2050
 80028bc:	21312a04 	addi	r4,r4,-15192
 80028c0:	01403684 	movi	r5,218
 80028c4:	018200b4 	movhi	r6,2050
 80028c8:	31b17004 	addi	r6,r6,-14912
 80028cc:	01c200b4 	movhi	r7,2050
 80028d0:	39f14004 	addi	r7,r7,-15104
 80028d4:	800bb300 	call	800bb30 <__assert_func>
	assert(y3 >= y2);
 80028d8:	e0c00317 	ldw	r3,12(fp)
 80028dc:	e0bffd17 	ldw	r2,-12(fp)
 80028e0:	1880080e 	bge	r3,r2,8002904 <writeFilledTopFlatTriangle+0x80>
 80028e4:	010200b4 	movhi	r4,2050
 80028e8:	21312a04 	addi	r4,r4,-15192
 80028ec:	014036c4 	movi	r5,219
 80028f0:	018200b4 	movhi	r6,2050
 80028f4:	31b17004 	addi	r6,r6,-14912
 80028f8:	01c200b4 	movhi	r7,2050
 80028fc:	39f14304 	addi	r7,r7,-15092
 8002900:	800bb300 	call	800bb30 <__assert_func>
	assert(y3 >= y1);
 8002904:	e0c00317 	ldw	r3,12(fp)
 8002908:	e0bffb17 	ldw	r2,-20(fp)
 800290c:	1880080e 	bge	r3,r2,8002930 <writeFilledTopFlatTriangle+0xac>
 8002910:	010200b4 	movhi	r4,2050
 8002914:	21312a04 	addi	r4,r4,-15192
 8002918:	01403704 	movi	r5,220
 800291c:	018200b4 	movhi	r6,2050
 8002920:	31b17004 	addi	r6,r6,-14912
 8002924:	01c200b4 	movhi	r7,2050
 8002928:	39f14604 	addi	r7,r7,-15080
 800292c:	800bb300 	call	800bb30 <__assert_func>
	assert(x1 <= x2);
 8002930:	e0bffa17 	ldw	r2,-24(fp)
 8002934:	e0fffc17 	ldw	r3,-16(fp)
 8002938:	1880080e 	bge	r3,r2,800295c <writeFilledTopFlatTriangle+0xd8>
 800293c:	010200b4 	movhi	r4,2050
 8002940:	21312a04 	addi	r4,r4,-15192
 8002944:	01403744 	movi	r5,221
 8002948:	018200b4 	movhi	r6,2050
 800294c:	31b17004 	addi	r6,r6,-14912
 8002950:	01c200b4 	movhi	r7,2050
 8002954:	39f12f04 	addi	r7,r7,-15172
 8002958:	800bb300 	call	800bb30 <__assert_func>

	double slope1 = ((double)(x3 - x1)) / (y3 - y1);
 800295c:	e0c00217 	ldw	r3,8(fp)
 8002960:	e0bffa17 	ldw	r2,-24(fp)
 8002964:	1885c83a 	sub	r2,r3,r2
 8002968:	1009883a 	mov	r4,r2
 800296c:	800b6280 	call	800b628 <__floatsidf>
 8002970:	1021883a 	mov	r16,r2
 8002974:	1823883a 	mov	r17,r3
 8002978:	e0c00317 	ldw	r3,12(fp)
 800297c:	e0bffb17 	ldw	r2,-20(fp)
 8002980:	1885c83a 	sub	r2,r3,r2
 8002984:	1009883a 	mov	r4,r2
 8002988:	800b6280 	call	800b628 <__floatsidf>
 800298c:	100f883a 	mov	r7,r2
 8002990:	1811883a 	mov	r8,r3
 8002994:	8009883a 	mov	r4,r16
 8002998:	880b883a 	mov	r5,r17
 800299c:	380d883a 	mov	r6,r7
 80029a0:	400f883a 	mov	r7,r8
 80029a4:	8009a9c0 	call	8009a9c <__divdf3>
 80029a8:	1009883a 	mov	r4,r2
 80029ac:	180b883a 	mov	r5,r3
 80029b0:	e13ff615 	stw	r4,-40(fp)
 80029b4:	e17ff715 	stw	r5,-36(fp)
	double slope2 = ((double)(x3 - x2)) / (y3 - y2);
 80029b8:	e0c00217 	ldw	r3,8(fp)
 80029bc:	e0bffc17 	ldw	r2,-16(fp)
 80029c0:	1885c83a 	sub	r2,r3,r2
 80029c4:	1009883a 	mov	r4,r2
 80029c8:	800b6280 	call	800b628 <__floatsidf>
 80029cc:	1021883a 	mov	r16,r2
 80029d0:	1823883a 	mov	r17,r3
 80029d4:	e0c00317 	ldw	r3,12(fp)
 80029d8:	e0bffd17 	ldw	r2,-12(fp)
 80029dc:	1885c83a 	sub	r2,r3,r2
 80029e0:	1009883a 	mov	r4,r2
 80029e4:	800b6280 	call	800b628 <__floatsidf>
 80029e8:	100f883a 	mov	r7,r2
 80029ec:	1811883a 	mov	r8,r3
 80029f0:	8009883a 	mov	r4,r16
 80029f4:	880b883a 	mov	r5,r17
 80029f8:	380d883a 	mov	r6,r7
 80029fc:	400f883a 	mov	r7,r8
 8002a00:	8009a9c0 	call	8009a9c <__divdf3>
 8002a04:	1009883a 	mov	r4,r2
 8002a08:	180b883a 	mov	r5,r3
 8002a0c:	e13ff815 	stw	r4,-32(fp)
 8002a10:	e17ff915 	stw	r5,-28(fp)

	float currX1 = x3;
 8002a14:	e1000217 	ldw	r4,8(fp)
 8002a18:	80090cc0 	call	80090cc <__floatsisf>
 8002a1c:	1007883a 	mov	r3,r2
 8002a20:	e0fff315 	stw	r3,-52(fp)
	float currX2 = x3;
 8002a24:	e1000217 	ldw	r4,8(fp)
 8002a28:	80090cc0 	call	80090cc <__floatsisf>
 8002a2c:	1007883a 	mov	r3,r2
 8002a30:	e0fff415 	stw	r3,-48(fp)

	int y;
	for(y = y3; y >= y2; y--) {
 8002a34:	e0800317 	ldw	r2,12(fp)
 8002a38:	e0bff515 	stw	r2,-44(fp)
 8002a3c:	00003106 	br	8002b04 <writeFilledTopFlatTriangle+0x280>
		writeHline(y, currX1, currX2, color);
 8002a40:	e13ff317 	ldw	r4,-52(fp)
 8002a44:	80090540 	call	8009054 <__fixsfsi>
 8002a48:	1021883a 	mov	r16,r2
 8002a4c:	e13ff417 	ldw	r4,-48(fp)
 8002a50:	80090540 	call	8009054 <__fixsfsi>
 8002a54:	e13ff517 	ldw	r4,-44(fp)
 8002a58:	800b883a 	mov	r5,r16
 8002a5c:	100d883a 	mov	r6,r2
 8002a60:	e1c00417 	ldw	r7,16(fp)
 8002a64:	8001c080 	call	8001c08 <writeHline>
		currX1 -= slope1;
 8002a68:	e13ff317 	ldw	r4,-52(fp)
 8002a6c:	800b6f80 	call	800b6f8 <__extendsfdf2>
 8002a70:	100b883a 	mov	r5,r2
 8002a74:	180d883a 	mov	r6,r3
 8002a78:	2809883a 	mov	r4,r5
 8002a7c:	300b883a 	mov	r5,r6
 8002a80:	e1bff617 	ldw	r6,-40(fp)
 8002a84:	e1fff717 	ldw	r7,-36(fp)
 8002a88:	800acd00 	call	800acd0 <__subdf3>
 8002a8c:	1009883a 	mov	r4,r2
 8002a90:	180b883a 	mov	r5,r3
 8002a94:	2005883a 	mov	r2,r4
 8002a98:	2807883a 	mov	r3,r5
 8002a9c:	1009883a 	mov	r4,r2
 8002aa0:	180b883a 	mov	r5,r3
 8002aa4:	800b8080 	call	800b808 <__truncdfsf2>
 8002aa8:	1007883a 	mov	r3,r2
 8002aac:	e0fff315 	stw	r3,-52(fp)
		currX2 -= slope2;
 8002ab0:	e13ff417 	ldw	r4,-48(fp)
 8002ab4:	800b6f80 	call	800b6f8 <__extendsfdf2>
 8002ab8:	100b883a 	mov	r5,r2
 8002abc:	180d883a 	mov	r6,r3
 8002ac0:	2809883a 	mov	r4,r5
 8002ac4:	300b883a 	mov	r5,r6
 8002ac8:	e1bff817 	ldw	r6,-32(fp)
 8002acc:	e1fff917 	ldw	r7,-28(fp)
 8002ad0:	800acd00 	call	800acd0 <__subdf3>
 8002ad4:	1009883a 	mov	r4,r2
 8002ad8:	180b883a 	mov	r5,r3
 8002adc:	2005883a 	mov	r2,r4
 8002ae0:	2807883a 	mov	r3,r5
 8002ae4:	1009883a 	mov	r4,r2
 8002ae8:	180b883a 	mov	r5,r3
 8002aec:	800b8080 	call	800b808 <__truncdfsf2>
 8002af0:	1007883a 	mov	r3,r2
 8002af4:	e0fff415 	stw	r3,-48(fp)

	float currX1 = x3;
	float currX2 = x3;

	int y;
	for(y = y3; y >= y2; y--) {
 8002af8:	e0bff517 	ldw	r2,-44(fp)
 8002afc:	10bfffc4 	addi	r2,r2,-1
 8002b00:	e0bff515 	stw	r2,-44(fp)
 8002b04:	e0fff517 	ldw	r3,-44(fp)
 8002b08:	e0bffd17 	ldw	r2,-12(fp)
 8002b0c:	18bfcc0e 	bge	r3,r2,8002a40 <__alt_data_end+0xfc002a40>
		writeHline(y, currX1, currX2, color);
		currX1 -= slope1;
		currX2 -= slope2;
	}
}
 8002b10:	e6fffe04 	addi	sp,fp,-8
 8002b14:	dfc00317 	ldw	ra,12(sp)
 8002b18:	df000217 	ldw	fp,8(sp)
 8002b1c:	dc400117 	ldw	r17,4(sp)
 8002b20:	dc000017 	ldw	r16,0(sp)
 8002b24:	dec00404 	addi	sp,sp,16
 8002b28:	f800283a 	ret

08002b2c <update_treble>:

#include "Equalizer.h"

// Takes in a value and sets Treble_Out to be used by the equalizer
// Value should be between 0 and 5 inclusive (0 = no treble, 5 = large amount)
void update_treble(signed char value) {
 8002b2c:	defffd04 	addi	sp,sp,-12
 8002b30:	df000215 	stw	fp,8(sp)
 8002b34:	df000204 	addi	fp,sp,8
 8002b38:	2005883a 	mov	r2,r4
 8002b3c:	e0bfff05 	stb	r2,-4(fp)
	signed char treble = value;
 8002b40:	e0bfff03 	ldbu	r2,-4(fp)
 8002b44:	e0bffe05 	stb	r2,-8(fp)
	if (treble > 5) {
 8002b48:	e0bffe07 	ldb	r2,-8(fp)
 8002b4c:	10800190 	cmplti	r2,r2,6
 8002b50:	1000021e 	bne	r2,zero,8002b5c <update_treble+0x30>
		treble = 5;
 8002b54:	00800144 	movi	r2,5
 8002b58:	e0bffe05 	stb	r2,-8(fp)
	}
	if (treble < 0) {
 8002b5c:	e0bffe07 	ldb	r2,-8(fp)
 8002b60:	1000010e 	bge	r2,zero,8002b68 <update_treble+0x3c>
		treble = 0;
 8002b64:	e03ffe05 	stb	zero,-8(fp)
	}
	Treble_Out = treble;
 8002b68:	00800c04 	movi	r2,48
 8002b6c:	e0fffe03 	ldbu	r3,-8(fp)
 8002b70:	10c00005 	stb	r3,0(r2)
}
 8002b74:	e037883a 	mov	sp,fp
 8002b78:	df000017 	ldw	fp,0(sp)
 8002b7c:	dec00104 	addi	sp,sp,4
 8002b80:	f800283a 	ret

08002b84 <update_bass>:

// Takes in a value and sets Bass_Out to be used by the equalizer
// Value should be between 0 and 5 inclusive (0 = no bass, 5 = large amount)
void update_bass(signed char value) {
 8002b84:	defffd04 	addi	sp,sp,-12
 8002b88:	df000215 	stw	fp,8(sp)
 8002b8c:	df000204 	addi	fp,sp,8
 8002b90:	2005883a 	mov	r2,r4
 8002b94:	e0bfff05 	stb	r2,-4(fp)
	signed char bass = value;
 8002b98:	e0bfff03 	ldbu	r2,-4(fp)
 8002b9c:	e0bffe05 	stb	r2,-8(fp)
	if (bass > 5) {
 8002ba0:	e0bffe07 	ldb	r2,-8(fp)
 8002ba4:	10800190 	cmplti	r2,r2,6
 8002ba8:	1000021e 	bne	r2,zero,8002bb4 <update_bass+0x30>
		bass = 5;
 8002bac:	00800144 	movi	r2,5
 8002bb0:	e0bffe05 	stb	r2,-8(fp)
	}
	if (bass < 0) {
 8002bb4:	e0bffe07 	ldb	r2,-8(fp)
 8002bb8:	1000010e 	bge	r2,zero,8002bc0 <update_bass+0x3c>
		bass = 0;
 8002bbc:	e03ffe05 	stb	zero,-8(fp)
	}
	Bass_Out = bass;
 8002bc0:	00801004 	movi	r2,64
 8002bc4:	e0fffe03 	ldbu	r3,-8(fp)
 8002bc8:	10c00005 	stb	r3,0(r2)
}
 8002bcc:	e037883a 	mov	sp,fp
 8002bd0:	df000017 	ldw	fp,0(sp)
 8002bd4:	dec00104 	addi	sp,sp,4
 8002bd8:	f800283a 	ret

08002bdc <get_treble>:

// Returns the current value of Treble_Out
signed char get_treble(void) {
 8002bdc:	defffe04 	addi	sp,sp,-8
 8002be0:	df000115 	stw	fp,4(sp)
 8002be4:	df000104 	addi	fp,sp,4
	signed char treble = Treble_Out;
 8002be8:	00800c04 	movi	r2,48
 8002bec:	10800003 	ldbu	r2,0(r2)
 8002bf0:	e0bfff05 	stb	r2,-4(fp)
	return treble;
 8002bf4:	e0bfff03 	ldbu	r2,-4(fp)
}
 8002bf8:	e037883a 	mov	sp,fp
 8002bfc:	df000017 	ldw	fp,0(sp)
 8002c00:	dec00104 	addi	sp,sp,4
 8002c04:	f800283a 	ret

08002c08 <get_bass>:

// Returns the current value of Bass_Out
signed char get_bass(void) {
 8002c08:	defffe04 	addi	sp,sp,-8
 8002c0c:	df000115 	stw	fp,4(sp)
 8002c10:	df000104 	addi	fp,sp,4
	signed char bass = Bass_Out;
 8002c14:	00801004 	movi	r2,64
 8002c18:	10800003 	ldbu	r2,0(r2)
 8002c1c:	e0bfff05 	stb	r2,-4(fp)
	return bass;
 8002c20:	e0bfff03 	ldbu	r2,-4(fp)
}
 8002c24:	e037883a 	mov	sp,fp
 8002c28:	df000017 	ldw	fp,0(sp)
 8002c2c:	dec00104 	addi	sp,sp,4
 8002c30:	f800283a 	ret

08002c34 <Event_ctor>:
#include "Event.h"

static void* Event_ctor(void* _self, va_list* app)
{
 8002c34:	defffb04 	addi	sp,sp,-20
 8002c38:	dfc00415 	stw	ra,16(sp)
 8002c3c:	df000315 	stw	fp,12(sp)
 8002c40:	df000304 	addi	fp,sp,12
 8002c44:	e13ffe15 	stw	r4,-8(fp)
 8002c48:	e17fff15 	stw	r5,-4(fp)
  struct Event* self = super_ctor(Event, _self, app);
 8002c4c:	d0a70117 	ldw	r2,-25596(gp)
 8002c50:	1009883a 	mov	r4,r2
 8002c54:	e17ffe17 	ldw	r5,-8(fp)
 8002c58:	e1bfff17 	ldw	r6,-4(fp)
 8002c5c:	80054180 	call	8005418 <super_ctor>
 8002c60:	e0bffd15 	stw	r2,-12(fp)
  self -> type = va_arg(*app, int);
 8002c64:	e0bfff17 	ldw	r2,-4(fp)
 8002c68:	10800017 	ldw	r2,0(r2)
 8002c6c:	11000104 	addi	r4,r2,4
 8002c70:	e0ffff17 	ldw	r3,-4(fp)
 8002c74:	19000015 	stw	r4,0(r3)
 8002c78:	10c00017 	ldw	r3,0(r2)
 8002c7c:	e0bffd17 	ldw	r2,-12(fp)
 8002c80:	10c00115 	stw	r3,4(r2)

  return self;
 8002c84:	e0bffd17 	ldw	r2,-12(fp)
}
 8002c88:	e037883a 	mov	sp,fp
 8002c8c:	dfc00117 	ldw	ra,4(sp)
 8002c90:	df000017 	ldw	fp,0(sp)
 8002c94:	dec00204 	addi	sp,sp,8
 8002c98:	f800283a 	ret

08002c9c <EventClass_ctor>:

static void* EventClass_ctor(void* _self, va_list* app)
{
 8002c9c:	defffb04 	addi	sp,sp,-20
 8002ca0:	dfc00415 	stw	ra,16(sp)
 8002ca4:	df000315 	stw	fp,12(sp)
 8002ca8:	df000304 	addi	fp,sp,12
 8002cac:	e13ffe15 	stw	r4,-8(fp)
 8002cb0:	e17fff15 	stw	r5,-4(fp)
  struct EventClass* self = super_ctor(EventClass, _self, app);
 8002cb4:	d0a70017 	ldw	r2,-25600(gp)
 8002cb8:	1009883a 	mov	r4,r2
 8002cbc:	e17ffe17 	ldw	r5,-8(fp)
 8002cc0:	e1bfff17 	ldw	r6,-4(fp)
 8002cc4:	80054180 	call	8005418 <super_ctor>
 8002cc8:	e0bffd15 	stw	r2,-12(fp)

  return self;
 8002ccc:	e0bffd17 	ldw	r2,-12(fp)
}
 8002cd0:	e037883a 	mov	sp,fp
 8002cd4:	dfc00117 	ldw	ra,4(sp)
 8002cd8:	df000017 	ldw	fp,0(sp)
 8002cdc:	dec00204 	addi	sp,sp,8
 8002ce0:	f800283a 	ret

08002ce4 <initEvent>:

const void* EventClass, *Event;

void initEvent()
{
 8002ce4:	defffb04 	addi	sp,sp,-20
 8002ce8:	dfc00415 	stw	ra,16(sp)
 8002cec:	df000315 	stw	fp,12(sp)
 8002cf0:	df000304 	addi	fp,sp,12
  if(!EventClass)
 8002cf4:	d0a70017 	ldw	r2,-25600(gp)
 8002cf8:	1000131e 	bne	r2,zero,8002d48 <initEvent+0x64>
  {
    EventClass = new(Class, "EventClass", Class, sizeof(struct EventClass), ctor, EventClass_ctor, 0);
 8002cfc:	008200f4 	movhi	r2,2051
 8002d00:	10a3df04 	addi	r2,r2,-28804
 8002d04:	11000017 	ldw	r4,0(r2)
 8002d08:	008200f4 	movhi	r2,2051
 8002d0c:	10a3df04 	addi	r2,r2,-28804
 8002d10:	10c00017 	ldw	r3,0(r2)
 8002d14:	00820034 	movhi	r2,2048
 8002d18:	1094e904 	addi	r2,r2,21412
 8002d1c:	d8800015 	stw	r2,0(sp)
 8002d20:	00820034 	movhi	r2,2048
 8002d24:	108b2704 	addi	r2,r2,11420
 8002d28:	d8800115 	stw	r2,4(sp)
 8002d2c:	d8000215 	stw	zero,8(sp)
 8002d30:	014200b4 	movhi	r5,2050
 8002d34:	29717704 	addi	r5,r5,-14884
 8002d38:	180d883a 	mov	r6,r3
 8002d3c:	01c00704 	movi	r7,28
 8002d40:	80052900 	call	8005290 <new>
 8002d44:	d0a70015 	stw	r2,-25600(gp)
  }
  if(!Event)
 8002d48:	d0a70117 	ldw	r2,-25596(gp)
 8002d4c:	1000111e 	bne	r2,zero,8002d94 <initEvent+0xb0>
  {
    Event = new(EventClass, "Event", Object, sizeof(struct Event), ctor, Event_ctor, 0);
 8002d50:	d1270017 	ldw	r4,-25600(gp)
 8002d54:	008200f4 	movhi	r2,2051
 8002d58:	10a3de04 	addi	r2,r2,-28808
 8002d5c:	10c00017 	ldw	r3,0(r2)
 8002d60:	00820034 	movhi	r2,2048
 8002d64:	1094e904 	addi	r2,r2,21412
 8002d68:	d8800015 	stw	r2,0(sp)
 8002d6c:	00820034 	movhi	r2,2048
 8002d70:	108b0d04 	addi	r2,r2,11316
 8002d74:	d8800115 	stw	r2,4(sp)
 8002d78:	d8000215 	stw	zero,8(sp)
 8002d7c:	014200b4 	movhi	r5,2050
 8002d80:	29717a04 	addi	r5,r5,-14872
 8002d84:	180d883a 	mov	r6,r3
 8002d88:	01c00204 	movi	r7,8
 8002d8c:	80052900 	call	8005290 <new>
 8002d90:	d0a70115 	stw	r2,-25596(gp)
  }
}
 8002d94:	e037883a 	mov	sp,fp
 8002d98:	dfc00117 	ldw	ra,4(sp)
 8002d9c:	df000017 	ldw	fp,0(sp)
 8002da0:	dec00204 	addi	sp,sp,8
 8002da4:	f800283a 	ret

08002da8 <addEvent>:
#include <stdlib.h>

#include "View.h"

void addEvent(struct EventHandler* handler, void* event)
{
 8002da8:	defffb04 	addi	sp,sp,-20
 8002dac:	dfc00415 	stw	ra,16(sp)
 8002db0:	df000315 	stw	fp,12(sp)
 8002db4:	df000304 	addi	fp,sp,12
 8002db8:	e13ffe15 	stw	r4,-8(fp)
 8002dbc:	e17fff15 	stw	r5,-4(fp)
  struct EventWrapper* wrapper = malloc(sizeof(struct EventWrapper));
 8002dc0:	01000204 	movi	r4,8
 8002dc4:	800bd300 	call	800bd30 <malloc>
 8002dc8:	e0bffd15 	stw	r2,-12(fp)

  wrapper -> event = event;
 8002dcc:	e0bffd17 	ldw	r2,-12(fp)
 8002dd0:	e0ffff17 	ldw	r3,-4(fp)
 8002dd4:	10c00115 	stw	r3,4(r2)
  wrapper -> next = 0;
 8002dd8:	e0bffd17 	ldw	r2,-12(fp)
 8002ddc:	10000015 	stw	zero,0(r2)

  if(handler -> tail == 0) {
 8002de0:	e0bffe17 	ldw	r2,-8(fp)
 8002de4:	10800217 	ldw	r2,8(r2)
 8002de8:	1000081e 	bne	r2,zero,8002e0c <addEvent+0x64>
    handler -> head = handler -> tail = wrapper;
 8002dec:	e0bffe17 	ldw	r2,-8(fp)
 8002df0:	e0fffd17 	ldw	r3,-12(fp)
 8002df4:	10c00215 	stw	r3,8(r2)
 8002df8:	e0bffe17 	ldw	r2,-8(fp)
 8002dfc:	10c00217 	ldw	r3,8(r2)
 8002e00:	e0bffe17 	ldw	r2,-8(fp)
 8002e04:	10c00115 	stw	r3,4(r2)
 8002e08:	00000706 	br	8002e28 <addEvent+0x80>
  } else {
    handler -> tail -> next = wrapper;
 8002e0c:	e0bffe17 	ldw	r2,-8(fp)
 8002e10:	10800217 	ldw	r2,8(r2)
 8002e14:	e0fffd17 	ldw	r3,-12(fp)
 8002e18:	10c00015 	stw	r3,0(r2)
    handler -> tail = wrapper;
 8002e1c:	e0bffe17 	ldw	r2,-8(fp)
 8002e20:	e0fffd17 	ldw	r3,-12(fp)
 8002e24:	10c00215 	stw	r3,8(r2)
  }
}
 8002e28:	e037883a 	mov	sp,fp
 8002e2c:	dfc00117 	ldw	ra,4(sp)
 8002e30:	df000017 	ldw	fp,0(sp)
 8002e34:	dec00204 	addi	sp,sp,8
 8002e38:	f800283a 	ret

08002e3c <consumeEvents>:

void consumeEvents(struct EventHandler* handler)
{
 8002e3c:	defffb04 	addi	sp,sp,-20
 8002e40:	dfc00415 	stw	ra,16(sp)
 8002e44:	df000315 	stw	fp,12(sp)
 8002e48:	df000304 	addi	fp,sp,12
 8002e4c:	e13fff15 	stw	r4,-4(fp)
  struct EventWrapper* next = handler -> head;
 8002e50:	e0bfff17 	ldw	r2,-4(fp)
 8002e54:	10800117 	ldw	r2,4(r2)
 8002e58:	e0bffd15 	stw	r2,-12(fp)
  while(next)
 8002e5c:	00000c06 	br	8002e90 <consumeEvents+0x54>
  {
    propagateEvent(handler, next->event);
 8002e60:	e0bffd17 	ldw	r2,-12(fp)
 8002e64:	10800117 	ldw	r2,4(r2)
 8002e68:	e13fff17 	ldw	r4,-4(fp)
 8002e6c:	100b883a 	mov	r5,r2
 8002e70:	8002f900 	call	8002f90 <propagateEvent>
    struct EventWrapper* temp = next;
 8002e74:	e0bffd17 	ldw	r2,-12(fp)
 8002e78:	e0bffe15 	stw	r2,-8(fp)
    next = next->next;
 8002e7c:	e0bffd17 	ldw	r2,-12(fp)
 8002e80:	10800017 	ldw	r2,0(r2)
 8002e84:	e0bffd15 	stw	r2,-12(fp)
    free(temp);
 8002e88:	e13ffe17 	ldw	r4,-8(fp)
 8002e8c:	800bd440 	call	800bd44 <free>
}

void consumeEvents(struct EventHandler* handler)
{
  struct EventWrapper* next = handler -> head;
  while(next)
 8002e90:	e0bffd17 	ldw	r2,-12(fp)
 8002e94:	103ff21e 	bne	r2,zero,8002e60 <__alt_data_end+0xfc002e60>
    propagateEvent(handler, next->event);
    struct EventWrapper* temp = next;
    next = next->next;
    free(temp);
  }
  handler->head = 0;
 8002e98:	e0bfff17 	ldw	r2,-4(fp)
 8002e9c:	10000115 	stw	zero,4(r2)
  handler->tail = 0;
 8002ea0:	e0bfff17 	ldw	r2,-4(fp)
 8002ea4:	10000215 	stw	zero,8(r2)
}
 8002ea8:	e037883a 	mov	sp,fp
 8002eac:	dfc00117 	ldw	ra,4(sp)
 8002eb0:	df000017 	ldw	fp,0(sp)
 8002eb4:	dec00204 	addi	sp,sp,8
 8002eb8:	f800283a 	ret

08002ebc <propagateChildren>:

int propagateChildren(struct EventHandler* handler, struct View* view, void* _event)
{
 8002ebc:	defff604 	addi	sp,sp,-40
 8002ec0:	dfc00915 	stw	ra,36(sp)
 8002ec4:	df000815 	stw	fp,32(sp)
 8002ec8:	df000804 	addi	fp,sp,32
 8002ecc:	e13ffd15 	stw	r4,-12(fp)
 8002ed0:	e17ffe15 	stw	r5,-8(fp)
 8002ed4:	e1bfff15 	stw	r6,-4(fp)
  struct Event* event = _event;
 8002ed8:	e0bfff17 	ldw	r2,-4(fp)
 8002edc:	e0bffa15 	stw	r2,-24(fp)

  struct EventListener* nextListener = view->listenerHead;
 8002ee0:	e0bffe17 	ldw	r2,-8(fp)
 8002ee4:	10800617 	ldw	r2,24(r2)
 8002ee8:	e0bff815 	stw	r2,-32(fp)
  while(nextListener)
 8002eec:	00000d06 	br	8002f24 <propagateChildren+0x68>
  {
    if(event->type == nextListener->type) {
 8002ef0:	e0bffa17 	ldw	r2,-24(fp)
 8002ef4:	10c00117 	ldw	r3,4(r2)
 8002ef8:	e0bff817 	ldw	r2,-32(fp)
 8002efc:	10800117 	ldw	r2,4(r2)
 8002f00:	1880051e 	bne	r3,r2,8002f18 <propagateChildren+0x5c>
      int result = 0;
 8002f04:	e03ffb15 	stw	zero,-20(fp)
      switch (event->type) {
      }
      if(result) return 1;
 8002f08:	e0bffb17 	ldw	r2,-20(fp)
 8002f0c:	10000226 	beq	r2,zero,8002f18 <propagateChildren+0x5c>
 8002f10:	00800044 	movi	r2,1
 8002f14:	00001906 	br	8002f7c <propagateChildren+0xc0>
    }
    nextListener = nextListener->next;
 8002f18:	e0bff817 	ldw	r2,-32(fp)
 8002f1c:	10800017 	ldw	r2,0(r2)
 8002f20:	e0bff815 	stw	r2,-32(fp)
int propagateChildren(struct EventHandler* handler, struct View* view, void* _event)
{
  struct Event* event = _event;

  struct EventListener* nextListener = view->listenerHead;
  while(nextListener)
 8002f24:	e0bff817 	ldw	r2,-32(fp)
 8002f28:	103ff11e 	bne	r2,zero,8002ef0 <__alt_data_end+0xfc002ef0>
      if(result) return 1;
    }
    nextListener = nextListener->next;
  }

  struct ChildView* prevView = view->viewTail;
 8002f2c:	e0bffe17 	ldw	r2,-8(fp)
 8002f30:	10800917 	ldw	r2,36(r2)
 8002f34:	e0bff915 	stw	r2,-28(fp)
  while(prevView)
 8002f38:	00000d06 	br	8002f70 <propagateChildren+0xb4>
  {
    struct View* childView = prevView->view;
 8002f3c:	e0bff917 	ldw	r2,-28(fp)
 8002f40:	10800217 	ldw	r2,8(r2)
 8002f44:	e0bffc15 	stw	r2,-16(fp)
    if(propagateChildren(handler, childView, event))
 8002f48:	e13ffd17 	ldw	r4,-12(fp)
 8002f4c:	e17ffc17 	ldw	r5,-16(fp)
 8002f50:	e1bffa17 	ldw	r6,-24(fp)
 8002f54:	8002ebc0 	call	8002ebc <propagateChildren>
 8002f58:	10000226 	beq	r2,zero,8002f64 <propagateChildren+0xa8>
      return 1;
 8002f5c:	00800044 	movi	r2,1
 8002f60:	00000606 	br	8002f7c <propagateChildren+0xc0>
    prevView = prevView->prev;
 8002f64:	e0bff917 	ldw	r2,-28(fp)
 8002f68:	10800117 	ldw	r2,4(r2)
 8002f6c:	e0bff915 	stw	r2,-28(fp)
    }
    nextListener = nextListener->next;
  }

  struct ChildView* prevView = view->viewTail;
  while(prevView)
 8002f70:	e0bff917 	ldw	r2,-28(fp)
 8002f74:	103ff11e 	bne	r2,zero,8002f3c <__alt_data_end+0xfc002f3c>
    if(propagateChildren(handler, childView, event))
      return 1;
    prevView = prevView->prev;
  }

  return 0;
 8002f78:	0005883a 	mov	r2,zero
}
 8002f7c:	e037883a 	mov	sp,fp
 8002f80:	dfc00117 	ldw	ra,4(sp)
 8002f84:	df000017 	ldw	fp,0(sp)
 8002f88:	dec00204 	addi	sp,sp,8
 8002f8c:	f800283a 	ret

08002f90 <propagateEvent>:

void propagateEvent(struct EventHandler* handler, void* event)
{
 8002f90:	defffc04 	addi	sp,sp,-16
 8002f94:	dfc00315 	stw	ra,12(sp)
 8002f98:	df000215 	stw	fp,8(sp)
 8002f9c:	df000204 	addi	fp,sp,8
 8002fa0:	e13ffe15 	stw	r4,-8(fp)
 8002fa4:	e17fff15 	stw	r5,-4(fp)
  propagateChildren(handler, handler->rootView, event);
 8002fa8:	e0bffe17 	ldw	r2,-8(fp)
 8002fac:	10800017 	ldw	r2,0(r2)
 8002fb0:	e13ffe17 	ldw	r4,-8(fp)
 8002fb4:	100b883a 	mov	r5,r2
 8002fb8:	e1bfff17 	ldw	r6,-4(fp)
 8002fbc:	8002ebc0 	call	8002ebc <propagateChildren>
}
 8002fc0:	e037883a 	mov	sp,fp
 8002fc4:	dfc00117 	ldw	ra,4(sp)
 8002fc8:	df000017 	ldw	fp,0(sp)
 8002fcc:	dec00204 	addi	sp,sp,8
 8002fd0:	f800283a 	ret

08002fd4 <initGPS>:
//	parseTime(gps_data);
//	printf("after parse \n");
//	return 0;
//}

void initGPS(void){
 8002fd4:	deffff04 	addi	sp,sp,-4
 8002fd8:	df000015 	stw	fp,0(sp)
 8002fdc:	d839883a 	mov	fp,sp
	// set up 6850 Control Register to utilise a divide by 16 clock,
	// set RTS low, use 8 bits of data, no parity, 1 stop bit,
	// program baud rate generator to use 9600 baud
	GPSBaud = 0x05;
 8002fe0:	00a10034 	movhi	r2,33792
 8002fe4:	10808504 	addi	r2,r2,532
 8002fe8:	00c00144 	movi	r3,5
 8002fec:	10c00005 	stb	r3,0(r2)
	GPSControl = 0x15; // 0001 0101
 8002ff0:	00a10034 	movhi	r2,33792
 8002ff4:	10808404 	addi	r2,r2,528
 8002ff8:	00c00544 	movi	r3,21
 8002ffc:	10c00005 	stb	r3,0(r2)
}
 8003000:	e037883a 	mov	sp,fp
 8003004:	df000017 	ldw	fp,0(sp)
 8003008:	dec00104 	addi	sp,sp,4
 800300c:	f800283a 	ret

08003010 <putcharGPS>:

void putcharGPS(char c) {
 8003010:	defffe04 	addi	sp,sp,-8
 8003014:	df000115 	stw	fp,4(sp)
 8003018:	df000104 	addi	fp,sp,4
 800301c:	2005883a 	mov	r2,r4
 8003020:	e0bfff05 	stb	r2,-4(fp)
	//wait for tx register to be empty
	while (!(GPSStatus & 0x2)) { }
 8003024:	0001883a 	nop
 8003028:	00a10034 	movhi	r2,33792
 800302c:	10808404 	addi	r2,r2,528
 8003030:	10800003 	ldbu	r2,0(r2)
 8003034:	10803fcc 	andi	r2,r2,255
 8003038:	1080008c 	andi	r2,r2,2
 800303c:	103ffa26 	beq	r2,zero,8003028 <__alt_data_end+0xfc003028>
	GPSTxData = c;
 8003040:	00a10034 	movhi	r2,33792
 8003044:	10808484 	addi	r2,r2,530
 8003048:	e0ffff03 	ldbu	r3,-4(fp)
 800304c:	10c00005 	stb	r3,0(r2)
}
 8003050:	e037883a 	mov	sp,fp
 8003054:	df000017 	ldw	fp,0(sp)
 8003058:	dec00104 	addi	sp,sp,4
 800305c:	f800283a 	ret

08003060 <getcharGPS>:

char getcharGPS(void){
 8003060:	deffff04 	addi	sp,sp,-4
 8003064:	df000015 	stw	fp,0(sp)
 8003068:	d839883a 	mov	fp,sp
	// wait for rx register to have data
	while (!(GPSStatus & 0x1)) { }
 800306c:	0001883a 	nop
 8003070:	00a10034 	movhi	r2,33792
 8003074:	10808404 	addi	r2,r2,528
 8003078:	10800003 	ldbu	r2,0(r2)
 800307c:	10803fcc 	andi	r2,r2,255
 8003080:	1080004c 	andi	r2,r2,1
 8003084:	103ffa26 	beq	r2,zero,8003070 <__alt_data_end+0xfc003070>
	return GPSRxData;
 8003088:	00a10034 	movhi	r2,33792
 800308c:	10808484 	addi	r2,r2,530
 8003090:	10800003 	ldbu	r2,0(r2)
}
 8003094:	e037883a 	mov	sp,fp
 8003098:	df000017 	ldw	fp,0(sp)
 800309c:	dec00104 	addi	sp,sp,4
 80030a0:	f800283a 	ret

080030a4 <readGPSDataToConsole>:

//for testing
void readGPSDataToConsole() {
 80030a4:	defffd04 	addi	sp,sp,-12
 80030a8:	dfc00215 	stw	ra,8(sp)
 80030ac:	df000115 	stw	fp,4(sp)
 80030b0:	df000104 	addi	fp,sp,4
	char c;
	while (1) {
		c = getcharGPS();
 80030b4:	80030600 	call	8003060 <getcharGPS>
 80030b8:	e0bfff05 	stb	r2,-4(fp)
		printf("%c", c);
 80030bc:	e0bfff07 	ldb	r2,-4(fp)
 80030c0:	1009883a 	mov	r4,r2
 80030c4:	800c7cc0 	call	800c7cc <putchar>
	}
 80030c8:	003ffa06 	br	80030b4 <__alt_data_end+0xfc0030b4>

080030cc <parseTime>:
}

//Parse utc time to vancouver time and store in gps data struct
void parseTime(gps_data_t *gps_data) {
 80030cc:	defff804 	addi	sp,sp,-32
 80030d0:	dfc00715 	stw	ra,28(sp)
 80030d4:	df000615 	stw	fp,24(sp)
 80030d8:	df000604 	addi	fp,sp,24
 80030dc:	e13fff15 	stw	r4,-4(fp)

	int hour = 0;
 80030e0:	e03ffb15 	stw	zero,-20(fp)
	int minute = 0;
 80030e4:	e03ffc15 	stw	zero,-16(fp)
	int second = 0;
 80030e8:	e03ffd15 	stw	zero,-12(fp)
	char *time_utc = gps_data->time_utc;
 80030ec:	e0bfff17 	ldw	r2,-4(fp)
 80030f0:	e0bffe15 	stw	r2,-8(fp)

	hour = 10 * (time_utc[0] - '0') + (time_utc[1] - '0');
 80030f4:	e0bffe17 	ldw	r2,-8(fp)
 80030f8:	10800003 	ldbu	r2,0(r2)
 80030fc:	10803fcc 	andi	r2,r2,255
 8003100:	1080201c 	xori	r2,r2,128
 8003104:	10bfe004 	addi	r2,r2,-128
 8003108:	10bff404 	addi	r2,r2,-48
 800310c:	10c002a4 	muli	r3,r2,10
 8003110:	e0bffe17 	ldw	r2,-8(fp)
 8003114:	10800044 	addi	r2,r2,1
 8003118:	10800003 	ldbu	r2,0(r2)
 800311c:	10803fcc 	andi	r2,r2,255
 8003120:	1080201c 	xori	r2,r2,128
 8003124:	10bfe004 	addi	r2,r2,-128
 8003128:	10bff404 	addi	r2,r2,-48
 800312c:	1885883a 	add	r2,r3,r2
 8003130:	e0bffb15 	stw	r2,-20(fp)
	minute = 10 * (time_utc[2] - '0') + (time_utc[3] - '0');
 8003134:	e0bffe17 	ldw	r2,-8(fp)
 8003138:	10800084 	addi	r2,r2,2
 800313c:	10800003 	ldbu	r2,0(r2)
 8003140:	10803fcc 	andi	r2,r2,255
 8003144:	1080201c 	xori	r2,r2,128
 8003148:	10bfe004 	addi	r2,r2,-128
 800314c:	10bff404 	addi	r2,r2,-48
 8003150:	10c002a4 	muli	r3,r2,10
 8003154:	e0bffe17 	ldw	r2,-8(fp)
 8003158:	108000c4 	addi	r2,r2,3
 800315c:	10800003 	ldbu	r2,0(r2)
 8003160:	10803fcc 	andi	r2,r2,255
 8003164:	1080201c 	xori	r2,r2,128
 8003168:	10bfe004 	addi	r2,r2,-128
 800316c:	10bff404 	addi	r2,r2,-48
 8003170:	1885883a 	add	r2,r3,r2
 8003174:	e0bffc15 	stw	r2,-16(fp)
	second = 10 * (time_utc[4] - '0') + (time_utc[5] - '0');
 8003178:	e0bffe17 	ldw	r2,-8(fp)
 800317c:	10800104 	addi	r2,r2,4
 8003180:	10800003 	ldbu	r2,0(r2)
 8003184:	10803fcc 	andi	r2,r2,255
 8003188:	1080201c 	xori	r2,r2,128
 800318c:	10bfe004 	addi	r2,r2,-128
 8003190:	10bff404 	addi	r2,r2,-48
 8003194:	10c002a4 	muli	r3,r2,10
 8003198:	e0bffe17 	ldw	r2,-8(fp)
 800319c:	10800144 	addi	r2,r2,5
 80031a0:	10800003 	ldbu	r2,0(r2)
 80031a4:	10803fcc 	andi	r2,r2,255
 80031a8:	1080201c 	xori	r2,r2,128
 80031ac:	10bfe004 	addi	r2,r2,-128
 80031b0:	10bff404 	addi	r2,r2,-48
 80031b4:	1885883a 	add	r2,r3,r2
 80031b8:	e0bffd15 	stw	r2,-12(fp)

	if(hour > 8){
 80031bc:	e0bffb17 	ldw	r2,-20(fp)
 80031c0:	10800250 	cmplti	r2,r2,9
 80031c4:	1000041e 	bne	r2,zero,80031d8 <parseTime+0x10c>
		hour = hour - 8;
 80031c8:	e0bffb17 	ldw	r2,-20(fp)
 80031cc:	10bffe04 	addi	r2,r2,-8
 80031d0:	e0bffb15 	stw	r2,-20(fp)
 80031d4:	00000306 	br	80031e4 <parseTime+0x118>
	}
	else {
		hour = hour + 16;
 80031d8:	e0bffb17 	ldw	r2,-20(fp)
 80031dc:	10800404 	addi	r2,r2,16
 80031e0:	e0bffb15 	stw	r2,-20(fp)
	}

	if (hour > 12) {
 80031e4:	e0bffb17 	ldw	r2,-20(fp)
 80031e8:	10800350 	cmplti	r2,r2,13
 80031ec:	1000071e 	bne	r2,zero,800320c <parseTime+0x140>
		hour = hour - 12;
 80031f0:	e0bffb17 	ldw	r2,-20(fp)
 80031f4:	10bffd04 	addi	r2,r2,-12
 80031f8:	e0bffb15 	stw	r2,-20(fp)
		gps_data->AM_PM[0] = 'P';
 80031fc:	e0bfff17 	ldw	r2,-4(fp)
 8003200:	00c01404 	movi	r3,80
 8003204:	10c01305 	stb	r3,76(r2)
 8003208:	00000306 	br	8003218 <parseTime+0x14c>

	}
	else {
		gps_data->AM_PM[0] = 'A';
 800320c:	e0bfff17 	ldw	r2,-4(fp)
 8003210:	00c01044 	movi	r3,65
 8003214:	10c01305 	stb	r3,76(r2)
	}


	gps_data->AM_PM[1] = 'M';
 8003218:	e0bfff17 	ldw	r2,-4(fp)
 800321c:	00c01344 	movi	r3,77
 8003220:	10c01345 	stb	r3,77(r2)
	gps_data->AM_PM[2] = '\0';
 8003224:	e0bfff17 	ldw	r2,-4(fp)
 8003228:	10001385 	stb	zero,78(r2)

	gps_data->hour = hour;
 800322c:	e0bfff17 	ldw	r2,-4(fp)
 8003230:	e0fffb17 	ldw	r3,-20(fp)
 8003234:	10c01015 	stw	r3,64(r2)
	gps_data->minute = minute;
 8003238:	e0bfff17 	ldw	r2,-4(fp)
 800323c:	e0fffc17 	ldw	r3,-16(fp)
 8003240:	10c01115 	stw	r3,68(r2)
	gps_data->second = second;
 8003244:	e0bfff17 	ldw	r2,-4(fp)
 8003248:	e0fffd17 	ldw	r3,-12(fp)
 800324c:	10c01215 	stw	r3,72(r2)
	gps_data->gotParsedTime = true;
 8003250:	e0bfff17 	ldw	r2,-4(fp)
 8003254:	00c00044 	movi	r3,1
 8003258:	10c00f85 	stb	r3,62(r2)
	printf("Time array utc: %s\n", gps_data->time_utc);
 800325c:	e0bfff17 	ldw	r2,-4(fp)
 8003260:	010200b4 	movhi	r4,2050
 8003264:	211ac504 	addi	r4,r4,27412
 8003268:	100b883a 	mov	r5,r2
 800326c:	800c7880 	call	800c788 <printf>
	printf("Hour: %d:%d:%d %s\n", hour, minute, second, gps_data->AM_PM);
 8003270:	e0bfff17 	ldw	r2,-4(fp)
 8003274:	10801304 	addi	r2,r2,76
 8003278:	d8800015 	stw	r2,0(sp)
 800327c:	010200b4 	movhi	r4,2050
 8003280:	211aca04 	addi	r4,r4,27432
 8003284:	e17ffb17 	ldw	r5,-20(fp)
 8003288:	e1bffc17 	ldw	r6,-16(fp)
 800328c:	e1fffd17 	ldw	r7,-12(fp)
 8003290:	800c7880 	call	800c788 <printf>


}
 8003294:	e037883a 	mov	sp,fp
 8003298:	dfc00117 	ldw	ra,4(sp)
 800329c:	df000017 	ldw	fp,0(sp)
 80032a0:	dec00204 	addi	sp,sp,8
 80032a4:	f800283a 	ret

080032a8 <getGPSInfo>:

//This function gets ONE READING of the gps data and stores it in gps data struct
void getGPSInfo(gps_data_t *gps_data) {
 80032a8:	defffb04 	addi	sp,sp,-20
 80032ac:	dfc00415 	stw	ra,16(sp)
 80032b0:	df000315 	stw	fp,12(sp)
 80032b4:	dc000215 	stw	r16,8(sp)
 80032b8:	df000304 	addi	fp,sp,12
 80032bc:	e13ffe15 	stw	r4,-8(fp)

	//wait for the GPGGA header
	//printf("gotheader is %d\n", gps_data->gotHeader);
	if (!gps_data->gotHeader) {
 80032c0:	e0bffe17 	ldw	r2,-8(fp)
 80032c4:	10800f03 	ldbu	r2,60(r2)
 80032c8:	1080005c 	xori	r2,r2,1
 80032cc:	10803fcc 	andi	r2,r2,255
 80032d0:	10003826 	beq	r2,zero,80033b4 <getGPSInfo+0x10c>
		//printf("in loop for header\n");
		if (gps_data->header_i < 6){//gps_data->headerSize) {
 80032d4:	e0bffe17 	ldw	r2,-8(fp)
 80032d8:	10800c17 	ldw	r2,48(r2)
 80032dc:	10800188 	cmpgei	r2,r2,6
 80032e0:	10001e1e 	bne	r2,zero,800335c <getGPSInfo+0xb4>
			gps_data->inputHeader[gps_data->header_i] = getcharGPS();
 80032e4:	e0bffe17 	ldw	r2,-8(fp)
 80032e8:	14000c17 	ldw	r16,48(r2)
 80032ec:	80030600 	call	8003060 <getcharGPS>
 80032f0:	1007883a 	mov	r3,r2
 80032f4:	e0bffe17 	ldw	r2,-8(fp)
 80032f8:	1405883a 	add	r2,r2,r16
 80032fc:	10800904 	addi	r2,r2,36
 8003300:	10c00005 	stb	r3,0(r2)

			if(gps_data->inputHeader[gps_data->header_i] == '$'){
 8003304:	e0bffe17 	ldw	r2,-8(fp)
 8003308:	10800c17 	ldw	r2,48(r2)
 800330c:	e0fffe17 	ldw	r3,-8(fp)
 8003310:	1885883a 	add	r2,r3,r2
 8003314:	10800904 	addi	r2,r2,36
 8003318:	10800003 	ldbu	r2,0(r2)
 800331c:	10803fcc 	andi	r2,r2,255
 8003320:	1080201c 	xori	r2,r2,128
 8003324:	10bfe004 	addi	r2,r2,-128
 8003328:	10800918 	cmpnei	r2,r2,36
 800332c:	1000051e 	bne	r2,zero,8003344 <getGPSInfo+0x9c>
				gps_data->header_i = 0;
 8003330:	e0bffe17 	ldw	r2,-8(fp)
 8003334:	10000c15 	stw	zero,48(r2)
				gps_data->inputHeader[0] = '$';
 8003338:	e0bffe17 	ldw	r2,-8(fp)
 800333c:	00c00904 	movi	r3,36
 8003340:	10c00905 	stb	r3,36(r2)
			}
			gps_data->header_i += 1;
 8003344:	e0bffe17 	ldw	r2,-8(fp)
 8003348:	10800c17 	ldw	r2,48(r2)
 800334c:	10c00044 	addi	r3,r2,1
 8003350:	e0bffe17 	ldw	r2,-8(fp)
 8003354:	10c00c15 	stw	r3,48(r2)
 8003358:	00007506 	br	8003530 <getGPSInfo+0x288>
		}
		else {
			gps_data->header_i = 0;
 800335c:	e0bffe17 	ldw	r2,-8(fp)
 8003360:	10000c15 	stw	zero,48(r2)
			//printf("comparing headers input is '%s'\n", gps_data->inputHeader);
			if (!strcmp(GPSHEADER, gps_data->inputHeader)) {
 8003364:	e0bffe17 	ldw	r2,-8(fp)
 8003368:	10800904 	addi	r2,r2,36
 800336c:	010200b4 	movhi	r4,2050
 8003370:	211acf04 	addi	r4,r4,27452
 8003374:	100b883a 	mov	r5,r2
 8003378:	800c9c80 	call	800c9c8 <strcmp>
 800337c:	10006c1e 	bne	r2,zero,8003530 <getGPSInfo+0x288>
				gps_data->gotHeader = true;
 8003380:	e0bffe17 	ldw	r2,-8(fp)
 8003384:	00c00044 	movi	r3,1
 8003388:	10c00f05 	stb	r3,60(r2)
				gps_data->csv_i = 0;
 800338c:	e0bffe17 	ldw	r2,-8(fp)
 8003390:	10000d15 	stw	zero,52(r2)
				gps_data->char_i = 0;
 8003394:	e0bffe17 	ldw	r2,-8(fp)
 8003398:	10000e15 	stw	zero,56(r2)
				gps_data->gotGPSData = false;
 800339c:	e0bffe17 	ldw	r2,-8(fp)
 80033a0:	10000f45 	stb	zero,61(r2)
				printf("got to header");
 80033a4:	010200b4 	movhi	r4,2050
 80033a8:	211ad104 	addi	r4,r4,27460
 80033ac:	800c7880 	call	800c788 <printf>
 80033b0:	00005f06 	br	8003530 <getGPSInfo+0x288>
			}
		}
	}
	else {
		char input = getcharGPS();
 80033b4:	80030600 	call	8003060 <getcharGPS>
 80033b8:	e0bffd05 	stb	r2,-12(fp)

		if (input == ',') {
 80033bc:	e0bffd07 	ldb	r2,-12(fp)
 80033c0:	10800b18 	cmpnei	r2,r2,44
 80033c4:	10000a1e 	bne	r2,zero,80033f0 <getGPSInfo+0x148>
			input = getcharGPS();
 80033c8:	80030600 	call	8003060 <getcharGPS>
 80033cc:	e0bffd05 	stb	r2,-12(fp)
			gps_data->csv_i += 1;
 80033d0:	e0bffe17 	ldw	r2,-8(fp)
 80033d4:	10800d17 	ldw	r2,52(r2)
 80033d8:	10c00044 	addi	r3,r2,1
 80033dc:	e0bffe17 	ldw	r2,-8(fp)
 80033e0:	10c00d15 	stw	r3,52(r2)
			gps_data->char_i = 0;
 80033e4:	e0bffe17 	ldw	r2,-8(fp)
 80033e8:	10000e15 	stw	zero,56(r2)
 80033ec:	00001606 	br	8003448 <getGPSInfo+0x1a0>
		}
		else if (input == '*') {
 80033f0:	e0bffd07 	ldb	r2,-12(fp)
 80033f4:	10800a98 	cmpnei	r2,r2,42
 80033f8:	10000e1e 	bne	r2,zero,8003434 <getGPSInfo+0x18c>
				gps_data->time_utc[10] = '\0';
 80033fc:	e0bffe17 	ldw	r2,-8(fp)
 8003400:	10000285 	stb	zero,10(r2)
				gps_data->latitude[9] = '\0';
 8003404:	e0bffe17 	ldw	r2,-8(fp)
 8003408:	10000505 	stb	zero,20(r2)
				gps_data->NS[1] = '\0';
 800340c:	e0bffe17 	ldw	r2,-8(fp)
 8003410:	10000585 	stb	zero,22(r2)
				gps_data->longitude[10] = '\0';
 8003414:	e0bffe17 	ldw	r2,-8(fp)
 8003418:	10000845 	stb	zero,33(r2)
				gps_data->EW[1] = '\0';
 800341c:	e0bffe17 	ldw	r2,-8(fp)
 8003420:	100008c5 	stb	zero,35(r2)
				gps_data->gotGPSData = true;
 8003424:	e0bffe17 	ldw	r2,-8(fp)
 8003428:	00c00044 	movi	r3,1
 800342c:	10c00f45 	stb	r3,61(r2)
				return;
 8003430:	00003f06 	br	8003530 <getGPSInfo+0x288>
		}
		else {
			gps_data->char_i += 1;
 8003434:	e0bffe17 	ldw	r2,-8(fp)
 8003438:	10800e17 	ldw	r2,56(r2)
 800343c:	10c00044 	addi	r3,r2,1
 8003440:	e0bffe17 	ldw	r2,-8(fp)
 8003444:	10c00e15 	stw	r3,56(r2)
		}
		//printf("got to csv parsing csv is %d\n", gps_data->csv_i);
		if (gps_data->csv_i == 1) {
 8003448:	e0bffe17 	ldw	r2,-8(fp)
 800344c:	10800d17 	ldw	r2,52(r2)
 8003450:	10800058 	cmpnei	r2,r2,1
 8003454:	1000071e 	bne	r2,zero,8003474 <getGPSInfo+0x1cc>
			gps_data->time_utc[gps_data->char_i] = input;
 8003458:	e0bffe17 	ldw	r2,-8(fp)
 800345c:	10800e17 	ldw	r2,56(r2)
 8003460:	e0fffe17 	ldw	r3,-8(fp)
 8003464:	1885883a 	add	r2,r3,r2
 8003468:	e0fffd03 	ldbu	r3,-12(fp)
 800346c:	10c00005 	stb	r3,0(r2)
 8003470:	00002f06 	br	8003530 <getGPSInfo+0x288>
		}
		else if (gps_data->csv_i == 2) {
 8003474:	e0bffe17 	ldw	r2,-8(fp)
 8003478:	10800d17 	ldw	r2,52(r2)
 800347c:	10800098 	cmpnei	r2,r2,2
 8003480:	1000081e 	bne	r2,zero,80034a4 <getGPSInfo+0x1fc>
			gps_data->latitude[gps_data->char_i] = input;
 8003484:	e0bffe17 	ldw	r2,-8(fp)
 8003488:	10800e17 	ldw	r2,56(r2)
 800348c:	e0fffe17 	ldw	r3,-8(fp)
 8003490:	1885883a 	add	r2,r3,r2
 8003494:	10800204 	addi	r2,r2,8
 8003498:	e0fffd03 	ldbu	r3,-12(fp)
 800349c:	10c000c5 	stb	r3,3(r2)
 80034a0:	00002306 	br	8003530 <getGPSInfo+0x288>
		}
		else if (gps_data->csv_i == 3) {
 80034a4:	e0bffe17 	ldw	r2,-8(fp)
 80034a8:	10800d17 	ldw	r2,52(r2)
 80034ac:	108000d8 	cmpnei	r2,r2,3
 80034b0:	1000081e 	bne	r2,zero,80034d4 <getGPSInfo+0x22c>
			gps_data->NS[gps_data->char_i] = input;
 80034b4:	e0bffe17 	ldw	r2,-8(fp)
 80034b8:	10800e17 	ldw	r2,56(r2)
 80034bc:	e0fffe17 	ldw	r3,-8(fp)
 80034c0:	1885883a 	add	r2,r3,r2
 80034c4:	10800504 	addi	r2,r2,20
 80034c8:	e0fffd03 	ldbu	r3,-12(fp)
 80034cc:	10c00045 	stb	r3,1(r2)
 80034d0:	00001706 	br	8003530 <getGPSInfo+0x288>
		}
		else if (gps_data->csv_i == 4) {
 80034d4:	e0bffe17 	ldw	r2,-8(fp)
 80034d8:	10800d17 	ldw	r2,52(r2)
 80034dc:	10800118 	cmpnei	r2,r2,4
 80034e0:	1000081e 	bne	r2,zero,8003504 <getGPSInfo+0x25c>
			gps_data->longitude[gps_data->char_i] = input;
 80034e4:	e0bffe17 	ldw	r2,-8(fp)
 80034e8:	10800e17 	ldw	r2,56(r2)
 80034ec:	e0fffe17 	ldw	r3,-8(fp)
 80034f0:	1885883a 	add	r2,r3,r2
 80034f4:	10800504 	addi	r2,r2,20
 80034f8:	e0fffd03 	ldbu	r3,-12(fp)
 80034fc:	10c000c5 	stb	r3,3(r2)
 8003500:	00000b06 	br	8003530 <getGPSInfo+0x288>
		}
		else if (gps_data->csv_i == 5) {
 8003504:	e0bffe17 	ldw	r2,-8(fp)
 8003508:	10800d17 	ldw	r2,52(r2)
 800350c:	10800158 	cmpnei	r2,r2,5
 8003510:	1000071e 	bne	r2,zero,8003530 <getGPSInfo+0x288>
			gps_data->EW[gps_data->char_i] = input;
 8003514:	e0bffe17 	ldw	r2,-8(fp)
 8003518:	10800e17 	ldw	r2,56(r2)
 800351c:	e0fffe17 	ldw	r3,-8(fp)
 8003520:	1885883a 	add	r2,r3,r2
 8003524:	10800804 	addi	r2,r2,32
 8003528:	e0fffd03 	ldbu	r3,-12(fp)
 800352c:	10c00085 	stb	r3,2(r2)
		}
	}

}
 8003530:	e6ffff04 	addi	sp,fp,-4
 8003534:	dfc00217 	ldw	ra,8(sp)
 8003538:	df000117 	ldw	fp,4(sp)
 800353c:	dc000017 	ldw	r16,0(sp)
 8003540:	dec00304 	addi	sp,sp,12
 8003544:	f800283a 	ret

08003548 <Histogram_ctor>:
#include <stdlib.h>
#include <assert.h>
#include "Histogram.h"

static void* Histogram_ctor(void* _self, va_list* app)
{
 8003548:	defffb04 	addi	sp,sp,-20
 800354c:	dfc00415 	stw	ra,16(sp)
 8003550:	df000315 	stw	fp,12(sp)
 8003554:	df000304 	addi	fp,sp,12
 8003558:	e13ffe15 	stw	r4,-8(fp)
 800355c:	e17fff15 	stw	r5,-4(fp)
	struct Histogram* self = super_ctor(Histogram, _self, app);
 8003560:	d0a70217 	ldw	r2,-25592(gp)
 8003564:	1009883a 	mov	r4,r2
 8003568:	e17ffe17 	ldw	r5,-8(fp)
 800356c:	e1bfff17 	ldw	r6,-4(fp)
 8003570:	80054180 	call	8005418 <super_ctor>
 8003574:	e0bffd15 	stw	r2,-12(fp)

  self -> amplitude = 1;
 8003578:	e0bffd17 	ldw	r2,-12(fp)
 800357c:	10000c15 	stw	zero,48(r2)
 8003580:	00cffc34 	movhi	r3,16368
 8003584:	10c00d15 	stw	r3,52(r2)

	return self;
 8003588:	e0bffd17 	ldw	r2,-12(fp)
}
 800358c:	e037883a 	mov	sp,fp
 8003590:	dfc00117 	ldw	ra,4(sp)
 8003594:	df000017 	ldw	fp,0(sp)
 8003598:	dec00204 	addi	sp,sp,8
 800359c:	f800283a 	ret

080035a0 <Histogram_draw>:

static void Histogram_draw(void* _self, struct Bounds* clip)
{
 80035a0:	deffed04 	addi	sp,sp,-76
 80035a4:	dfc01215 	stw	ra,72(sp)
 80035a8:	df001115 	stw	fp,68(sp)
 80035ac:	ddc01015 	stw	r23,64(sp)
 80035b0:	dd800f15 	stw	r22,60(sp)
 80035b4:	dd400e15 	stw	r21,56(sp)
 80035b8:	dd000d15 	stw	r20,52(sp)
 80035bc:	dcc00c15 	stw	r19,48(sp)
 80035c0:	dc800b15 	stw	r18,44(sp)
 80035c4:	dc400a15 	stw	r17,40(sp)
 80035c8:	dc000915 	stw	r16,36(sp)
 80035cc:	df001104 	addi	fp,sp,68
 80035d0:	e13ff515 	stw	r4,-44(fp)
 80035d4:	e17ff615 	stw	r5,-40(fp)
	struct Histogram* self = _self;
 80035d8:	e0bff517 	ldw	r2,-44(fp)
 80035dc:	e0bff115 	stw	r2,-60(fp)
	super_draw(Histogram, _self, clip);
 80035e0:	d0a70217 	ldw	r2,-25592(gp)
 80035e4:	1009883a 	mov	r4,r2
 80035e8:	e17ff517 	ldw	r5,-44(fp)
 80035ec:	e1bff617 	ldw	r6,-40(fp)
 80035f0:	8007a600 	call	8007a60 <super_draw>

	struct Bounds* bounds = bounds(self);
 80035f4:	e0bff117 	ldw	r2,-60(fp)
 80035f8:	10800517 	ldw	r2,20(r2)
 80035fc:	e0bff215 	stw	r2,-56(fp)

  int width = (width(self)-10*4) / 5;
 8003600:	e0bff117 	ldw	r2,-60(fp)
 8003604:	10800317 	ldw	r2,12(r2)
 8003608:	10fff604 	addi	r3,r2,-40
 800360c:	00800144 	movi	r2,5
 8003610:	1885283a 	div	r2,r3,r2
 8003614:	e0bff315 	stw	r2,-52(fp)
  int height = height(self) / 2;
 8003618:	e0bff117 	ldw	r2,-60(fp)
 800361c:	10800417 	ldw	r2,16(r2)
 8003620:	1006d7fa 	srli	r3,r2,31
 8003624:	1885883a 	add	r2,r3,r2
 8003628:	1005d07a 	srai	r2,r2,1
 800362c:	e0bff415 	stw	r2,-48(fp)

  int i;
  for(i = 0; i < 5; i++)
 8003630:	e03ff015 	stw	zero,-64(fp)
 8003634:	0000bb06 	br	8003924 <Histogram_draw+0x384>
  {
    writeFilledRect(bounds->x1+width*i+10*i,bounds->y1+height*(1-self->amplitude*((3.0-abs(i-2))/3)), bounds->x1+width*(i+1)+10*i, bounds->y2-height*(1-self->amplitude*((3.0-abs(i-2))/3)), WHITE);
 8003638:	e0bff217 	ldw	r2,-56(fp)
 800363c:	10c00017 	ldw	r3,0(r2)
 8003640:	e13ff317 	ldw	r4,-52(fp)
 8003644:	e0bff017 	ldw	r2,-64(fp)
 8003648:	2085383a 	mul	r2,r4,r2
 800364c:	1887883a 	add	r3,r3,r2
 8003650:	e0bff017 	ldw	r2,-64(fp)
 8003654:	108002a4 	muli	r2,r2,10
 8003658:	18af883a 	add	r23,r3,r2
 800365c:	e0bff217 	ldw	r2,-56(fp)
 8003660:	10800217 	ldw	r2,8(r2)
 8003664:	1009883a 	mov	r4,r2
 8003668:	800b6280 	call	800b628 <__floatsidf>
 800366c:	1025883a 	mov	r18,r2
 8003670:	1827883a 	mov	r19,r3
 8003674:	e13ff417 	ldw	r4,-48(fp)
 8003678:	800b6280 	call	800b628 <__floatsidf>
 800367c:	1029883a 	mov	r20,r2
 8003680:	182b883a 	mov	r21,r3
 8003684:	e0bff117 	ldw	r2,-60(fp)
 8003688:	14000c17 	ldw	r16,48(r2)
 800368c:	14400d17 	ldw	r17,52(r2)
 8003690:	e0bff017 	ldw	r2,-64(fp)
 8003694:	10bfff84 	addi	r2,r2,-2
 8003698:	1000010e 	bge	r2,zero,80036a0 <Histogram_draw+0x100>
 800369c:	0085c83a 	sub	r2,zero,r2
 80036a0:	1009883a 	mov	r4,r2
 80036a4:	800b6280 	call	800b628 <__floatsidf>
 80036a8:	100f883a 	mov	r7,r2
 80036ac:	1811883a 	mov	r8,r3
 80036b0:	0009883a 	mov	r4,zero
 80036b4:	01500234 	movhi	r5,16392
 80036b8:	380d883a 	mov	r6,r7
 80036bc:	400f883a 	mov	r7,r8
 80036c0:	800acd00 	call	800acd0 <__subdf3>
 80036c4:	1009883a 	mov	r4,r2
 80036c8:	180b883a 	mov	r5,r3
 80036cc:	2005883a 	mov	r2,r4
 80036d0:	2807883a 	mov	r3,r5
 80036d4:	1009883a 	mov	r4,r2
 80036d8:	180b883a 	mov	r5,r3
 80036dc:	000d883a 	mov	r6,zero
 80036e0:	01d00234 	movhi	r7,16392
 80036e4:	8009a9c0 	call	8009a9c <__divdf3>
 80036e8:	1009883a 	mov	r4,r2
 80036ec:	180b883a 	mov	r5,r3
 80036f0:	2005883a 	mov	r2,r4
 80036f4:	2807883a 	mov	r3,r5
 80036f8:	8009883a 	mov	r4,r16
 80036fc:	880b883a 	mov	r5,r17
 8003700:	100d883a 	mov	r6,r2
 8003704:	180f883a 	mov	r7,r3
 8003708:	800a5ac0 	call	800a5ac <__muldf3>
 800370c:	1009883a 	mov	r4,r2
 8003710:	180b883a 	mov	r5,r3
 8003714:	2005883a 	mov	r2,r4
 8003718:	2807883a 	mov	r3,r5
 800371c:	0009883a 	mov	r4,zero
 8003720:	014ffc34 	movhi	r5,16368
 8003724:	100d883a 	mov	r6,r2
 8003728:	180f883a 	mov	r7,r3
 800372c:	800acd00 	call	800acd0 <__subdf3>
 8003730:	1009883a 	mov	r4,r2
 8003734:	180b883a 	mov	r5,r3
 8003738:	2005883a 	mov	r2,r4
 800373c:	2807883a 	mov	r3,r5
 8003740:	a009883a 	mov	r4,r20
 8003744:	a80b883a 	mov	r5,r21
 8003748:	100d883a 	mov	r6,r2
 800374c:	180f883a 	mov	r7,r3
 8003750:	800a5ac0 	call	800a5ac <__muldf3>
 8003754:	1009883a 	mov	r4,r2
 8003758:	180b883a 	mov	r5,r3
 800375c:	2005883a 	mov	r2,r4
 8003760:	2807883a 	mov	r3,r5
 8003764:	9009883a 	mov	r4,r18
 8003768:	980b883a 	mov	r5,r19
 800376c:	100d883a 	mov	r6,r2
 8003770:	180f883a 	mov	r7,r3
 8003774:	80092000 	call	8009200 <__adddf3>
 8003778:	1009883a 	mov	r4,r2
 800377c:	180b883a 	mov	r5,r3
 8003780:	2005883a 	mov	r2,r4
 8003784:	2807883a 	mov	r3,r5
 8003788:	1009883a 	mov	r4,r2
 800378c:	180b883a 	mov	r5,r3
 8003790:	800b5a00 	call	800b5a0 <__fixdfsi>
 8003794:	e0bff715 	stw	r2,-36(fp)
 8003798:	e0bff217 	ldw	r2,-56(fp)
 800379c:	10c00017 	ldw	r3,0(r2)
 80037a0:	e0bff017 	ldw	r2,-64(fp)
 80037a4:	11000044 	addi	r4,r2,1
 80037a8:	e0bff317 	ldw	r2,-52(fp)
 80037ac:	2085383a 	mul	r2,r4,r2
 80037b0:	1887883a 	add	r3,r3,r2
 80037b4:	e0bff017 	ldw	r2,-64(fp)
 80037b8:	108002a4 	muli	r2,r2,10
 80037bc:	18ad883a 	add	r22,r3,r2
 80037c0:	e0bff217 	ldw	r2,-56(fp)
 80037c4:	10800317 	ldw	r2,12(r2)
 80037c8:	1009883a 	mov	r4,r2
 80037cc:	800b6280 	call	800b628 <__floatsidf>
 80037d0:	1025883a 	mov	r18,r2
 80037d4:	1827883a 	mov	r19,r3
 80037d8:	e13ff417 	ldw	r4,-48(fp)
 80037dc:	800b6280 	call	800b628 <__floatsidf>
 80037e0:	1029883a 	mov	r20,r2
 80037e4:	182b883a 	mov	r21,r3
 80037e8:	e0bff117 	ldw	r2,-60(fp)
 80037ec:	14000c17 	ldw	r16,48(r2)
 80037f0:	14400d17 	ldw	r17,52(r2)
 80037f4:	e0bff017 	ldw	r2,-64(fp)
 80037f8:	10bfff84 	addi	r2,r2,-2
 80037fc:	1000010e 	bge	r2,zero,8003804 <Histogram_draw+0x264>
 8003800:	0085c83a 	sub	r2,zero,r2
 8003804:	1009883a 	mov	r4,r2
 8003808:	800b6280 	call	800b628 <__floatsidf>
 800380c:	100f883a 	mov	r7,r2
 8003810:	1811883a 	mov	r8,r3
 8003814:	0009883a 	mov	r4,zero
 8003818:	01500234 	movhi	r5,16392
 800381c:	380d883a 	mov	r6,r7
 8003820:	400f883a 	mov	r7,r8
 8003824:	800acd00 	call	800acd0 <__subdf3>
 8003828:	1009883a 	mov	r4,r2
 800382c:	180b883a 	mov	r5,r3
 8003830:	2005883a 	mov	r2,r4
 8003834:	2807883a 	mov	r3,r5
 8003838:	1009883a 	mov	r4,r2
 800383c:	180b883a 	mov	r5,r3
 8003840:	000d883a 	mov	r6,zero
 8003844:	01d00234 	movhi	r7,16392
 8003848:	8009a9c0 	call	8009a9c <__divdf3>
 800384c:	1009883a 	mov	r4,r2
 8003850:	180b883a 	mov	r5,r3
 8003854:	2005883a 	mov	r2,r4
 8003858:	2807883a 	mov	r3,r5
 800385c:	8009883a 	mov	r4,r16
 8003860:	880b883a 	mov	r5,r17
 8003864:	100d883a 	mov	r6,r2
 8003868:	180f883a 	mov	r7,r3
 800386c:	800a5ac0 	call	800a5ac <__muldf3>
 8003870:	1009883a 	mov	r4,r2
 8003874:	180b883a 	mov	r5,r3
 8003878:	2005883a 	mov	r2,r4
 800387c:	2807883a 	mov	r3,r5
 8003880:	0009883a 	mov	r4,zero
 8003884:	014ffc34 	movhi	r5,16368
 8003888:	100d883a 	mov	r6,r2
 800388c:	180f883a 	mov	r7,r3
 8003890:	800acd00 	call	800acd0 <__subdf3>
 8003894:	1009883a 	mov	r4,r2
 8003898:	180b883a 	mov	r5,r3
 800389c:	2005883a 	mov	r2,r4
 80038a0:	2807883a 	mov	r3,r5
 80038a4:	a009883a 	mov	r4,r20
 80038a8:	a80b883a 	mov	r5,r21
 80038ac:	100d883a 	mov	r6,r2
 80038b0:	180f883a 	mov	r7,r3
 80038b4:	800a5ac0 	call	800a5ac <__muldf3>
 80038b8:	1009883a 	mov	r4,r2
 80038bc:	180b883a 	mov	r5,r3
 80038c0:	2005883a 	mov	r2,r4
 80038c4:	2807883a 	mov	r3,r5
 80038c8:	9009883a 	mov	r4,r18
 80038cc:	980b883a 	mov	r5,r19
 80038d0:	100d883a 	mov	r6,r2
 80038d4:	180f883a 	mov	r7,r3
 80038d8:	800acd00 	call	800acd0 <__subdf3>
 80038dc:	1009883a 	mov	r4,r2
 80038e0:	180b883a 	mov	r5,r3
 80038e4:	2005883a 	mov	r2,r4
 80038e8:	2807883a 	mov	r3,r5
 80038ec:	1009883a 	mov	r4,r2
 80038f0:	180b883a 	mov	r5,r3
 80038f4:	800b5a00 	call	800b5a0 <__fixdfsi>
 80038f8:	1007883a 	mov	r3,r2
 80038fc:	00800044 	movi	r2,1
 8003900:	d8800015 	stw	r2,0(sp)
 8003904:	b809883a 	mov	r4,r23
 8003908:	e17ff717 	ldw	r5,-36(fp)
 800390c:	b00d883a 	mov	r6,r22
 8003910:	180f883a 	mov	r7,r3
 8003914:	8001fd80 	call	8001fd8 <writeFilledRect>

  int width = (width(self)-10*4) / 5;
  int height = height(self) / 2;

  int i;
  for(i = 0; i < 5; i++)
 8003918:	e0bff017 	ldw	r2,-64(fp)
 800391c:	10800044 	addi	r2,r2,1
 8003920:	e0bff015 	stw	r2,-64(fp)
 8003924:	e0bff017 	ldw	r2,-64(fp)
 8003928:	10800150 	cmplti	r2,r2,5
 800392c:	103f421e 	bne	r2,zero,8003638 <__alt_data_end+0xfc003638>
  {
    writeFilledRect(bounds->x1+width*i+10*i,bounds->y1+height*(1-self->amplitude*((3.0-abs(i-2))/3)), bounds->x1+width*(i+1)+10*i, bounds->y2-height*(1-self->amplitude*((3.0-abs(i-2))/3)), WHITE);
  }
}
 8003930:	e6fff804 	addi	sp,fp,-32
 8003934:	dfc00917 	ldw	ra,36(sp)
 8003938:	df000817 	ldw	fp,32(sp)
 800393c:	ddc00717 	ldw	r23,28(sp)
 8003940:	dd800617 	ldw	r22,24(sp)
 8003944:	dd400517 	ldw	r21,20(sp)
 8003948:	dd000417 	ldw	r20,16(sp)
 800394c:	dcc00317 	ldw	r19,12(sp)
 8003950:	dc800217 	ldw	r18,8(sp)
 8003954:	dc400117 	ldw	r17,4(sp)
 8003958:	dc000017 	ldw	r16,0(sp)
 800395c:	dec00a04 	addi	sp,sp,40
 8003960:	f800283a 	ret

08003964 <setAmplitude>:

void setAmplitude(void* _self, double amplitude)
{
 8003964:	defff904 	addi	sp,sp,-28
 8003968:	dfc00615 	stw	ra,24(sp)
 800396c:	df000515 	stw	fp,20(sp)
 8003970:	dc000415 	stw	r16,16(sp)
 8003974:	df000504 	addi	fp,sp,20
 8003978:	e13ffc15 	stw	r4,-16(fp)
 800397c:	e17ffd15 	stw	r5,-12(fp)
 8003980:	e1bffe15 	stw	r6,-8(fp)
	assert(amplitude >= 0 && amplitude <= 1);
 8003984:	04000044 	movi	r16,1
 8003988:	e13ffd17 	ldw	r4,-12(fp)
 800398c:	e17ffe17 	ldw	r5,-8(fp)
 8003990:	000d883a 	mov	r6,zero
 8003994:	000f883a 	mov	r7,zero
 8003998:	800a3ec0 	call	800a3ec <__gedf2>
 800399c:	1000010e 	bge	r2,zero,80039a4 <setAmplitude+0x40>
 80039a0:	0021883a 	mov	r16,zero
 80039a4:	8080005c 	xori	r2,r16,1
 80039a8:	10803fcc 	andi	r2,r2,255
 80039ac:	10000b1e 	bne	r2,zero,80039dc <setAmplitude+0x78>
 80039b0:	04000044 	movi	r16,1
 80039b4:	e13ffd17 	ldw	r4,-12(fp)
 80039b8:	e17ffe17 	ldw	r5,-8(fp)
 80039bc:	000d883a 	mov	r6,zero
 80039c0:	01cffc34 	movhi	r7,16368
 80039c4:	800a4cc0 	call	800a4cc <__ledf2>
 80039c8:	0080010e 	bge	zero,r2,80039d0 <setAmplitude+0x6c>
 80039cc:	0021883a 	mov	r16,zero
 80039d0:	8080005c 	xori	r2,r16,1
 80039d4:	10803fcc 	andi	r2,r2,255
 80039d8:	10000826 	beq	r2,zero,80039fc <setAmplitude+0x98>
 80039dc:	010200b4 	movhi	r4,2050
 80039e0:	211ad504 	addi	r4,r4,27476
 80039e4:	01400844 	movi	r5,33
 80039e8:	018200b4 	movhi	r6,2050
 80039ec:	319ae404 	addi	r6,r6,27536
 80039f0:	01c200b4 	movhi	r7,2050
 80039f4:	39dad804 	addi	r7,r7,27488
 80039f8:	800bb300 	call	800bb30 <__assert_func>

	struct Histogram* self = _self;
 80039fc:	e0bffc17 	ldw	r2,-16(fp)
 8003a00:	e0bffb15 	stw	r2,-20(fp)

	if(self->amplitude != amplitude && visible(self) && renderer(self)) {
 8003a04:	e13ffb17 	ldw	r4,-20(fp)
 8003a08:	20800c17 	ldw	r2,48(r4)
 8003a0c:	20c00d17 	ldw	r3,52(r4)
 8003a10:	1009883a 	mov	r4,r2
 8003a14:	180b883a 	mov	r5,r3
 8003a18:	e1bffd17 	ldw	r6,-12(fp)
 8003a1c:	e1fffe17 	ldw	r7,-8(fp)
 8003a20:	800a3680 	call	800a368 <__eqdf2>
 8003a24:	10000d26 	beq	r2,zero,8003a5c <setAmplitude+0xf8>
 8003a28:	e0bffb17 	ldw	r2,-20(fp)
 8003a2c:	10800b17 	ldw	r2,44(r2)
 8003a30:	10000a26 	beq	r2,zero,8003a5c <setAmplitude+0xf8>
 8003a34:	e0bffb17 	ldw	r2,-20(fp)
 8003a38:	10800a17 	ldw	r2,40(r2)
 8003a3c:	10000726 	beq	r2,zero,8003a5c <setAmplitude+0xf8>
		invalidate(renderer(self), bounds(self));
 8003a40:	e0bffb17 	ldw	r2,-20(fp)
 8003a44:	10c00a17 	ldw	r3,40(r2)
 8003a48:	e0bffb17 	ldw	r2,-20(fp)
 8003a4c:	10800517 	ldw	r2,20(r2)
 8003a50:	1809883a 	mov	r4,r3
 8003a54:	100b883a 	mov	r5,r2
 8003a58:	80066240 	call	8006624 <invalidate>
	}

	self->amplitude = amplitude;
 8003a5c:	e0bffb17 	ldw	r2,-20(fp)
 8003a60:	e0fffd17 	ldw	r3,-12(fp)
 8003a64:	10c00c15 	stw	r3,48(r2)
 8003a68:	e0fffe17 	ldw	r3,-8(fp)
 8003a6c:	10c00d15 	stw	r3,52(r2)
}
 8003a70:	e6ffff04 	addi	sp,fp,-4
 8003a74:	dfc00217 	ldw	ra,8(sp)
 8003a78:	df000117 	ldw	fp,4(sp)
 8003a7c:	dc000017 	ldw	r16,0(sp)
 8003a80:	dec00304 	addi	sp,sp,12
 8003a84:	f800283a 	ret

08003a88 <initHistogram>:

const void* Histogram;

void initHistogram()
{
 8003a88:	defff904 	addi	sp,sp,-28
 8003a8c:	dfc00615 	stw	ra,24(sp)
 8003a90:	df000515 	stw	fp,20(sp)
 8003a94:	df000504 	addi	fp,sp,20
	if(!Histogram)
 8003a98:	d0a70217 	ldw	r2,-25592(gp)
 8003a9c:	10001a1e 	bne	r2,zero,8003b08 <initHistogram+0x80>
		{
			initView();
 8003aa0:	80082600 	call	8008260 <initView>
			Histogram = new(ViewClass, "Histogram", View,
 8003aa4:	008200f4 	movhi	r2,2051
 8003aa8:	10aaf604 	addi	r2,r2,-21544
 8003aac:	11000017 	ldw	r4,0(r2)
 8003ab0:	008200f4 	movhi	r2,2051
 8003ab4:	10aaf504 	addi	r2,r2,-21548
 8003ab8:	10c00017 	ldw	r3,0(r2)
 8003abc:	00820034 	movhi	r2,2048
 8003ac0:	1094e904 	addi	r2,r2,21412
 8003ac4:	d8800015 	stw	r2,0(sp)
 8003ac8:	00820034 	movhi	r2,2048
 8003acc:	108d5204 	addi	r2,r2,13640
 8003ad0:	d8800115 	stw	r2,4(sp)
 8003ad4:	00820034 	movhi	r2,2048
 8003ad8:	109e8504 	addi	r2,r2,31252
 8003adc:	d8800215 	stw	r2,8(sp)
 8003ae0:	00820034 	movhi	r2,2048
 8003ae4:	108d6804 	addi	r2,r2,13728
 8003ae8:	d8800315 	stw	r2,12(sp)
 8003aec:	d8000415 	stw	zero,16(sp)
 8003af0:	014200b4 	movhi	r5,2050
 8003af4:	295ae104 	addi	r5,r5,27524
 8003af8:	180d883a 	mov	r6,r3
 8003afc:	01c00e04 	movi	r7,56
 8003b00:	80052900 	call	8005290 <new>
 8003b04:	d0a70215 	stw	r2,-25592(gp)
						 sizeof(struct Histogram), ctor, Histogram_ctor,
						 draw, Histogram_draw,0);
		}
}
 8003b08:	e037883a 	mov	sp,fp
 8003b0c:	dfc00117 	ldw	ra,4(sp)
 8003b10:	df000017 	ldw	fp,0(sp)
 8003b14:	dec00204 	addi	sp,sp,8
 8003b18:	f800283a 	ret

08003b1c <onListMove>:
#include "ListView.h"
#include "TouchEventHandler.h"

int onListMove(void* _self, int dx, int dy)
{
 8003b1c:	defffa04 	addi	sp,sp,-24
 8003b20:	dfc00515 	stw	ra,20(sp)
 8003b24:	df000415 	stw	fp,16(sp)
 8003b28:	df000404 	addi	fp,sp,16
 8003b2c:	e13ffd15 	stw	r4,-12(fp)
 8003b30:	e17ffe15 	stw	r5,-8(fp)
 8003b34:	e1bfff15 	stw	r6,-4(fp)
  struct ListView* self = _self;
 8003b38:	e0bffd17 	ldw	r2,-12(fp)
 8003b3c:	e0bffc15 	stw	r2,-16(fp)
  self->scrollY += dy;
 8003b40:	e0bffc17 	ldw	r2,-16(fp)
 8003b44:	10c00c17 	ldw	r3,48(r2)
 8003b48:	e0bfff17 	ldw	r2,-4(fp)
 8003b4c:	1887883a 	add	r3,r3,r2
 8003b50:	e0bffc17 	ldw	r2,-16(fp)
 8003b54:	10c00c15 	stw	r3,48(r2)
  invalidate(renderer(_self), bounds(_self));
 8003b58:	e0bffd17 	ldw	r2,-12(fp)
 8003b5c:	10c00a17 	ldw	r3,40(r2)
 8003b60:	e0bffd17 	ldw	r2,-12(fp)
 8003b64:	10800517 	ldw	r2,20(r2)
 8003b68:	1809883a 	mov	r4,r3
 8003b6c:	100b883a 	mov	r5,r2
 8003b70:	80066240 	call	8006624 <invalidate>
  return 1;
 8003b74:	00800044 	movi	r2,1
}
 8003b78:	e037883a 	mov	sp,fp
 8003b7c:	dfc00117 	ldw	ra,4(sp)
 8003b80:	df000017 	ldw	fp,0(sp)
 8003b84:	dec00204 	addi	sp,sp,8
 8003b88:	f800283a 	ret

08003b8c <ListView_ctor>:

static void* ListView_ctor(void* _self, va_list* app)
{
 8003b8c:	defffb04 	addi	sp,sp,-20
 8003b90:	dfc00415 	stw	ra,16(sp)
 8003b94:	df000315 	stw	fp,12(sp)
 8003b98:	df000304 	addi	fp,sp,12
 8003b9c:	e13ffe15 	stw	r4,-8(fp)
 8003ba0:	e17fff15 	stw	r5,-4(fp)
	struct ListView* self = super_ctor(ListView, _self, app);
 8003ba4:	d0a70317 	ldw	r2,-25588(gp)
 8003ba8:	1009883a 	mov	r4,r2
 8003bac:	e17ffe17 	ldw	r5,-8(fp)
 8003bb0:	e1bfff17 	ldw	r6,-4(fp)
 8003bb4:	80054180 	call	8005418 <super_ctor>
 8003bb8:	e0bffd15 	stw	r2,-12(fp)

	self -> scrollY = 0;
 8003bbc:	e0bffd17 	ldw	r2,-12(fp)
 8003bc0:	10000c15 	stw	zero,48(r2)

	addEventListener(_self, MOVE_EVENT, onListMove);
 8003bc4:	e13ffe17 	ldw	r4,-8(fp)
 8003bc8:	014000c4 	movi	r5,3
 8003bcc:	01820034 	movhi	r6,2048
 8003bd0:	318ec704 	addi	r6,r6,15132
 8003bd4:	80080880 	call	8008088 <addEventListener>

	return self;
 8003bd8:	e0bffd17 	ldw	r2,-12(fp)
}
 8003bdc:	e037883a 	mov	sp,fp
 8003be0:	dfc00117 	ldw	ra,4(sp)
 8003be4:	df000017 	ldw	fp,0(sp)
 8003be8:	dec00204 	addi	sp,sp,8
 8003bec:	f800283a 	ret

08003bf0 <ListView_draw>:

static void ListView_draw(void* _self, struct Bounds* clip)
{
 8003bf0:	defffb04 	addi	sp,sp,-20
 8003bf4:	dfc00415 	stw	ra,16(sp)
 8003bf8:	df000315 	stw	fp,12(sp)
 8003bfc:	df000304 	addi	fp,sp,12
 8003c00:	e13ffe15 	stw	r4,-8(fp)
 8003c04:	e17fff15 	stw	r5,-4(fp)
	struct ListView* self = _self;
 8003c08:	e0bffe17 	ldw	r2,-8(fp)
 8003c0c:	e0bffd15 	stw	r2,-12(fp)
	super_draw(ListView, _self, clip);
 8003c10:	d0a70317 	ldw	r2,-25588(gp)
 8003c14:	1009883a 	mov	r4,r2
 8003c18:	e17ffe17 	ldw	r5,-8(fp)
 8003c1c:	e1bfff17 	ldw	r6,-4(fp)
 8003c20:	8007a600 	call	8007a60 <super_draw>
}
 8003c24:	e037883a 	mov	sp,fp
 8003c28:	dfc00117 	ldw	ra,4(sp)
 8003c2c:	df000017 	ldw	fp,0(sp)
 8003c30:	dec00204 	addi	sp,sp,8
 8003c34:	f800283a 	ret

08003c38 <ListView_measure>:

static void ListView_measure(void* _self, struct Bounds* parent)
{
 8003c38:	defff704 	addi	sp,sp,-36
 8003c3c:	dfc00815 	stw	ra,32(sp)
 8003c40:	df000715 	stw	fp,28(sp)
 8003c44:	df000704 	addi	fp,sp,28
 8003c48:	e13ffe15 	stw	r4,-8(fp)
 8003c4c:	e17fff15 	stw	r5,-4(fp)
  struct ListView* self = _self;
 8003c50:	e0bffe17 	ldw	r2,-8(fp)
 8003c54:	e0bffb15 	stw	r2,-20(fp)
  struct View* view = _self;
 8003c58:	e0bffe17 	ldw	r2,-8(fp)
 8003c5c:	e0bffc15 	stw	r2,-16(fp)
	super_measure(ListView, _self, parent);
 8003c60:	d0a70317 	ldw	r2,-25588(gp)
 8003c64:	1009883a 	mov	r4,r2
 8003c68:	e17ffe17 	ldw	r5,-8(fp)
 8003c6c:	e1bfff17 	ldw	r6,-4(fp)
 8003c70:	8007bc80 	call	8007bc8 <super_measure>

  int count = 0;
 8003c74:	e03ff915 	stw	zero,-28(fp)
  struct ChildView* next = view->viewHead;
 8003c78:	e0bffc17 	ldw	r2,-16(fp)
 8003c7c:	10800817 	ldw	r2,32(r2)
 8003c80:	e0bffa15 	stw	r2,-24(fp)
  while(next)
 8003c84:	00001606 	br	8003ce0 <ListView_measure+0xa8>
  {
    struct View* childView = next->view;
 8003c88:	e0bffa17 	ldw	r2,-24(fp)
 8003c8c:	10800217 	ldw	r2,8(r2)
 8003c90:	e0bffd15 	stw	r2,-12(fp)

    childView->x = 0;
 8003c94:	e0bffd17 	ldw	r2,-12(fp)
 8003c98:	10000115 	stw	zero,4(r2)
    childView->y = self->scrollY + count;
 8003c9c:	e0bffb17 	ldw	r2,-20(fp)
 8003ca0:	10c00c17 	ldw	r3,48(r2)
 8003ca4:	e0bff917 	ldw	r2,-28(fp)
 8003ca8:	1887883a 	add	r3,r3,r2
 8003cac:	e0bffd17 	ldw	r2,-12(fp)
 8003cb0:	10c00215 	stw	r3,8(r2)
    count += childView->y + childView->height;
 8003cb4:	e0bffd17 	ldw	r2,-12(fp)
 8003cb8:	10c00217 	ldw	r3,8(r2)
 8003cbc:	e0bffd17 	ldw	r2,-12(fp)
 8003cc0:	10800417 	ldw	r2,16(r2)
 8003cc4:	1885883a 	add	r2,r3,r2
 8003cc8:	e0fff917 	ldw	r3,-28(fp)
 8003ccc:	1885883a 	add	r2,r3,r2
 8003cd0:	e0bff915 	stw	r2,-28(fp)

    next = next->next;
 8003cd4:	e0bffa17 	ldw	r2,-24(fp)
 8003cd8:	10800017 	ldw	r2,0(r2)
 8003cdc:	e0bffa15 	stw	r2,-24(fp)
  struct View* view = _self;
	super_measure(ListView, _self, parent);

  int count = 0;
  struct ChildView* next = view->viewHead;
  while(next)
 8003ce0:	e0bffa17 	ldw	r2,-24(fp)
 8003ce4:	103fe81e 	bne	r2,zero,8003c88 <__alt_data_end+0xfc003c88>
    childView->y = self->scrollY + count;
    count += childView->y + childView->height;

    next = next->next;
  }
}
 8003ce8:	e037883a 	mov	sp,fp
 8003cec:	dfc00117 	ldw	ra,4(sp)
 8003cf0:	df000017 	ldw	fp,0(sp)
 8003cf4:	dec00204 	addi	sp,sp,8
 8003cf8:	f800283a 	ret

08003cfc <initListView>:

const void* ListView;

void initListView()
{
 8003cfc:	defff704 	addi	sp,sp,-36
 8003d00:	dfc00815 	stw	ra,32(sp)
 8003d04:	df000715 	stw	fp,28(sp)
 8003d08:	df000704 	addi	fp,sp,28
	if(!ListView)
 8003d0c:	d0a70317 	ldw	r2,-25588(gp)
 8003d10:	1000201e 	bne	r2,zero,8003d94 <initListView+0x98>
		{
			initView();
 8003d14:	80082600 	call	8008260 <initView>
			ListView = new(ViewClass, "ListView", View,
 8003d18:	008200f4 	movhi	r2,2051
 8003d1c:	10aaf604 	addi	r2,r2,-21544
 8003d20:	11000017 	ldw	r4,0(r2)
 8003d24:	008200f4 	movhi	r2,2051
 8003d28:	10aaf504 	addi	r2,r2,-21548
 8003d2c:	10c00017 	ldw	r3,0(r2)
 8003d30:	00820034 	movhi	r2,2048
 8003d34:	1094e904 	addi	r2,r2,21412
 8003d38:	d8800015 	stw	r2,0(sp)
 8003d3c:	00820034 	movhi	r2,2048
 8003d40:	108ee304 	addi	r2,r2,15244
 8003d44:	d8800115 	stw	r2,4(sp)
 8003d48:	00820034 	movhi	r2,2048
 8003d4c:	109e8504 	addi	r2,r2,31252
 8003d50:	d8800215 	stw	r2,8(sp)
 8003d54:	00820034 	movhi	r2,2048
 8003d58:	108efc04 	addi	r2,r2,15344
 8003d5c:	d8800315 	stw	r2,12(sp)
 8003d60:	00820034 	movhi	r2,2048
 8003d64:	109edf04 	addi	r2,r2,31612
 8003d68:	d8800415 	stw	r2,16(sp)
 8003d6c:	00820034 	movhi	r2,2048
 8003d70:	108f0e04 	addi	r2,r2,15416
 8003d74:	d8800515 	stw	r2,20(sp)
 8003d78:	d8000615 	stw	zero,24(sp)
 8003d7c:	014200b4 	movhi	r5,2050
 8003d80:	295ae804 	addi	r5,r5,27552
 8003d84:	180d883a 	mov	r6,r3
 8003d88:	01c00d04 	movi	r7,52
 8003d8c:	80052900 	call	8005290 <new>
 8003d90:	d0a70315 	stw	r2,-25588(gp)
						 sizeof(struct ListView), ctor, ListView_ctor,
						 draw, ListView_draw, measure, ListView_measure, 0);
		}
}
 8003d94:	e037883a 	mov	sp,fp
 8003d98:	dfc00117 	ldw	ra,4(sp)
 8003d9c:	df000017 	ldw	fp,0(sp)
 8003da0:	dec00204 	addi	sp,sp,8
 8003da4:	f800283a 	ret

08003da8 <init>:

/**
 * Initialize board components and graphics
 */
void init(int argc, char* argv[])
{
 8003da8:	defffc04 	addi	sp,sp,-16
 8003dac:	dfc00315 	stw	ra,12(sp)
 8003db0:	df000215 	stw	fp,8(sp)
 8003db4:	df000204 	addi	fp,sp,8
 8003db8:	e13ffe15 	stw	r4,-8(fp)
 8003dbc:	e17fff15 	stw	r5,-4(fp)
#ifndef NDEBUG
	testAll();
 8003dc0:	8006aa40 	call	8006aa4 <testAll>
#endif

	//Init views
	initScreenView();
 8003dc4:	80068240 	call	8006824 <initScreenView>
	initListView();
 8003dc8:	8003cfc0 	call	8003cfc <initListView>
	initButton();
 8003dcc:	80011f00 	call	80011f0 <initButton>
	initProgressBar();
 8003dd0:	80063280 	call	8006328 <initProgressBar>
	initHistogram();
 8003dd4:	8003a880 	call	8003a88 <initHistogram>
	initTextView();
 8003dd8:	8006ff00 	call	8006ff0 <initTextView>
	initPlayPauseButton();
 8003ddc:	8005e3c0 	call	8005e3c <initPlayPauseButton>

	//Set default color
	programPalette(PRIMARY, 0x000000FF);
 8003de0:	01000144 	movi	r4,5
 8003de4:	01403fc4 	movi	r5,255
 8003de8:	8001b8c0 	call	8001b8c <programPalette>

	//Init io
	DE1_touchInit();
 8003dec:	80016d80 	call	80016d8 <DE1_touchInit>
	Init_Wifi();
 8003df0:	800876c0 	call	800876c <Init_Wifi>
	wifi_commands_init();
 8003df4:	8008ffc0 	call	8008ffc <wifi_commands_init>
	usleep(10000);
 8003df8:	0109c404 	movi	r4,10000
 8003dfc:	8019dac0 	call	8019dac <usleep>
	Init_Volume();
 8003e00:	80085940 	call	8008594 <Init_Volume>
	Init_Interrupt();
 8003e04:	80078880 	call	8007888 <Init_Interrupt>
	initGPS();
 8003e08:	8002fd40 	call	8002fd4 <initGPS>

	//Init renderer
	renderer.displayWidth = 800;
 8003e0c:	008200f4 	movhi	r2,2051
 8003e10:	10ab1a04 	addi	r2,r2,-21400
 8003e14:	00c0c804 	movi	r3,800
 8003e18:	10c00015 	stw	r3,0(r2)
	renderer.displayHeight = 480;
 8003e1c:	008200f4 	movhi	r2,2051
 8003e20:	10ab1a04 	addi	r2,r2,-21400
 8003e24:	00c07804 	movi	r3,480
 8003e28:	10c00115 	stw	r3,4(r2)
	renderer.damagedRegion = 0;
 8003e2c:	008200f4 	movhi	r2,2051
 8003e30:	10ab1a04 	addi	r2,r2,-21400
 8003e34:	10000315 	stw	zero,12(r2)

	//Init touch renderer
	touchHandler.head = 0;
 8003e38:	008200f4 	movhi	r2,2051
 8003e3c:	10ab1104 	addi	r2,r2,-21436
 8003e40:	10000115 	stw	zero,4(r2)
	touchHandler.tail = 0;
 8003e44:	008200f4 	movhi	r2,2051
 8003e48:	10ab1104 	addi	r2,r2,-21436
 8003e4c:	10000215 	stw	zero,8(r2)

	//Init root view
	rootView = new(ScreenView, 800, 480, PRIMARY);
 8003e50:	008200f4 	movhi	r2,2051
 8003e54:	10aaf104 	addi	r2,r2,-21564
 8003e58:	10800017 	ldw	r2,0(r2)
 8003e5c:	1009883a 	mov	r4,r2
 8003e60:	0140c804 	movi	r5,800
 8003e64:	01807804 	movi	r6,480
 8003e68:	01c00144 	movi	r7,5
 8003e6c:	80052900 	call	8005290 <new>
 8003e70:	d0a70e15 	stw	r2,-25544(gp)
	touchHandler.rootView = rootView;
 8003e74:	d0e70e17 	ldw	r3,-25544(gp)
 8003e78:	008200f4 	movhi	r2,2051
 8003e7c:	10ab1104 	addi	r2,r2,-21436
 8003e80:	10c00015 	stw	r3,0(r2)
	setRoot(&renderer, rootView);
 8003e84:	d0a70e17 	ldw	r2,-25544(gp)
 8003e88:	010200f4 	movhi	r4,2051
 8003e8c:	212b1a04 	addi	r4,r4,-21400
 8003e90:	100b883a 	mov	r5,r2
 8003e94:	80063bc0 	call	80063bc <setRoot>
	setRenderer(rootView, &renderer);
 8003e98:	d0a70e17 	ldw	r2,-25544(gp)
 8003e9c:	1009883a 	mov	r4,r2
 8003ea0:	014200f4 	movhi	r5,2051
 8003ea4:	296b1a04 	addi	r5,r5,-21400
 8003ea8:	80081340 	call	8008134 <setRenderer>
}
 8003eac:	e037883a 	mov	sp,fp
 8003eb0:	dfc00117 	ldw	ra,4(sp)
 8003eb4:	df000017 	ldw	fp,0(sp)
 8003eb8:	dec00204 	addi	sp,sp,8
 8003ebc:	f800283a 	ret

08003ec0 <onPlayClick.3756>:
		attachView(eqScreen, trebleText);
		attachView(eqScreen, bassText);
		attachView(eqScreen, trebleControl);
		attachView(eqScreen, bassControl);

		inline int onPlayClick(void* _self) {
 8003ec0:	defffd04 	addi	sp,sp,-12
 8003ec4:	dfc00215 	stw	ra,8(sp)
 8003ec8:	df000115 	stw	fp,4(sp)
 8003ecc:	df000104 	addi	fp,sp,4
 8003ed0:	e13fff15 	stw	r4,-4(fp)
			wifi_play_pause_command();
 8003ed4:	8008bec0 	call	8008bec <wifi_play_pause_command>
			waitWifi();
 8003ed8:	80088840 	call	8008884 <waitWifi>
			printf("PLAY PAUSE \n");
 8003edc:	010200b4 	movhi	r4,2050
 8003ee0:	211aeb04 	addi	r4,r4,27564
 8003ee4:	800c89c0 	call	800c89c <puts>

			return 1;
 8003ee8:	00800044 	movi	r2,1
		}
 8003eec:	e037883a 	mov	sp,fp
 8003ef0:	dfc00117 	ldw	ra,4(sp)
 8003ef4:	df000017 	ldw	fp,0(sp)
 8003ef8:	dec00204 	addi	sp,sp,8
 8003efc:	f800283a 	ret

08003f00 <displayScreen>:
}

/**
 * Initialize all project views
 */
void displayScreen(){
 8003f00:	defffe04 	addi	sp,sp,-8
 8003f04:	dfc00115 	stw	ra,4(sp)
 8003f08:	df000015 	stw	fp,0(sp)
 8003f0c:	d839883a 	mov	fp,sp
		//Audio Bar Init
		audioScreen = new(ScreenView, 770, 80, WHITE);
 8003f10:	008200f4 	movhi	r2,2051
 8003f14:	10aaf104 	addi	r2,r2,-21564
 8003f18:	10800017 	ldw	r2,0(r2)
 8003f1c:	1009883a 	mov	r4,r2
 8003f20:	0140c084 	movi	r5,770
 8003f24:	01801404 	movi	r6,80
 8003f28:	01c00044 	movi	r7,1
 8003f2c:	80052900 	call	8005290 <new>
 8003f30:	d0a70415 	stw	r2,-25584(gp)
		setX(audioScreen, 0);
 8003f34:	d0a70417 	ldw	r2,-25584(gp)
 8003f38:	1009883a 	mov	r4,r2
 8003f3c:	000b883a 	mov	r5,zero
 8003f40:	8007c180 	call	8007c18 <setX>
		setY(audioScreen, 400);
 8003f44:	d0a70417 	ldw	r2,-25584(gp)
 8003f48:	1009883a 	mov	r4,r2
 8003f4c:	01406404 	movi	r5,400
 8003f50:	8007ce40 	call	8007ce4 <setY>

		timeText = new(TextView, PRIMARY);
 8003f54:	008200f4 	movhi	r2,2051
 8003f58:	10aaf304 	addi	r2,r2,-21556
 8003f5c:	10800017 	ldw	r2,0(r2)
 8003f60:	1009883a 	mov	r4,r2
 8003f64:	01400144 	movi	r5,5
 8003f68:	80052900 	call	8005290 <new>
 8003f6c:	d0a71615 	stw	r2,-25512(gp)
		setX(timeText, 410);
 8003f70:	d0a71617 	ldw	r2,-25512(gp)
 8003f74:	1009883a 	mov	r4,r2
 8003f78:	01406684 	movi	r5,410
 8003f7c:	8007c180 	call	8007c18 <setX>
		setY(timeText, 33);
 8003f80:	d0a71617 	ldw	r2,-25512(gp)
 8003f84:	1009883a 	mov	r4,r2
 8003f88:	01400844 	movi	r5,33
 8003f8c:	8007ce40 	call	8007ce4 <setY>
		setWidth(timeText, 100);
 8003f90:	d0a71617 	ldw	r2,-25512(gp)
 8003f94:	1009883a 	mov	r4,r2
 8003f98:	01401904 	movi	r5,100
 8003f9c:	8007db00 	call	8007db0 <setWidth>
		setHeight(timeText, 30);
 8003fa0:	d0a71617 	ldw	r2,-25512(gp)
 8003fa4:	1009883a 	mov	r4,r2
 8003fa8:	01400784 	movi	r5,30
 8003fac:	8007e7c0 	call	8007e7c <setHeight>
		setText(timeText, "Loading.");
 8003fb0:	d0a71617 	ldw	r2,-25512(gp)
 8003fb4:	1009883a 	mov	r4,r2
 8003fb8:	014200b4 	movhi	r5,2050
 8003fbc:	295aee04 	addi	r5,r5,27576
 8003fc0:	8006f940 	call	8006f94 <setText>

		playButton = new(PlayPauseButton, PRIMARY, BLACK);
 8003fc4:	008200f4 	movhi	r2,2051
 8003fc8:	10aaef04 	addi	r2,r2,-21572
 8003fcc:	10800017 	ldw	r2,0(r2)
 8003fd0:	1009883a 	mov	r4,r2
 8003fd4:	01400144 	movi	r5,5
 8003fd8:	000d883a 	mov	r6,zero
 8003fdc:	80052900 	call	8005290 <new>
 8003fe0:	d0a71415 	stw	r2,-25520(gp)
		setX(playButton, 10);
 8003fe4:	d0a71417 	ldw	r2,-25520(gp)
 8003fe8:	1009883a 	mov	r4,r2
 8003fec:	01400284 	movi	r5,10
 8003ff0:	8007c180 	call	8007c18 <setX>
		setY(playButton, 10);
 8003ff4:	d0a71417 	ldw	r2,-25520(gp)
 8003ff8:	1009883a 	mov	r4,r2
 8003ffc:	01400284 	movi	r5,10
 8004000:	8007ce40 	call	8007ce4 <setY>
		setWidth(playButton, 60);
 8004004:	d0a71417 	ldw	r2,-25520(gp)
 8004008:	1009883a 	mov	r4,r2
 800400c:	01400f04 	movi	r5,60
 8004010:	8007db00 	call	8007db0 <setWidth>
		setHeight(playButton, 60);
 8004014:	d0a71417 	ldw	r2,-25520(gp)
 8004018:	1009883a 	mov	r4,r2
 800401c:	01400f04 	movi	r5,60
 8004020:	8007e7c0 	call	8007e7c <setHeight>

		settingsButton = new(Button, PRIMARY, BLACK);
 8004024:	008200f4 	movhi	r2,2051
 8004028:	10aad504 	addi	r2,r2,-21676
 800402c:	10800017 	ldw	r2,0(r2)
 8004030:	1009883a 	mov	r4,r2
 8004034:	01400144 	movi	r5,5
 8004038:	000d883a 	mov	r6,zero
 800403c:	80052900 	call	8005290 <new>
 8004040:	d0a71115 	stw	r2,-25532(gp)
		setX(settingsButton, 700);
 8004044:	d0a71117 	ldw	r2,-25532(gp)
 8004048:	1009883a 	mov	r4,r2
 800404c:	0140af04 	movi	r5,700
 8004050:	8007c180 	call	8007c18 <setX>
		setY(settingsButton, 10);
 8004054:	d0a71117 	ldw	r2,-25532(gp)
 8004058:	1009883a 	mov	r4,r2
 800405c:	01400284 	movi	r5,10
 8004060:	8007ce40 	call	8007ce4 <setY>
		setWidth(settingsButton, 60);
 8004064:	d0a71117 	ldw	r2,-25532(gp)
 8004068:	1009883a 	mov	r4,r2
 800406c:	01400f04 	movi	r5,60
 8004070:	8007db00 	call	8007db0 <setWidth>
		setHeight(settingsButton, 60);
 8004074:	d0a71117 	ldw	r2,-25532(gp)
 8004078:	1009883a 	mov	r4,r2
 800407c:	01400f04 	movi	r5,60
 8004080:	8007e7c0 	call	8007e7c <setHeight>
		setChar(settingsButton, 'M');
 8004084:	d0a71117 	ldw	r2,-25532(gp)
 8004088:	1009883a 	mov	r4,r2
 800408c:	01401344 	movi	r5,77
 8004090:	80011900 	call	8001190 <setChar>

		channel1Button = new(Button, PRIMARY, BLACK);
 8004094:	008200f4 	movhi	r2,2051
 8004098:	10aad504 	addi	r2,r2,-21676
 800409c:	10800017 	ldw	r2,0(r2)
 80040a0:	1009883a 	mov	r4,r2
 80040a4:	01400144 	movi	r5,5
 80040a8:	000d883a 	mov	r6,zero
 80040ac:	80052900 	call	8005290 <new>
 80040b0:	d0a70715 	stw	r2,-25572(gp)
		setX(channel1Button, 90);
 80040b4:	d0a70717 	ldw	r2,-25572(gp)
 80040b8:	1009883a 	mov	r4,r2
 80040bc:	01401684 	movi	r5,90
 80040c0:	8007c180 	call	8007c18 <setX>
		setY(channel1Button, 10);
 80040c4:	d0a70717 	ldw	r2,-25572(gp)
 80040c8:	1009883a 	mov	r4,r2
 80040cc:	01400284 	movi	r5,10
 80040d0:	8007ce40 	call	8007ce4 <setY>
		setWidth(channel1Button, 60);
 80040d4:	d0a70717 	ldw	r2,-25572(gp)
 80040d8:	1009883a 	mov	r4,r2
 80040dc:	01400f04 	movi	r5,60
 80040e0:	8007db00 	call	8007db0 <setWidth>
		setHeight(channel1Button, 60);
 80040e4:	d0a70717 	ldw	r2,-25572(gp)
 80040e8:	1009883a 	mov	r4,r2
 80040ec:	01400f04 	movi	r5,60
 80040f0:	8007e7c0 	call	8007e7c <setHeight>
		setChar(channel1Button, '1');
 80040f4:	d0a70717 	ldw	r2,-25572(gp)
 80040f8:	1009883a 	mov	r4,r2
 80040fc:	01400c44 	movi	r5,49
 8004100:	80011900 	call	8001190 <setChar>

		channel2Button = new(Button, PRIMARY, BLACK);
 8004104:	008200f4 	movhi	r2,2051
 8004108:	10aad504 	addi	r2,r2,-21676
 800410c:	10800017 	ldw	r2,0(r2)
 8004110:	1009883a 	mov	r4,r2
 8004114:	01400144 	movi	r5,5
 8004118:	000d883a 	mov	r6,zero
 800411c:	80052900 	call	8005290 <new>
 8004120:	d0a71515 	stw	r2,-25516(gp)
		setX(channel2Button, 160);
 8004124:	d0a71517 	ldw	r2,-25516(gp)
 8004128:	1009883a 	mov	r4,r2
 800412c:	01402804 	movi	r5,160
 8004130:	8007c180 	call	8007c18 <setX>
		setY(channel2Button, 10);
 8004134:	d0a71517 	ldw	r2,-25516(gp)
 8004138:	1009883a 	mov	r4,r2
 800413c:	01400284 	movi	r5,10
 8004140:	8007ce40 	call	8007ce4 <setY>
		setWidth(channel2Button, 60);
 8004144:	d0a71517 	ldw	r2,-25516(gp)
 8004148:	1009883a 	mov	r4,r2
 800414c:	01400f04 	movi	r5,60
 8004150:	8007db00 	call	8007db0 <setWidth>
		setHeight(channel2Button, 60);
 8004154:	d0a71517 	ldw	r2,-25516(gp)
 8004158:	1009883a 	mov	r4,r2
 800415c:	01400f04 	movi	r5,60
 8004160:	8007e7c0 	call	8007e7c <setHeight>
		setChar(channel2Button, '2');
 8004164:	d0a71517 	ldw	r2,-25516(gp)
 8004168:	1009883a 	mov	r4,r2
 800416c:	01400c84 	movi	r5,50
 8004170:	80011900 	call	8001190 <setChar>

		attachView(rootView, audioScreen);
 8004174:	d0e70e17 	ldw	r3,-25544(gp)
 8004178:	d0a70417 	ldw	r2,-25584(gp)
 800417c:	1809883a 	mov	r4,r3
 8004180:	100b883a 	mov	r5,r2
 8004184:	8007fb40 	call	8007fb4 <attachView>
		attachView(audioScreen, timeText);
 8004188:	d0e70417 	ldw	r3,-25584(gp)
 800418c:	d0a71617 	ldw	r2,-25512(gp)
 8004190:	1809883a 	mov	r4,r3
 8004194:	100b883a 	mov	r5,r2
 8004198:	8007fb40 	call	8007fb4 <attachView>
		attachView(audioScreen, settingsButton);
 800419c:	d0e70417 	ldw	r3,-25584(gp)
 80041a0:	d0a71117 	ldw	r2,-25532(gp)
 80041a4:	1809883a 	mov	r4,r3
 80041a8:	100b883a 	mov	r5,r2
 80041ac:	8007fb40 	call	8007fb4 <attachView>
		attachView(audioScreen, playButton);
 80041b0:	d0e70417 	ldw	r3,-25584(gp)
 80041b4:	d0a71417 	ldw	r2,-25520(gp)
 80041b8:	1809883a 	mov	r4,r3
 80041bc:	100b883a 	mov	r5,r2
 80041c0:	8007fb40 	call	8007fb4 <attachView>
		attachView(audioScreen, channel1Button);
 80041c4:	d0e70417 	ldw	r3,-25584(gp)
 80041c8:	d0a70717 	ldw	r2,-25572(gp)
 80041cc:	1809883a 	mov	r4,r3
 80041d0:	100b883a 	mov	r5,r2
 80041d4:	8007fb40 	call	8007fb4 <attachView>
		attachView(audioScreen, channel2Button);
 80041d8:	d0e70417 	ldw	r3,-25584(gp)
 80041dc:	d0a71517 	ldw	r2,-25516(gp)
 80041e0:	1809883a 	mov	r4,r3
 80041e4:	100b883a 	mov	r5,r2
 80041e8:	8007fb40 	call	8007fb4 <attachView>

		//Histogram init
		histogramView = new(Histogram);
 80041ec:	008200f4 	movhi	r2,2051
 80041f0:	10aad904 	addi	r2,r2,-21660
 80041f4:	10800017 	ldw	r2,0(r2)
 80041f8:	1009883a 	mov	r4,r2
 80041fc:	80052900 	call	8005290 <new>
 8004200:	d0a71015 	stw	r2,-25536(gp)
		setX(histogramView, 200);
 8004204:	d0a71017 	ldw	r2,-25536(gp)
 8004208:	1009883a 	mov	r4,r2
 800420c:	01403204 	movi	r5,200
 8004210:	8007c180 	call	8007c18 <setX>
		setY(histogramView, 100);
 8004214:	d0a71017 	ldw	r2,-25536(gp)
 8004218:	1009883a 	mov	r4,r2
 800421c:	01401904 	movi	r5,100
 8004220:	8007ce40 	call	8007ce4 <setY>
		setWidth(histogramView, 370);
 8004224:	d0a71017 	ldw	r2,-25536(gp)
 8004228:	1009883a 	mov	r4,r2
 800422c:	01405c84 	movi	r5,370
 8004230:	8007db00 	call	8007db0 <setWidth>
		setHeight(histogramView, 200);
 8004234:	d0a71017 	ldw	r2,-25536(gp)
 8004238:	1009883a 	mov	r4,r2
 800423c:	01403204 	movi	r5,200
 8004240:	8007e7c0 	call	8007e7c <setHeight>

		attachView(rootView, histogramView);
 8004244:	d0e70e17 	ldw	r3,-25544(gp)
 8004248:	d0a71017 	ldw	r2,-25536(gp)
 800424c:	1809883a 	mov	r4,r3
 8004250:	100b883a 	mov	r5,r2
 8004254:	8007fb40 	call	8007fb4 <attachView>

		//Settings Screen Init
		menuScreen = new(ScreenView, 170, 300, WHITE);
 8004258:	008200f4 	movhi	r2,2051
 800425c:	10aaf104 	addi	r2,r2,-21564
 8004260:	10800017 	ldw	r2,0(r2)
 8004264:	1009883a 	mov	r4,r2
 8004268:	01402a84 	movi	r5,170
 800426c:	01804b04 	movi	r6,300
 8004270:	01c00044 	movi	r7,1
 8004274:	80052900 	call	8005290 <new>
 8004278:	d0a70815 	stw	r2,-25568(gp)
		setX(menuScreen, 100);
 800427c:	d0a70817 	ldw	r2,-25568(gp)
 8004280:	1009883a 	mov	r4,r2
 8004284:	01401904 	movi	r5,100
 8004288:	8007c180 	call	8007c18 <setX>
		setY(menuScreen, 50);
 800428c:	d0a70817 	ldw	r2,-25568(gp)
 8004290:	1009883a 	mov	r4,r2
 8004294:	01400c84 	movi	r5,50
 8004298:	8007ce40 	call	8007ce4 <setY>
		setVisible(menuScreen, 0);
 800429c:	d0a70817 	ldw	r2,-25568(gp)
 80042a0:	1009883a 	mov	r4,r2
 80042a4:	000b883a 	mov	r5,zero
 80042a8:	8007f480 	call	8007f48 <setVisible>

		eqButton = new(Button, PRIMARY, BLACK);
 80042ac:	008200f4 	movhi	r2,2051
 80042b0:	10aad504 	addi	r2,r2,-21676
 80042b4:	10800017 	ldw	r2,0(r2)
 80042b8:	1009883a 	mov	r4,r2
 80042bc:	01400144 	movi	r5,5
 80042c0:	000d883a 	mov	r6,zero
 80042c4:	80052900 	call	8005290 <new>
 80042c8:	d0a70c15 	stw	r2,-25552(gp)
		setX(eqButton, 50);
 80042cc:	d0a70c17 	ldw	r2,-25552(gp)
 80042d0:	1009883a 	mov	r4,r2
 80042d4:	01400c84 	movi	r5,50
 80042d8:	8007c180 	call	8007c18 <setX>
		setY(eqButton, 75);
 80042dc:	d0a70c17 	ldw	r2,-25552(gp)
 80042e0:	1009883a 	mov	r4,r2
 80042e4:	014012c4 	movi	r5,75
 80042e8:	8007ce40 	call	8007ce4 <setY>
		setWidth(eqButton, 70);
 80042ec:	d0a70c17 	ldw	r2,-25552(gp)
 80042f0:	1009883a 	mov	r4,r2
 80042f4:	01401184 	movi	r5,70
 80042f8:	8007db00 	call	8007db0 <setWidth>
		setHeight(eqButton, 70);
 80042fc:	d0a70c17 	ldw	r2,-25552(gp)
 8004300:	1009883a 	mov	r4,r2
 8004304:	01401184 	movi	r5,70
 8004308:	8007e7c0 	call	8007e7c <setHeight>
		setChar(eqButton, 'E');
 800430c:	d0a70c17 	ldw	r2,-25552(gp)
 8004310:	1009883a 	mov	r4,r2
 8004314:	01401144 	movi	r5,69
 8004318:	80011900 	call	8001190 <setChar>

		colorButton = new(Button, PRIMARY, BLACK);
 800431c:	008200f4 	movhi	r2,2051
 8004320:	10aad504 	addi	r2,r2,-21676
 8004324:	10800017 	ldw	r2,0(r2)
 8004328:	1009883a 	mov	r4,r2
 800432c:	01400144 	movi	r5,5
 8004330:	000d883a 	mov	r6,zero
 8004334:	80052900 	call	8005290 <new>
 8004338:	d0a71715 	stw	r2,-25508(gp)
		setX(colorButton, 50);
 800433c:	d0a71717 	ldw	r2,-25508(gp)
 8004340:	1009883a 	mov	r4,r2
 8004344:	01400c84 	movi	r5,50
 8004348:	8007c180 	call	8007c18 <setX>
		setY(colorButton, 155);
 800434c:	d0a71717 	ldw	r2,-25508(gp)
 8004350:	1009883a 	mov	r4,r2
 8004354:	014026c4 	movi	r5,155
 8004358:	8007ce40 	call	8007ce4 <setY>
		setWidth(colorButton, 70);
 800435c:	d0a71717 	ldw	r2,-25508(gp)
 8004360:	1009883a 	mov	r4,r2
 8004364:	01401184 	movi	r5,70
 8004368:	8007db00 	call	8007db0 <setWidth>
		setHeight(colorButton, 70);
 800436c:	d0a71717 	ldw	r2,-25508(gp)
 8004370:	1009883a 	mov	r4,r2
 8004374:	01401184 	movi	r5,70
 8004378:	8007e7c0 	call	8007e7c <setHeight>
		setChar(colorButton, 'C');
 800437c:	d0a71717 	ldw	r2,-25508(gp)
 8004380:	1009883a 	mov	r4,r2
 8004384:	014010c4 	movi	r5,67
 8004388:	80011900 	call	8001190 <setChar>

		colorScreen = new(ScreenView, 370, 300, WHITE);
 800438c:	008200f4 	movhi	r2,2051
 8004390:	10aaf104 	addi	r2,r2,-21564
 8004394:	10800017 	ldw	r2,0(r2)
 8004398:	1009883a 	mov	r4,r2
 800439c:	01405c84 	movi	r5,370
 80043a0:	01804b04 	movi	r6,300
 80043a4:	01c00044 	movi	r7,1
 80043a8:	80052900 	call	8005290 <new>
 80043ac:	d0a70d15 	stw	r2,-25548(gp)
		setX(colorScreen, 300);
 80043b0:	d0a70d17 	ldw	r2,-25548(gp)
 80043b4:	1009883a 	mov	r4,r2
 80043b8:	01404b04 	movi	r5,300
 80043bc:	8007c180 	call	8007c18 <setX>
		setY(colorScreen, 50);
 80043c0:	d0a70d17 	ldw	r2,-25548(gp)
 80043c4:	1009883a 	mov	r4,r2
 80043c8:	01400c84 	movi	r5,50
 80043cc:	8007ce40 	call	8007ce4 <setY>
		setVisible(colorScreen, 0);
 80043d0:	d0a70d17 	ldw	r2,-25548(gp)
 80043d4:	1009883a 	mov	r4,r2
 80043d8:	000b883a 	mov	r5,zero
 80043dc:	8007f480 	call	8007f48 <setVisible>

		blueButton = new(Button, BLUE, BLACK);
 80043e0:	008200f4 	movhi	r2,2051
 80043e4:	10aad504 	addi	r2,r2,-21676
 80043e8:	10800017 	ldw	r2,0(r2)
 80043ec:	1009883a 	mov	r4,r2
 80043f0:	01400104 	movi	r5,4
 80043f4:	000d883a 	mov	r6,zero
 80043f8:	80052900 	call	8005290 <new>
 80043fc:	d0a71315 	stw	r2,-25524(gp)
		setX(blueButton, 80);
 8004400:	d0a71317 	ldw	r2,-25524(gp)
 8004404:	1009883a 	mov	r4,r2
 8004408:	01401404 	movi	r5,80
 800440c:	8007c180 	call	8007c18 <setX>
		setY(blueButton, 120);
 8004410:	d0a71317 	ldw	r2,-25524(gp)
 8004414:	1009883a 	mov	r4,r2
 8004418:	01401e04 	movi	r5,120
 800441c:	8007ce40 	call	8007ce4 <setY>
		setWidth(blueButton, 60);
 8004420:	d0a71317 	ldw	r2,-25524(gp)
 8004424:	1009883a 	mov	r4,r2
 8004428:	01400f04 	movi	r5,60
 800442c:	8007db00 	call	8007db0 <setWidth>
		setHeight(blueButton, 60);
 8004430:	d0a71317 	ldw	r2,-25524(gp)
 8004434:	1009883a 	mov	r4,r2
 8004438:	01400f04 	movi	r5,60
 800443c:	8007e7c0 	call	8007e7c <setHeight>

		magentaButton = new(Button, MAGENTA, BLACK);
 8004440:	008200f4 	movhi	r2,2051
 8004444:	10aad504 	addi	r2,r2,-21676
 8004448:	10800017 	ldw	r2,0(r2)
 800444c:	1009883a 	mov	r4,r2
 8004450:	014001c4 	movi	r5,7
 8004454:	000d883a 	mov	r6,zero
 8004458:	80052900 	call	8005290 <new>
 800445c:	d0a70a15 	stw	r2,-25560(gp)
		setX(magentaButton, 150);
 8004460:	d0a70a17 	ldw	r2,-25560(gp)
 8004464:	1009883a 	mov	r4,r2
 8004468:	01402584 	movi	r5,150
 800446c:	8007c180 	call	8007c18 <setX>
		setY(magentaButton, 120);
 8004470:	d0a70a17 	ldw	r2,-25560(gp)
 8004474:	1009883a 	mov	r4,r2
 8004478:	01401e04 	movi	r5,120
 800447c:	8007ce40 	call	8007ce4 <setY>
		setWidth(magentaButton, 60);
 8004480:	d0a70a17 	ldw	r2,-25560(gp)
 8004484:	1009883a 	mov	r4,r2
 8004488:	01400f04 	movi	r5,60
 800448c:	8007db00 	call	8007db0 <setWidth>
		setHeight(magentaButton, 60);
 8004490:	d0a70a17 	ldw	r2,-25560(gp)
 8004494:	1009883a 	mov	r4,r2
 8004498:	01400f04 	movi	r5,60
 800449c:	8007e7c0 	call	8007e7c <setHeight>

		redButton = new(Button, RED, BLACK);
 80044a0:	008200f4 	movhi	r2,2051
 80044a4:	10aad504 	addi	r2,r2,-21676
 80044a8:	10800017 	ldw	r2,0(r2)
 80044ac:	1009883a 	mov	r4,r2
 80044b0:	01400084 	movi	r5,2
 80044b4:	000d883a 	mov	r6,zero
 80044b8:	80052900 	call	8005290 <new>
 80044bc:	d0a70515 	stw	r2,-25580(gp)
		setX(redButton, 220);
 80044c0:	d0a70517 	ldw	r2,-25580(gp)
 80044c4:	1009883a 	mov	r4,r2
 80044c8:	01403704 	movi	r5,220
 80044cc:	8007c180 	call	8007c18 <setX>
		setY(redButton, 120);
 80044d0:	d0a70517 	ldw	r2,-25580(gp)
 80044d4:	1009883a 	mov	r4,r2
 80044d8:	01401e04 	movi	r5,120
 80044dc:	8007ce40 	call	8007ce4 <setY>
		setWidth(redButton, 60);
 80044e0:	d0a70517 	ldw	r2,-25580(gp)
 80044e4:	1009883a 	mov	r4,r2
 80044e8:	01400f04 	movi	r5,60
 80044ec:	8007db00 	call	8007db0 <setWidth>
		setHeight(redButton, 60);
 80044f0:	d0a70517 	ldw	r2,-25580(gp)
 80044f4:	1009883a 	mov	r4,r2
 80044f8:	01400f04 	movi	r5,60
 80044fc:	8007e7c0 	call	8007e7c <setHeight>

		eqScreen = new(ScreenView, 370, 300, WHITE);
 8004500:	008200f4 	movhi	r2,2051
 8004504:	10aaf104 	addi	r2,r2,-21564
 8004508:	10800017 	ldw	r2,0(r2)
 800450c:	1009883a 	mov	r4,r2
 8004510:	01405c84 	movi	r5,370
 8004514:	01804b04 	movi	r6,300
 8004518:	01c00044 	movi	r7,1
 800451c:	80052900 	call	8005290 <new>
 8004520:	d0a70f15 	stw	r2,-25540(gp)
		setX(eqScreen, 300);
 8004524:	d0a70f17 	ldw	r2,-25540(gp)
 8004528:	1009883a 	mov	r4,r2
 800452c:	01404b04 	movi	r5,300
 8004530:	8007c180 	call	8007c18 <setX>
		setY(eqScreen, 50);
 8004534:	d0a70f17 	ldw	r2,-25540(gp)
 8004538:	1009883a 	mov	r4,r2
 800453c:	01400c84 	movi	r5,50
 8004540:	8007ce40 	call	8007ce4 <setY>
		setVisible(eqScreen, 0);
 8004544:	d0a70f17 	ldw	r2,-25540(gp)
 8004548:	1009883a 	mov	r4,r2
 800454c:	000b883a 	mov	r5,zero
 8004550:	8007f480 	call	8007f48 <setVisible>

		trebleText = new(TextView, PRIMARY);
 8004554:	008200f4 	movhi	r2,2051
 8004558:	10aaf304 	addi	r2,r2,-21556
 800455c:	10800017 	ldw	r2,0(r2)
 8004560:	1009883a 	mov	r4,r2
 8004564:	01400144 	movi	r5,5
 8004568:	80052900 	call	8005290 <new>
 800456c:	d0a71215 	stw	r2,-25528(gp)
		setX(trebleText, 50);
 8004570:	d0a71217 	ldw	r2,-25528(gp)
 8004574:	1009883a 	mov	r4,r2
 8004578:	01400c84 	movi	r5,50
 800457c:	8007c180 	call	8007c18 <setX>
		setY(trebleText, 59);
 8004580:	d0a71217 	ldw	r2,-25528(gp)
 8004584:	1009883a 	mov	r4,r2
 8004588:	01400ec4 	movi	r5,59
 800458c:	8007ce40 	call	8007ce4 <setY>
		setWidth(trebleText, 100);
 8004590:	d0a71217 	ldw	r2,-25528(gp)
 8004594:	1009883a 	mov	r4,r2
 8004598:	01401904 	movi	r5,100
 800459c:	8007db00 	call	8007db0 <setWidth>
		setHeight(trebleText, 14);
 80045a0:	d0a71217 	ldw	r2,-25528(gp)
 80045a4:	1009883a 	mov	r4,r2
 80045a8:	01400384 	movi	r5,14
 80045ac:	8007e7c0 	call	8007e7c <setHeight>
		setText(trebleText, "Treble");
 80045b0:	d0a71217 	ldw	r2,-25528(gp)
 80045b4:	1009883a 	mov	r4,r2
 80045b8:	014200b4 	movhi	r5,2050
 80045bc:	295af104 	addi	r5,r5,27588
 80045c0:	8006f940 	call	8006f94 <setText>

		trebleControl = new(ProgressBar, PRIMARY);
 80045c4:	008200f4 	movhi	r2,2051
 80045c8:	10aaf004 	addi	r2,r2,-21568
 80045cc:	10800017 	ldw	r2,0(r2)
 80045d0:	1009883a 	mov	r4,r2
 80045d4:	01400144 	movi	r5,5
 80045d8:	80052900 	call	8005290 <new>
 80045dc:	d0a70915 	stw	r2,-25564(gp)
		setX(trebleControl, 50);
 80045e0:	d0a70917 	ldw	r2,-25564(gp)
 80045e4:	1009883a 	mov	r4,r2
 80045e8:	01400c84 	movi	r5,50
 80045ec:	8007c180 	call	8007c18 <setX>
		setY(trebleControl, 75);
 80045f0:	d0a70917 	ldw	r2,-25564(gp)
 80045f4:	1009883a 	mov	r4,r2
 80045f8:	014012c4 	movi	r5,75
 80045fc:	8007ce40 	call	8007ce4 <setY>
		setWidth(trebleControl, 270);
 8004600:	d0a70917 	ldw	r2,-25564(gp)
 8004604:	1009883a 	mov	r4,r2
 8004608:	01404384 	movi	r5,270
 800460c:	8007db00 	call	8007db0 <setWidth>
		setHeight(trebleControl, 50);
 8004610:	d0a70917 	ldw	r2,-25564(gp)
 8004614:	1009883a 	mov	r4,r2
 8004618:	01400c84 	movi	r5,50
 800461c:	8007e7c0 	call	8007e7c <setHeight>

		bassText = new(TextView, PRIMARY);
 8004620:	008200f4 	movhi	r2,2051
 8004624:	10aaf304 	addi	r2,r2,-21556
 8004628:	10800017 	ldw	r2,0(r2)
 800462c:	1009883a 	mov	r4,r2
 8004630:	01400144 	movi	r5,5
 8004634:	80052900 	call	8005290 <new>
 8004638:	d0a70615 	stw	r2,-25576(gp)
		setX(bassText, 50);
 800463c:	d0a70617 	ldw	r2,-25576(gp)
 8004640:	1009883a 	mov	r4,r2
 8004644:	01400c84 	movi	r5,50
 8004648:	8007c180 	call	8007c18 <setX>
		setY(bassText, 175);
 800464c:	d0a70617 	ldw	r2,-25576(gp)
 8004650:	1009883a 	mov	r4,r2
 8004654:	01402bc4 	movi	r5,175
 8004658:	8007ce40 	call	8007ce4 <setY>
		setWidth(bassText, 100);
 800465c:	d0a70617 	ldw	r2,-25576(gp)
 8004660:	1009883a 	mov	r4,r2
 8004664:	01401904 	movi	r5,100
 8004668:	8007db00 	call	8007db0 <setWidth>
		setHeight(bassText, 14);
 800466c:	d0a70617 	ldw	r2,-25576(gp)
 8004670:	1009883a 	mov	r4,r2
 8004674:	01400384 	movi	r5,14
 8004678:	8007e7c0 	call	8007e7c <setHeight>
		setText(bassText, "Bass");
 800467c:	d0a70617 	ldw	r2,-25576(gp)
 8004680:	1009883a 	mov	r4,r2
 8004684:	014200b4 	movhi	r5,2050
 8004688:	295af304 	addi	r5,r5,27596
 800468c:	8006f940 	call	8006f94 <setText>

		bassControl = new(ProgressBar, PRIMARY);
 8004690:	008200f4 	movhi	r2,2051
 8004694:	10aaf004 	addi	r2,r2,-21568
 8004698:	10800017 	ldw	r2,0(r2)
 800469c:	1009883a 	mov	r4,r2
 80046a0:	01400144 	movi	r5,5
 80046a4:	80052900 	call	8005290 <new>
 80046a8:	d0a70b15 	stw	r2,-25556(gp)
		setX(bassControl, 50);
 80046ac:	d0a70b17 	ldw	r2,-25556(gp)
 80046b0:	1009883a 	mov	r4,r2
 80046b4:	01400c84 	movi	r5,50
 80046b8:	8007c180 	call	8007c18 <setX>
		setY(bassControl, 191);
 80046bc:	d0a70b17 	ldw	r2,-25556(gp)
 80046c0:	1009883a 	mov	r4,r2
 80046c4:	01402fc4 	movi	r5,191
 80046c8:	8007ce40 	call	8007ce4 <setY>
		setWidth(bassControl, 270);
 80046cc:	d0a70b17 	ldw	r2,-25556(gp)
 80046d0:	1009883a 	mov	r4,r2
 80046d4:	01404384 	movi	r5,270
 80046d8:	8007db00 	call	8007db0 <setWidth>
		setHeight(bassControl, 50);
 80046dc:	d0a70b17 	ldw	r2,-25556(gp)
 80046e0:	1009883a 	mov	r4,r2
 80046e4:	01400c84 	movi	r5,50
 80046e8:	8007e7c0 	call	8007e7c <setHeight>

		attachView(rootView, menuScreen);
 80046ec:	d0e70e17 	ldw	r3,-25544(gp)
 80046f0:	d0a70817 	ldw	r2,-25568(gp)
 80046f4:	1809883a 	mov	r4,r3
 80046f8:	100b883a 	mov	r5,r2
 80046fc:	8007fb40 	call	8007fb4 <attachView>
		attachView(menuScreen, eqButton);
 8004700:	d0e70817 	ldw	r3,-25568(gp)
 8004704:	d0a70c17 	ldw	r2,-25552(gp)
 8004708:	1809883a 	mov	r4,r3
 800470c:	100b883a 	mov	r5,r2
 8004710:	8007fb40 	call	8007fb4 <attachView>
		attachView(menuScreen, colorButton);
 8004714:	d0e70817 	ldw	r3,-25568(gp)
 8004718:	d0a71717 	ldw	r2,-25508(gp)
 800471c:	1809883a 	mov	r4,r3
 8004720:	100b883a 	mov	r5,r2
 8004724:	8007fb40 	call	8007fb4 <attachView>
		attachView(rootView, colorScreen);
 8004728:	d0e70e17 	ldw	r3,-25544(gp)
 800472c:	d0a70d17 	ldw	r2,-25548(gp)
 8004730:	1809883a 	mov	r4,r3
 8004734:	100b883a 	mov	r5,r2
 8004738:	8007fb40 	call	8007fb4 <attachView>
		attachView(colorScreen, blueButton);
 800473c:	d0e70d17 	ldw	r3,-25548(gp)
 8004740:	d0a71317 	ldw	r2,-25524(gp)
 8004744:	1809883a 	mov	r4,r3
 8004748:	100b883a 	mov	r5,r2
 800474c:	8007fb40 	call	8007fb4 <attachView>
		attachView(colorScreen, magentaButton);
 8004750:	d0e70d17 	ldw	r3,-25548(gp)
 8004754:	d0a70a17 	ldw	r2,-25560(gp)
 8004758:	1809883a 	mov	r4,r3
 800475c:	100b883a 	mov	r5,r2
 8004760:	8007fb40 	call	8007fb4 <attachView>
		attachView(colorScreen, redButton);
 8004764:	d0e70d17 	ldw	r3,-25548(gp)
 8004768:	d0a70517 	ldw	r2,-25580(gp)
 800476c:	1809883a 	mov	r4,r3
 8004770:	100b883a 	mov	r5,r2
 8004774:	8007fb40 	call	8007fb4 <attachView>
		attachView(rootView, eqScreen);
 8004778:	d0e70e17 	ldw	r3,-25544(gp)
 800477c:	d0a70f17 	ldw	r2,-25540(gp)
 8004780:	1809883a 	mov	r4,r3
 8004784:	100b883a 	mov	r5,r2
 8004788:	8007fb40 	call	8007fb4 <attachView>
		attachView(eqScreen, trebleText);
 800478c:	d0e70f17 	ldw	r3,-25540(gp)
 8004790:	d0a71217 	ldw	r2,-25528(gp)
 8004794:	1809883a 	mov	r4,r3
 8004798:	100b883a 	mov	r5,r2
 800479c:	8007fb40 	call	8007fb4 <attachView>
		attachView(eqScreen, bassText);
 80047a0:	d0e70f17 	ldw	r3,-25540(gp)
 80047a4:	d0a70617 	ldw	r2,-25576(gp)
 80047a8:	1809883a 	mov	r4,r3
 80047ac:	100b883a 	mov	r5,r2
 80047b0:	8007fb40 	call	8007fb4 <attachView>
		attachView(eqScreen, trebleControl);
 80047b4:	d0e70f17 	ldw	r3,-25540(gp)
 80047b8:	d0a70917 	ldw	r2,-25564(gp)
 80047bc:	1809883a 	mov	r4,r3
 80047c0:	100b883a 	mov	r5,r2
 80047c4:	8007fb40 	call	8007fb4 <attachView>
		attachView(eqScreen, bassControl);
 80047c8:	d0e70f17 	ldw	r3,-25540(gp)
 80047cc:	d0a70b17 	ldw	r2,-25556(gp)
 80047d0:	1809883a 	mov	r4,r3
 80047d4:	100b883a 	mov	r5,r2
 80047d8:	8007fb40 	call	8007fb4 <attachView>
			return 1;
		}



		addEventListener(playButton, CLICK_EVENT, onPlayClick);
 80047dc:	d0a71417 	ldw	r2,-25520(gp)
 80047e0:	1009883a 	mov	r4,r2
 80047e4:	01400104 	movi	r5,4
 80047e8:	01820034 	movhi	r6,2048
 80047ec:	318fb004 	addi	r6,r6,16064
 80047f0:	80080880 	call	8008088 <addEventListener>
		addEventListener(channel1Button, CLICK_EVENT, onCh1Click);
 80047f4:	d0a70717 	ldw	r2,-25572(gp)
 80047f8:	1009883a 	mov	r4,r2
 80047fc:	01400104 	movi	r5,4
 8004800:	01820034 	movhi	r6,2048
 8004804:	31923504 	addi	r6,r6,18644
 8004808:	80080880 	call	8008088 <addEventListener>
		addEventListener(channel2Button, CLICK_EVENT, onCh2Click);
 800480c:	d0a71517 	ldw	r2,-25516(gp)
 8004810:	1009883a 	mov	r4,r2
 8004814:	01400104 	movi	r5,4
 8004818:	01820034 	movhi	r6,2048
 800481c:	31924504 	addi	r6,r6,18708
 8004820:	80080880 	call	8008088 <addEventListener>
		addEventListener(settingsButton, CLICK_EVENT, onSettingsClick);
 8004824:	d0a71117 	ldw	r2,-25532(gp)
 8004828:	1009883a 	mov	r4,r2
 800482c:	01400104 	movi	r5,4
 8004830:	01820034 	movhi	r6,2048
 8004834:	31925504 	addi	r6,r6,18772
 8004838:	80080880 	call	8008088 <addEventListener>
		addEventListener(eqButton, CLICK_EVENT, onEQClick);
 800483c:	d0a70c17 	ldw	r2,-25552(gp)
 8004840:	1009883a 	mov	r4,r2
 8004844:	01400104 	movi	r5,4
 8004848:	01820034 	movhi	r6,2048
 800484c:	31928c04 	addi	r6,r6,18992
 8004850:	80080880 	call	8008088 <addEventListener>
		addEventListener(colorButton, CLICK_EVENT, onColorClick);
 8004854:	d0a71717 	ldw	r2,-25508(gp)
 8004858:	1009883a 	mov	r4,r2
 800485c:	01400104 	movi	r5,4
 8004860:	01820034 	movhi	r6,2048
 8004864:	3192a104 	addi	r6,r6,19076
 8004868:	80080880 	call	8008088 <addEventListener>
		addEventListener(blueButton, CLICK_EVENT, onBlueClick);
 800486c:	d0a71317 	ldw	r2,-25524(gp)
 8004870:	1009883a 	mov	r4,r2
 8004874:	01400104 	movi	r5,4
 8004878:	01820034 	movhi	r6,2048
 800487c:	3192b604 	addi	r6,r6,19160
 8004880:	80080880 	call	8008088 <addEventListener>
		addEventListener(magentaButton, CLICK_EVENT, onMagentaClick);
 8004884:	d0a70a17 	ldw	r2,-25560(gp)
 8004888:	1009883a 	mov	r4,r2
 800488c:	01400104 	movi	r5,4
 8004890:	01820034 	movhi	r6,2048
 8004894:	3192c404 	addi	r6,r6,19216
 8004898:	80080880 	call	8008088 <addEventListener>
		addEventListener(redButton, CLICK_EVENT, onRedClick);
 800489c:	d0a70517 	ldw	r2,-25580(gp)
 80048a0:	1009883a 	mov	r4,r2
 80048a4:	01400104 	movi	r5,4
 80048a8:	01820034 	movhi	r6,2048
 80048ac:	3192d304 	addi	r6,r6,19276
 80048b0:	80080880 	call	8008088 <addEventListener>

		render(&renderer);
 80048b4:	010200f4 	movhi	r4,2051
 80048b8:	212b1a04 	addi	r4,r4,-21400
 80048bc:	80065080 	call	8006508 <render>
}
 80048c0:	e037883a 	mov	sp,fp
 80048c4:	dfc00117 	ldw	ra,4(sp)
 80048c8:	df000017 	ldw	fp,0(sp)
 80048cc:	dec00204 	addi	sp,sp,8
 80048d0:	f800283a 	ret

080048d4 <onCh1Click.3759>:
			printf("PLAY PAUSE \n");

			return 1;
		}

		inline int onCh1Click(void* _self) {
 80048d4:	defffd04 	addi	sp,sp,-12
 80048d8:	dfc00215 	stw	ra,8(sp)
 80048dc:	df000115 	stw	fp,4(sp)
 80048e0:	df000104 	addi	fp,sp,4
 80048e4:	e13fff15 	stw	r4,-4(fp)
			wifi_ch1_command();
 80048e8:	8008cf00 	call	8008cf0 <wifi_ch1_command>
			waitWifi();
 80048ec:	80088840 	call	8008884 <waitWifi>
			printf("RADIO CH1 \n");
 80048f0:	010200b4 	movhi	r4,2050
 80048f4:	211af504 	addi	r4,r4,27604
 80048f8:	800c89c0 	call	800c89c <puts>

			return 1;
 80048fc:	00800044 	movi	r2,1
		}
 8004900:	e037883a 	mov	sp,fp
 8004904:	dfc00117 	ldw	ra,4(sp)
 8004908:	df000017 	ldw	fp,0(sp)
 800490c:	dec00204 	addi	sp,sp,8
 8004910:	f800283a 	ret

08004914 <onCh2Click.3762>:

		inline int onCh2Click(void* _self) {
 8004914:	defffd04 	addi	sp,sp,-12
 8004918:	dfc00215 	stw	ra,8(sp)
 800491c:	df000115 	stw	fp,4(sp)
 8004920:	df000104 	addi	fp,sp,4
 8004924:	e13fff15 	stw	r4,-4(fp)
			wifi_ch2_command();
 8004928:	8008df40 	call	8008df4 <wifi_ch2_command>
			waitWifi();
 800492c:	80088840 	call	8008884 <waitWifi>
			printf("RADIO CH2\n");
 8004930:	010200b4 	movhi	r4,2050
 8004934:	211af804 	addi	r4,r4,27616
 8004938:	800c89c0 	call	800c89c <puts>

			return 1;
 800493c:	00800044 	movi	r2,1
		}
 8004940:	e037883a 	mov	sp,fp
 8004944:	dfc00117 	ldw	ra,4(sp)
 8004948:	df000017 	ldw	fp,0(sp)
 800494c:	dec00204 	addi	sp,sp,8
 8004950:	f800283a 	ret

08004954 <onSettingsClick.3765>:

		inline int onSettingsClick(void* _self) {
 8004954:	defff904 	addi	sp,sp,-28
 8004958:	dfc00615 	stw	ra,24(sp)
 800495c:	df000515 	stw	fp,20(sp)
 8004960:	df000504 	addi	fp,sp,20
 8004964:	e13fff15 	stw	r4,-4(fp)
			struct View* self1 = menuScreen;
 8004968:	d0a70817 	ldw	r2,-25568(gp)
 800496c:	e0bffb15 	stw	r2,-20(fp)
			struct View* self2 = eqScreen;
 8004970:	d0a70f17 	ldw	r2,-25540(gp)
 8004974:	e0bffc15 	stw	r2,-16(fp)
			struct View* self3 = colorScreen;
 8004978:	d0a70d17 	ldw	r2,-25548(gp)
 800497c:	e0bffd15 	stw	r2,-12(fp)
			struct View* self4 = histogramView;
 8004980:	d0a71017 	ldw	r2,-25536(gp)
 8004984:	e0bffe15 	stw	r2,-8(fp)
			if(self4->visible) {
 8004988:	e0bffe17 	ldw	r2,-8(fp)
 800498c:	10800b17 	ldw	r2,44(r2)
 8004990:	10001126 	beq	r2,zero,80049d8 <onSettingsClick.3765+0x84>
				setVisible(self1, 1);
 8004994:	e13ffb17 	ldw	r4,-20(fp)
 8004998:	01400044 	movi	r5,1
 800499c:	8007f480 	call	8007f48 <setVisible>
				setVisible(self2, 1);
 80049a0:	e13ffc17 	ldw	r4,-16(fp)
 80049a4:	01400044 	movi	r5,1
 80049a8:	8007f480 	call	8007f48 <setVisible>
				setVisible(self3, 0);
 80049ac:	e13ffd17 	ldw	r4,-12(fp)
 80049b0:	000b883a 	mov	r5,zero
 80049b4:	8007f480 	call	8007f48 <setVisible>
				setVisible(self4, 0);
 80049b8:	e13ffe17 	ldw	r4,-8(fp)
 80049bc:	000b883a 	mov	r5,zero
 80049c0:	8007f480 	call	8007f48 <setVisible>
				setChar(settingsButton, 'X');
 80049c4:	d0a71117 	ldw	r2,-25532(gp)
 80049c8:	1009883a 	mov	r4,r2
 80049cc:	01401604 	movi	r5,88
 80049d0:	80011900 	call	8001190 <setChar>
 80049d4:	00001006 	br	8004a18 <onSettingsClick.3765+0xc4>
			} else {
				setVisible(self1, 0);
 80049d8:	e13ffb17 	ldw	r4,-20(fp)
 80049dc:	000b883a 	mov	r5,zero
 80049e0:	8007f480 	call	8007f48 <setVisible>
				setVisible(self2, 0);
 80049e4:	e13ffc17 	ldw	r4,-16(fp)
 80049e8:	000b883a 	mov	r5,zero
 80049ec:	8007f480 	call	8007f48 <setVisible>
				setVisible(self3, 0);
 80049f0:	e13ffd17 	ldw	r4,-12(fp)
 80049f4:	000b883a 	mov	r5,zero
 80049f8:	8007f480 	call	8007f48 <setVisible>
				setVisible(self4, 1);
 80049fc:	e13ffe17 	ldw	r4,-8(fp)
 8004a00:	01400044 	movi	r5,1
 8004a04:	8007f480 	call	8007f48 <setVisible>
				setChar(settingsButton, 'M');
 8004a08:	d0a71117 	ldw	r2,-25532(gp)
 8004a0c:	1009883a 	mov	r4,r2
 8004a10:	01401344 	movi	r5,77
 8004a14:	80011900 	call	8001190 <setChar>
			}
			return 1;
 8004a18:	00800044 	movi	r2,1
		}
 8004a1c:	e037883a 	mov	sp,fp
 8004a20:	dfc00117 	ldw	ra,4(sp)
 8004a24:	df000017 	ldw	fp,0(sp)
 8004a28:	dec00204 	addi	sp,sp,8
 8004a2c:	f800283a 	ret

08004a30 <onEQClick.3772>:

		inline int onEQClick(void* _self) {
 8004a30:	defffb04 	addi	sp,sp,-20
 8004a34:	dfc00415 	stw	ra,16(sp)
 8004a38:	df000315 	stw	fp,12(sp)
 8004a3c:	df000304 	addi	fp,sp,12
 8004a40:	e13fff15 	stw	r4,-4(fp)
			struct View* self1 = eqScreen;
 8004a44:	d0a70f17 	ldw	r2,-25540(gp)
 8004a48:	e0bffd15 	stw	r2,-12(fp)
			struct View* self2 = colorScreen;
 8004a4c:	d0a70d17 	ldw	r2,-25548(gp)
 8004a50:	e0bffe15 	stw	r2,-8(fp)
			setVisible(self1, 1);
 8004a54:	e13ffd17 	ldw	r4,-12(fp)
 8004a58:	01400044 	movi	r5,1
 8004a5c:	8007f480 	call	8007f48 <setVisible>
			setVisible(self2, 0);
 8004a60:	e13ffe17 	ldw	r4,-8(fp)
 8004a64:	000b883a 	mov	r5,zero
 8004a68:	8007f480 	call	8007f48 <setVisible>
			return 1;
 8004a6c:	00800044 	movi	r2,1
		}
 8004a70:	e037883a 	mov	sp,fp
 8004a74:	dfc00117 	ldw	ra,4(sp)
 8004a78:	df000017 	ldw	fp,0(sp)
 8004a7c:	dec00204 	addi	sp,sp,8
 8004a80:	f800283a 	ret

08004a84 <onColorClick.3777>:

		inline int onColorClick(void* _self) {
 8004a84:	defffb04 	addi	sp,sp,-20
 8004a88:	dfc00415 	stw	ra,16(sp)
 8004a8c:	df000315 	stw	fp,12(sp)
 8004a90:	df000304 	addi	fp,sp,12
 8004a94:	e13fff15 	stw	r4,-4(fp)
			struct View* self1 = eqScreen;
 8004a98:	d0a70f17 	ldw	r2,-25540(gp)
 8004a9c:	e0bffd15 	stw	r2,-12(fp)
			struct View* self2 = colorScreen;
 8004aa0:	d0a70d17 	ldw	r2,-25548(gp)
 8004aa4:	e0bffe15 	stw	r2,-8(fp)
			setVisible(self1, 0);
 8004aa8:	e13ffd17 	ldw	r4,-12(fp)
 8004aac:	000b883a 	mov	r5,zero
 8004ab0:	8007f480 	call	8007f48 <setVisible>
			setVisible(self2, 1);
 8004ab4:	e13ffe17 	ldw	r4,-8(fp)
 8004ab8:	01400044 	movi	r5,1
 8004abc:	8007f480 	call	8007f48 <setVisible>
			return 1;
 8004ac0:	00800044 	movi	r2,1
		}
 8004ac4:	e037883a 	mov	sp,fp
 8004ac8:	dfc00117 	ldw	ra,4(sp)
 8004acc:	df000017 	ldw	fp,0(sp)
 8004ad0:	dec00204 	addi	sp,sp,8
 8004ad4:	f800283a 	ret

08004ad8 <onBlueClick.3782>:

		inline int onBlueClick(void* _self) {
 8004ad8:	defffd04 	addi	sp,sp,-12
 8004adc:	dfc00215 	stw	ra,8(sp)
 8004ae0:	df000115 	stw	fp,4(sp)
 8004ae4:	df000104 	addi	fp,sp,4
 8004ae8:	e13fff15 	stw	r4,-4(fp)
			programPalette(PRIMARY, 0x000000FF);
 8004aec:	01000144 	movi	r4,5
 8004af0:	01403fc4 	movi	r5,255
 8004af4:	8001b8c0 	call	8001b8c <programPalette>
			return 1;
 8004af8:	00800044 	movi	r2,1
		}
 8004afc:	e037883a 	mov	sp,fp
 8004b00:	dfc00117 	ldw	ra,4(sp)
 8004b04:	df000017 	ldw	fp,0(sp)
 8004b08:	dec00204 	addi	sp,sp,8
 8004b0c:	f800283a 	ret

08004b10 <onMagentaClick.3785>:

		inline int onMagentaClick(void* _self) {
 8004b10:	defffd04 	addi	sp,sp,-12
 8004b14:	dfc00215 	stw	ra,8(sp)
 8004b18:	df000115 	stw	fp,4(sp)
 8004b1c:	df000104 	addi	fp,sp,4
 8004b20:	e13fff15 	stw	r4,-4(fp)
			programPalette(PRIMARY, 0x00FF00FF);
 8004b24:	01000144 	movi	r4,5
 8004b28:	01403ff4 	movhi	r5,255
 8004b2c:	29403fc4 	addi	r5,r5,255
 8004b30:	8001b8c0 	call	8001b8c <programPalette>
			return 1;
 8004b34:	00800044 	movi	r2,1
		}
 8004b38:	e037883a 	mov	sp,fp
 8004b3c:	dfc00117 	ldw	ra,4(sp)
 8004b40:	df000017 	ldw	fp,0(sp)
 8004b44:	dec00204 	addi	sp,sp,8
 8004b48:	f800283a 	ret

08004b4c <onRedClick.3788>:

		inline int onRedClick(void* _self) {
 8004b4c:	defffd04 	addi	sp,sp,-12
 8004b50:	dfc00215 	stw	ra,8(sp)
 8004b54:	df000115 	stw	fp,4(sp)
 8004b58:	df000104 	addi	fp,sp,4
 8004b5c:	e13fff15 	stw	r4,-4(fp)
			programPalette(PRIMARY, 0x00FF0000);
 8004b60:	01000144 	movi	r4,5
 8004b64:	01403ff4 	movhi	r5,255
 8004b68:	8001b8c0 	call	8001b8c <programPalette>
			return 1;
 8004b6c:	00800044 	movi	r2,1
		}
 8004b70:	e037883a 	mov	sp,fp
 8004b74:	dfc00117 	ldw	ra,4(sp)
 8004b78:	df000017 	ldw	fp,0(sp)
 8004b7c:	dec00204 	addi	sp,sp,8
 8004b80:	f800283a 	ret

08004b84 <main>:

		render(&renderer);
}

int main(int argc, char* argv[])
{
 8004b84:	deffe504 	addi	sp,sp,-108
 8004b88:	dfc01a15 	stw	ra,104(sp)
 8004b8c:	df001915 	stw	fp,100(sp)
 8004b90:	dc001815 	stw	r16,96(sp)
 8004b94:	df001904 	addi	fp,sp,100
 8004b98:	e13ffd15 	stw	r4,-12(fp)
 8004b9c:	e17ffe15 	stw	r5,-8(fp)
	int magnitude;
	init(argc, argv);
 8004ba0:	e13ffd17 	ldw	r4,-12(fp)
 8004ba4:	e17ffe17 	ldw	r5,-8(fp)
 8004ba8:	8003da80 	call	8003da8 <init>
	printf("INIT All DONE\n");
 8004bac:	010200b4 	movhi	r4,2050
 8004bb0:	211afb04 	addi	r4,r4,27628
 8004bb4:	800c89c0 	call	800c89c <puts>

	displayScreen();
 8004bb8:	8003f000 	call	8003f00 <displayScreen>
	printf("DISPLAY DONE\n");
 8004bbc:	010200b4 	movhi	r4,2050
 8004bc0:	211aff04 	addi	r4,r4,27644
 8004bc4:	800c89c0 	call	800c89c <puts>

	int hexHour;
	int hexMin;
	int hexSec;
	int timerCount = 0;
 8004bc8:	e03feb15 	stw	zero,-84(fp)

	gps_data_t *gps_data = malloc(sizeof(gps_data));
 8004bcc:	01000104 	movi	r4,4
 8004bd0:	800bd300 	call	800bd30 <malloc>
 8004bd4:	e0bfec15 	stw	r2,-80(fp)
	gps_data->headerSize = sizeof(GPSHEADER)-1;
 8004bd8:	e0bfec17 	ldw	r2,-80(fp)
 8004bdc:	00c00184 	movi	r3,6
 8004be0:	10c00b15 	stw	r3,44(r2)
	gps_data->header_i = 0;
 8004be4:	e0bfec17 	ldw	r2,-80(fp)
 8004be8:	10000c15 	stw	zero,48(r2)
	gps_data->gotGPSData = false;
 8004bec:	e0bfec17 	ldw	r2,-80(fp)
 8004bf0:	10000f45 	stb	zero,61(r2)
	gps_data->inputHeader[gps_data->headerSize] = '\0';
 8004bf4:	e0bfec17 	ldw	r2,-80(fp)
 8004bf8:	10800b17 	ldw	r2,44(r2)
 8004bfc:	e0ffec17 	ldw	r3,-80(fp)
 8004c00:	1885883a 	add	r2,r3,r2
 8004c04:	10800904 	addi	r2,r2,36
 8004c08:	10000005 	stb	zero,0(r2)
	gps_data->gotHeader = false;
 8004c0c:	e0bfec17 	ldw	r2,-80(fp)
 8004c10:	10000f05 	stb	zero,60(r2)
	gps_data->gotParsedTime = false;
 8004c14:	e0bfec17 	ldw	r2,-80(fp)
 8004c18:	10000f85 	stb	zero,62(r2)

	while(!(gps_data->gotGPSData && !gps_data->gotParsedTime)){
 8004c1c:	00000206 	br	8004c28 <main+0xa4>
		getGPSInfo(gps_data);
 8004c20:	e13fec17 	ldw	r4,-80(fp)
 8004c24:	80032a80 	call	80032a8 <getGPSInfo>
	gps_data->gotGPSData = false;
	gps_data->inputHeader[gps_data->headerSize] = '\0';
	gps_data->gotHeader = false;
	gps_data->gotParsedTime = false;

	while(!(gps_data->gotGPSData && !gps_data->gotParsedTime)){
 8004c28:	e0bfec17 	ldw	r2,-80(fp)
 8004c2c:	10800f43 	ldbu	r2,61(r2)
 8004c30:	1080005c 	xori	r2,r2,1
 8004c34:	10803fcc 	andi	r2,r2,255
 8004c38:	103ff91e 	bne	r2,zero,8004c20 <__alt_data_end+0xfc004c20>
 8004c3c:	e0bfec17 	ldw	r2,-80(fp)
 8004c40:	10800f83 	ldbu	r2,62(r2)
 8004c44:	10803fcc 	andi	r2,r2,255
 8004c48:	103ff51e 	bne	r2,zero,8004c20 <__alt_data_end+0xfc004c20>
		getGPSInfo(gps_data);
	}

	parseTime(gps_data);
 8004c4c:	e13fec17 	ldw	r4,-80(fp)
 8004c50:	80030cc0 	call	80030cc <parseTime>

	hexHour = gps_data->hour;
 8004c54:	e0bfec17 	ldw	r2,-80(fp)
 8004c58:	10801017 	ldw	r2,64(r2)
 8004c5c:	e0bfe815 	stw	r2,-96(fp)
	hexMin =  gps_data->minute;
 8004c60:	e0bfec17 	ldw	r2,-80(fp)
 8004c64:	10801117 	ldw	r2,68(r2)
 8004c68:	e0bfe915 	stw	r2,-92(fp)
	hexSec = gps_data->second;
 8004c6c:	e0bfec17 	ldw	r2,-80(fp)
 8004c70:	10801217 	ldw	r2,72(r2)
 8004c74:	e0bfea15 	stw	r2,-88(fp)

	while(1) {
		if(timerCount % 5 == 0) {
 8004c78:	e0bfeb17 	ldw	r2,-84(fp)
 8004c7c:	00c00144 	movi	r3,5
 8004c80:	10c7283a 	div	r3,r2,r3
 8004c84:	18c00164 	muli	r3,r3,5
 8004c88:	10c5c83a 	sub	r2,r2,r3
 8004c8c:	10005d1e 	bne	r2,zero,8004e04 <main+0x280>
			magnitude = Sound_In;
 8004c90:	00800804 	movi	r2,32
 8004c94:	1080000b 	ldhu	r2,0(r2)
 8004c98:	10bfffcc 	andi	r2,r2,65535
 8004c9c:	10a0001c 	xori	r2,r2,32768
 8004ca0:	10a00004 	addi	r2,r2,-32768
 8004ca4:	e0bfed15 	stw	r2,-76(fp)
			setAmplitude(histogramView, abs(magnitude)/40000.0);
 8004ca8:	d4271017 	ldw	r16,-25536(gp)
 8004cac:	e0bfed17 	ldw	r2,-76(fp)
 8004cb0:	1000010e 	bge	r2,zero,8004cb8 <main+0x134>
 8004cb4:	0085c83a 	sub	r2,zero,r2
 8004cb8:	1009883a 	mov	r4,r2
 8004cbc:	800b6280 	call	800b628 <__floatsidf>
 8004cc0:	100b883a 	mov	r5,r2
 8004cc4:	180d883a 	mov	r6,r3
 8004cc8:	2809883a 	mov	r4,r5
 8004ccc:	300b883a 	mov	r5,r6
 8004cd0:	000d883a 	mov	r6,zero
 8004cd4:	01d03934 	movhi	r7,16612
 8004cd8:	39e20004 	addi	r7,r7,-30720
 8004cdc:	8009a9c0 	call	8009a9c <__divdf3>
 8004ce0:	1009883a 	mov	r4,r2
 8004ce4:	180b883a 	mov	r5,r3
 8004ce8:	2005883a 	mov	r2,r4
 8004cec:	2807883a 	mov	r3,r5
 8004cf0:	8009883a 	mov	r4,r16
 8004cf4:	100b883a 	mov	r5,r2
 8004cf8:	180d883a 	mov	r6,r3
 8004cfc:	80039640 	call	8003964 <setAmplitude>

			IOWR_ALTERA_AVALON_PIO_DATA(LED_PIO_BASE, 0);
 8004d00:	0007883a 	mov	r3,zero
 8004d04:	00880404 	movi	r2,8208
 8004d08:	10c00035 	stwio	r3,0(r2)

			struct ProgressBar* trebleView = trebleControl;
 8004d0c:	d0a70917 	ldw	r2,-25564(gp)
 8004d10:	e0bfee15 	stw	r2,-72(fp)
			update_treble(trebleView->percentage*5+0.5);
 8004d14:	e13fee17 	ldw	r4,-72(fp)
 8004d18:	20800d17 	ldw	r2,52(r4)
 8004d1c:	20c00e17 	ldw	r3,56(r4)
 8004d20:	1009883a 	mov	r4,r2
 8004d24:	180b883a 	mov	r5,r3
 8004d28:	000d883a 	mov	r6,zero
 8004d2c:	01d00534 	movhi	r7,16404
 8004d30:	800a5ac0 	call	800a5ac <__muldf3>
 8004d34:	1009883a 	mov	r4,r2
 8004d38:	180b883a 	mov	r5,r3
 8004d3c:	2005883a 	mov	r2,r4
 8004d40:	2807883a 	mov	r3,r5
 8004d44:	1009883a 	mov	r4,r2
 8004d48:	180b883a 	mov	r5,r3
 8004d4c:	000d883a 	mov	r6,zero
 8004d50:	01cff834 	movhi	r7,16352
 8004d54:	80092000 	call	8009200 <__adddf3>
 8004d58:	1009883a 	mov	r4,r2
 8004d5c:	180b883a 	mov	r5,r3
 8004d60:	2005883a 	mov	r2,r4
 8004d64:	2807883a 	mov	r3,r5
 8004d68:	1009883a 	mov	r4,r2
 8004d6c:	180b883a 	mov	r5,r3
 8004d70:	800b5a00 	call	800b5a0 <__fixdfsi>
 8004d74:	10803fcc 	andi	r2,r2,255
 8004d78:	1080201c 	xori	r2,r2,128
 8004d7c:	10bfe004 	addi	r2,r2,-128
 8004d80:	1009883a 	mov	r4,r2
 8004d84:	8002b2c0 	call	8002b2c <update_treble>

			struct ProgressBar* bassView = bassControl;
 8004d88:	d0a70b17 	ldw	r2,-25556(gp)
 8004d8c:	e0bfef15 	stw	r2,-68(fp)
			update_bass(bassView->percentage*5+0.5);
 8004d90:	e13fef17 	ldw	r4,-68(fp)
 8004d94:	20800d17 	ldw	r2,52(r4)
 8004d98:	20c00e17 	ldw	r3,56(r4)
 8004d9c:	1009883a 	mov	r4,r2
 8004da0:	180b883a 	mov	r5,r3
 8004da4:	000d883a 	mov	r6,zero
 8004da8:	01d00534 	movhi	r7,16404
 8004dac:	800a5ac0 	call	800a5ac <__muldf3>
 8004db0:	1009883a 	mov	r4,r2
 8004db4:	180b883a 	mov	r5,r3
 8004db8:	2005883a 	mov	r2,r4
 8004dbc:	2807883a 	mov	r3,r5
 8004dc0:	1009883a 	mov	r4,r2
 8004dc4:	180b883a 	mov	r5,r3
 8004dc8:	000d883a 	mov	r6,zero
 8004dcc:	01cff834 	movhi	r7,16352
 8004dd0:	80092000 	call	8009200 <__adddf3>
 8004dd4:	1009883a 	mov	r4,r2
 8004dd8:	180b883a 	mov	r5,r3
 8004ddc:	2005883a 	mov	r2,r4
 8004de0:	2807883a 	mov	r3,r5
 8004de4:	1009883a 	mov	r4,r2
 8004de8:	180b883a 	mov	r5,r3
 8004dec:	800b5a00 	call	800b5a0 <__fixdfsi>
 8004df0:	10803fcc 	andi	r2,r2,255
 8004df4:	1080201c 	xori	r2,r2,128
 8004df8:	10bfe004 	addi	r2,r2,-128
 8004dfc:	1009883a 	mov	r4,r2
 8004e00:	8002b840 	call	8002b84 <update_bass>
		}
		if(timerCount >= 60){
 8004e04:	e0bfeb17 	ldw	r2,-84(fp)
 8004e08:	10800f10 	cmplti	r2,r2,60
 8004e0c:	1000261e 	bne	r2,zero,8004ea8 <main+0x324>
			hexSec ++;
 8004e10:	e0bfea17 	ldw	r2,-88(fp)
 8004e14:	10800044 	addi	r2,r2,1
 8004e18:	e0bfea15 	stw	r2,-88(fp)
			if(hexSec == 60){
 8004e1c:	e0bfea17 	ldw	r2,-88(fp)
 8004e20:	10800f18 	cmpnei	r2,r2,60
 8004e24:	1000041e 	bne	r2,zero,8004e38 <main+0x2b4>
				hexSec = 0;
 8004e28:	e03fea15 	stw	zero,-88(fp)
				hexMin ++;
 8004e2c:	e0bfe917 	ldw	r2,-92(fp)
 8004e30:	10800044 	addi	r2,r2,1
 8004e34:	e0bfe915 	stw	r2,-92(fp)
			}
			if(hexMin == 60){
 8004e38:	e0bfe917 	ldw	r2,-92(fp)
 8004e3c:	10800f18 	cmpnei	r2,r2,60
 8004e40:	1000041e 	bne	r2,zero,8004e54 <main+0x2d0>
				hexMin = 0;
 8004e44:	e03fe915 	stw	zero,-92(fp)
				hexHour ++;
 8004e48:	e0bfe817 	ldw	r2,-96(fp)
 8004e4c:	10800044 	addi	r2,r2,1
 8004e50:	e0bfe815 	stw	r2,-96(fp)
			}
			if(hexHour == 24){
 8004e54:	e0bfe817 	ldw	r2,-96(fp)
 8004e58:	10800618 	cmpnei	r2,r2,24
 8004e5c:	1000021e 	bne	r2,zero,8004e68 <main+0x2e4>
				hexHour = 1;
 8004e60:	00800044 	movi	r2,1
 8004e64:	e0bfe815 	stw	r2,-96(fp)
			}

			char time[50];
			sprintf(time, "%02d:%02d:%02d", hexHour, hexMin, hexSec);
 8004e68:	e0fff004 	addi	r3,fp,-64
 8004e6c:	e0bfea17 	ldw	r2,-88(fp)
 8004e70:	d8800015 	stw	r2,0(sp)
 8004e74:	1809883a 	mov	r4,r3
 8004e78:	014200b4 	movhi	r5,2050
 8004e7c:	295b0304 	addi	r5,r5,27660
 8004e80:	e1bfe817 	ldw	r6,-96(fp)
 8004e84:	e1ffe917 	ldw	r7,-92(fp)
 8004e88:	800c95c0 	call	800c95c <sprintf>
			setText(timeText, time);
 8004e8c:	d0e71617 	ldw	r3,-25512(gp)
 8004e90:	e0bff004 	addi	r2,fp,-64
 8004e94:	1809883a 	mov	r4,r3
 8004e98:	100b883a 	mov	r5,r2
 8004e9c:	8006f940 	call	8006f94 <setText>
			timerCount = 0;
 8004ea0:	e03feb15 	stw	zero,-84(fp)
 8004ea4:	00000306 	br	8004eb4 <main+0x330>
		} else {
			timerCount ++;
 8004ea8:	e0bfeb17 	ldw	r2,-84(fp)
 8004eac:	10800044 	addi	r2,r2,1
 8004eb0:	e0bfeb15 	stw	r2,-84(fp)
		}


		handleTouch(&touchHandler);
 8004eb4:	010200f4 	movhi	r4,2051
 8004eb8:	212b1104 	addi	r4,r4,-21436
 8004ebc:	80073f00 	call	80073f0 <handleTouch>
		partialRender(&renderer);
 8004ec0:	010200f4 	movhi	r4,2051
 8004ec4:	212b1a04 	addi	r4,r4,-21400
 8004ec8:	80065880 	call	8006588 <partialRender>
		usleep(1000000/60);
 8004ecc:	01104684 	movi	r4,16666
 8004ed0:	8019dac0 	call	8019dac <usleep>
	}
 8004ed4:	003f6806 	br	8004c78 <__alt_data_end+0xfc004c78>

08004ed8 <Object_ctor>:
/*
 *	Object
 */

static void * Object_ctor (void * _self, va_list * app)
{
 8004ed8:	defffd04 	addi	sp,sp,-12
 8004edc:	df000215 	stw	fp,8(sp)
 8004ee0:	df000204 	addi	fp,sp,8
 8004ee4:	e13ffe15 	stw	r4,-8(fp)
 8004ee8:	e17fff15 	stw	r5,-4(fp)
	return _self;
 8004eec:	e0bffe17 	ldw	r2,-8(fp)
}
 8004ef0:	e037883a 	mov	sp,fp
 8004ef4:	df000017 	ldw	fp,0(sp)
 8004ef8:	dec00104 	addi	sp,sp,4
 8004efc:	f800283a 	ret

08004f00 <Object_dtor>:

static void * Object_dtor (void * _self)
{
 8004f00:	defffe04 	addi	sp,sp,-8
 8004f04:	df000115 	stw	fp,4(sp)
 8004f08:	df000104 	addi	fp,sp,4
 8004f0c:	e13fff15 	stw	r4,-4(fp)
	return _self;
 8004f10:	e0bfff17 	ldw	r2,-4(fp)
}
 8004f14:	e037883a 	mov	sp,fp
 8004f18:	df000017 	ldw	fp,0(sp)
 8004f1c:	dec00104 	addi	sp,sp,4
 8004f20:	f800283a 	ret

08004f24 <Object_differ>:

static int Object_differ (const void * _self, const void * b)
{
 8004f24:	defffd04 	addi	sp,sp,-12
 8004f28:	df000215 	stw	fp,8(sp)
 8004f2c:	df000204 	addi	fp,sp,8
 8004f30:	e13ffe15 	stw	r4,-8(fp)
 8004f34:	e17fff15 	stw	r5,-4(fp)
	return _self != b;
 8004f38:	e0fffe17 	ldw	r3,-8(fp)
 8004f3c:	e0bfff17 	ldw	r2,-4(fp)
 8004f40:	1884c03a 	cmpne	r2,r3,r2
 8004f44:	10803fcc 	andi	r2,r2,255
}
 8004f48:	e037883a 	mov	sp,fp
 8004f4c:	df000017 	ldw	fp,0(sp)
 8004f50:	dec00104 	addi	sp,sp,4
 8004f54:	f800283a 	ret

08004f58 <classOf>:

const void * classOf (const void * _self)
{	const struct Object * self = _self;
 8004f58:	defffc04 	addi	sp,sp,-16
 8004f5c:	dfc00315 	stw	ra,12(sp)
 8004f60:	df000215 	stw	fp,8(sp)
 8004f64:	df000204 	addi	fp,sp,8
 8004f68:	e13fff15 	stw	r4,-4(fp)
 8004f6c:	e0bfff17 	ldw	r2,-4(fp)
 8004f70:	e0bffe15 	stw	r2,-8(fp)

	assert(self && self -> class);
 8004f74:	e0bffe17 	ldw	r2,-8(fp)
 8004f78:	10000326 	beq	r2,zero,8004f88 <classOf+0x30>
 8004f7c:	e0bffe17 	ldw	r2,-8(fp)
 8004f80:	10800017 	ldw	r2,0(r2)
 8004f84:	1000071e 	bne	r2,zero,8004fa4 <classOf+0x4c>
 8004f88:	010200b4 	movhi	r4,2050
 8004f8c:	211b0704 	addi	r4,r4,27676
 8004f90:	01400744 	movi	r5,29
 8004f94:	d1a00904 	addi	r6,gp,-32732
 8004f98:	01c200b4 	movhi	r7,2050
 8004f9c:	39db0a04 	addi	r7,r7,27688
 8004fa0:	800bb300 	call	800bb30 <__assert_func>
	return self -> class;
 8004fa4:	e0bffe17 	ldw	r2,-8(fp)
 8004fa8:	10800017 	ldw	r2,0(r2)
}
 8004fac:	e037883a 	mov	sp,fp
 8004fb0:	dfc00117 	ldw	ra,4(sp)
 8004fb4:	df000017 	ldw	fp,0(sp)
 8004fb8:	dec00204 	addi	sp,sp,8
 8004fbc:	f800283a 	ret

08004fc0 <sizeOf>:

size_t sizeOf (const void * _self)
{	const struct Class * class = classOf(_self);
 8004fc0:	defffc04 	addi	sp,sp,-16
 8004fc4:	dfc00315 	stw	ra,12(sp)
 8004fc8:	df000215 	stw	fp,8(sp)
 8004fcc:	df000204 	addi	fp,sp,8
 8004fd0:	e13fff15 	stw	r4,-4(fp)
 8004fd4:	e13fff17 	ldw	r4,-4(fp)
 8004fd8:	8004f580 	call	8004f58 <classOf>
 8004fdc:	e0bffe15 	stw	r2,-8(fp)

	return class -> size;
 8004fe0:	e0bffe17 	ldw	r2,-8(fp)
 8004fe4:	10800317 	ldw	r2,12(r2)
}
 8004fe8:	e037883a 	mov	sp,fp
 8004fec:	dfc00117 	ldw	ra,4(sp)
 8004ff0:	df000017 	ldw	fp,0(sp)
 8004ff4:	dec00204 	addi	sp,sp,8
 8004ff8:	f800283a 	ret

08004ffc <Class_ctor>:
/*
 *	Class
 */

static void * Class_ctor (void * _self, va_list * app)
{	struct Class * self = _self;
 8004ffc:	defff504 	addi	sp,sp,-44
 8005000:	dfc00a15 	stw	ra,40(sp)
 8005004:	df000915 	stw	fp,36(sp)
 8005008:	dc400815 	stw	r17,32(sp)
 800500c:	dc000715 	stw	r16,28(sp)
 8005010:	df000904 	addi	fp,sp,36
 8005014:	e13ffc15 	stw	r4,-16(fp)
 8005018:	e17ffd15 	stw	r5,-12(fp)
 800501c:	e0bffc17 	ldw	r2,-16(fp)
 8005020:	e0bff715 	stw	r2,-36(fp)
	const size_t offset = offsetof(struct Class, ctor);
 8005024:	00800404 	movi	r2,16
 8005028:	e0bff815 	stw	r2,-32(fp)

	self -> name = va_arg(* app, char *);
 800502c:	e0bffd17 	ldw	r2,-12(fp)
 8005030:	10800017 	ldw	r2,0(r2)
 8005034:	11000104 	addi	r4,r2,4
 8005038:	e0fffd17 	ldw	r3,-12(fp)
 800503c:	19000015 	stw	r4,0(r3)
 8005040:	10c00017 	ldw	r3,0(r2)
 8005044:	e0bff717 	ldw	r2,-36(fp)
 8005048:	10c00115 	stw	r3,4(r2)
	self -> super = va_arg(* app, struct Class *);
 800504c:	e0bffd17 	ldw	r2,-12(fp)
 8005050:	10800017 	ldw	r2,0(r2)
 8005054:	11000104 	addi	r4,r2,4
 8005058:	e0fffd17 	ldw	r3,-12(fp)
 800505c:	19000015 	stw	r4,0(r3)
 8005060:	10c00017 	ldw	r3,0(r2)
 8005064:	e0bff717 	ldw	r2,-36(fp)
 8005068:	10c00215 	stw	r3,8(r2)
	self -> size = va_arg(* app, size_t);
 800506c:	e0bffd17 	ldw	r2,-12(fp)
 8005070:	10800017 	ldw	r2,0(r2)
 8005074:	11000104 	addi	r4,r2,4
 8005078:	e0fffd17 	ldw	r3,-12(fp)
 800507c:	19000015 	stw	r4,0(r3)
 8005080:	10c00017 	ldw	r3,0(r2)
 8005084:	e0bff717 	ldw	r2,-36(fp)
 8005088:	10c00315 	stw	r3,12(r2)

	assert(self -> super);
 800508c:	e0bff717 	ldw	r2,-36(fp)
 8005090:	10800217 	ldw	r2,8(r2)
 8005094:	1000081e 	bne	r2,zero,80050b8 <Class_ctor+0xbc>
 8005098:	010200b4 	movhi	r4,2050
 800509c:	211b0704 	addi	r4,r4,27676
 80050a0:	01400cc4 	movi	r5,51
 80050a4:	018200b4 	movhi	r6,2050
 80050a8:	319b5d04 	addi	r6,r6,28020
 80050ac:	01c200b4 	movhi	r7,2050
 80050b0:	39db1004 	addi	r7,r7,27712
 80050b4:	800bb300 	call	800bb30 <__assert_func>

	memcpy((char *) self + offset, (char *) self -> super
 80050b8:	e0fff717 	ldw	r3,-36(fp)
 80050bc:	e0bff817 	ldw	r2,-32(fp)
 80050c0:	18a3883a 	add	r17,r3,r2
 80050c4:	e0bff717 	ldw	r2,-36(fp)
 80050c8:	10c00217 	ldw	r3,8(r2)
 80050cc:	e0bff817 	ldw	r2,-32(fp)
 80050d0:	18a1883a 	add	r16,r3,r2
					+ offset, sizeOf(self -> super) - offset);
 80050d4:	e0bff717 	ldw	r2,-36(fp)
 80050d8:	10800217 	ldw	r2,8(r2)
 80050dc:	1009883a 	mov	r4,r2
 80050e0:	8004fc00 	call	8004fc0 <sizeOf>
 80050e4:	1007883a 	mov	r3,r2
	self -> super = va_arg(* app, struct Class *);
	self -> size = va_arg(* app, size_t);

	assert(self -> super);

	memcpy((char *) self + offset, (char *) self -> super
 80050e8:	e0bff817 	ldw	r2,-32(fp)
 80050ec:	1885c83a 	sub	r2,r3,r2
 80050f0:	8809883a 	mov	r4,r17
 80050f4:	800b883a 	mov	r5,r16
 80050f8:	100d883a 	mov	r6,r2
 80050fc:	800c5000 	call	800c500 <memcpy>
					+ offset, sizeOf(self -> super) - offset);
{
	typedef void (* voidf) ();	/* generic function pointer */
	voidf selector;
#ifdef va_copy
	va_list ap; va_copy(ap, * app);
 8005100:	e0bffd17 	ldw	r2,-12(fp)
 8005104:	10800017 	ldw	r2,0(r2)
 8005108:	e0bffb15 	stw	r2,-20(fp)
#else
	va_list ap = * app;
#endif

	while ((selector = va_arg(ap, voidf)))
 800510c:	00001f06 	br	800518c <Class_ctor+0x190>
	{	voidf method = va_arg(ap, voidf);
 8005110:	e0bffb17 	ldw	r2,-20(fp)
 8005114:	10c00104 	addi	r3,r2,4
 8005118:	e0fffb15 	stw	r3,-20(fp)
 800511c:	10800017 	ldw	r2,0(r2)
 8005120:	e0bffa15 	stw	r2,-24(fp)

		if (selector == (voidf) ctor)
 8005124:	e0fff917 	ldw	r3,-28(fp)
 8005128:	00820034 	movhi	r2,2048
 800512c:	1094e904 	addi	r2,r2,21412
 8005130:	1880051e 	bne	r3,r2,8005148 <Class_ctor+0x14c>
			* (voidf *) & self -> ctor = method;
 8005134:	e0bff717 	ldw	r2,-36(fp)
 8005138:	10800404 	addi	r2,r2,16
 800513c:	e0fffa17 	ldw	r3,-24(fp)
 8005140:	10c00015 	stw	r3,0(r2)
 8005144:	00001106 	br	800518c <Class_ctor+0x190>
		else if (selector == (voidf) dtor)
 8005148:	e0fff917 	ldw	r3,-28(fp)
 800514c:	00820034 	movhi	r2,2048
 8005150:	10952704 	addi	r2,r2,21660
 8005154:	1880051e 	bne	r3,r2,800516c <Class_ctor+0x170>
			* (voidf *) & self -> dtor = method;
 8005158:	e0bff717 	ldw	r2,-36(fp)
 800515c:	10800504 	addi	r2,r2,20
 8005160:	e0fffa17 	ldw	r3,-24(fp)
 8005164:	10c00015 	stw	r3,0(r2)
 8005168:	00000806 	br	800518c <Class_ctor+0x190>
		else if (selector == (voidf) differ)
 800516c:	e0fff917 	ldw	r3,-28(fp)
 8005170:	00820034 	movhi	r2,2048
 8005174:	10956104 	addi	r2,r2,21892
 8005178:	1880041e 	bne	r3,r2,800518c <Class_ctor+0x190>
			* (voidf *) & self -> differ = method;
 800517c:	e0bff717 	ldw	r2,-36(fp)
 8005180:	10800604 	addi	r2,r2,24
 8005184:	e0fffa17 	ldw	r3,-24(fp)
 8005188:	10c00015 	stw	r3,0(r2)
	va_list ap; va_copy(ap, * app);
#else
	va_list ap = * app;
#endif

	while ((selector = va_arg(ap, voidf)))
 800518c:	e0bffb17 	ldw	r2,-20(fp)
 8005190:	10c00104 	addi	r3,r2,4
 8005194:	e0fffb15 	stw	r3,-20(fp)
 8005198:	10800017 	ldw	r2,0(r2)
 800519c:	e0bff915 	stw	r2,-28(fp)
 80051a0:	e0bff917 	ldw	r2,-28(fp)
 80051a4:	103fda1e 	bne	r2,zero,8005110 <__alt_data_end+0xfc005110>
	}
#ifdef va_copy
    va_end(ap);
#endif

	return self;
 80051a8:	e0bff717 	ldw	r2,-36(fp)
}}
 80051ac:	e6fffe04 	addi	sp,fp,-8
 80051b0:	dfc00317 	ldw	ra,12(sp)
 80051b4:	df000217 	ldw	fp,8(sp)
 80051b8:	dc400117 	ldw	r17,4(sp)
 80051bc:	dc000017 	ldw	r16,0(sp)
 80051c0:	dec00404 	addi	sp,sp,16
 80051c4:	f800283a 	ret

080051c8 <Class_dtor>:

static void * Class_dtor (void * _self)
{	struct Class * self = _self;
 80051c8:	defffc04 	addi	sp,sp,-16
 80051cc:	dfc00315 	stw	ra,12(sp)
 80051d0:	df000215 	stw	fp,8(sp)
 80051d4:	df000204 	addi	fp,sp,8
 80051d8:	e13fff15 	stw	r4,-4(fp)
 80051dc:	e0bfff17 	ldw	r2,-4(fp)
 80051e0:	e0bffe15 	stw	r2,-8(fp)

	fprintf(stderr, "%s: cannot destroy class\n", self->name);
 80051e4:	008200f4 	movhi	r2,2051
 80051e8:	10a3ec04 	addi	r2,r2,-28752
 80051ec:	10800017 	ldw	r2,0(r2)
 80051f0:	10c00317 	ldw	r3,12(r2)
 80051f4:	e0bffe17 	ldw	r2,-8(fp)
 80051f8:	10800117 	ldw	r2,4(r2)
 80051fc:	1809883a 	mov	r4,r3
 8005200:	014200b4 	movhi	r5,2050
 8005204:	295b1404 	addi	r5,r5,27728
 8005208:	100d883a 	mov	r6,r2
 800520c:	800bd0c0 	call	800bd0c <fprintf>
	return 0;
 8005210:	0005883a 	mov	r2,zero
}
 8005214:	e037883a 	mov	sp,fp
 8005218:	dfc00117 	ldw	ra,4(sp)
 800521c:	df000017 	ldw	fp,0(sp)
 8005220:	dec00204 	addi	sp,sp,8
 8005224:	f800283a 	ret

08005228 <super>:

const void * super (const void * _self)
{	const struct Class * self = _self;
 8005228:	defffc04 	addi	sp,sp,-16
 800522c:	dfc00315 	stw	ra,12(sp)
 8005230:	df000215 	stw	fp,8(sp)
 8005234:	df000204 	addi	fp,sp,8
 8005238:	e13fff15 	stw	r4,-4(fp)
 800523c:	e0bfff17 	ldw	r2,-4(fp)
 8005240:	e0bffe15 	stw	r2,-8(fp)

	assert(self && self -> super);
 8005244:	e0bffe17 	ldw	r2,-8(fp)
 8005248:	10000326 	beq	r2,zero,8005258 <super+0x30>
 800524c:	e0bffe17 	ldw	r2,-8(fp)
 8005250:	10800217 	ldw	r2,8(r2)
 8005254:	1000071e 	bne	r2,zero,8005274 <super+0x4c>
 8005258:	010200b4 	movhi	r4,2050
 800525c:	211b0704 	addi	r4,r4,27676
 8005260:	014016c4 	movi	r5,91
 8005264:	d1a00b04 	addi	r6,gp,-32724
 8005268:	01c200b4 	movhi	r7,2050
 800526c:	39db1b04 	addi	r7,r7,27756
 8005270:	800bb300 	call	800bb30 <__assert_func>
	return self -> super;
 8005274:	e0bffe17 	ldw	r2,-8(fp)
 8005278:	10800217 	ldw	r2,8(r2)
}
 800527c:	e037883a 	mov	sp,fp
 8005280:	dfc00117 	ldw	ra,4(sp)
 8005284:	df000017 	ldw	fp,0(sp)
 8005288:	dec00204 	addi	sp,sp,8
 800528c:	f800283a 	ret

08005290 <new>:
/*
 *	object management and selectors
 */

void * new (const void * _class, ...)
{	const struct Class * class = _class;
 8005290:	defff704 	addi	sp,sp,-36
 8005294:	dfc00515 	stw	ra,20(sp)
 8005298:	df000415 	stw	fp,16(sp)
 800529c:	df000404 	addi	fp,sp,16
 80052a0:	e1400215 	stw	r5,8(fp)
 80052a4:	e1800315 	stw	r6,12(fp)
 80052a8:	e1c00415 	stw	r7,16(fp)
 80052ac:	e13fff15 	stw	r4,-4(fp)
 80052b0:	e0bfff17 	ldw	r2,-4(fp)
 80052b4:	e0bffc15 	stw	r2,-16(fp)
	struct Object * object;
	va_list ap;

	assert(class && class -> size);
 80052b8:	e0bffc17 	ldw	r2,-16(fp)
 80052bc:	10000326 	beq	r2,zero,80052cc <new+0x3c>
 80052c0:	e0bffc17 	ldw	r2,-16(fp)
 80052c4:	10800317 	ldw	r2,12(r2)
 80052c8:	1000071e 	bne	r2,zero,80052e8 <new+0x58>
 80052cc:	010200b4 	movhi	r4,2050
 80052d0:	211b0704 	addi	r4,r4,27676
 80052d4:	01401e84 	movi	r5,122
 80052d8:	d1a00d04 	addi	r6,gp,-32716
 80052dc:	01c200b4 	movhi	r7,2050
 80052e0:	39db3304 	addi	r7,r7,27852
 80052e4:	800bb300 	call	800bb30 <__assert_func>
	object = calloc(1, class -> size);
 80052e8:	e0bffc17 	ldw	r2,-16(fp)
 80052ec:	10800317 	ldw	r2,12(r2)
 80052f0:	01000044 	movi	r4,1
 80052f4:	100b883a 	mov	r5,r2
 80052f8:	800bba80 	call	800bba8 <calloc>
 80052fc:	e0bffd15 	stw	r2,-12(fp)
	assert(object);
 8005300:	e0bffd17 	ldw	r2,-12(fp)
 8005304:	1000071e 	bne	r2,zero,8005324 <new+0x94>
 8005308:	010200b4 	movhi	r4,2050
 800530c:	211b0704 	addi	r4,r4,27676
 8005310:	01401f04 	movi	r5,124
 8005314:	d1a00d04 	addi	r6,gp,-32716
 8005318:	01c200b4 	movhi	r7,2050
 800531c:	39db3904 	addi	r7,r7,27876
 8005320:	800bb300 	call	800bb30 <__assert_func>
	object -> class = class;
 8005324:	e0bffd17 	ldw	r2,-12(fp)
 8005328:	e0fffc17 	ldw	r3,-16(fp)
 800532c:	10c00015 	stw	r3,0(r2)
	va_start(ap, _class);
 8005330:	e0800204 	addi	r2,fp,8
 8005334:	e0bffe15 	stw	r2,-8(fp)
	object = ctor(object, & ap);
 8005338:	e0bffe04 	addi	r2,fp,-8
 800533c:	e13ffd17 	ldw	r4,-12(fp)
 8005340:	100b883a 	mov	r5,r2
 8005344:	80053a40 	call	80053a4 <ctor>
 8005348:	e0bffd15 	stw	r2,-12(fp)
	va_end(ap);
	return object;
 800534c:	e0bffd17 	ldw	r2,-12(fp)
}
 8005350:	e037883a 	mov	sp,fp
 8005354:	dfc00117 	ldw	ra,4(sp)
 8005358:	df000017 	ldw	fp,0(sp)
 800535c:	dec00504 	addi	sp,sp,20
 8005360:	f800283a 	ret

08005364 <delete>:

void delete (void * _self)
{
 8005364:	defffd04 	addi	sp,sp,-12
 8005368:	dfc00215 	stw	ra,8(sp)
 800536c:	df000115 	stw	fp,4(sp)
 8005370:	df000104 	addi	fp,sp,4
 8005374:	e13fff15 	stw	r4,-4(fp)
	if (_self)
 8005378:	e0bfff17 	ldw	r2,-4(fp)
 800537c:	10000426 	beq	r2,zero,8005390 <delete+0x2c>
		free(dtor(_self));
 8005380:	e13fff17 	ldw	r4,-4(fp)
 8005384:	800549c0 	call	800549c <dtor>
 8005388:	1009883a 	mov	r4,r2
 800538c:	800bd440 	call	800bd44 <free>
}
 8005390:	e037883a 	mov	sp,fp
 8005394:	dfc00117 	ldw	ra,4(sp)
 8005398:	df000017 	ldw	fp,0(sp)
 800539c:	dec00204 	addi	sp,sp,8
 80053a0:	f800283a 	ret

080053a4 <ctor>:

void * ctor (void * _self, va_list * app)
{	const struct Class * class = classOf(_self);
 80053a4:	defffb04 	addi	sp,sp,-20
 80053a8:	dfc00415 	stw	ra,16(sp)
 80053ac:	df000315 	stw	fp,12(sp)
 80053b0:	df000304 	addi	fp,sp,12
 80053b4:	e13ffe15 	stw	r4,-8(fp)
 80053b8:	e17fff15 	stw	r5,-4(fp)
 80053bc:	e13ffe17 	ldw	r4,-8(fp)
 80053c0:	8004f580 	call	8004f58 <classOf>
 80053c4:	e0bffd15 	stw	r2,-12(fp)

	assert(class -> ctor);
 80053c8:	e0bffd17 	ldw	r2,-12(fp)
 80053cc:	10800417 	ldw	r2,16(r2)
 80053d0:	1000071e 	bne	r2,zero,80053f0 <ctor+0x4c>
 80053d4:	010200b4 	movhi	r4,2050
 80053d8:	211b0704 	addi	r4,r4,27676
 80053dc:	01402344 	movi	r5,141
 80053e0:	d1a00e04 	addi	r6,gp,-32712
 80053e4:	01c200b4 	movhi	r7,2050
 80053e8:	39db3b04 	addi	r7,r7,27884
 80053ec:	800bb300 	call	800bb30 <__assert_func>
	return class -> ctor(_self, app);
 80053f0:	e0bffd17 	ldw	r2,-12(fp)
 80053f4:	10800417 	ldw	r2,16(r2)
 80053f8:	e13ffe17 	ldw	r4,-8(fp)
 80053fc:	e17fff17 	ldw	r5,-4(fp)
 8005400:	103ee83a 	callr	r2
}
 8005404:	e037883a 	mov	sp,fp
 8005408:	dfc00117 	ldw	ra,4(sp)
 800540c:	df000017 	ldw	fp,0(sp)
 8005410:	dec00204 	addi	sp,sp,8
 8005414:	f800283a 	ret

08005418 <super_ctor>:

void * super_ctor (const void * _class,
				void * _self, va_list * app)
{	const struct Class * superclass = super(_class);
 8005418:	defffa04 	addi	sp,sp,-24
 800541c:	dfc00515 	stw	ra,20(sp)
 8005420:	df000415 	stw	fp,16(sp)
 8005424:	df000404 	addi	fp,sp,16
 8005428:	e13ffd15 	stw	r4,-12(fp)
 800542c:	e17ffe15 	stw	r5,-8(fp)
 8005430:	e1bfff15 	stw	r6,-4(fp)
 8005434:	e13ffd17 	ldw	r4,-12(fp)
 8005438:	80052280 	call	8005228 <super>
 800543c:	e0bffc15 	stw	r2,-16(fp)

	assert(_self && superclass -> ctor);
 8005440:	e0bffe17 	ldw	r2,-8(fp)
 8005444:	10000326 	beq	r2,zero,8005454 <super_ctor+0x3c>
 8005448:	e0bffc17 	ldw	r2,-16(fp)
 800544c:	10800417 	ldw	r2,16(r2)
 8005450:	1000081e 	bne	r2,zero,8005474 <super_ctor+0x5c>
 8005454:	010200b4 	movhi	r4,2050
 8005458:	211b0704 	addi	r4,r4,27676
 800545c:	01402544 	movi	r5,149
 8005460:	018200b4 	movhi	r6,2050
 8005464:	319b6004 	addi	r6,r6,28032
 8005468:	01c200b4 	movhi	r7,2050
 800546c:	39db3f04 	addi	r7,r7,27900
 8005470:	800bb300 	call	800bb30 <__assert_func>
	return superclass -> ctor(_self, app);
 8005474:	e0bffc17 	ldw	r2,-16(fp)
 8005478:	10800417 	ldw	r2,16(r2)
 800547c:	e13ffe17 	ldw	r4,-8(fp)
 8005480:	e17fff17 	ldw	r5,-4(fp)
 8005484:	103ee83a 	callr	r2
}
 8005488:	e037883a 	mov	sp,fp
 800548c:	dfc00117 	ldw	ra,4(sp)
 8005490:	df000017 	ldw	fp,0(sp)
 8005494:	dec00204 	addi	sp,sp,8
 8005498:	f800283a 	ret

0800549c <dtor>:

void * dtor (void * _self)
{	const struct Class * class = classOf(_self);
 800549c:	defffc04 	addi	sp,sp,-16
 80054a0:	dfc00315 	stw	ra,12(sp)
 80054a4:	df000215 	stw	fp,8(sp)
 80054a8:	df000204 	addi	fp,sp,8
 80054ac:	e13fff15 	stw	r4,-4(fp)
 80054b0:	e13fff17 	ldw	r4,-4(fp)
 80054b4:	8004f580 	call	8004f58 <classOf>
 80054b8:	e0bffe15 	stw	r2,-8(fp)

	assert(class -> dtor);
 80054bc:	e0bffe17 	ldw	r2,-8(fp)
 80054c0:	10800517 	ldw	r2,20(r2)
 80054c4:	1000071e 	bne	r2,zero,80054e4 <dtor+0x48>
 80054c8:	010200b4 	movhi	r4,2050
 80054cc:	211b0704 	addi	r4,r4,27676
 80054d0:	01402704 	movi	r5,156
 80054d4:	d1a01004 	addi	r6,gp,-32704
 80054d8:	01c200b4 	movhi	r7,2050
 80054dc:	39db4604 	addi	r7,r7,27928
 80054e0:	800bb300 	call	800bb30 <__assert_func>
	return class -> dtor(_self);
 80054e4:	e0bffe17 	ldw	r2,-8(fp)
 80054e8:	10800517 	ldw	r2,20(r2)
 80054ec:	e13fff17 	ldw	r4,-4(fp)
 80054f0:	103ee83a 	callr	r2
}
 80054f4:	e037883a 	mov	sp,fp
 80054f8:	dfc00117 	ldw	ra,4(sp)
 80054fc:	df000017 	ldw	fp,0(sp)
 8005500:	dec00204 	addi	sp,sp,8
 8005504:	f800283a 	ret

08005508 <super_dtor>:

void * super_dtor (const void * _class, void * _self)
{	const struct Class * superclass = super(_class);
 8005508:	defffb04 	addi	sp,sp,-20
 800550c:	dfc00415 	stw	ra,16(sp)
 8005510:	df000315 	stw	fp,12(sp)
 8005514:	df000304 	addi	fp,sp,12
 8005518:	e13ffe15 	stw	r4,-8(fp)
 800551c:	e17fff15 	stw	r5,-4(fp)
 8005520:	e13ffe17 	ldw	r4,-8(fp)
 8005524:	80052280 	call	8005228 <super>
 8005528:	e0bffd15 	stw	r2,-12(fp)

	assert(_self && superclass -> dtor);
 800552c:	e0bfff17 	ldw	r2,-4(fp)
 8005530:	10000326 	beq	r2,zero,8005540 <super_dtor+0x38>
 8005534:	e0bffd17 	ldw	r2,-12(fp)
 8005538:	10800517 	ldw	r2,20(r2)
 800553c:	1000081e 	bne	r2,zero,8005560 <super_dtor+0x58>
 8005540:	010200b4 	movhi	r4,2050
 8005544:	211b0704 	addi	r4,r4,27676
 8005548:	014028c4 	movi	r5,163
 800554c:	018200b4 	movhi	r6,2050
 8005550:	319b6304 	addi	r6,r6,28044
 8005554:	01c200b4 	movhi	r7,2050
 8005558:	39db4a04 	addi	r7,r7,27944
 800555c:	800bb300 	call	800bb30 <__assert_func>
	return superclass -> dtor(_self);
 8005560:	e0bffd17 	ldw	r2,-12(fp)
 8005564:	10800517 	ldw	r2,20(r2)
 8005568:	e13fff17 	ldw	r4,-4(fp)
 800556c:	103ee83a 	callr	r2
}
 8005570:	e037883a 	mov	sp,fp
 8005574:	dfc00117 	ldw	ra,4(sp)
 8005578:	df000017 	ldw	fp,0(sp)
 800557c:	dec00204 	addi	sp,sp,8
 8005580:	f800283a 	ret

08005584 <differ>:

int differ (const void * _self, const void * b)
{	const struct Class * class = classOf(_self);
 8005584:	defffb04 	addi	sp,sp,-20
 8005588:	dfc00415 	stw	ra,16(sp)
 800558c:	df000315 	stw	fp,12(sp)
 8005590:	df000304 	addi	fp,sp,12
 8005594:	e13ffe15 	stw	r4,-8(fp)
 8005598:	e17fff15 	stw	r5,-4(fp)
 800559c:	e13ffe17 	ldw	r4,-8(fp)
 80055a0:	8004f580 	call	8004f58 <classOf>
 80055a4:	e0bffd15 	stw	r2,-12(fp)

	assert(class -> differ);
 80055a8:	e0bffd17 	ldw	r2,-12(fp)
 80055ac:	10800617 	ldw	r2,24(r2)
 80055b0:	1000071e 	bne	r2,zero,80055d0 <differ+0x4c>
 80055b4:	010200b4 	movhi	r4,2050
 80055b8:	211b0704 	addi	r4,r4,27676
 80055bc:	01402a84 	movi	r5,170
 80055c0:	d1a01204 	addi	r6,gp,-32696
 80055c4:	01c200b4 	movhi	r7,2050
 80055c8:	39db5104 	addi	r7,r7,27972
 80055cc:	800bb300 	call	800bb30 <__assert_func>
	return class -> differ(_self, b);
 80055d0:	e0bffd17 	ldw	r2,-12(fp)
 80055d4:	10800617 	ldw	r2,24(r2)
 80055d8:	e13ffe17 	ldw	r4,-8(fp)
 80055dc:	e17fff17 	ldw	r5,-4(fp)
 80055e0:	103ee83a 	callr	r2
}
 80055e4:	e037883a 	mov	sp,fp
 80055e8:	dfc00117 	ldw	ra,4(sp)
 80055ec:	df000017 	ldw	fp,0(sp)
 80055f0:	dec00204 	addi	sp,sp,8
 80055f4:	f800283a 	ret

080055f8 <super_differ>:

int super_differ (const void * _class, const void * _self, const void * b)
{	const struct Class * superclass = super(_class);
 80055f8:	defffa04 	addi	sp,sp,-24
 80055fc:	dfc00515 	stw	ra,20(sp)
 8005600:	df000415 	stw	fp,16(sp)
 8005604:	df000404 	addi	fp,sp,16
 8005608:	e13ffd15 	stw	r4,-12(fp)
 800560c:	e17ffe15 	stw	r5,-8(fp)
 8005610:	e1bfff15 	stw	r6,-4(fp)
 8005614:	e13ffd17 	ldw	r4,-12(fp)
 8005618:	80052280 	call	8005228 <super>
 800561c:	e0bffc15 	stw	r2,-16(fp)

	assert(_self && superclass -> differ);
 8005620:	e0bffe17 	ldw	r2,-8(fp)
 8005624:	10000326 	beq	r2,zero,8005634 <super_differ+0x3c>
 8005628:	e0bffc17 	ldw	r2,-16(fp)
 800562c:	10800617 	ldw	r2,24(r2)
 8005630:	1000081e 	bne	r2,zero,8005654 <super_differ+0x5c>
 8005634:	010200b4 	movhi	r4,2050
 8005638:	211b0704 	addi	r4,r4,27676
 800563c:	01402c44 	movi	r5,177
 8005640:	018200b4 	movhi	r6,2050
 8005644:	319b6604 	addi	r6,r6,28056
 8005648:	01c200b4 	movhi	r7,2050
 800564c:	39db5504 	addi	r7,r7,27988
 8005650:	800bb300 	call	800bb30 <__assert_func>
	return superclass -> differ(_self, b);
 8005654:	e0bffc17 	ldw	r2,-16(fp)
 8005658:	10800617 	ldw	r2,24(r2)
 800565c:	e13ffe17 	ldw	r4,-8(fp)
 8005660:	e17fff17 	ldw	r5,-4(fp)
 8005664:	103ee83a 	callr	r2
}
 8005668:	e037883a 	mov	sp,fp
 800566c:	dfc00117 	ldw	ra,4(sp)
 8005670:	df000017 	ldw	fp,0(sp)
 8005674:	dec00204 	addi	sp,sp,8
 8005678:	f800283a 	ret

0800567c <OutGraphicsCharFont1>:
#include "Colours.h"
#define TRUE 1
#define FALSE 0

void OutGraphicsCharFont1(int x, int y, int fontcolour, int backgroundcolour, int c, int Erase)
{
 800567c:	defff204 	addi	sp,sp,-56
 8005680:	dfc00d15 	stw	ra,52(sp)
 8005684:	df000c15 	stw	fp,48(sp)
 8005688:	ddc00b15 	stw	r23,44(sp)
 800568c:	dd800a15 	stw	r22,40(sp)
 8005690:	dd400915 	stw	r21,36(sp)
 8005694:	dd000815 	stw	r20,32(sp)
 8005698:	dcc00715 	stw	r19,28(sp)
 800569c:	dc800615 	stw	r18,24(sp)
 80056a0:	dc400515 	stw	r17,20(sp)
 80056a4:	dc000415 	stw	r16,16(sp)
 80056a8:	df000c04 	addi	fp,sp,48
 80056ac:	e13ff415 	stw	r4,-48(fp)
 80056b0:	e17ff515 	stw	r5,-44(fp)
 80056b4:	e1bff615 	stw	r6,-40(fp)
 80056b8:	e1fff715 	stw	r7,-36(fp)
// using register variables (as opposed to stack based ones) may make execution faster
// depends on compiler and CPU

	register int row, column, theX = x, theY = y ;
 80056bc:	e53ff417 	ldw	r20,-48(fp)
 80056c0:	e57ff517 	ldw	r21,-44(fp)
	register int pixels ;
	register char theColour = fontcolour  ;
 80056c4:	e0bff617 	ldw	r2,-40(fp)
 80056c8:	102f883a 	mov	r23,r2
	register int BitMask, theC = c ;
 80056cc:	e4400217 	ldw	r17,8(fp)

// if x,y coord off edge of screen don't bother

    if(((short)(x) > (short)(XRES-1)) || ((short)(y) > (short)(YRES-1)))
 80056d0:	e0bff417 	ldw	r2,-48(fp)
 80056d4:	10bfffcc 	andi	r2,r2,65535
 80056d8:	10a0001c 	xori	r2,r2,32768
 80056dc:	10a00004 	addi	r2,r2,-32768
 80056e0:	1080c808 	cmpgei	r2,r2,800
 80056e4:	1000061e 	bne	r2,zero,8005700 <OutGraphicsCharFont1+0x84>
 80056e8:	e0bff517 	ldw	r2,-44(fp)
 80056ec:	10bfffcc 	andi	r2,r2,65535
 80056f0:	10a0001c 	xori	r2,r2,32768
 80056f4:	10a00004 	addi	r2,r2,-32768
 80056f8:	10807810 	cmplti	r2,r2,480
 80056fc:	1000011e 	bne	r2,zero,8005704 <OutGraphicsCharFont1+0x88>
        return ;
 8005700:	00003c06 	br	80057f4 <OutGraphicsCharFont1+0x178>


// if printable character subtract hex 20
	if(((short)(theC) >= (short)(' ')) && ((short)(theC) <= (short)('~'))) {
 8005704:	8805883a 	mov	r2,r17
 8005708:	10bfffcc 	andi	r2,r2,65535
 800570c:	10a0001c 	xori	r2,r2,32768
 8005710:	10a00004 	addi	r2,r2,-32768
 8005714:	10800810 	cmplti	r2,r2,32
 8005718:	1000361e 	bne	r2,zero,80057f4 <OutGraphicsCharFont1+0x178>
 800571c:	8805883a 	mov	r2,r17
 8005720:	10bfffcc 	andi	r2,r2,65535
 8005724:	10a0001c 	xori	r2,r2,32768
 8005728:	10a00004 	addi	r2,r2,-32768
 800572c:	10801fc8 	cmpgei	r2,r2,127
 8005730:	1000301e 	bne	r2,zero,80057f4 <OutGraphicsCharFont1+0x178>
		theC = theC - 0x20 ;
 8005734:	8c7ff804 	addi	r17,r17,-32
		for(row = 0; (char)(row) < (char)(7); row ++)	{
 8005738:	0021883a 	mov	r16,zero
 800573c:	00002706 	br	80057dc <OutGraphicsCharFont1+0x160>

// get the bit pattern for row 0 of the character from the software font
			pixels = Font5x7[theC][row] ;
 8005740:	008200b4 	movhi	r2,2050
 8005744:	10b17c04 	addi	r2,r2,-14864
 8005748:	88c001e4 	muli	r3,r17,7
 800574c:	1c07883a 	add	r3,r3,r16
 8005750:	10c5883a 	add	r2,r2,r3
 8005754:	10800003 	ldbu	r2,0(r2)
 8005758:	15803fcc 	andi	r22,r2,255
			BitMask = 16 ;
 800575c:	04c00404 	movi	r19,16

			for(column = 0; (char)(column) < (char)(5); column ++)	{
 8005760:	0025883a 	mov	r18,zero
 8005764:	00001606 	br	80057c0 <OutGraphicsCharFont1+0x144>

// if a pixel in the character display it
				if((pixels & BitMask))
 8005768:	b4c4703a 	and	r2,r22,r19
 800576c:	10000926 	beq	r2,zero,8005794 <OutGraphicsCharFont1+0x118>
					writeAPixel(theX+column, theY+row, theColour) ;
 8005770:	a489883a 	add	r4,r20,r18
 8005774:	ac07883a 	add	r3,r21,r16
 8005778:	b8803fcc 	andi	r2,r23,255
 800577c:	1080201c 	xori	r2,r2,128
 8005780:	10bfe004 	addi	r2,r2,-128
 8005784:	180b883a 	mov	r5,r3
 8005788:	100d883a 	mov	r6,r2
 800578c:	8001b240 	call	8001b24 <writeAPixel>
 8005790:	00000906 	br	80057b8 <OutGraphicsCharFont1+0x13c>

				else {
					if(Erase == TRUE)
 8005794:	e0800317 	ldw	r2,12(fp)
 8005798:	10800058 	cmpnei	r2,r2,1
 800579c:	1000061e 	bne	r2,zero,80057b8 <OutGraphicsCharFont1+0x13c>

// if pixel is part of background (not part of character)
// erase the background to value of variable BackGroundColour

						writeAPixel(theX+column, theY+row, backgroundcolour) ;
 80057a0:	a487883a 	add	r3,r20,r18
 80057a4:	ac05883a 	add	r2,r21,r16
 80057a8:	1809883a 	mov	r4,r3
 80057ac:	100b883a 	mov	r5,r2
 80057b0:	e1bff717 	ldw	r6,-36(fp)
 80057b4:	8001b240 	call	8001b24 <writeAPixel>
				}
				BitMask = BitMask >> 1 ;
 80057b8:	9827d07a 	srai	r19,r19,1

// get the bit pattern for row 0 of the character from the software font
			pixels = Font5x7[theC][row] ;
			BitMask = 16 ;

			for(column = 0; (char)(column) < (char)(5); column ++)	{
 80057bc:	94800044 	addi	r18,r18,1
 80057c0:	9005883a 	mov	r2,r18
 80057c4:	10803fcc 	andi	r2,r2,255
 80057c8:	1080201c 	xori	r2,r2,128
 80057cc:	10bfe004 	addi	r2,r2,-128
 80057d0:	10800150 	cmplti	r2,r2,5
 80057d4:	103fe41e 	bne	r2,zero,8005768 <__alt_data_end+0xfc005768>


// if printable character subtract hex 20
	if(((short)(theC) >= (short)(' ')) && ((short)(theC) <= (short)('~'))) {
		theC = theC - 0x20 ;
		for(row = 0; (char)(row) < (char)(7); row ++)	{
 80057d8:	84000044 	addi	r16,r16,1
 80057dc:	8005883a 	mov	r2,r16
 80057e0:	10803fcc 	andi	r2,r2,255
 80057e4:	1080201c 	xori	r2,r2,128
 80057e8:	10bfe004 	addi	r2,r2,-128
 80057ec:	108001d0 	cmplti	r2,r2,7
 80057f0:	103fd31e 	bne	r2,zero,8005740 <__alt_data_end+0xfc005740>
				}
				BitMask = BitMask >> 1 ;
			}
		}
	}
}
 80057f4:	e6fff804 	addi	sp,fp,-32
 80057f8:	dfc00917 	ldw	ra,36(sp)
 80057fc:	df000817 	ldw	fp,32(sp)
 8005800:	ddc00717 	ldw	r23,28(sp)
 8005804:	dd800617 	ldw	r22,24(sp)
 8005808:	dd400517 	ldw	r21,20(sp)
 800580c:	dd000417 	ldw	r20,16(sp)
 8005810:	dcc00317 	ldw	r19,12(sp)
 8005814:	dc800217 	ldw	r18,8(sp)
 8005818:	dc400117 	ldw	r17,4(sp)
 800581c:	dc000017 	ldw	r16,0(sp)
 8005820:	dec00a04 	addi	sp,sp,40
 8005824:	f800283a 	ret

08005828 <OutGraphicsCharFont2>:


void OutGraphicsCharFont2(int x, int y, int colour, int backgroundcolour, int c, int Erase)
{
 8005828:	defff004 	addi	sp,sp,-64
 800582c:	dfc00f15 	stw	ra,60(sp)
 8005830:	df000e15 	stw	fp,56(sp)
 8005834:	ddc00d15 	stw	r23,52(sp)
 8005838:	dd800c15 	stw	r22,48(sp)
 800583c:	dd400b15 	stw	r21,44(sp)
 8005840:	dd000a15 	stw	r20,40(sp)
 8005844:	dcc00915 	stw	r19,36(sp)
 8005848:	dc800815 	stw	r18,32(sp)
 800584c:	dc400715 	stw	r17,28(sp)
 8005850:	dc000615 	stw	r16,24(sp)
 8005854:	df000e04 	addi	fp,sp,56
 8005858:	e13ff215 	stw	r4,-56(fp)
 800585c:	e17ff315 	stw	r5,-52(fp)
 8005860:	e1bff415 	stw	r6,-48(fp)
 8005864:	e1fff515 	stw	r7,-44(fp)
	register int 	row,
					column,
					theX = x,
 8005868:	e53ff217 	ldw	r20,-56(fp)
					theY = y ;
 800586c:	e57ff317 	ldw	r21,-52(fp)
	register int 	pixels ;
	register char 	theColour = colour  ;
 8005870:	e0bff417 	ldw	r2,-48(fp)
 8005874:	e0bff605 	stb	r2,-40(fp)
	register int 	BitMask,
					theCharacter = c,
 8005878:	e4800217 	ldw	r18,8(fp)
					j,
					theRow, theColumn;


    if(((short)(x) > (short)(XRES-1)) || ((short)(y) > (short)(YRES-1)))  // if start off edge of screen don't bother
 800587c:	e0bff217 	ldw	r2,-56(fp)
 8005880:	10bfffcc 	andi	r2,r2,65535
 8005884:	10a0001c 	xori	r2,r2,32768
 8005888:	10a00004 	addi	r2,r2,-32768
 800588c:	1080c808 	cmpgei	r2,r2,800
 8005890:	1000061e 	bne	r2,zero,80058ac <OutGraphicsCharFont2+0x84>
 8005894:	e0bff317 	ldw	r2,-52(fp)
 8005898:	10bfffcc 	andi	r2,r2,65535
 800589c:	10a0001c 	xori	r2,r2,32768
 80058a0:	10a00004 	addi	r2,r2,-32768
 80058a4:	10807810 	cmplti	r2,r2,480
 80058a8:	1000011e 	bne	r2,zero,80058b0 <OutGraphicsCharFont2+0x88>
        return ;
 80058ac:	00003506 	br	8005984 <OutGraphicsCharFont2+0x15c>

	if(((short)(theCharacter) >= (short)(' ')) && ((short)(theCharacter) <= (short)('~'))) {			// if printable character
 80058b0:	9005883a 	mov	r2,r18
 80058b4:	10bfffcc 	andi	r2,r2,65535
 80058b8:	10a0001c 	xori	r2,r2,32768
 80058bc:	10a00004 	addi	r2,r2,-32768
 80058c0:	10800810 	cmplti	r2,r2,32
 80058c4:	10002f1e 	bne	r2,zero,8005984 <OutGraphicsCharFont2+0x15c>
 80058c8:	9005883a 	mov	r2,r18
 80058cc:	10bfffcc 	andi	r2,r2,65535
 80058d0:	10a0001c 	xori	r2,r2,32768
 80058d4:	10a00004 	addi	r2,r2,-32768
 80058d8:	10801fc8 	cmpgei	r2,r2,127
 80058dc:	1000291e 	bne	r2,zero,8005984 <OutGraphicsCharFont2+0x15c>
		theCharacter -= 0x20 ;																			// subtract hex 20 to get index of first printable character (the space character)
 80058e0:	94bff804 	addi	r18,r18,-32
		theRow = FONT2_YPIXELS;
 80058e4:	05800384 	movi	r22,14
		theColumn = FONT2_XPIXELS;
 80058e8:	05c00284 	movi	r23,10

		for(row = 0; row < theRow ; row ++)	{
 80058ec:	0021883a 	mov	r16,zero
 80058f0:	00002306 	br	8005980 <OutGraphicsCharFont2+0x158>
			pixels = Font10x14[theCharacter][row] ;		     								// get the pixels for row 0 of the character to be displayed
 80058f4:	008200b4 	movhi	r2,2050
 80058f8:	10b22284 	addi	r2,r2,-14198
 80058fc:	90c003a4 	muli	r3,r18,14
 8005900:	1c07883a 	add	r3,r3,r16
 8005904:	18c7883a 	add	r3,r3,r3
 8005908:	10c5883a 	add	r2,r2,r3
 800590c:	1080000b 	ldhu	r2,0(r2)
 8005910:	10bfffcc 	andi	r2,r2,65535
 8005914:	e0bff715 	stw	r2,-36(fp)
			BitMask = 512 ;							   											// set of hex 200 i.e. bit 7-0 = 0010 0000 0000
 8005918:	04c08004 	movi	r19,512
			for(column = 0; column < theColumn;   )  	{
 800591c:	0023883a 	mov	r17,zero
 8005920:	00001506 	br	8005978 <OutGraphicsCharFont2+0x150>
				if((pixels & BitMask))														// if valid pixel, then write it
 8005924:	e0fff717 	ldw	r3,-36(fp)
 8005928:	1cc4703a 	and	r2,r3,r19
 800592c:	10000726 	beq	r2,zero,800594c <OutGraphicsCharFont2+0x124>
					writeAPixel(theX+column, theY+row, theColour) ;
 8005930:	a449883a 	add	r4,r20,r17
 8005934:	ac07883a 	add	r3,r21,r16
 8005938:	e0bff607 	ldb	r2,-40(fp)
 800593c:	180b883a 	mov	r5,r3
 8005940:	100d883a 	mov	r6,r2
 8005944:	8001b240 	call	8001b24 <writeAPixel>
 8005948:	00000906 	br	8005970 <OutGraphicsCharFont2+0x148>
				else {																		// if not a valid pixel, do we erase or leave it along (no erase)
					if(Erase == TRUE)
 800594c:	e0800317 	ldw	r2,12(fp)
 8005950:	10800058 	cmpnei	r2,r2,1
 8005954:	1000061e 	bne	r2,zero,8005970 <OutGraphicsCharFont2+0x148>
						writeAPixel(theX+column, theY+row, backgroundcolour) ;
 8005958:	a447883a 	add	r3,r20,r17
 800595c:	ac05883a 	add	r2,r21,r16
 8005960:	1809883a 	mov	r4,r3
 8005964:	100b883a 	mov	r5,r2
 8005968:	e1bff517 	ldw	r6,-44(fp)
 800596c:	8001b240 	call	8001b24 <writeAPixel>
					// else leave it alone
				}
					column ++ ;
 8005970:	8c400044 	addi	r17,r17,1
				BitMask = BitMask >> 1 ;
 8005974:	9827d07a 	srai	r19,r19,1
		theColumn = FONT2_XPIXELS;

		for(row = 0; row < theRow ; row ++)	{
			pixels = Font10x14[theCharacter][row] ;		     								// get the pixels for row 0 of the character to be displayed
			BitMask = 512 ;							   											// set of hex 200 i.e. bit 7-0 = 0010 0000 0000
			for(column = 0; column < theColumn;   )  	{
 8005978:	8dffea16 	blt	r17,r23,8005924 <__alt_data_end+0xfc005924>
	if(((short)(theCharacter) >= (short)(' ')) && ((short)(theCharacter) <= (short)('~'))) {			// if printable character
		theCharacter -= 0x20 ;																			// subtract hex 20 to get index of first printable character (the space character)
		theRow = FONT2_YPIXELS;
		theColumn = FONT2_XPIXELS;

		for(row = 0; row < theRow ; row ++)	{
 800597c:	84000044 	addi	r16,r16,1
 8005980:	85bfdc16 	blt	r16,r22,80058f4 <__alt_data_end+0xfc0058f4>
					column ++ ;
				BitMask = BitMask >> 1 ;
			}
		}
	}
}
 8005984:	e6fff804 	addi	sp,fp,-32
 8005988:	dfc00917 	ldw	ra,36(sp)
 800598c:	df000817 	ldw	fp,32(sp)
 8005990:	ddc00717 	ldw	r23,28(sp)
 8005994:	dd800617 	ldw	r22,24(sp)
 8005998:	dd400517 	ldw	r21,20(sp)
 800599c:	dd000417 	ldw	r20,16(sp)
 80059a0:	dcc00317 	ldw	r19,12(sp)
 80059a4:	dc800217 	ldw	r18,8(sp)
 80059a8:	dc400117 	ldw	r17,4(sp)
 80059ac:	dc000017 	ldw	r16,0(sp)
 80059b0:	dec00a04 	addi	sp,sp,40
 80059b4:	f800283a 	ret

080059b8 <onPlayPauseButtonDown>:
#include <stdlib.h>
#include "PlayPauseButton.h"
#include "TouchEventHandler.h"

int onPlayPauseButtonDown(void* _self, int x, int y)
{
 80059b8:	defffa04 	addi	sp,sp,-24
 80059bc:	dfc00515 	stw	ra,20(sp)
 80059c0:	df000415 	stw	fp,16(sp)
 80059c4:	df000404 	addi	fp,sp,16
 80059c8:	e13ffd15 	stw	r4,-12(fp)
 80059cc:	e17ffe15 	stw	r5,-8(fp)
 80059d0:	e1bfff15 	stw	r6,-4(fp)
  (void) x;
  (void) y;
  struct PlayPauseButton* self = _self;
 80059d4:	e0bffd17 	ldw	r2,-12(fp)
 80059d8:	e0bffc15 	stw	r2,-16(fp)
  if(!self->focused) {
 80059dc:	e0bffc17 	ldw	r2,-16(fp)
 80059e0:	10800e17 	ldw	r2,56(r2)
 80059e4:	10000a1e 	bne	r2,zero,8005a10 <onPlayPauseButtonDown+0x58>
	  self -> focused = 1;
 80059e8:	e0bffc17 	ldw	r2,-16(fp)
 80059ec:	00c00044 	movi	r3,1
 80059f0:	10c00e15 	stw	r3,56(r2)
	  invalidate(renderer(self), bounds(self));
 80059f4:	e0bffc17 	ldw	r2,-16(fp)
 80059f8:	10c00a17 	ldw	r3,40(r2)
 80059fc:	e0bffc17 	ldw	r2,-16(fp)
 8005a00:	10800517 	ldw	r2,20(r2)
 8005a04:	1809883a 	mov	r4,r3
 8005a08:	100b883a 	mov	r5,r2
 8005a0c:	80066240 	call	8006624 <invalidate>
  }
  return 1;
 8005a10:	00800044 	movi	r2,1
}
 8005a14:	e037883a 	mov	sp,fp
 8005a18:	dfc00117 	ldw	ra,4(sp)
 8005a1c:	df000017 	ldw	fp,0(sp)
 8005a20:	dec00204 	addi	sp,sp,8
 8005a24:	f800283a 	ret

08005a28 <onPlayPauseButtonUp>:

int onPlayPauseButtonUp(void* _self, int x, int y)
{
 8005a28:	defffa04 	addi	sp,sp,-24
 8005a2c:	dfc00515 	stw	ra,20(sp)
 8005a30:	df000415 	stw	fp,16(sp)
 8005a34:	df000404 	addi	fp,sp,16
 8005a38:	e13ffd15 	stw	r4,-12(fp)
 8005a3c:	e17ffe15 	stw	r5,-8(fp)
 8005a40:	e1bfff15 	stw	r6,-4(fp)
  (void) x;
  (void) y;
  struct PlayPauseButton* self = _self;
 8005a44:	e0bffd17 	ldw	r2,-12(fp)
 8005a48:	e0bffc15 	stw	r2,-16(fp)
  if(self->focused) {
 8005a4c:	e0bffc17 	ldw	r2,-16(fp)
 8005a50:	10800e17 	ldw	r2,56(r2)
 8005a54:	10000926 	beq	r2,zero,8005a7c <onPlayPauseButtonUp+0x54>
	  self -> focused = 0;
 8005a58:	e0bffc17 	ldw	r2,-16(fp)
 8005a5c:	10000e15 	stw	zero,56(r2)
	  invalidate(renderer(self), bounds(self));
 8005a60:	e0bffc17 	ldw	r2,-16(fp)
 8005a64:	10c00a17 	ldw	r3,40(r2)
 8005a68:	e0bffc17 	ldw	r2,-16(fp)
 8005a6c:	10800517 	ldw	r2,20(r2)
 8005a70:	1809883a 	mov	r4,r3
 8005a74:	100b883a 	mov	r5,r2
 8005a78:	80066240 	call	8006624 <invalidate>
  }
  return 1;
 8005a7c:	00800044 	movi	r2,1
}
 8005a80:	e037883a 	mov	sp,fp
 8005a84:	dfc00117 	ldw	ra,4(sp)
 8005a88:	df000017 	ldw	fp,0(sp)
 8005a8c:	dec00204 	addi	sp,sp,8
 8005a90:	f800283a 	ret

08005a94 <onPlayPauseButtonClick>:

int onPlayPauseButtonClick(void* _self, int x, int y)
{
 8005a94:	defffa04 	addi	sp,sp,-24
 8005a98:	dfc00515 	stw	ra,20(sp)
 8005a9c:	df000415 	stw	fp,16(sp)
 8005aa0:	df000404 	addi	fp,sp,16
 8005aa4:	e13ffd15 	stw	r4,-12(fp)
 8005aa8:	e17ffe15 	stw	r5,-8(fp)
 8005aac:	e1bfff15 	stw	r6,-4(fp)
  (void) x;
  (void) y;
  struct PlayPauseButton* self = _self;
 8005ab0:	e0bffd17 	ldw	r2,-12(fp)
 8005ab4:	e0bffc15 	stw	r2,-16(fp)
  self->play = !self->play;
 8005ab8:	e0bffc17 	ldw	r2,-16(fp)
 8005abc:	10800f17 	ldw	r2,60(r2)
 8005ac0:	1005003a 	cmpeq	r2,r2,zero
 8005ac4:	10c03fcc 	andi	r3,r2,255
 8005ac8:	e0bffc17 	ldw	r2,-16(fp)
 8005acc:	10c00f15 	stw	r3,60(r2)
  invalidate(renderer(self), bounds(self));
 8005ad0:	e0bffc17 	ldw	r2,-16(fp)
 8005ad4:	10c00a17 	ldw	r3,40(r2)
 8005ad8:	e0bffc17 	ldw	r2,-16(fp)
 8005adc:	10800517 	ldw	r2,20(r2)
 8005ae0:	1809883a 	mov	r4,r3
 8005ae4:	100b883a 	mov	r5,r2
 8005ae8:	80066240 	call	8006624 <invalidate>
  return 0;
 8005aec:	0005883a 	mov	r2,zero
}
 8005af0:	e037883a 	mov	sp,fp
 8005af4:	dfc00117 	ldw	ra,4(sp)
 8005af8:	df000017 	ldw	fp,0(sp)
 8005afc:	dec00204 	addi	sp,sp,8
 8005b00:	f800283a 	ret

08005b04 <PlayPauseButton_ctor>:

static void* PlayPauseButton_ctor(void* _self, va_list* app)
{
 8005b04:	defffb04 	addi	sp,sp,-20
 8005b08:	dfc00415 	stw	ra,16(sp)
 8005b0c:	df000315 	stw	fp,12(sp)
 8005b10:	df000304 	addi	fp,sp,12
 8005b14:	e13ffe15 	stw	r4,-8(fp)
 8005b18:	e17fff15 	stw	r5,-4(fp)
	struct PlayPauseButton* self = super_ctor(PlayPauseButton, _self, app);
 8005b1c:	d0a71817 	ldw	r2,-25504(gp)
 8005b20:	1009883a 	mov	r4,r2
 8005b24:	e17ffe17 	ldw	r5,-8(fp)
 8005b28:	e1bfff17 	ldw	r6,-4(fp)
 8005b2c:	80054180 	call	8005418 <super_ctor>
 8005b30:	e0bffd15 	stw	r2,-12(fp)

	self -> colour = va_arg(*app, int);
 8005b34:	e0bfff17 	ldw	r2,-4(fp)
 8005b38:	10800017 	ldw	r2,0(r2)
 8005b3c:	11000104 	addi	r4,r2,4
 8005b40:	e0ffff17 	ldw	r3,-4(fp)
 8005b44:	19000015 	stw	r4,0(r3)
 8005b48:	10c00017 	ldw	r3,0(r2)
 8005b4c:	e0bffd17 	ldw	r2,-12(fp)
 8005b50:	10c00c15 	stw	r3,48(r2)
	self -> focusColour = va_arg(*app, int);
 8005b54:	e0bfff17 	ldw	r2,-4(fp)
 8005b58:	10800017 	ldw	r2,0(r2)
 8005b5c:	11000104 	addi	r4,r2,4
 8005b60:	e0ffff17 	ldw	r3,-4(fp)
 8005b64:	19000015 	stw	r4,0(r3)
 8005b68:	10c00017 	ldw	r3,0(r2)
 8005b6c:	e0bffd17 	ldw	r2,-12(fp)
 8005b70:	10c00d15 	stw	r3,52(r2)

	self -> focused = 0;
 8005b74:	e0bffd17 	ldw	r2,-12(fp)
 8005b78:	10000e15 	stw	zero,56(r2)
	self -> play = 1;
 8005b7c:	e0bffd17 	ldw	r2,-12(fp)
 8005b80:	00c00044 	movi	r3,1
 8005b84:	10c00f15 	stw	r3,60(r2)

	addEventListener(self, DOWN_EVENT, onPlayPauseButtonDown);
 8005b88:	e13ffd17 	ldw	r4,-12(fp)
 8005b8c:	01400044 	movi	r5,1
 8005b90:	01820034 	movhi	r6,2048
 8005b94:	31966e04 	addi	r6,r6,22968
 8005b98:	80080880 	call	8008088 <addEventListener>
	addEventListener(self, UP_EVENT, onPlayPauseButtonUp);
 8005b9c:	e13ffd17 	ldw	r4,-12(fp)
 8005ba0:	01400084 	movi	r5,2
 8005ba4:	01820034 	movhi	r6,2048
 8005ba8:	31968a04 	addi	r6,r6,23080
 8005bac:	80080880 	call	8008088 <addEventListener>
	addEventListener(self, CLICK_EVENT, onPlayPauseButtonClick);
 8005bb0:	e13ffd17 	ldw	r4,-12(fp)
 8005bb4:	01400104 	movi	r5,4
 8005bb8:	01820034 	movhi	r6,2048
 8005bbc:	3196a504 	addi	r6,r6,23188
 8005bc0:	80080880 	call	8008088 <addEventListener>

	return self;
 8005bc4:	e0bffd17 	ldw	r2,-12(fp)
}
 8005bc8:	e037883a 	mov	sp,fp
 8005bcc:	dfc00117 	ldw	ra,4(sp)
 8005bd0:	df000017 	ldw	fp,0(sp)
 8005bd4:	dec00204 	addi	sp,sp,8
 8005bd8:	f800283a 	ret

08005bdc <PlayPauseButton_draw>:

static void PlayPauseButton_draw(void* _self, struct Bounds* clip)
{
 8005bdc:	defff604 	addi	sp,sp,-40
 8005be0:	dfc00915 	stw	ra,36(sp)
 8005be4:	df000815 	stw	fp,32(sp)
 8005be8:	df000804 	addi	fp,sp,32
 8005bec:	e13ffe15 	stw	r4,-8(fp)
 8005bf0:	e17fff15 	stw	r5,-4(fp)
	struct PlayPauseButton* self = _self;
 8005bf4:	e0bffe17 	ldw	r2,-8(fp)
 8005bf8:	e0bffb15 	stw	r2,-20(fp)
	super_draw(PlayPauseButton, _self, clip);
 8005bfc:	d0a71817 	ldw	r2,-25504(gp)
 8005c00:	1009883a 	mov	r4,r2
 8005c04:	e17ffe17 	ldw	r5,-8(fp)
 8005c08:	e1bfff17 	ldw	r6,-4(fp)
 8005c0c:	8007a600 	call	8007a60 <super_draw>

	struct Bounds* bounds = bounds(self);
 8005c10:	e0bffb17 	ldw	r2,-20(fp)
 8005c14:	10800517 	ldw	r2,20(r2)
 8005c18:	e0bffc15 	stw	r2,-16(fp)

	if(self->play) {
 8005c1c:	e0bffb17 	ldw	r2,-20(fp)
 8005c20:	10800f17 	ldw	r2,60(r2)
 8005c24:	10005126 	beq	r2,zero,8005d6c <PlayPauseButton_draw+0x190>
		writeFilledBottomFlatTriangle(bounds->x1, bounds->y1, bounds->x1, (bounds->y1+bounds->y2)/2, bounds->x2, (bounds->y1+bounds->y2)/2, self -> focused ? self -> focusColour : self -> colour);
 8005c28:	e0bffc17 	ldw	r2,-16(fp)
 8005c2c:	11c00017 	ldw	r7,0(r2)
 8005c30:	e0bffc17 	ldw	r2,-16(fp)
 8005c34:	11400217 	ldw	r5,8(r2)
 8005c38:	e0bffc17 	ldw	r2,-16(fp)
 8005c3c:	11800017 	ldw	r6,0(r2)
 8005c40:	e0bffc17 	ldw	r2,-16(fp)
 8005c44:	10c00217 	ldw	r3,8(r2)
 8005c48:	e0bffc17 	ldw	r2,-16(fp)
 8005c4c:	10800317 	ldw	r2,12(r2)
 8005c50:	1885883a 	add	r2,r3,r2
 8005c54:	1006d7fa 	srli	r3,r2,31
 8005c58:	1885883a 	add	r2,r3,r2
 8005c5c:	1005d07a 	srai	r2,r2,1
 8005c60:	1011883a 	mov	r8,r2
 8005c64:	e0bffc17 	ldw	r2,-16(fp)
 8005c68:	10c00117 	ldw	r3,4(r2)
 8005c6c:	e0bffc17 	ldw	r2,-16(fp)
 8005c70:	11000217 	ldw	r4,8(r2)
 8005c74:	e0bffc17 	ldw	r2,-16(fp)
 8005c78:	10800317 	ldw	r2,12(r2)
 8005c7c:	2085883a 	add	r2,r4,r2
 8005c80:	1008d7fa 	srli	r4,r2,31
 8005c84:	2085883a 	add	r2,r4,r2
 8005c88:	1005d07a 	srai	r2,r2,1
 8005c8c:	1009883a 	mov	r4,r2
 8005c90:	e0bffb17 	ldw	r2,-20(fp)
 8005c94:	10800e17 	ldw	r2,56(r2)
 8005c98:	10000326 	beq	r2,zero,8005ca8 <PlayPauseButton_draw+0xcc>
 8005c9c:	e0bffb17 	ldw	r2,-20(fp)
 8005ca0:	10800d17 	ldw	r2,52(r2)
 8005ca4:	00000206 	br	8005cb0 <PlayPauseButton_draw+0xd4>
 8005ca8:	e0bffb17 	ldw	r2,-20(fp)
 8005cac:	10800c17 	ldw	r2,48(r2)
 8005cb0:	d8c00015 	stw	r3,0(sp)
 8005cb4:	d9000115 	stw	r4,4(sp)
 8005cb8:	d8800215 	stw	r2,8(sp)
 8005cbc:	3809883a 	mov	r4,r7
 8005cc0:	400f883a 	mov	r7,r8
 8005cc4:	80025dc0 	call	80025dc <writeFilledBottomFlatTriangle>
		writeFilledTopFlatTriangle(bounds->x1, (bounds->y1+bounds->y2)/2, bounds->x2, (bounds->y1+bounds->y2)/2, bounds->x1, bounds->y2, self -> focused ? self -> focusColour : self -> colour);
 8005cc8:	e0bffc17 	ldw	r2,-16(fp)
 8005ccc:	11400017 	ldw	r5,0(r2)
 8005cd0:	e0bffc17 	ldw	r2,-16(fp)
 8005cd4:	10c00217 	ldw	r3,8(r2)
 8005cd8:	e0bffc17 	ldw	r2,-16(fp)
 8005cdc:	10800317 	ldw	r2,12(r2)
 8005ce0:	1885883a 	add	r2,r3,r2
 8005ce4:	1006d7fa 	srli	r3,r2,31
 8005ce8:	1885883a 	add	r2,r3,r2
 8005cec:	1005d07a 	srai	r2,r2,1
 8005cf0:	1011883a 	mov	r8,r2
 8005cf4:	e0bffc17 	ldw	r2,-16(fp)
 8005cf8:	11800117 	ldw	r6,4(r2)
 8005cfc:	e0bffc17 	ldw	r2,-16(fp)
 8005d00:	10c00217 	ldw	r3,8(r2)
 8005d04:	e0bffc17 	ldw	r2,-16(fp)
 8005d08:	10800317 	ldw	r2,12(r2)
 8005d0c:	1885883a 	add	r2,r3,r2
 8005d10:	1006d7fa 	srli	r3,r2,31
 8005d14:	1885883a 	add	r2,r3,r2
 8005d18:	1005d07a 	srai	r2,r2,1
 8005d1c:	100f883a 	mov	r7,r2
 8005d20:	e0bffc17 	ldw	r2,-16(fp)
 8005d24:	11000017 	ldw	r4,0(r2)
 8005d28:	e0bffc17 	ldw	r2,-16(fp)
 8005d2c:	10c00317 	ldw	r3,12(r2)
 8005d30:	e0bffb17 	ldw	r2,-20(fp)
 8005d34:	10800e17 	ldw	r2,56(r2)
 8005d38:	10000326 	beq	r2,zero,8005d48 <PlayPauseButton_draw+0x16c>
 8005d3c:	e0bffb17 	ldw	r2,-20(fp)
 8005d40:	10800d17 	ldw	r2,52(r2)
 8005d44:	00000206 	br	8005d50 <PlayPauseButton_draw+0x174>
 8005d48:	e0bffb17 	ldw	r2,-20(fp)
 8005d4c:	10800c17 	ldw	r2,48(r2)
 8005d50:	d9000015 	stw	r4,0(sp)
 8005d54:	d8c00115 	stw	r3,4(sp)
 8005d58:	d8800215 	stw	r2,8(sp)
 8005d5c:	2809883a 	mov	r4,r5
 8005d60:	400b883a 	mov	r5,r8
 8005d64:	80028840 	call	8002884 <writeFilledTopFlatTriangle>
 8005d68:	00002f06 	br	8005e28 <PlayPauseButton_draw+0x24c>
	} else {
		int width = width(self)/3;
 8005d6c:	e0bffb17 	ldw	r2,-20(fp)
 8005d70:	10c00317 	ldw	r3,12(r2)
 8005d74:	008000c4 	movi	r2,3
 8005d78:	1885283a 	div	r2,r3,r2
 8005d7c:	e0bffd15 	stw	r2,-12(fp)
		writeFilledRect(bounds->x1, bounds->y1, bounds->x1 + width, bounds->y2, self -> focused ? self -> focusColour : self -> colour);
 8005d80:	e0bffc17 	ldw	r2,-16(fp)
 8005d84:	11000017 	ldw	r4,0(r2)
 8005d88:	e0bffc17 	ldw	r2,-16(fp)
 8005d8c:	11400217 	ldw	r5,8(r2)
 8005d90:	e0bffc17 	ldw	r2,-16(fp)
 8005d94:	10c00017 	ldw	r3,0(r2)
 8005d98:	e0bffd17 	ldw	r2,-12(fp)
 8005d9c:	188d883a 	add	r6,r3,r2
 8005da0:	e0bffc17 	ldw	r2,-16(fp)
 8005da4:	10c00317 	ldw	r3,12(r2)
 8005da8:	e0bffb17 	ldw	r2,-20(fp)
 8005dac:	10800e17 	ldw	r2,56(r2)
 8005db0:	10000326 	beq	r2,zero,8005dc0 <PlayPauseButton_draw+0x1e4>
 8005db4:	e0bffb17 	ldw	r2,-20(fp)
 8005db8:	10800d17 	ldw	r2,52(r2)
 8005dbc:	00000206 	br	8005dc8 <PlayPauseButton_draw+0x1ec>
 8005dc0:	e0bffb17 	ldw	r2,-20(fp)
 8005dc4:	10800c17 	ldw	r2,48(r2)
 8005dc8:	d8800015 	stw	r2,0(sp)
 8005dcc:	180f883a 	mov	r7,r3
 8005dd0:	8001fd80 	call	8001fd8 <writeFilledRect>
		writeFilledRect(bounds->x2-width, bounds->y1, bounds->x2, bounds->y2, self -> focused ? self -> focusColour : self -> colour);
 8005dd4:	e0bffc17 	ldw	r2,-16(fp)
 8005dd8:	10c00117 	ldw	r3,4(r2)
 8005ddc:	e0bffd17 	ldw	r2,-12(fp)
 8005de0:	1889c83a 	sub	r4,r3,r2
 8005de4:	e0bffc17 	ldw	r2,-16(fp)
 8005de8:	11400217 	ldw	r5,8(r2)
 8005dec:	e0bffc17 	ldw	r2,-16(fp)
 8005df0:	11800117 	ldw	r6,4(r2)
 8005df4:	e0bffc17 	ldw	r2,-16(fp)
 8005df8:	10c00317 	ldw	r3,12(r2)
 8005dfc:	e0bffb17 	ldw	r2,-20(fp)
 8005e00:	10800e17 	ldw	r2,56(r2)
 8005e04:	10000326 	beq	r2,zero,8005e14 <PlayPauseButton_draw+0x238>
 8005e08:	e0bffb17 	ldw	r2,-20(fp)
 8005e0c:	10800d17 	ldw	r2,52(r2)
 8005e10:	00000206 	br	8005e1c <PlayPauseButton_draw+0x240>
 8005e14:	e0bffb17 	ldw	r2,-20(fp)
 8005e18:	10800c17 	ldw	r2,48(r2)
 8005e1c:	d8800015 	stw	r2,0(sp)
 8005e20:	180f883a 	mov	r7,r3
 8005e24:	8001fd80 	call	8001fd8 <writeFilledRect>
	}
}
 8005e28:	e037883a 	mov	sp,fp
 8005e2c:	dfc00117 	ldw	ra,4(sp)
 8005e30:	df000017 	ldw	fp,0(sp)
 8005e34:	dec00204 	addi	sp,sp,8
 8005e38:	f800283a 	ret

08005e3c <initPlayPauseButton>:

const void* PlayPauseButton;

void initPlayPauseButton()
{
 8005e3c:	defff904 	addi	sp,sp,-28
 8005e40:	dfc00615 	stw	ra,24(sp)
 8005e44:	df000515 	stw	fp,20(sp)
 8005e48:	df000504 	addi	fp,sp,20
	if(!PlayPauseButton)
 8005e4c:	d0a71817 	ldw	r2,-25504(gp)
 8005e50:	10001a1e 	bne	r2,zero,8005ebc <initPlayPauseButton+0x80>
		{
			initView();
 8005e54:	80082600 	call	8008260 <initView>
			PlayPauseButton = new(ViewClass, "PlayPauseButton", View,
 8005e58:	008200f4 	movhi	r2,2051
 8005e5c:	10aaf604 	addi	r2,r2,-21544
 8005e60:	11000017 	ldw	r4,0(r2)
 8005e64:	008200f4 	movhi	r2,2051
 8005e68:	10aaf504 	addi	r2,r2,-21548
 8005e6c:	10c00017 	ldw	r3,0(r2)
 8005e70:	00820034 	movhi	r2,2048
 8005e74:	1094e904 	addi	r2,r2,21412
 8005e78:	d8800015 	stw	r2,0(sp)
 8005e7c:	00820034 	movhi	r2,2048
 8005e80:	1096c104 	addi	r2,r2,23300
 8005e84:	d8800115 	stw	r2,4(sp)
 8005e88:	00820034 	movhi	r2,2048
 8005e8c:	109e8504 	addi	r2,r2,31252
 8005e90:	d8800215 	stw	r2,8(sp)
 8005e94:	00820034 	movhi	r2,2048
 8005e98:	1096f704 	addi	r2,r2,23516
 8005e9c:	d8800315 	stw	r2,12(sp)
 8005ea0:	d8000415 	stw	zero,16(sp)
 8005ea4:	014200b4 	movhi	r5,2050
 8005ea8:	295b6a04 	addi	r5,r5,28072
 8005eac:	180d883a 	mov	r6,r3
 8005eb0:	01c01004 	movi	r7,64
 8005eb4:	80052900 	call	8005290 <new>
 8005eb8:	d0a71815 	stw	r2,-25504(gp)
						 sizeof(struct PlayPauseButton), ctor, PlayPauseButton_ctor,
						 draw, PlayPauseButton_draw,0);
		}
}
 8005ebc:	e037883a 	mov	sp,fp
 8005ec0:	dfc00117 	ldw	ra,4(sp)
 8005ec4:	df000017 	ldw	fp,0(sp)
 8005ec8:	dec00204 	addi	sp,sp,8
 8005ecc:	f800283a 	ret

08005ed0 <onProgressBarDown>:
#include <assert.h>
#include "ProgressBar.h"
#include "TouchEventHandler.h"

int onProgressBarDown(void* _self, int x, int y)
{
 8005ed0:	defff804 	addi	sp,sp,-32
 8005ed4:	dfc00715 	stw	ra,28(sp)
 8005ed8:	df000615 	stw	fp,24(sp)
 8005edc:	dc400515 	stw	r17,20(sp)
 8005ee0:	dc000415 	stw	r16,16(sp)
 8005ee4:	df000604 	addi	fp,sp,24
 8005ee8:	e13ffb15 	stw	r4,-20(fp)
 8005eec:	e17ffc15 	stw	r5,-16(fp)
 8005ef0:	e1bffd15 	stw	r6,-12(fp)
  struct ProgressBar* self = _self;
 8005ef4:	e0bffb17 	ldw	r2,-20(fp)
 8005ef8:	e0bffa15 	stw	r2,-24(fp)
  if(x < 0) self -> percentage = 0;
 8005efc:	e0bffc17 	ldw	r2,-16(fp)
 8005f00:	1000040e 	bge	r2,zero,8005f14 <onProgressBarDown+0x44>
 8005f04:	e0bffa17 	ldw	r2,-24(fp)
 8005f08:	10000d15 	stw	zero,52(r2)
 8005f0c:	10000e15 	stw	zero,56(r2)
 8005f10:	00001f06 	br	8005f90 <onProgressBarDown+0xc0>
  else if(x > width(self)) self->percentage = 1;
 8005f14:	e0bffa17 	ldw	r2,-24(fp)
 8005f18:	10c00317 	ldw	r3,12(r2)
 8005f1c:	e0bffc17 	ldw	r2,-16(fp)
 8005f20:	1880050e 	bge	r3,r2,8005f38 <onProgressBarDown+0x68>
 8005f24:	e0bffa17 	ldw	r2,-24(fp)
 8005f28:	10000d15 	stw	zero,52(r2)
 8005f2c:	00cffc34 	movhi	r3,16368
 8005f30:	10c00e15 	stw	r3,56(r2)
 8005f34:	00001606 	br	8005f90 <onProgressBarDown+0xc0>
  else self->percentage = ((double) x) / width(self);
 8005f38:	e13ffc17 	ldw	r4,-16(fp)
 8005f3c:	800b6280 	call	800b628 <__floatsidf>
 8005f40:	1021883a 	mov	r16,r2
 8005f44:	1823883a 	mov	r17,r3
 8005f48:	e0bffa17 	ldw	r2,-24(fp)
 8005f4c:	10800317 	ldw	r2,12(r2)
 8005f50:	1009883a 	mov	r4,r2
 8005f54:	800b6280 	call	800b628 <__floatsidf>
 8005f58:	100f883a 	mov	r7,r2
 8005f5c:	1811883a 	mov	r8,r3
 8005f60:	8009883a 	mov	r4,r16
 8005f64:	880b883a 	mov	r5,r17
 8005f68:	380d883a 	mov	r6,r7
 8005f6c:	400f883a 	mov	r7,r8
 8005f70:	8009a9c0 	call	8009a9c <__divdf3>
 8005f74:	1009883a 	mov	r4,r2
 8005f78:	180b883a 	mov	r5,r3
 8005f7c:	2005883a 	mov	r2,r4
 8005f80:	2807883a 	mov	r3,r5
 8005f84:	e13ffa17 	ldw	r4,-24(fp)
 8005f88:	20800d15 	stw	r2,52(r4)
 8005f8c:	20c00e15 	stw	r3,56(r4)
  invalidate(renderer(self), bounds(self));
 8005f90:	e0bffa17 	ldw	r2,-24(fp)
 8005f94:	10c00a17 	ldw	r3,40(r2)
 8005f98:	e0bffa17 	ldw	r2,-24(fp)
 8005f9c:	10800517 	ldw	r2,20(r2)
 8005fa0:	1809883a 	mov	r4,r3
 8005fa4:	100b883a 	mov	r5,r2
 8005fa8:	80066240 	call	8006624 <invalidate>
  return 0;
 8005fac:	0005883a 	mov	r2,zero
}
 8005fb0:	e6fffe04 	addi	sp,fp,-8
 8005fb4:	dfc00317 	ldw	ra,12(sp)
 8005fb8:	df000217 	ldw	fp,8(sp)
 8005fbc:	dc400117 	ldw	r17,4(sp)
 8005fc0:	dc000017 	ldw	r16,0(sp)
 8005fc4:	dec00404 	addi	sp,sp,16
 8005fc8:	f800283a 	ret

08005fcc <onProgressBarMove>:

int onProgressBarMove(void* _self, int x, int y, int dx, int dy)
{
 8005fcc:	defffa04 	addi	sp,sp,-24
 8005fd0:	dfc00515 	stw	ra,20(sp)
 8005fd4:	df000415 	stw	fp,16(sp)
 8005fd8:	df000404 	addi	fp,sp,16
 8005fdc:	e13ffc15 	stw	r4,-16(fp)
 8005fe0:	e17ffd15 	stw	r5,-12(fp)
 8005fe4:	e1bffe15 	stw	r6,-8(fp)
 8005fe8:	e1ffff15 	stw	r7,-4(fp)
  return onProgressBarDown(_self, x, y);
 8005fec:	e13ffc17 	ldw	r4,-16(fp)
 8005ff0:	e17ffd17 	ldw	r5,-12(fp)
 8005ff4:	e1bffe17 	ldw	r6,-8(fp)
 8005ff8:	8005ed00 	call	8005ed0 <onProgressBarDown>
}
 8005ffc:	e037883a 	mov	sp,fp
 8006000:	dfc00117 	ldw	ra,4(sp)
 8006004:	df000017 	ldw	fp,0(sp)
 8006008:	dec00204 	addi	sp,sp,8
 800600c:	f800283a 	ret

08006010 <ProgressBar_ctor>:

static void* ProgressBar_ctor(void* _self, va_list* app)
{
 8006010:	defffb04 	addi	sp,sp,-20
 8006014:	dfc00415 	stw	ra,16(sp)
 8006018:	df000315 	stw	fp,12(sp)
 800601c:	df000304 	addi	fp,sp,12
 8006020:	e13ffe15 	stw	r4,-8(fp)
 8006024:	e17fff15 	stw	r5,-4(fp)
	struct ProgressBar* self = super_ctor(ProgressBar, _self, app);
 8006028:	d0a71917 	ldw	r2,-25500(gp)
 800602c:	1009883a 	mov	r4,r2
 8006030:	e17ffe17 	ldw	r5,-8(fp)
 8006034:	e1bfff17 	ldw	r6,-4(fp)
 8006038:	80054180 	call	8005418 <super_ctor>
 800603c:	e0bffd15 	stw	r2,-12(fp)

	self -> colour = va_arg(*app, int);
 8006040:	e0bfff17 	ldw	r2,-4(fp)
 8006044:	10800017 	ldw	r2,0(r2)
 8006048:	11000104 	addi	r4,r2,4
 800604c:	e0ffff17 	ldw	r3,-4(fp)
 8006050:	19000015 	stw	r4,0(r3)
 8006054:	10c00017 	ldw	r3,0(r2)
 8006058:	e0bffd17 	ldw	r2,-12(fp)
 800605c:	10c00c15 	stw	r3,48(r2)

  self -> percentage = 0;
 8006060:	e0bffd17 	ldw	r2,-12(fp)
 8006064:	10000d15 	stw	zero,52(r2)
 8006068:	10000e15 	stw	zero,56(r2)

  addEventListener(self, MOVE_EVENT, onProgressBarMove);
 800606c:	e13ffd17 	ldw	r4,-12(fp)
 8006070:	014000c4 	movi	r5,3
 8006074:	01820034 	movhi	r6,2048
 8006078:	3197f304 	addi	r6,r6,24524
 800607c:	80080880 	call	8008088 <addEventListener>

	return self;
 8006080:	e0bffd17 	ldw	r2,-12(fp)
}
 8006084:	e037883a 	mov	sp,fp
 8006088:	dfc00117 	ldw	ra,4(sp)
 800608c:	df000017 	ldw	fp,0(sp)
 8006090:	dec00204 	addi	sp,sp,8
 8006094:	f800283a 	ret

08006098 <ProgressBar_draw>:

static void ProgressBar_draw(void* _self, struct Bounds* clip)
{
 8006098:	defff504 	addi	sp,sp,-44
 800609c:	dfc00a15 	stw	ra,40(sp)
 80060a0:	df000915 	stw	fp,36(sp)
 80060a4:	dcc00815 	stw	r19,32(sp)
 80060a8:	dc800715 	stw	r18,28(sp)
 80060ac:	dc400615 	stw	r17,24(sp)
 80060b0:	dc000515 	stw	r16,20(sp)
 80060b4:	df000904 	addi	fp,sp,36
 80060b8:	e13ffa15 	stw	r4,-24(fp)
 80060bc:	e17ffb15 	stw	r5,-20(fp)
	struct ProgressBar* self = _self;
 80060c0:	e0bffa17 	ldw	r2,-24(fp)
 80060c4:	e0bff815 	stw	r2,-32(fp)
	super_draw(ProgressBar, _self, clip);
 80060c8:	d0a71917 	ldw	r2,-25500(gp)
 80060cc:	1009883a 	mov	r4,r2
 80060d0:	e17ffa17 	ldw	r5,-24(fp)
 80060d4:	e1bffb17 	ldw	r6,-20(fp)
 80060d8:	8007a600 	call	8007a60 <super_draw>

	struct Bounds* bounds = bounds(self);
 80060dc:	e0bff817 	ldw	r2,-32(fp)
 80060e0:	10800517 	ldw	r2,20(r2)
 80060e4:	e0bff915 	stw	r2,-28(fp)

  writeFilledRect(bounds->x1, bounds->y1, bounds->x2, bounds->y2, BLACK);
 80060e8:	e0bff917 	ldw	r2,-28(fp)
 80060ec:	11000017 	ldw	r4,0(r2)
 80060f0:	e0bff917 	ldw	r2,-28(fp)
 80060f4:	11400217 	ldw	r5,8(r2)
 80060f8:	e0bff917 	ldw	r2,-28(fp)
 80060fc:	10c00117 	ldw	r3,4(r2)
 8006100:	e0bff917 	ldw	r2,-28(fp)
 8006104:	10800317 	ldw	r2,12(r2)
 8006108:	d8000015 	stw	zero,0(sp)
 800610c:	180d883a 	mov	r6,r3
 8006110:	100f883a 	mov	r7,r2
 8006114:	8001fd80 	call	8001fd8 <writeFilledRect>
	writeFilledRect(bounds->x1, bounds->y1, bounds->x1 + width(self)*self->percentage, bounds->y2, self -> colour);
 8006118:	e0bff917 	ldw	r2,-28(fp)
 800611c:	14c00017 	ldw	r19,0(r2)
 8006120:	e0bff917 	ldw	r2,-28(fp)
 8006124:	14800217 	ldw	r18,8(r2)
 8006128:	e0bff917 	ldw	r2,-28(fp)
 800612c:	10800017 	ldw	r2,0(r2)
 8006130:	1009883a 	mov	r4,r2
 8006134:	800b6280 	call	800b628 <__floatsidf>
 8006138:	1021883a 	mov	r16,r2
 800613c:	1823883a 	mov	r17,r3
 8006140:	e0bff817 	ldw	r2,-32(fp)
 8006144:	10800317 	ldw	r2,12(r2)
 8006148:	1009883a 	mov	r4,r2
 800614c:	800b6280 	call	800b628 <__floatsidf>
 8006150:	100b883a 	mov	r5,r2
 8006154:	180d883a 	mov	r6,r3
 8006158:	e13ff817 	ldw	r4,-32(fp)
 800615c:	20800d17 	ldw	r2,52(r4)
 8006160:	20c00e17 	ldw	r3,56(r4)
 8006164:	2809883a 	mov	r4,r5
 8006168:	300b883a 	mov	r5,r6
 800616c:	100d883a 	mov	r6,r2
 8006170:	180f883a 	mov	r7,r3
 8006174:	800a5ac0 	call	800a5ac <__muldf3>
 8006178:	1009883a 	mov	r4,r2
 800617c:	180b883a 	mov	r5,r3
 8006180:	2005883a 	mov	r2,r4
 8006184:	2807883a 	mov	r3,r5
 8006188:	8009883a 	mov	r4,r16
 800618c:	880b883a 	mov	r5,r17
 8006190:	100d883a 	mov	r6,r2
 8006194:	180f883a 	mov	r7,r3
 8006198:	80092000 	call	8009200 <__adddf3>
 800619c:	1009883a 	mov	r4,r2
 80061a0:	180b883a 	mov	r5,r3
 80061a4:	2005883a 	mov	r2,r4
 80061a8:	2807883a 	mov	r3,r5
 80061ac:	1009883a 	mov	r4,r2
 80061b0:	180b883a 	mov	r5,r3
 80061b4:	800b5a00 	call	800b5a0 <__fixdfsi>
 80061b8:	100d883a 	mov	r6,r2
 80061bc:	e0bff917 	ldw	r2,-28(fp)
 80061c0:	10c00317 	ldw	r3,12(r2)
 80061c4:	e0bff817 	ldw	r2,-32(fp)
 80061c8:	10800c17 	ldw	r2,48(r2)
 80061cc:	d8800015 	stw	r2,0(sp)
 80061d0:	9809883a 	mov	r4,r19
 80061d4:	900b883a 	mov	r5,r18
 80061d8:	180f883a 	mov	r7,r3
 80061dc:	8001fd80 	call	8001fd8 <writeFilledRect>
}
 80061e0:	e6fffc04 	addi	sp,fp,-16
 80061e4:	dfc00517 	ldw	ra,20(sp)
 80061e8:	df000417 	ldw	fp,16(sp)
 80061ec:	dcc00317 	ldw	r19,12(sp)
 80061f0:	dc800217 	ldw	r18,8(sp)
 80061f4:	dc400117 	ldw	r17,4(sp)
 80061f8:	dc000017 	ldw	r16,0(sp)
 80061fc:	dec00604 	addi	sp,sp,24
 8006200:	f800283a 	ret

08006204 <setPercentage>:

void setPercentage(void* _self, double percentage)
{
 8006204:	defff904 	addi	sp,sp,-28
 8006208:	dfc00615 	stw	ra,24(sp)
 800620c:	df000515 	stw	fp,20(sp)
 8006210:	dc000415 	stw	r16,16(sp)
 8006214:	df000504 	addi	fp,sp,20
 8006218:	e13ffc15 	stw	r4,-16(fp)
 800621c:	e17ffd15 	stw	r5,-12(fp)
 8006220:	e1bffe15 	stw	r6,-8(fp)
	assert(percentage >= 0 && percentage <= 1);
 8006224:	04000044 	movi	r16,1
 8006228:	e13ffd17 	ldw	r4,-12(fp)
 800622c:	e17ffe17 	ldw	r5,-8(fp)
 8006230:	000d883a 	mov	r6,zero
 8006234:	000f883a 	mov	r7,zero
 8006238:	800a3ec0 	call	800a3ec <__gedf2>
 800623c:	1000010e 	bge	r2,zero,8006244 <setPercentage+0x40>
 8006240:	0021883a 	mov	r16,zero
 8006244:	8080005c 	xori	r2,r16,1
 8006248:	10803fcc 	andi	r2,r2,255
 800624c:	10000b1e 	bne	r2,zero,800627c <setPercentage+0x78>
 8006250:	04000044 	movi	r16,1
 8006254:	e13ffd17 	ldw	r4,-12(fp)
 8006258:	e17ffe17 	ldw	r5,-8(fp)
 800625c:	000d883a 	mov	r6,zero
 8006260:	01cffc34 	movhi	r7,16368
 8006264:	800a4cc0 	call	800a4cc <__ledf2>
 8006268:	0080010e 	bge	zero,r2,8006270 <setPercentage+0x6c>
 800626c:	0021883a 	mov	r16,zero
 8006270:	8080005c 	xori	r2,r16,1
 8006274:	10803fcc 	andi	r2,r2,255
 8006278:	10000826 	beq	r2,zero,800629c <setPercentage+0x98>
 800627c:	010200b4 	movhi	r4,2050
 8006280:	211b6e04 	addi	r4,r4,28088
 8006284:	01400bc4 	movi	r5,47
 8006288:	018200b4 	movhi	r6,2050
 800628c:	319b7e04 	addi	r6,r6,28152
 8006290:	01c200b4 	movhi	r7,2050
 8006294:	39db7204 	addi	r7,r7,28104
 8006298:	800bb300 	call	800bb30 <__assert_func>

	struct ProgressBar* self = _self;
 800629c:	e0bffc17 	ldw	r2,-16(fp)
 80062a0:	e0bffb15 	stw	r2,-20(fp)

	if(self->percentage != percentage && visible(self) && renderer(self)) {
 80062a4:	e13ffb17 	ldw	r4,-20(fp)
 80062a8:	20800d17 	ldw	r2,52(r4)
 80062ac:	20c00e17 	ldw	r3,56(r4)
 80062b0:	1009883a 	mov	r4,r2
 80062b4:	180b883a 	mov	r5,r3
 80062b8:	e1bffd17 	ldw	r6,-12(fp)
 80062bc:	e1fffe17 	ldw	r7,-8(fp)
 80062c0:	800a3680 	call	800a368 <__eqdf2>
 80062c4:	10000d26 	beq	r2,zero,80062fc <setPercentage+0xf8>
 80062c8:	e0bffb17 	ldw	r2,-20(fp)
 80062cc:	10800b17 	ldw	r2,44(r2)
 80062d0:	10000a26 	beq	r2,zero,80062fc <setPercentage+0xf8>
 80062d4:	e0bffb17 	ldw	r2,-20(fp)
 80062d8:	10800a17 	ldw	r2,40(r2)
 80062dc:	10000726 	beq	r2,zero,80062fc <setPercentage+0xf8>
		invalidate(renderer(self), bounds(self));
 80062e0:	e0bffb17 	ldw	r2,-20(fp)
 80062e4:	10c00a17 	ldw	r3,40(r2)
 80062e8:	e0bffb17 	ldw	r2,-20(fp)
 80062ec:	10800517 	ldw	r2,20(r2)
 80062f0:	1809883a 	mov	r4,r3
 80062f4:	100b883a 	mov	r5,r2
 80062f8:	80066240 	call	8006624 <invalidate>
	}

	self->percentage = percentage;
 80062fc:	e0bffb17 	ldw	r2,-20(fp)
 8006300:	e0fffd17 	ldw	r3,-12(fp)
 8006304:	10c00d15 	stw	r3,52(r2)
 8006308:	e0fffe17 	ldw	r3,-8(fp)
 800630c:	10c00e15 	stw	r3,56(r2)
}
 8006310:	e6ffff04 	addi	sp,fp,-4
 8006314:	dfc00217 	ldw	ra,8(sp)
 8006318:	df000117 	ldw	fp,4(sp)
 800631c:	dc000017 	ldw	r16,0(sp)
 8006320:	dec00304 	addi	sp,sp,12
 8006324:	f800283a 	ret

08006328 <initProgressBar>:

const void* ProgressBar;

void initProgressBar()
{
 8006328:	defff904 	addi	sp,sp,-28
 800632c:	dfc00615 	stw	ra,24(sp)
 8006330:	df000515 	stw	fp,20(sp)
 8006334:	df000504 	addi	fp,sp,20
	if(!ProgressBar)
 8006338:	d0a71917 	ldw	r2,-25500(gp)
 800633c:	10001a1e 	bne	r2,zero,80063a8 <initProgressBar+0x80>
		{
			initView();
 8006340:	80082600 	call	8008260 <initView>
			ProgressBar = new(ViewClass, "ProgressBar", View,
 8006344:	008200f4 	movhi	r2,2051
 8006348:	10aaf604 	addi	r2,r2,-21544
 800634c:	11000017 	ldw	r4,0(r2)
 8006350:	008200f4 	movhi	r2,2051
 8006354:	10aaf504 	addi	r2,r2,-21548
 8006358:	10c00017 	ldw	r3,0(r2)
 800635c:	00820034 	movhi	r2,2048
 8006360:	1094e904 	addi	r2,r2,21412
 8006364:	d8800015 	stw	r2,0(sp)
 8006368:	00820034 	movhi	r2,2048
 800636c:	10980404 	addi	r2,r2,24592
 8006370:	d8800115 	stw	r2,4(sp)
 8006374:	00820034 	movhi	r2,2048
 8006378:	109e8504 	addi	r2,r2,31252
 800637c:	d8800215 	stw	r2,8(sp)
 8006380:	00820034 	movhi	r2,2048
 8006384:	10982604 	addi	r2,r2,24728
 8006388:	d8800315 	stw	r2,12(sp)
 800638c:	d8000415 	stw	zero,16(sp)
 8006390:	014200b4 	movhi	r5,2050
 8006394:	295b7b04 	addi	r5,r5,28140
 8006398:	180d883a 	mov	r6,r3
 800639c:	01c00f04 	movi	r7,60
 80063a0:	80052900 	call	8005290 <new>
 80063a4:	d0a71915 	stw	r2,-25500(gp)
						 sizeof(struct ProgressBar), ctor, ProgressBar_ctor,
						 draw, ProgressBar_draw,0);
		}
}
 80063a8:	e037883a 	mov	sp,fp
 80063ac:	dfc00117 	ldw	ra,4(sp)
 80063b0:	df000017 	ldw	fp,0(sp)
 80063b4:	dec00204 	addi	sp,sp,8
 80063b8:	f800283a 	ret

080063bc <setRoot>:
#include "View.h"
#include "Bounds.h"
#include "DrawOperations.h"

void setRoot(struct Renderer* self, struct View* view)
{
 80063bc:	defff804 	addi	sp,sp,-32
 80063c0:	dfc00715 	stw	ra,28(sp)
 80063c4:	df000615 	stw	fp,24(sp)
 80063c8:	df000604 	addi	fp,sp,24
 80063cc:	e13ffe15 	stw	r4,-8(fp)
 80063d0:	e17fff15 	stw	r5,-4(fp)
  self->rootView = view;
 80063d4:	e0bffe17 	ldw	r2,-8(fp)
 80063d8:	e0ffff17 	ldw	r3,-4(fp)
 80063dc:	10c00215 	stw	r3,8(r2)

  struct Bounds clip;
  clip.x1 = 30;
 80063e0:	00800784 	movi	r2,30
 80063e4:	e0bffa15 	stw	r2,-24(fp)
  clip.y1 = 0;
 80063e8:	e03ffc15 	stw	zero,-16(fp)
  clip.x2 = self -> displayWidth - 1;
 80063ec:	e0bffe17 	ldw	r2,-8(fp)
 80063f0:	10800017 	ldw	r2,0(r2)
 80063f4:	10bfffc4 	addi	r2,r2,-1
 80063f8:	e0bffb15 	stw	r2,-20(fp)
  clip.y2 = self -> displayHeight - 1;
 80063fc:	e0bffe17 	ldw	r2,-8(fp)
 8006400:	10800117 	ldw	r2,4(r2)
 8006404:	10bfffc4 	addi	r2,r2,-1
 8006408:	e0bffd15 	stw	r2,-12(fp)

  measure(view, &clip);
 800640c:	e13fff17 	ldw	r4,-4(fp)
 8006410:	e17ffa04 	addi	r5,fp,-24
 8006414:	8007b7c0 	call	8007b7c <measure>
}
 8006418:	e037883a 	mov	sp,fp
 800641c:	dfc00117 	ldw	ra,4(sp)
 8006420:	df000017 	ldw	fp,0(sp)
 8006424:	dec00204 	addi	sp,sp,8
 8006428:	f800283a 	ret

0800642c <renderChildren>:

void renderChildren(struct Renderer* self, struct View* view, struct Bounds* clip)
{
 800642c:	defff804 	addi	sp,sp,-32
 8006430:	dfc00715 	stw	ra,28(sp)
 8006434:	df000615 	stw	fp,24(sp)
 8006438:	df000604 	addi	fp,sp,24
 800643c:	e13ffd15 	stw	r4,-12(fp)
 8006440:	e17ffe15 	stw	r5,-8(fp)
 8006444:	e1bfff15 	stw	r6,-4(fp)
  setClippingBounds(clip);
 8006448:	e13fff17 	ldw	r4,-4(fp)
 800644c:	8001afc0 	call	8001afc <setClippingBounds>

  draw(view, clip);
 8006450:	e13ffe17 	ldw	r4,-8(fp)
 8006454:	e17fff17 	ldw	r5,-4(fp)
 8006458:	8007a140 	call	8007a14 <draw>

  struct ChildView* next = view->viewHead;
 800645c:	e0bffe17 	ldw	r2,-8(fp)
 8006460:	10800817 	ldw	r2,32(r2)
 8006464:	e0bffa15 	stw	r2,-24(fp)
  while(next)
 8006468:	00002006 	br	80064ec <renderChildren+0xc0>
  {
    struct View* childView = next->view;
 800646c:	e0bffa17 	ldw	r2,-24(fp)
 8006470:	10800217 	ldw	r2,8(r2)
 8006474:	e0bffb15 	stw	r2,-20(fp)
    measure(childView, view -> absBounds);
 8006478:	e0bffe17 	ldw	r2,-8(fp)
 800647c:	10800517 	ldw	r2,20(r2)
 8006480:	e13ffb17 	ldw	r4,-20(fp)
 8006484:	100b883a 	mov	r5,r2
 8006488:	8007b7c0 	call	8007b7c <measure>

    if(childView->visible && doIntersect(childView -> absBounds, clip))
 800648c:	e0bffb17 	ldw	r2,-20(fp)
 8006490:	10800b17 	ldw	r2,44(r2)
 8006494:	10001226 	beq	r2,zero,80064e0 <renderChildren+0xb4>
 8006498:	e0bffb17 	ldw	r2,-20(fp)
 800649c:	10800517 	ldw	r2,20(r2)
 80064a0:	1009883a 	mov	r4,r2
 80064a4:	e17fff17 	ldw	r5,-4(fp)
 80064a8:	80002f40 	call	80002f4 <doIntersect>
 80064ac:	10000c26 	beq	r2,zero,80064e0 <renderChildren+0xb4>
    {
      struct Bounds* childClip = intersect(childView -> absBounds, clip);
 80064b0:	e0bffb17 	ldw	r2,-20(fp)
 80064b4:	10800517 	ldw	r2,20(r2)
 80064b8:	1009883a 	mov	r4,r2
 80064bc:	e17fff17 	ldw	r5,-4(fp)
 80064c0:	80005000 	call	8000500 <intersect>
 80064c4:	e0bffc15 	stw	r2,-16(fp)
      renderChildren(self, childView, childClip);
 80064c8:	e13ffd17 	ldw	r4,-12(fp)
 80064cc:	e17ffb17 	ldw	r5,-20(fp)
 80064d0:	e1bffc17 	ldw	r6,-16(fp)
 80064d4:	800642c0 	call	800642c <renderChildren>
      free(childClip);
 80064d8:	e13ffc17 	ldw	r4,-16(fp)
 80064dc:	800bd440 	call	800bd44 <free>
    }

    next = next->next;
 80064e0:	e0bffa17 	ldw	r2,-24(fp)
 80064e4:	10800017 	ldw	r2,0(r2)
 80064e8:	e0bffa15 	stw	r2,-24(fp)
  setClippingBounds(clip);

  draw(view, clip);

  struct ChildView* next = view->viewHead;
  while(next)
 80064ec:	e0bffa17 	ldw	r2,-24(fp)
 80064f0:	103fde1e 	bne	r2,zero,800646c <__alt_data_end+0xfc00646c>
      free(childClip);
    }

    next = next->next;
  }
}
 80064f4:	e037883a 	mov	sp,fp
 80064f8:	dfc00117 	ldw	ra,4(sp)
 80064fc:	df000017 	ldw	fp,0(sp)
 8006500:	dec00204 	addi	sp,sp,8
 8006504:	f800283a 	ret

08006508 <render>:

void render(struct Renderer* self)
{
 8006508:	defff904 	addi	sp,sp,-28
 800650c:	dfc00615 	stw	ra,24(sp)
 8006510:	df000515 	stw	fp,20(sp)
 8006514:	df000504 	addi	fp,sp,20
 8006518:	e13fff15 	stw	r4,-4(fp)
  struct Bounds clip;
  clip.x1 = 30;
 800651c:	00800784 	movi	r2,30
 8006520:	e0bffb15 	stw	r2,-20(fp)
  clip.y1 = 0;
 8006524:	e03ffd15 	stw	zero,-12(fp)
  clip.x2 = self -> displayWidth - 1;
 8006528:	e0bfff17 	ldw	r2,-4(fp)
 800652c:	10800017 	ldw	r2,0(r2)
 8006530:	10bfffc4 	addi	r2,r2,-1
 8006534:	e0bffc15 	stw	r2,-16(fp)
  clip.y2 = self -> displayHeight - 1;
 8006538:	e0bfff17 	ldw	r2,-4(fp)
 800653c:	10800117 	ldw	r2,4(r2)
 8006540:	10bfffc4 	addi	r2,r2,-1
 8006544:	e0bffe15 	stw	r2,-8(fp)

  measure(self -> rootView, &clip);
 8006548:	e0bfff17 	ldw	r2,-4(fp)
 800654c:	10800217 	ldw	r2,8(r2)
 8006550:	1009883a 	mov	r4,r2
 8006554:	e17ffb04 	addi	r5,fp,-20
 8006558:	8007b7c0 	call	8007b7c <measure>

  renderChildren(self, self -> rootView, &clip);
 800655c:	e0bfff17 	ldw	r2,-4(fp)
 8006560:	10800217 	ldw	r2,8(r2)
 8006564:	e13fff17 	ldw	r4,-4(fp)
 8006568:	100b883a 	mov	r5,r2
 800656c:	e1bffb04 	addi	r6,fp,-20
 8006570:	800642c0 	call	800642c <renderChildren>
}
 8006574:	e037883a 	mov	sp,fp
 8006578:	dfc00117 	ldw	ra,4(sp)
 800657c:	df000017 	ldw	fp,0(sp)
 8006580:	dec00204 	addi	sp,sp,8
 8006584:	f800283a 	ret

08006588 <partialRender>:
void partialRender(struct Renderer* self)
{
 8006588:	defff904 	addi	sp,sp,-28
 800658c:	dfc00615 	stw	ra,24(sp)
 8006590:	df000515 	stw	fp,20(sp)
 8006594:	df000504 	addi	fp,sp,20
 8006598:	e13fff15 	stw	r4,-4(fp)
  if(self -> damagedRegion) {
 800659c:	e0bfff17 	ldw	r2,-4(fp)
 80065a0:	10800317 	ldw	r2,12(r2)
 80065a4:	10001a26 	beq	r2,zero,8006610 <partialRender+0x88>
    struct Bounds clip;
    clip.x1 = 30;
 80065a8:	00800784 	movi	r2,30
 80065ac:	e0bffb15 	stw	r2,-20(fp)
    clip.y1 = 0;
 80065b0:	e03ffd15 	stw	zero,-12(fp)
    clip.x2 = self -> displayWidth - 1;
 80065b4:	e0bfff17 	ldw	r2,-4(fp)
 80065b8:	10800017 	ldw	r2,0(r2)
 80065bc:	10bfffc4 	addi	r2,r2,-1
 80065c0:	e0bffc15 	stw	r2,-16(fp)
    clip.y2 = self -> displayHeight - 1;
 80065c4:	e0bfff17 	ldw	r2,-4(fp)
 80065c8:	10800117 	ldw	r2,4(r2)
 80065cc:	10bfffc4 	addi	r2,r2,-1
 80065d0:	e0bffe15 	stw	r2,-8(fp)

    measure(self -> rootView, &clip);
 80065d4:	e0bfff17 	ldw	r2,-4(fp)
 80065d8:	10800217 	ldw	r2,8(r2)
 80065dc:	1009883a 	mov	r4,r2
 80065e0:	e17ffb04 	addi	r5,fp,-20
 80065e4:	8007b7c0 	call	8007b7c <measure>

    renderChildren(self, self -> rootView, self -> damagedRegion);
 80065e8:	e0bfff17 	ldw	r2,-4(fp)
 80065ec:	10c00217 	ldw	r3,8(r2)
 80065f0:	e0bfff17 	ldw	r2,-4(fp)
 80065f4:	10800317 	ldw	r2,12(r2)
 80065f8:	e13fff17 	ldw	r4,-4(fp)
 80065fc:	180b883a 	mov	r5,r3
 8006600:	100d883a 	mov	r6,r2
 8006604:	800642c0 	call	800642c <renderChildren>

    self -> damagedRegion = 0;
 8006608:	e0bfff17 	ldw	r2,-4(fp)
 800660c:	10000315 	stw	zero,12(r2)
  }
}
 8006610:	e037883a 	mov	sp,fp
 8006614:	dfc00117 	ldw	ra,4(sp)
 8006618:	df000017 	ldw	fp,0(sp)
 800661c:	dec00204 	addi	sp,sp,8
 8006620:	f800283a 	ret

08006624 <invalidate>:

void invalidate(struct Renderer* self, struct Bounds* damagedRegion)
{
 8006624:	defffb04 	addi	sp,sp,-20
 8006628:	dfc00415 	stw	ra,16(sp)
 800662c:	df000315 	stw	fp,12(sp)
 8006630:	df000304 	addi	fp,sp,12
 8006634:	e13ffe15 	stw	r4,-8(fp)
 8006638:	e17fff15 	stw	r5,-4(fp)
  if(self->damagedRegion)
 800663c:	e0bffe17 	ldw	r2,-8(fp)
 8006640:	10800317 	ldw	r2,12(r2)
 8006644:	10000e26 	beq	r2,zero,8006680 <invalidate+0x5c>
  {
    struct Bounds* temp = self->damagedRegion;
 8006648:	e0bffe17 	ldw	r2,-8(fp)
 800664c:	10800317 	ldw	r2,12(r2)
 8006650:	e0bffd15 	stw	r2,-12(fp)
    self -> damagedRegion = merge(damagedRegion, self -> damagedRegion);
 8006654:	e0bffe17 	ldw	r2,-8(fp)
 8006658:	10800317 	ldw	r2,12(r2)
 800665c:	e13fff17 	ldw	r4,-4(fp)
 8006660:	100b883a 	mov	r5,r2
 8006664:	80003740 	call	8000374 <merge>
 8006668:	1007883a 	mov	r3,r2
 800666c:	e0bffe17 	ldw	r2,-8(fp)
 8006670:	10c00315 	stw	r3,12(r2)
    free(temp);
 8006674:	e13ffd17 	ldw	r4,-12(fp)
 8006678:	800bd440 	call	800bd44 <free>
 800667c:	00001906 	br	80066e4 <invalidate+0xc0>
  } else {
    self -> damagedRegion = malloc(sizeof(struct Bounds));
 8006680:	01000404 	movi	r4,16
 8006684:	800bd300 	call	800bd30 <malloc>
 8006688:	1007883a 	mov	r3,r2
 800668c:	e0bffe17 	ldw	r2,-8(fp)
 8006690:	10c00315 	stw	r3,12(r2)
    self -> damagedRegion -> x1 = damagedRegion -> x1;
 8006694:	e0bffe17 	ldw	r2,-8(fp)
 8006698:	10800317 	ldw	r2,12(r2)
 800669c:	e0ffff17 	ldw	r3,-4(fp)
 80066a0:	18c00017 	ldw	r3,0(r3)
 80066a4:	10c00015 	stw	r3,0(r2)
    self -> damagedRegion -> y1 = damagedRegion -> y1;
 80066a8:	e0bffe17 	ldw	r2,-8(fp)
 80066ac:	10800317 	ldw	r2,12(r2)
 80066b0:	e0ffff17 	ldw	r3,-4(fp)
 80066b4:	18c00217 	ldw	r3,8(r3)
 80066b8:	10c00215 	stw	r3,8(r2)
    self -> damagedRegion -> x2 = damagedRegion -> x2;
 80066bc:	e0bffe17 	ldw	r2,-8(fp)
 80066c0:	10800317 	ldw	r2,12(r2)
 80066c4:	e0ffff17 	ldw	r3,-4(fp)
 80066c8:	18c00117 	ldw	r3,4(r3)
 80066cc:	10c00115 	stw	r3,4(r2)
    self -> damagedRegion -> y2 = damagedRegion -> y2;
 80066d0:	e0bffe17 	ldw	r2,-8(fp)
 80066d4:	10800317 	ldw	r2,12(r2)
 80066d8:	e0ffff17 	ldw	r3,-4(fp)
 80066dc:	18c00317 	ldw	r3,12(r3)
 80066e0:	10c00315 	stw	r3,12(r2)
  }
}
 80066e4:	e037883a 	mov	sp,fp
 80066e8:	dfc00117 	ldw	ra,4(sp)
 80066ec:	df000017 	ldw	fp,0(sp)
 80066f0:	dec00204 	addi	sp,sp,8
 80066f4:	f800283a 	ret

080066f8 <ScreenView_ctor>:
#include <stdlib.h>
#include "ScreenView.h"

static void* ScreenView_ctor(void* _self, va_list* app)
{
 80066f8:	defffb04 	addi	sp,sp,-20
 80066fc:	dfc00415 	stw	ra,16(sp)
 8006700:	df000315 	stw	fp,12(sp)
 8006704:	df000304 	addi	fp,sp,12
 8006708:	e13ffe15 	stw	r4,-8(fp)
 800670c:	e17fff15 	stw	r5,-4(fp)
	struct ScreenView* self = super_ctor(ScreenView, _self, app);
 8006710:	d0a71a17 	ldw	r2,-25496(gp)
 8006714:	1009883a 	mov	r4,r2
 8006718:	e17ffe17 	ldw	r5,-8(fp)
 800671c:	e1bfff17 	ldw	r6,-4(fp)
 8006720:	80054180 	call	8005418 <super_ctor>
 8006724:	e0bffd15 	stw	r2,-12(fp)

	setWidth(self, va_arg(*app, int));
 8006728:	e0bfff17 	ldw	r2,-4(fp)
 800672c:	10800017 	ldw	r2,0(r2)
 8006730:	11000104 	addi	r4,r2,4
 8006734:	e0ffff17 	ldw	r3,-4(fp)
 8006738:	19000015 	stw	r4,0(r3)
 800673c:	10800017 	ldw	r2,0(r2)
 8006740:	e13ffd17 	ldw	r4,-12(fp)
 8006744:	100b883a 	mov	r5,r2
 8006748:	8007db00 	call	8007db0 <setWidth>
	setHeight(self, va_arg(*app, int));
 800674c:	e0bfff17 	ldw	r2,-4(fp)
 8006750:	10800017 	ldw	r2,0(r2)
 8006754:	11000104 	addi	r4,r2,4
 8006758:	e0ffff17 	ldw	r3,-4(fp)
 800675c:	19000015 	stw	r4,0(r3)
 8006760:	10800017 	ldw	r2,0(r2)
 8006764:	e13ffd17 	ldw	r4,-12(fp)
 8006768:	100b883a 	mov	r5,r2
 800676c:	8007e7c0 	call	8007e7c <setHeight>
	self -> backgroundColour = va_arg(*app, int);
 8006770:	e0bfff17 	ldw	r2,-4(fp)
 8006774:	10800017 	ldw	r2,0(r2)
 8006778:	11000104 	addi	r4,r2,4
 800677c:	e0ffff17 	ldw	r3,-4(fp)
 8006780:	19000015 	stw	r4,0(r3)
 8006784:	10c00017 	ldw	r3,0(r2)
 8006788:	e0bffd17 	ldw	r2,-12(fp)
 800678c:	10c00c15 	stw	r3,48(r2)

	return self;
 8006790:	e0bffd17 	ldw	r2,-12(fp)
}
 8006794:	e037883a 	mov	sp,fp
 8006798:	dfc00117 	ldw	ra,4(sp)
 800679c:	df000017 	ldw	fp,0(sp)
 80067a0:	dec00204 	addi	sp,sp,8
 80067a4:	f800283a 	ret

080067a8 <ScreenView_draw>:

static void ScreenView_draw(void* _self, struct Bounds* clip)
{
 80067a8:	defffa04 	addi	sp,sp,-24
 80067ac:	dfc00515 	stw	ra,20(sp)
 80067b0:	df000415 	stw	fp,16(sp)
 80067b4:	df000404 	addi	fp,sp,16
 80067b8:	e13ffe15 	stw	r4,-8(fp)
 80067bc:	e17fff15 	stw	r5,-4(fp)
	struct ScreenView* self = _self;
 80067c0:	e0bffe17 	ldw	r2,-8(fp)
 80067c4:	e0bffd15 	stw	r2,-12(fp)
	super_draw(ScreenView, _self, clip);
 80067c8:	d0a71a17 	ldw	r2,-25496(gp)
 80067cc:	1009883a 	mov	r4,r2
 80067d0:	e17ffe17 	ldw	r5,-8(fp)
 80067d4:	e1bfff17 	ldw	r6,-4(fp)
 80067d8:	8007a600 	call	8007a60 <super_draw>
	writeFilledRect(clip->x1, clip->y1, clip->x2, clip->y2, self -> backgroundColour);
 80067dc:	e0bfff17 	ldw	r2,-4(fp)
 80067e0:	11000017 	ldw	r4,0(r2)
 80067e4:	e0bfff17 	ldw	r2,-4(fp)
 80067e8:	11400217 	ldw	r5,8(r2)
 80067ec:	e0bfff17 	ldw	r2,-4(fp)
 80067f0:	11800117 	ldw	r6,4(r2)
 80067f4:	e0bfff17 	ldw	r2,-4(fp)
 80067f8:	10c00317 	ldw	r3,12(r2)
 80067fc:	e0bffd17 	ldw	r2,-12(fp)
 8006800:	10800c17 	ldw	r2,48(r2)
 8006804:	d8800015 	stw	r2,0(sp)
 8006808:	180f883a 	mov	r7,r3
 800680c:	8001fd80 	call	8001fd8 <writeFilledRect>
}
 8006810:	e037883a 	mov	sp,fp
 8006814:	dfc00117 	ldw	ra,4(sp)
 8006818:	df000017 	ldw	fp,0(sp)
 800681c:	dec00204 	addi	sp,sp,8
 8006820:	f800283a 	ret

08006824 <initScreenView>:

const void* ScreenView;

void initScreenView()
{
 8006824:	defff904 	addi	sp,sp,-28
 8006828:	dfc00615 	stw	ra,24(sp)
 800682c:	df000515 	stw	fp,20(sp)
 8006830:	df000504 	addi	fp,sp,20
	if(!ScreenView)
 8006834:	d0a71a17 	ldw	r2,-25496(gp)
 8006838:	10001a1e 	bne	r2,zero,80068a4 <initScreenView+0x80>
	{
		initShapes();
 800683c:	8006a100 	call	8006a10 <initShapes>
		ScreenView = new(ViewClass, "ScreenView", View,
 8006840:	008200f4 	movhi	r2,2051
 8006844:	10aaf604 	addi	r2,r2,-21544
 8006848:	11000017 	ldw	r4,0(r2)
 800684c:	008200f4 	movhi	r2,2051
 8006850:	10aaf504 	addi	r2,r2,-21548
 8006854:	10c00017 	ldw	r3,0(r2)
 8006858:	00820034 	movhi	r2,2048
 800685c:	1094e904 	addi	r2,r2,21412
 8006860:	d8800015 	stw	r2,0(sp)
 8006864:	00820034 	movhi	r2,2048
 8006868:	1099be04 	addi	r2,r2,26360
 800686c:	d8800115 	stw	r2,4(sp)
 8006870:	00820034 	movhi	r2,2048
 8006874:	109e8504 	addi	r2,r2,31252
 8006878:	d8800215 	stw	r2,8(sp)
 800687c:	00820034 	movhi	r2,2048
 8006880:	1099ea04 	addi	r2,r2,26536
 8006884:	d8800315 	stw	r2,12(sp)
 8006888:	d8000415 	stw	zero,16(sp)
 800688c:	014200b4 	movhi	r5,2050
 8006890:	295b8204 	addi	r5,r5,28168
 8006894:	180d883a 	mov	r6,r3
 8006898:	01c00d04 	movi	r7,52
 800689c:	80052900 	call	8005290 <new>
 80068a0:	d0a71a15 	stw	r2,-25496(gp)
					 sizeof(struct ScreenView), ctor, ScreenView_ctor,
					 draw, ScreenView_draw, 0);
	}
}
 80068a4:	e037883a 	mov	sp,fp
 80068a8:	dfc00117 	ldw	ra,4(sp)
 80068ac:	df000017 	ldw	fp,0(sp)
 80068b0:	dec00204 	addi	sp,sp,8
 80068b4:	f800283a 	ret

080068b8 <Rect_ctor>:
#include <stdlib.h>
#include "Shapes.h"

static void* Rect_ctor(void* _self, va_list* app)
{
 80068b8:	defffb04 	addi	sp,sp,-20
 80068bc:	dfc00415 	stw	ra,16(sp)
 80068c0:	df000315 	stw	fp,12(sp)
 80068c4:	df000304 	addi	fp,sp,12
 80068c8:	e13ffe15 	stw	r4,-8(fp)
 80068cc:	e17fff15 	stw	r5,-4(fp)
	struct Rect* self = super_ctor(Rect, _self, app);
 80068d0:	d0a71b17 	ldw	r2,-25492(gp)
 80068d4:	1009883a 	mov	r4,r2
 80068d8:	e17ffe17 	ldw	r5,-8(fp)
 80068dc:	e1bfff17 	ldw	r6,-4(fp)
 80068e0:	80054180 	call	8005418 <super_ctor>
 80068e4:	e0bffd15 	stw	r2,-12(fp)

	self -> colour = va_arg(*app, int);
 80068e8:	e0bfff17 	ldw	r2,-4(fp)
 80068ec:	10800017 	ldw	r2,0(r2)
 80068f0:	11000104 	addi	r4,r2,4
 80068f4:	e0ffff17 	ldw	r3,-4(fp)
 80068f8:	19000015 	stw	r4,0(r3)
 80068fc:	10c00017 	ldw	r3,0(r2)
 8006900:	e0bffd17 	ldw	r2,-12(fp)
 8006904:	10c00c15 	stw	r3,48(r2)

	return self;
 8006908:	e0bffd17 	ldw	r2,-12(fp)
}
 800690c:	e037883a 	mov	sp,fp
 8006910:	dfc00117 	ldw	ra,4(sp)
 8006914:	df000017 	ldw	fp,0(sp)
 8006918:	dec00204 	addi	sp,sp,8
 800691c:	f800283a 	ret

08006920 <Rect_draw>:

static void Rect_draw(void* _self, struct Bounds* clip)
{
 8006920:	defff904 	addi	sp,sp,-28
 8006924:	dfc00615 	stw	ra,24(sp)
 8006928:	df000515 	stw	fp,20(sp)
 800692c:	df000504 	addi	fp,sp,20
 8006930:	e13ffe15 	stw	r4,-8(fp)
 8006934:	e17fff15 	stw	r5,-4(fp)
	struct Rect* self = _self;
 8006938:	e0bffe17 	ldw	r2,-8(fp)
 800693c:	e0bffc15 	stw	r2,-16(fp)
	super_draw(Rect, _self, clip);
 8006940:	d0a71b17 	ldw	r2,-25492(gp)
 8006944:	1009883a 	mov	r4,r2
 8006948:	e17ffe17 	ldw	r5,-8(fp)
 800694c:	e1bfff17 	ldw	r6,-4(fp)
 8006950:	8007a600 	call	8007a60 <super_draw>

	struct Bounds* bounds = bounds(self);
 8006954:	e0bffc17 	ldw	r2,-16(fp)
 8006958:	10800517 	ldw	r2,20(r2)
 800695c:	e0bffd15 	stw	r2,-12(fp)

	writeFilledRect(bounds->x1, bounds->y1, bounds->x2, bounds->y2, self -> colour);
 8006960:	e0bffd17 	ldw	r2,-12(fp)
 8006964:	11000017 	ldw	r4,0(r2)
 8006968:	e0bffd17 	ldw	r2,-12(fp)
 800696c:	11400217 	ldw	r5,8(r2)
 8006970:	e0bffd17 	ldw	r2,-12(fp)
 8006974:	11800117 	ldw	r6,4(r2)
 8006978:	e0bffd17 	ldw	r2,-12(fp)
 800697c:	10c00317 	ldw	r3,12(r2)
 8006980:	e0bffc17 	ldw	r2,-16(fp)
 8006984:	10800c17 	ldw	r2,48(r2)
 8006988:	d8800015 	stw	r2,0(sp)
 800698c:	180f883a 	mov	r7,r3
 8006990:	8001fd80 	call	8001fd8 <writeFilledRect>
}
 8006994:	e037883a 	mov	sp,fp
 8006998:	dfc00117 	ldw	ra,4(sp)
 800699c:	df000017 	ldw	fp,0(sp)
 80069a0:	dec00204 	addi	sp,sp,8
 80069a4:	f800283a 	ret

080069a8 <setRectColour>:

void setRectColour(void* _self, int colour) {
 80069a8:	defffb04 	addi	sp,sp,-20
 80069ac:	dfc00415 	stw	ra,16(sp)
 80069b0:	df000315 	stw	fp,12(sp)
 80069b4:	df000304 	addi	fp,sp,12
 80069b8:	e13ffe15 	stw	r4,-8(fp)
 80069bc:	e17fff15 	stw	r5,-4(fp)
	struct Rect* self = _self;
 80069c0:	e0bffe17 	ldw	r2,-8(fp)
 80069c4:	e0bffd15 	stw	r2,-12(fp)

	self-> colour = colour;
 80069c8:	e0bffd17 	ldw	r2,-12(fp)
 80069cc:	e0ffff17 	ldw	r3,-4(fp)
 80069d0:	10c00c15 	stw	r3,48(r2)
	if(renderer(self)) invalidate(renderer(self), bounds(self));
 80069d4:	e0bffd17 	ldw	r2,-12(fp)
 80069d8:	10800a17 	ldw	r2,40(r2)
 80069dc:	10000726 	beq	r2,zero,80069fc <setRectColour+0x54>
 80069e0:	e0bffd17 	ldw	r2,-12(fp)
 80069e4:	10c00a17 	ldw	r3,40(r2)
 80069e8:	e0bffd17 	ldw	r2,-12(fp)
 80069ec:	10800517 	ldw	r2,20(r2)
 80069f0:	1809883a 	mov	r4,r3
 80069f4:	100b883a 	mov	r5,r2
 80069f8:	80066240 	call	8006624 <invalidate>
}
 80069fc:	e037883a 	mov	sp,fp
 8006a00:	dfc00117 	ldw	ra,4(sp)
 8006a04:	df000017 	ldw	fp,0(sp)
 8006a08:	dec00204 	addi	sp,sp,8
 8006a0c:	f800283a 	ret

08006a10 <initShapes>:

const void* Rect;

void initShapes()
{
 8006a10:	defff904 	addi	sp,sp,-28
 8006a14:	dfc00615 	stw	ra,24(sp)
 8006a18:	df000515 	stw	fp,20(sp)
 8006a1c:	df000504 	addi	fp,sp,20
	if(!Rect)
 8006a20:	d0a71b17 	ldw	r2,-25492(gp)
 8006a24:	10001a1e 	bne	r2,zero,8006a90 <initShapes+0x80>
		{
			initView();
 8006a28:	80082600 	call	8008260 <initView>
			Rect = new(ViewClass, "Rect", View,
 8006a2c:	008200f4 	movhi	r2,2051
 8006a30:	10aaf604 	addi	r2,r2,-21544
 8006a34:	11000017 	ldw	r4,0(r2)
 8006a38:	008200f4 	movhi	r2,2051
 8006a3c:	10aaf504 	addi	r2,r2,-21548
 8006a40:	10c00017 	ldw	r3,0(r2)
 8006a44:	00820034 	movhi	r2,2048
 8006a48:	1094e904 	addi	r2,r2,21412
 8006a4c:	d8800015 	stw	r2,0(sp)
 8006a50:	00820034 	movhi	r2,2048
 8006a54:	109a2e04 	addi	r2,r2,26808
 8006a58:	d8800115 	stw	r2,4(sp)
 8006a5c:	00820034 	movhi	r2,2048
 8006a60:	109e8504 	addi	r2,r2,31252
 8006a64:	d8800215 	stw	r2,8(sp)
 8006a68:	00820034 	movhi	r2,2048
 8006a6c:	109a4804 	addi	r2,r2,26912
 8006a70:	d8800315 	stw	r2,12(sp)
 8006a74:	d8000415 	stw	zero,16(sp)
 8006a78:	014200b4 	movhi	r5,2050
 8006a7c:	295b8504 	addi	r5,r5,28180
 8006a80:	180d883a 	mov	r6,r3
 8006a84:	01c00d04 	movi	r7,52
 8006a88:	80052900 	call	8005290 <new>
 8006a8c:	d0a71b15 	stw	r2,-25492(gp)
						 sizeof(struct Rect), ctor, Rect_ctor,
						 draw, Rect_draw,0);
		}
}
 8006a90:	e037883a 	mov	sp,fp
 8006a94:	dfc00117 	ldw	ra,4(sp)
 8006a98:	df000017 	ldw	fp,0(sp)
 8006a9c:	dec00204 	addi	sp,sp,8
 8006aa0:	f800283a 	ret

08006aa4 <testAll>:

#include "TestLib.h"
#include "Bounds.h"

void testAll()
{
 8006aa4:	defffe04 	addi	sp,sp,-8
 8006aa8:	dfc00115 	stw	ra,4(sp)
 8006aac:	df000015 	stw	fp,0(sp)
 8006ab0:	d839883a 	mov	fp,sp
  testBounds();
 8006ab4:	8006acc0 	call	8006acc <testBounds>
}
 8006ab8:	e037883a 	mov	sp,fp
 8006abc:	dfc00117 	ldw	ra,4(sp)
 8006ac0:	df000017 	ldw	fp,0(sp)
 8006ac4:	dec00204 	addi	sp,sp,8
 8006ac8:	f800283a 	ret

08006acc <testBounds>:

void testBounds()
{
 8006acc:	defff504 	addi	sp,sp,-44
 8006ad0:	dfc00a15 	stw	ra,40(sp)
 8006ad4:	df000915 	stw	fp,36(sp)
 8006ad8:	df000904 	addi	fp,sp,36
  struct Bounds bounds1;
  struct Bounds bounds2;
  struct Bounds* result;

  bounds1.x1 = 10;
 8006adc:	00800284 	movi	r2,10
 8006ae0:	e0bff815 	stw	r2,-32(fp)
  bounds1.x2 = 20;
 8006ae4:	00800504 	movi	r2,20
 8006ae8:	e0bff915 	stw	r2,-28(fp)
  bounds1.y1 = 10;
 8006aec:	00800284 	movi	r2,10
 8006af0:	e0bffa15 	stw	r2,-24(fp)
  bounds1.y2 = 20;
 8006af4:	00800504 	movi	r2,20
 8006af8:	e0bffb15 	stw	r2,-20(fp)

  bounds2.x1 = 15;
 8006afc:	008003c4 	movi	r2,15
 8006b00:	e0bffc15 	stw	r2,-16(fp)
  bounds2.x2 = 25;
 8006b04:	00800644 	movi	r2,25
 8006b08:	e0bffd15 	stw	r2,-12(fp)
  bounds2.y1 = 5;
 8006b0c:	00800144 	movi	r2,5
 8006b10:	e0bffe15 	stw	r2,-8(fp)
  bounds2.y2 = 25;
 8006b14:	00800644 	movi	r2,25
 8006b18:	e0bfff15 	stw	r2,-4(fp)

  assert(containsPoint(12, 12, &bounds1));
 8006b1c:	e0bff804 	addi	r2,fp,-32
 8006b20:	01000304 	movi	r4,12
 8006b24:	01400304 	movi	r5,12
 8006b28:	100d883a 	mov	r6,r2
 8006b2c:	80001f80 	call	80001f8 <containsPoint>
 8006b30:	1000081e 	bne	r2,zero,8006b54 <testBounds+0x88>
 8006b34:	010200b4 	movhi	r4,2050
 8006b38:	211b8704 	addi	r4,r4,28188
 8006b3c:	01400704 	movi	r5,28
 8006b40:	018200b4 	movhi	r6,2050
 8006b44:	319be304 	addi	r6,r6,28556
 8006b48:	01c200b4 	movhi	r7,2050
 8006b4c:	39db8a04 	addi	r7,r7,28200
 8006b50:	800bb300 	call	800bb30 <__assert_func>
  assert(!containsPoint(22, 12, &bounds1));
 8006b54:	e0bff804 	addi	r2,fp,-32
 8006b58:	01000584 	movi	r4,22
 8006b5c:	01400304 	movi	r5,12
 8006b60:	100d883a 	mov	r6,r2
 8006b64:	80001f80 	call	80001f8 <containsPoint>
 8006b68:	10000826 	beq	r2,zero,8006b8c <testBounds+0xc0>
 8006b6c:	010200b4 	movhi	r4,2050
 8006b70:	211b8704 	addi	r4,r4,28188
 8006b74:	01400744 	movi	r5,29
 8006b78:	018200b4 	movhi	r6,2050
 8006b7c:	319be304 	addi	r6,r6,28556
 8006b80:	01c200b4 	movhi	r7,2050
 8006b84:	39db9204 	addi	r7,r7,28232
 8006b88:	800bb300 	call	800bb30 <__assert_func>
  assert(!containsPoint(2, 12, &bounds1));
 8006b8c:	e0bff804 	addi	r2,fp,-32
 8006b90:	01000084 	movi	r4,2
 8006b94:	01400304 	movi	r5,12
 8006b98:	100d883a 	mov	r6,r2
 8006b9c:	80001f80 	call	80001f8 <containsPoint>
 8006ba0:	10000826 	beq	r2,zero,8006bc4 <testBounds+0xf8>
 8006ba4:	010200b4 	movhi	r4,2050
 8006ba8:	211b8704 	addi	r4,r4,28188
 8006bac:	01400784 	movi	r5,30
 8006bb0:	018200b4 	movhi	r6,2050
 8006bb4:	319be304 	addi	r6,r6,28556
 8006bb8:	01c200b4 	movhi	r7,2050
 8006bbc:	39db9b04 	addi	r7,r7,28268
 8006bc0:	800bb300 	call	800bb30 <__assert_func>
  assert(!containsPoint(12, 22, &bounds1));
 8006bc4:	e0bff804 	addi	r2,fp,-32
 8006bc8:	01000304 	movi	r4,12
 8006bcc:	01400584 	movi	r5,22
 8006bd0:	100d883a 	mov	r6,r2
 8006bd4:	80001f80 	call	80001f8 <containsPoint>
 8006bd8:	10000826 	beq	r2,zero,8006bfc <testBounds+0x130>
 8006bdc:	010200b4 	movhi	r4,2050
 8006be0:	211b8704 	addi	r4,r4,28188
 8006be4:	014007c4 	movi	r5,31
 8006be8:	018200b4 	movhi	r6,2050
 8006bec:	319be304 	addi	r6,r6,28556
 8006bf0:	01c200b4 	movhi	r7,2050
 8006bf4:	39dba304 	addi	r7,r7,28300
 8006bf8:	800bb300 	call	800bb30 <__assert_func>
  assert(!containsPoint(12, 3, &bounds1));
 8006bfc:	e0bff804 	addi	r2,fp,-32
 8006c00:	01000304 	movi	r4,12
 8006c04:	014000c4 	movi	r5,3
 8006c08:	100d883a 	mov	r6,r2
 8006c0c:	80001f80 	call	80001f8 <containsPoint>
 8006c10:	10000826 	beq	r2,zero,8006c34 <testBounds+0x168>
 8006c14:	010200b4 	movhi	r4,2050
 8006c18:	211b8704 	addi	r4,r4,28188
 8006c1c:	01400804 	movi	r5,32
 8006c20:	018200b4 	movhi	r6,2050
 8006c24:	319be304 	addi	r6,r6,28556
 8006c28:	01c200b4 	movhi	r7,2050
 8006c2c:	39dbac04 	addi	r7,r7,28336
 8006c30:	800bb300 	call	800bb30 <__assert_func>

  assert(doIntersect(&bounds1, &bounds2));
 8006c34:	e0fff804 	addi	r3,fp,-32
 8006c38:	e0bffc04 	addi	r2,fp,-16
 8006c3c:	1809883a 	mov	r4,r3
 8006c40:	100b883a 	mov	r5,r2
 8006c44:	80002f40 	call	80002f4 <doIntersect>
 8006c48:	1000081e 	bne	r2,zero,8006c6c <testBounds+0x1a0>
 8006c4c:	010200b4 	movhi	r4,2050
 8006c50:	211b8704 	addi	r4,r4,28188
 8006c54:	01400884 	movi	r5,34
 8006c58:	018200b4 	movhi	r6,2050
 8006c5c:	319be304 	addi	r6,r6,28556
 8006c60:	01c200b4 	movhi	r7,2050
 8006c64:	39dbb404 	addi	r7,r7,28368
 8006c68:	800bb300 	call	800bb30 <__assert_func>

  result = intersect(&bounds1, &bounds2);
 8006c6c:	e0fff804 	addi	r3,fp,-32
 8006c70:	e0bffc04 	addi	r2,fp,-16
 8006c74:	1809883a 	mov	r4,r3
 8006c78:	100b883a 	mov	r5,r2
 8006c7c:	80005000 	call	8000500 <intersect>
 8006c80:	e0bff715 	stw	r2,-36(fp)

  assert(result->x1 == 15);
 8006c84:	e0bff717 	ldw	r2,-36(fp)
 8006c88:	10800017 	ldw	r2,0(r2)
 8006c8c:	108003e0 	cmpeqi	r2,r2,15
 8006c90:	1000081e 	bne	r2,zero,8006cb4 <testBounds+0x1e8>
 8006c94:	010200b4 	movhi	r4,2050
 8006c98:	211b8704 	addi	r4,r4,28188
 8006c9c:	01400984 	movi	r5,38
 8006ca0:	018200b4 	movhi	r6,2050
 8006ca4:	319be304 	addi	r6,r6,28556
 8006ca8:	01c200b4 	movhi	r7,2050
 8006cac:	39dbbc04 	addi	r7,r7,28400
 8006cb0:	800bb300 	call	800bb30 <__assert_func>
  assert(result->x2 == 20);
 8006cb4:	e0bff717 	ldw	r2,-36(fp)
 8006cb8:	10800117 	ldw	r2,4(r2)
 8006cbc:	10800520 	cmpeqi	r2,r2,20
 8006cc0:	1000081e 	bne	r2,zero,8006ce4 <testBounds+0x218>
 8006cc4:	010200b4 	movhi	r4,2050
 8006cc8:	211b8704 	addi	r4,r4,28188
 8006ccc:	014009c4 	movi	r5,39
 8006cd0:	018200b4 	movhi	r6,2050
 8006cd4:	319be304 	addi	r6,r6,28556
 8006cd8:	01c200b4 	movhi	r7,2050
 8006cdc:	39dbc104 	addi	r7,r7,28420
 8006ce0:	800bb300 	call	800bb30 <__assert_func>
  assert(result->y1 == 10);
 8006ce4:	e0bff717 	ldw	r2,-36(fp)
 8006ce8:	10800217 	ldw	r2,8(r2)
 8006cec:	108002a0 	cmpeqi	r2,r2,10
 8006cf0:	1000081e 	bne	r2,zero,8006d14 <testBounds+0x248>
 8006cf4:	010200b4 	movhi	r4,2050
 8006cf8:	211b8704 	addi	r4,r4,28188
 8006cfc:	01400a04 	movi	r5,40
 8006d00:	018200b4 	movhi	r6,2050
 8006d04:	319be304 	addi	r6,r6,28556
 8006d08:	01c200b4 	movhi	r7,2050
 8006d0c:	39dbc604 	addi	r7,r7,28440
 8006d10:	800bb300 	call	800bb30 <__assert_func>
  assert(result->y2 == 20);
 8006d14:	e0bff717 	ldw	r2,-36(fp)
 8006d18:	10800317 	ldw	r2,12(r2)
 8006d1c:	10800520 	cmpeqi	r2,r2,20
 8006d20:	1000081e 	bne	r2,zero,8006d44 <testBounds+0x278>
 8006d24:	010200b4 	movhi	r4,2050
 8006d28:	211b8704 	addi	r4,r4,28188
 8006d2c:	01400a44 	movi	r5,41
 8006d30:	018200b4 	movhi	r6,2050
 8006d34:	319be304 	addi	r6,r6,28556
 8006d38:	01c200b4 	movhi	r7,2050
 8006d3c:	39dbcb04 	addi	r7,r7,28460
 8006d40:	800bb300 	call	800bb30 <__assert_func>

  result = merge(&bounds1, &bounds2);
 8006d44:	e0fff804 	addi	r3,fp,-32
 8006d48:	e0bffc04 	addi	r2,fp,-16
 8006d4c:	1809883a 	mov	r4,r3
 8006d50:	100b883a 	mov	r5,r2
 8006d54:	80003740 	call	8000374 <merge>
 8006d58:	e0bff715 	stw	r2,-36(fp)

  assert(result->x1 == 10);
 8006d5c:	e0bff717 	ldw	r2,-36(fp)
 8006d60:	10800017 	ldw	r2,0(r2)
 8006d64:	108002a0 	cmpeqi	r2,r2,10
 8006d68:	1000081e 	bne	r2,zero,8006d8c <testBounds+0x2c0>
 8006d6c:	010200b4 	movhi	r4,2050
 8006d70:	211b8704 	addi	r4,r4,28188
 8006d74:	01400b44 	movi	r5,45
 8006d78:	018200b4 	movhi	r6,2050
 8006d7c:	319be304 	addi	r6,r6,28556
 8006d80:	01c200b4 	movhi	r7,2050
 8006d84:	39dbd004 	addi	r7,r7,28480
 8006d88:	800bb300 	call	800bb30 <__assert_func>
  assert(result->x2 == 25);
 8006d8c:	e0bff717 	ldw	r2,-36(fp)
 8006d90:	10800117 	ldw	r2,4(r2)
 8006d94:	10800660 	cmpeqi	r2,r2,25
 8006d98:	1000081e 	bne	r2,zero,8006dbc <testBounds+0x2f0>
 8006d9c:	010200b4 	movhi	r4,2050
 8006da0:	211b8704 	addi	r4,r4,28188
 8006da4:	01400b84 	movi	r5,46
 8006da8:	018200b4 	movhi	r6,2050
 8006dac:	319be304 	addi	r6,r6,28556
 8006db0:	01c200b4 	movhi	r7,2050
 8006db4:	39dbd504 	addi	r7,r7,28500
 8006db8:	800bb300 	call	800bb30 <__assert_func>
  assert(result->y1 == 5);
 8006dbc:	e0bff717 	ldw	r2,-36(fp)
 8006dc0:	10800217 	ldw	r2,8(r2)
 8006dc4:	10800160 	cmpeqi	r2,r2,5
 8006dc8:	1000081e 	bne	r2,zero,8006dec <testBounds+0x320>
 8006dcc:	010200b4 	movhi	r4,2050
 8006dd0:	211b8704 	addi	r4,r4,28188
 8006dd4:	01400bc4 	movi	r5,47
 8006dd8:	018200b4 	movhi	r6,2050
 8006ddc:	319be304 	addi	r6,r6,28556
 8006de0:	01c200b4 	movhi	r7,2050
 8006de4:	39dbda04 	addi	r7,r7,28520
 8006de8:	800bb300 	call	800bb30 <__assert_func>
  assert(result->y2 == 25);
 8006dec:	e0bff717 	ldw	r2,-36(fp)
 8006df0:	10800317 	ldw	r2,12(r2)
 8006df4:	10800660 	cmpeqi	r2,r2,25
 8006df8:	1000081e 	bne	r2,zero,8006e1c <testBounds+0x350>
 8006dfc:	010200b4 	movhi	r4,2050
 8006e00:	211b8704 	addi	r4,r4,28188
 8006e04:	01400c04 	movi	r5,48
 8006e08:	018200b4 	movhi	r6,2050
 8006e0c:	319be304 	addi	r6,r6,28556
 8006e10:	01c200b4 	movhi	r7,2050
 8006e14:	39dbde04 	addi	r7,r7,28536
 8006e18:	800bb300 	call	800bb30 <__assert_func>

  free(result);
 8006e1c:	e13ff717 	ldw	r4,-36(fp)
 8006e20:	800bd440 	call	800bd44 <free>
}
 8006e24:	e037883a 	mov	sp,fp
 8006e28:	dfc00117 	ldw	ra,4(sp)
 8006e2c:	df000017 	ldw	fp,0(sp)
 8006e30:	dec00204 	addi	sp,sp,8
 8006e34:	f800283a 	ret

08006e38 <TextView_ctor>:
#include <assert.h>
#include "TextView.h"
#include "OutGraphicsCharFont.h"

static void* TextView_ctor(void* _self, va_list* app)
{
 8006e38:	defffb04 	addi	sp,sp,-20
 8006e3c:	dfc00415 	stw	ra,16(sp)
 8006e40:	df000315 	stw	fp,12(sp)
 8006e44:	df000304 	addi	fp,sp,12
 8006e48:	e13ffe15 	stw	r4,-8(fp)
 8006e4c:	e17fff15 	stw	r5,-4(fp)
	struct TextView* self = super_ctor(TextView, _self, app);
 8006e50:	d0a71c17 	ldw	r2,-25488(gp)
 8006e54:	1009883a 	mov	r4,r2
 8006e58:	e17ffe17 	ldw	r5,-8(fp)
 8006e5c:	e1bfff17 	ldw	r6,-4(fp)
 8006e60:	80054180 	call	8005418 <super_ctor>
 8006e64:	e0bffd15 	stw	r2,-12(fp)

	self->text = 0;
 8006e68:	e0bffd17 	ldw	r2,-12(fp)
 8006e6c:	10000c15 	stw	zero,48(r2)
	self -> color = va_arg(*app, int);
 8006e70:	e0bfff17 	ldw	r2,-4(fp)
 8006e74:	10800017 	ldw	r2,0(r2)
 8006e78:	11000104 	addi	r4,r2,4
 8006e7c:	e0ffff17 	ldw	r3,-4(fp)
 8006e80:	19000015 	stw	r4,0(r3)
 8006e84:	10c00017 	ldw	r3,0(r2)
 8006e88:	e0bffd17 	ldw	r2,-12(fp)
 8006e8c:	10c00d15 	stw	r3,52(r2)

	return self;
 8006e90:	e0bffd17 	ldw	r2,-12(fp)
}
 8006e94:	e037883a 	mov	sp,fp
 8006e98:	dfc00117 	ldw	ra,4(sp)
 8006e9c:	df000017 	ldw	fp,0(sp)
 8006ea0:	dec00204 	addi	sp,sp,8
 8006ea4:	f800283a 	ret

08006ea8 <TextView_draw>:

static void TextView_draw(void* _self, struct Bounds* clip)
{
 8006ea8:	defff704 	addi	sp,sp,-36
 8006eac:	dfc00815 	stw	ra,32(sp)
 8006eb0:	df000715 	stw	fp,28(sp)
 8006eb4:	df000704 	addi	fp,sp,28
 8006eb8:	e13ffe15 	stw	r4,-8(fp)
 8006ebc:	e17fff15 	stw	r5,-4(fp)
	struct TextView* self = _self;
 8006ec0:	e0bffe17 	ldw	r2,-8(fp)
 8006ec4:	e0bffc15 	stw	r2,-16(fp)
	super_draw(TextView, _self, clip);
 8006ec8:	d0a71c17 	ldw	r2,-25488(gp)
 8006ecc:	1009883a 	mov	r4,r2
 8006ed0:	e17ffe17 	ldw	r5,-8(fp)
 8006ed4:	e1bfff17 	ldw	r6,-4(fp)
 8006ed8:	8007a600 	call	8007a60 <super_draw>

	struct Bounds* bounds = bounds(self);
 8006edc:	e0bffc17 	ldw	r2,-16(fp)
 8006ee0:	10800517 	ldw	r2,20(r2)
 8006ee4:	e0bffd15 	stw	r2,-12(fp)

	if(self->text) {
 8006ee8:	e0bffc17 	ldw	r2,-16(fp)
 8006eec:	10800c17 	ldw	r2,48(r2)
 8006ef0:	10002326 	beq	r2,zero,8006f80 <TextView_draw+0xd8>
		int i;
		for(i = 0; self->text[i] != 0; i++) {
 8006ef4:	e03ffb15 	stw	zero,-20(fp)
 8006ef8:	00001806 	br	8006f5c <TextView_draw+0xb4>
			OutGraphicsCharFont2(bounds->x1+i*12, bounds->y1, self->color, BLACK, self->text[i], 0);
 8006efc:	e0bffd17 	ldw	r2,-12(fp)
 8006f00:	10c00017 	ldw	r3,0(r2)
 8006f04:	e0bffb17 	ldw	r2,-20(fp)
 8006f08:	10800324 	muli	r2,r2,12
 8006f0c:	1889883a 	add	r4,r3,r2
 8006f10:	e0bffd17 	ldw	r2,-12(fp)
 8006f14:	11400217 	ldw	r5,8(r2)
 8006f18:	e0bffc17 	ldw	r2,-16(fp)
 8006f1c:	11800d17 	ldw	r6,52(r2)
 8006f20:	e0bffc17 	ldw	r2,-16(fp)
 8006f24:	10c00c17 	ldw	r3,48(r2)
 8006f28:	e0bffb17 	ldw	r2,-20(fp)
 8006f2c:	1885883a 	add	r2,r3,r2
 8006f30:	10800003 	ldbu	r2,0(r2)
 8006f34:	10803fcc 	andi	r2,r2,255
 8006f38:	1080201c 	xori	r2,r2,128
 8006f3c:	10bfe004 	addi	r2,r2,-128
 8006f40:	d8800015 	stw	r2,0(sp)
 8006f44:	d8000115 	stw	zero,4(sp)
 8006f48:	000f883a 	mov	r7,zero
 8006f4c:	80058280 	call	8005828 <OutGraphicsCharFont2>

	struct Bounds* bounds = bounds(self);

	if(self->text) {
		int i;
		for(i = 0; self->text[i] != 0; i++) {
 8006f50:	e0bffb17 	ldw	r2,-20(fp)
 8006f54:	10800044 	addi	r2,r2,1
 8006f58:	e0bffb15 	stw	r2,-20(fp)
 8006f5c:	e0bffc17 	ldw	r2,-16(fp)
 8006f60:	10c00c17 	ldw	r3,48(r2)
 8006f64:	e0bffb17 	ldw	r2,-20(fp)
 8006f68:	1885883a 	add	r2,r3,r2
 8006f6c:	10800003 	ldbu	r2,0(r2)
 8006f70:	10803fcc 	andi	r2,r2,255
 8006f74:	1080201c 	xori	r2,r2,128
 8006f78:	10bfe004 	addi	r2,r2,-128
 8006f7c:	103fdf1e 	bne	r2,zero,8006efc <__alt_data_end+0xfc006efc>
			OutGraphicsCharFont2(bounds->x1+i*12, bounds->y1, self->color, BLACK, self->text[i], 0);
		}
	}
}
 8006f80:	e037883a 	mov	sp,fp
 8006f84:	dfc00117 	ldw	ra,4(sp)
 8006f88:	df000017 	ldw	fp,0(sp)
 8006f8c:	dec00204 	addi	sp,sp,8
 8006f90:	f800283a 	ret

08006f94 <setText>:

void setText(void* _self, char* text)
{
 8006f94:	defffb04 	addi	sp,sp,-20
 8006f98:	dfc00415 	stw	ra,16(sp)
 8006f9c:	df000315 	stw	fp,12(sp)
 8006fa0:	df000304 	addi	fp,sp,12
 8006fa4:	e13ffe15 	stw	r4,-8(fp)
 8006fa8:	e17fff15 	stw	r5,-4(fp)
	struct TextView* self = _self;
 8006fac:	e0bffe17 	ldw	r2,-8(fp)
 8006fb0:	e0bffd15 	stw	r2,-12(fp)
	self->text = text;
 8006fb4:	e0bffd17 	ldw	r2,-12(fp)
 8006fb8:	e0ffff17 	ldw	r3,-4(fp)
 8006fbc:	10c00c15 	stw	r3,48(r2)
	invalidate(renderer(self), bounds(self));
 8006fc0:	e0bffd17 	ldw	r2,-12(fp)
 8006fc4:	10c00a17 	ldw	r3,40(r2)
 8006fc8:	e0bffd17 	ldw	r2,-12(fp)
 8006fcc:	10800517 	ldw	r2,20(r2)
 8006fd0:	1809883a 	mov	r4,r3
 8006fd4:	100b883a 	mov	r5,r2
 8006fd8:	80066240 	call	8006624 <invalidate>
}
 8006fdc:	e037883a 	mov	sp,fp
 8006fe0:	dfc00117 	ldw	ra,4(sp)
 8006fe4:	df000017 	ldw	fp,0(sp)
 8006fe8:	dec00204 	addi	sp,sp,8
 8006fec:	f800283a 	ret

08006ff0 <initTextView>:

const void* TextView;

void initTextView()
{
 8006ff0:	defff904 	addi	sp,sp,-28
 8006ff4:	dfc00615 	stw	ra,24(sp)
 8006ff8:	df000515 	stw	fp,20(sp)
 8006ffc:	df000504 	addi	fp,sp,20
	if(!TextView)
 8007000:	d0a71c17 	ldw	r2,-25488(gp)
 8007004:	10001a1e 	bne	r2,zero,8007070 <initTextView+0x80>
		{
			initView();
 8007008:	80082600 	call	8008260 <initView>
			TextView = new(ViewClass, "TextView", View,
 800700c:	008200f4 	movhi	r2,2051
 8007010:	10aaf604 	addi	r2,r2,-21544
 8007014:	11000017 	ldw	r4,0(r2)
 8007018:	008200f4 	movhi	r2,2051
 800701c:	10aaf504 	addi	r2,r2,-21548
 8007020:	10c00017 	ldw	r3,0(r2)
 8007024:	00820034 	movhi	r2,2048
 8007028:	1094e904 	addi	r2,r2,21412
 800702c:	d8800015 	stw	r2,0(sp)
 8007030:	00820034 	movhi	r2,2048
 8007034:	109b8e04 	addi	r2,r2,28216
 8007038:	d8800115 	stw	r2,4(sp)
 800703c:	00820034 	movhi	r2,2048
 8007040:	109e8504 	addi	r2,r2,31252
 8007044:	d8800215 	stw	r2,8(sp)
 8007048:	00820034 	movhi	r2,2048
 800704c:	109baa04 	addi	r2,r2,28328
 8007050:	d8800315 	stw	r2,12(sp)
 8007054:	d8000415 	stw	zero,16(sp)
 8007058:	014200b4 	movhi	r5,2050
 800705c:	295be604 	addi	r5,r5,28568
 8007060:	180d883a 	mov	r6,r3
 8007064:	01c00e04 	movi	r7,56
 8007068:	80052900 	call	8005290 <new>
 800706c:	d0a71c15 	stw	r2,-25488(gp)
						 sizeof(struct TextView), ctor, TextView_ctor,
						 draw, TextView_draw,0);
		}
}
 8007070:	e037883a 	mov	sp,fp
 8007074:	dfc00117 	ldw	ra,4(sp)
 8007078:	df000017 	ldw	fp,0(sp)
 800707c:	dec00204 	addi	sp,sp,8
 8007080:	f800283a 	ret

08007084 <removeRestOfPath>:
#include "View.h"
#include "DE1_SOC_touchscreen.h"
#include "Bounds.h"

void removeRestOfPath(struct TouchEventPath* next)
{
 8007084:	defffa04 	addi	sp,sp,-24
 8007088:	dfc00515 	stw	ra,20(sp)
 800708c:	df000415 	stw	fp,16(sp)
 8007090:	df000404 	addi	fp,sp,16
 8007094:	e13fff15 	stw	r4,-4(fp)
  while(next) {
 8007098:	00001b06 	br	8007108 <removeRestOfPath+0x84>
    struct View* view = next->view;
 800709c:	e0bfff17 	ldw	r2,-4(fp)
 80070a0:	10800117 	ldw	r2,4(r2)
 80070a4:	e0bffd15 	stw	r2,-12(fp)
    struct EventListener* nextListener = view->listenerHead;
 80070a8:	e0bffd17 	ldw	r2,-12(fp)
 80070ac:	10800617 	ldw	r2,24(r2)
 80070b0:	e0bffc15 	stw	r2,-16(fp)
    while(nextListener)
 80070b4:	00000b06 	br	80070e4 <removeRestOfPath+0x60>
    {
      if(UP_EVENT == nextListener->type) {
 80070b8:	e0bffc17 	ldw	r2,-16(fp)
 80070bc:	10800117 	ldw	r2,4(r2)
 80070c0:	10800098 	cmpnei	r2,r2,2
 80070c4:	1000041e 	bne	r2,zero,80070d8 <removeRestOfPath+0x54>
        nextListener->callback(view);
 80070c8:	e0bffc17 	ldw	r2,-16(fp)
 80070cc:	10800217 	ldw	r2,8(r2)
 80070d0:	e13ffd17 	ldw	r4,-12(fp)
 80070d4:	103ee83a 	callr	r2
      }
      nextListener = nextListener->next;
 80070d8:	e0bffc17 	ldw	r2,-16(fp)
 80070dc:	10800017 	ldw	r2,0(r2)
 80070e0:	e0bffc15 	stw	r2,-16(fp)
void removeRestOfPath(struct TouchEventPath* next)
{
  while(next) {
    struct View* view = next->view;
    struct EventListener* nextListener = view->listenerHead;
    while(nextListener)
 80070e4:	e0bffc17 	ldw	r2,-16(fp)
 80070e8:	103ff31e 	bne	r2,zero,80070b8 <__alt_data_end+0xfc0070b8>
        nextListener->callback(view);
      }
      nextListener = nextListener->next;
    }

    struct TouchEventPath* temp = next;
 80070ec:	e0bfff17 	ldw	r2,-4(fp)
 80070f0:	e0bffe15 	stw	r2,-8(fp)
    next = next->next;
 80070f4:	e0bfff17 	ldw	r2,-4(fp)
 80070f8:	10800017 	ldw	r2,0(r2)
 80070fc:	e0bfff15 	stw	r2,-4(fp)
    free(temp);
 8007100:	e13ffe17 	ldw	r4,-8(fp)
 8007104:	800bd440 	call	800bd44 <free>
#include "DE1_SOC_touchscreen.h"
#include "Bounds.h"

void removeRestOfPath(struct TouchEventPath* next)
{
  while(next) {
 8007108:	e0bfff17 	ldw	r2,-4(fp)
 800710c:	103fe31e 	bne	r2,zero,800709c <__alt_data_end+0xfc00709c>

    struct TouchEventPath* temp = next;
    next = next->next;
    free(temp);
  }
}
 8007110:	e037883a 	mov	sp,fp
 8007114:	dfc00117 	ldw	ra,4(sp)
 8007118:	df000017 	ldw	fp,0(sp)
 800711c:	dec00204 	addi	sp,sp,8
 8007120:	f800283a 	ret

08007124 <handleDown>:

void handleDown(struct TouchEventHandler* handler, struct Point point)
{
 8007124:	defffa04 	addi	sp,sp,-24
 8007128:	dfc00515 	stw	ra,20(sp)
 800712c:	df000415 	stw	fp,16(sp)
 8007130:	df000404 	addi	fp,sp,16
 8007134:	e13ffc15 	stw	r4,-16(fp)
 8007138:	e17ffd15 	stw	r5,-12(fp)
 800713c:	e1bffe15 	stw	r6,-8(fp)
 8007140:	e1ffff15 	stw	r7,-4(fp)
  generateTouchList(handler, point.x, point.y);
 8007144:	e0fffe17 	ldw	r3,-8(fp)
 8007148:	e0bfff17 	ldw	r2,-4(fp)
 800714c:	e13ffc17 	ldw	r4,-16(fp)
 8007150:	180b883a 	mov	r5,r3
 8007154:	100d883a 	mov	r6,r2
 8007158:	80077f80 	call	80077f8 <generateTouchList>
  propagateTouchEvent(handler, DOWN_EVENT);
 800715c:	e13ffc17 	ldw	r4,-16(fp)
 8007160:	01400044 	movi	r5,1
 8007164:	80074f40 	call	80074f4 <propagateTouchEvent>
  handler->pastPressed = 1;
 8007168:	e0bffc17 	ldw	r2,-16(fp)
 800716c:	00c00044 	movi	r3,1
 8007170:	10c00315 	stw	r3,12(r2)
  handler->x = point.x;
 8007174:	e0fffe17 	ldw	r3,-8(fp)
 8007178:	e0bffc17 	ldw	r2,-16(fp)
 800717c:	10c00515 	stw	r3,20(r2)
  handler->y = point.y;
 8007180:	e0ffff17 	ldw	r3,-4(fp)
 8007184:	e0bffc17 	ldw	r2,-16(fp)
 8007188:	10c00615 	stw	r3,24(r2)
}
 800718c:	e037883a 	mov	sp,fp
 8007190:	dfc00117 	ldw	ra,4(sp)
 8007194:	df000017 	ldw	fp,0(sp)
 8007198:	dec00204 	addi	sp,sp,8
 800719c:	f800283a 	ret

080071a0 <handleMove>:

void handleMove(struct TouchEventHandler* handler, struct Point point)
{
 80071a0:	defffa04 	addi	sp,sp,-24
 80071a4:	dfc00515 	stw	ra,20(sp)
 80071a8:	df000415 	stw	fp,16(sp)
 80071ac:	df000404 	addi	fp,sp,16
 80071b0:	e13ffc15 	stw	r4,-16(fp)
 80071b4:	e17ffd15 	stw	r5,-12(fp)
 80071b8:	e1bffe15 	stw	r6,-8(fp)
 80071bc:	e1ffff15 	stw	r7,-4(fp)
  handler->dx = point.x - handler->x;
 80071c0:	e0fffe17 	ldw	r3,-8(fp)
 80071c4:	e0bffc17 	ldw	r2,-16(fp)
 80071c8:	10800517 	ldw	r2,20(r2)
 80071cc:	1887c83a 	sub	r3,r3,r2
 80071d0:	e0bffc17 	ldw	r2,-16(fp)
 80071d4:	10c00715 	stw	r3,28(r2)
  handler->dy = point.y - handler->y;
 80071d8:	e0ffff17 	ldw	r3,-4(fp)
 80071dc:	e0bffc17 	ldw	r2,-16(fp)
 80071e0:	10800617 	ldw	r2,24(r2)
 80071e4:	1887c83a 	sub	r3,r3,r2
 80071e8:	e0bffc17 	ldw	r2,-16(fp)
 80071ec:	10c00815 	stw	r3,32(r2)
  if(handler->moving) {
 80071f0:	e0bffc17 	ldw	r2,-16(fp)
 80071f4:	10800417 	ldw	r2,16(r2)
 80071f8:	10000a26 	beq	r2,zero,8007224 <handleMove+0x84>
    handler->x = point.x;
 80071fc:	e0fffe17 	ldw	r3,-8(fp)
 8007200:	e0bffc17 	ldw	r2,-16(fp)
 8007204:	10c00515 	stw	r3,20(r2)
    handler->y = point.y;
 8007208:	e0ffff17 	ldw	r3,-4(fp)
 800720c:	e0bffc17 	ldw	r2,-16(fp)
 8007210:	10c00615 	stw	r3,24(r2)
    propagateTouchEvent(handler, MOVE_EVENT);
 8007214:	e13ffc17 	ldw	r4,-16(fp)
 8007218:	014000c4 	movi	r5,3
 800721c:	80074f40 	call	80074f4 <propagateTouchEvent>
 8007220:	00001c06 	br	8007294 <handleMove+0xf4>
  } else {
    if(abs(handler->dx) > 12 || abs(handler->dy) > 12) {
 8007224:	e0bffc17 	ldw	r2,-16(fp)
 8007228:	10800717 	ldw	r2,28(r2)
 800722c:	1000010e 	bge	r2,zero,8007234 <handleMove+0x94>
 8007230:	0085c83a 	sub	r2,zero,r2
 8007234:	10800348 	cmpgei	r2,r2,13
 8007238:	1000061e 	bne	r2,zero,8007254 <handleMove+0xb4>
 800723c:	e0bffc17 	ldw	r2,-16(fp)
 8007240:	10800817 	ldw	r2,32(r2)
 8007244:	1000010e 	bge	r2,zero,800724c <handleMove+0xac>
 8007248:	0085c83a 	sub	r2,zero,r2
 800724c:	10800350 	cmplti	r2,r2,13
 8007250:	1000101e 	bne	r2,zero,8007294 <handleMove+0xf4>
      handler->dx = 0;
 8007254:	e0bffc17 	ldw	r2,-16(fp)
 8007258:	10000715 	stw	zero,28(r2)
      handler->dy = 0;
 800725c:	e0bffc17 	ldw	r2,-16(fp)
 8007260:	10000815 	stw	zero,32(r2)
      handler->moving = 1;
 8007264:	e0bffc17 	ldw	r2,-16(fp)
 8007268:	00c00044 	movi	r3,1
 800726c:	10c00415 	stw	r3,16(r2)
      handler->x = point.x;
 8007270:	e0fffe17 	ldw	r3,-8(fp)
 8007274:	e0bffc17 	ldw	r2,-16(fp)
 8007278:	10c00515 	stw	r3,20(r2)
      handler->y = point.y;
 800727c:	e0ffff17 	ldw	r3,-4(fp)
 8007280:	e0bffc17 	ldw	r2,-16(fp)
 8007284:	10c00615 	stw	r3,24(r2)
      propagateTouchEvent(handler, MOVE_EVENT);
 8007288:	e13ffc17 	ldw	r4,-16(fp)
 800728c:	014000c4 	movi	r5,3
 8007290:	80074f40 	call	80074f4 <propagateTouchEvent>
    }
  }
}
 8007294:	e037883a 	mov	sp,fp
 8007298:	dfc00117 	ldw	ra,4(sp)
 800729c:	df000017 	ldw	fp,0(sp)
 80072a0:	dec00204 	addi	sp,sp,8
 80072a4:	f800283a 	ret

080072a8 <handleUp>:

void handleUp(struct TouchEventHandler* handler, struct Point point)
{
 80072a8:	defff504 	addi	sp,sp,-44
 80072ac:	dfc00a15 	stw	ra,40(sp)
 80072b0:	df000915 	stw	fp,36(sp)
 80072b4:	df000904 	addi	fp,sp,36
 80072b8:	e13ffc15 	stw	r4,-16(fp)
 80072bc:	e17ffd15 	stw	r5,-12(fp)
 80072c0:	e1bffe15 	stw	r6,-8(fp)
 80072c4:	e1ffff15 	stw	r7,-4(fp)
  struct TouchEventPath* next = handler->head;
 80072c8:	e0bffc17 	ldw	r2,-16(fp)
 80072cc:	10800117 	ldw	r2,4(r2)
 80072d0:	e0bff715 	stw	r2,-36(fp)
  while(next) {
 80072d4:	00003506 	br	80073ac <handleUp+0x104>
    struct View* view = next->view;
 80072d8:	e0bff717 	ldw	r2,-36(fp)
 80072dc:	10800117 	ldw	r2,4(r2)
 80072e0:	e0bff915 	stw	r2,-28(fp)
    int withinBounds = containsPoint(handler->x, handler->y, view->absBounds);
 80072e4:	e0bffc17 	ldw	r2,-16(fp)
 80072e8:	11000517 	ldw	r4,20(r2)
 80072ec:	e0bffc17 	ldw	r2,-16(fp)
 80072f0:	10c00617 	ldw	r3,24(r2)
 80072f4:	e0bff917 	ldw	r2,-28(fp)
 80072f8:	10800517 	ldw	r2,20(r2)
 80072fc:	180b883a 	mov	r5,r3
 8007300:	100d883a 	mov	r6,r2
 8007304:	80001f80 	call	80001f8 <containsPoint>
 8007308:	e0bffa15 	stw	r2,-24(fp)
    struct EventListener* nextListener = view->listenerHead;
 800730c:	e0bff917 	ldw	r2,-28(fp)
 8007310:	10800617 	ldw	r2,24(r2)
 8007314:	e0bff815 	stw	r2,-32(fp)
    while(nextListener)
 8007318:	00001b06 	br	8007388 <handleUp+0xe0>
    {
      if(UP_EVENT == nextListener->type) {
 800731c:	e0bff817 	ldw	r2,-32(fp)
 8007320:	10800117 	ldw	r2,4(r2)
 8007324:	10800098 	cmpnei	r2,r2,2
 8007328:	10000a1e 	bne	r2,zero,8007354 <handleUp+0xac>
        nextListener->callback(view, handler->x, handler->y);
 800732c:	e0bff817 	ldw	r2,-32(fp)
 8007330:	10800217 	ldw	r2,8(r2)
 8007334:	e0fffc17 	ldw	r3,-16(fp)
 8007338:	19400517 	ldw	r5,20(r3)
 800733c:	e0fffc17 	ldw	r3,-16(fp)
 8007340:	18c00617 	ldw	r3,24(r3)
 8007344:	e13ff917 	ldw	r4,-28(fp)
 8007348:	180d883a 	mov	r6,r3
 800734c:	103ee83a 	callr	r2
 8007350:	00000a06 	br	800737c <handleUp+0xd4>
      } else if(withinBounds && CLICK_EVENT == nextListener->type) {
 8007354:	e0bffa17 	ldw	r2,-24(fp)
 8007358:	10000826 	beq	r2,zero,800737c <handleUp+0xd4>
 800735c:	e0bff817 	ldw	r2,-32(fp)
 8007360:	10800117 	ldw	r2,4(r2)
 8007364:	10800118 	cmpnei	r2,r2,4
 8007368:	1000041e 	bne	r2,zero,800737c <handleUp+0xd4>
        nextListener->callback(view);
 800736c:	e0bff817 	ldw	r2,-32(fp)
 8007370:	10800217 	ldw	r2,8(r2)
 8007374:	e13ff917 	ldw	r4,-28(fp)
 8007378:	103ee83a 	callr	r2
      }
      nextListener = nextListener->next;
 800737c:	e0bff817 	ldw	r2,-32(fp)
 8007380:	10800017 	ldw	r2,0(r2)
 8007384:	e0bff815 	stw	r2,-32(fp)
  struct TouchEventPath* next = handler->head;
  while(next) {
    struct View* view = next->view;
    int withinBounds = containsPoint(handler->x, handler->y, view->absBounds);
    struct EventListener* nextListener = view->listenerHead;
    while(nextListener)
 8007388:	e0bff817 	ldw	r2,-32(fp)
 800738c:	103fe31e 	bne	r2,zero,800731c <__alt_data_end+0xfc00731c>
        nextListener->callback(view);
      }
      nextListener = nextListener->next;
    }

    struct TouchEventPath* temp = next;
 8007390:	e0bff717 	ldw	r2,-36(fp)
 8007394:	e0bffb15 	stw	r2,-20(fp)
    next = next->next;
 8007398:	e0bff717 	ldw	r2,-36(fp)
 800739c:	10800017 	ldw	r2,0(r2)
 80073a0:	e0bff715 	stw	r2,-36(fp)
    free(temp);
 80073a4:	e13ffb17 	ldw	r4,-20(fp)
 80073a8:	800bd440 	call	800bd44 <free>
}

void handleUp(struct TouchEventHandler* handler, struct Point point)
{
  struct TouchEventPath* next = handler->head;
  while(next) {
 80073ac:	e0bff717 	ldw	r2,-36(fp)
 80073b0:	103fc91e 	bne	r2,zero,80072d8 <__alt_data_end+0xfc0072d8>
    struct TouchEventPath* temp = next;
    next = next->next;
    free(temp);
  }

  handler->head = handler->tail = 0;
 80073b4:	e0bffc17 	ldw	r2,-16(fp)
 80073b8:	10000215 	stw	zero,8(r2)
 80073bc:	e0bffc17 	ldw	r2,-16(fp)
 80073c0:	10c00217 	ldw	r3,8(r2)
 80073c4:	e0bffc17 	ldw	r2,-16(fp)
 80073c8:	10c00115 	stw	r3,4(r2)
  handler->pastPressed = 0;
 80073cc:	e0bffc17 	ldw	r2,-16(fp)
 80073d0:	10000315 	stw	zero,12(r2)
  handler->moving = 0;
 80073d4:	e0bffc17 	ldw	r2,-16(fp)
 80073d8:	10000415 	stw	zero,16(r2)
}
 80073dc:	e037883a 	mov	sp,fp
 80073e0:	dfc00117 	ldw	ra,4(sp)
 80073e4:	df000017 	ldw	fp,0(sp)
 80073e8:	dec00204 	addi	sp,sp,8
 80073ec:	f800283a 	ret

080073f0 <handleTouch>:
int count = 0;
void handleTouch(struct TouchEventHandler* handler)
{
 80073f0:	defff704 	addi	sp,sp,-36
 80073f4:	dfc00815 	stw	ra,32(sp)
 80073f8:	df000715 	stw	fp,28(sp)
 80073fc:	df000704 	addi	fp,sp,28
 8007400:	e13fff15 	stw	r4,-4(fp)
	if(DE1_isScreenTouched()) {
 8007404:	80017300 	call	8001730 <DE1_isScreenTouched>
 8007408:	10002226 	beq	r2,zero,8007494 <handleTouch+0xa4>
		struct Point point = DE1_getLastTouchLocation();
 800740c:	e13ff904 	addi	r4,fp,-28
 8007410:	80017600 	call	8001760 <DE1_getLastTouchLocation>
		if(point.status == PRESSED) {
 8007414:	e0bff917 	ldw	r2,-28(fp)
 8007418:	10800058 	cmpnei	r2,r2,1
 800741c:	10000f1e 	bne	r2,zero,800745c <handleTouch+0x6c>
		  if(!handler->pastPressed) {
 8007420:	e0bfff17 	ldw	r2,-4(fp)
 8007424:	10800317 	ldw	r2,12(r2)
 8007428:	1000061e 	bne	r2,zero,8007444 <handleTouch+0x54>
			handleDown(handler, point);
 800742c:	e13fff17 	ldw	r4,-4(fp)
 8007430:	e17ff917 	ldw	r5,-28(fp)
 8007434:	e1bffa17 	ldw	r6,-24(fp)
 8007438:	e1fffb17 	ldw	r7,-20(fp)
 800743c:	80071240 	call	8007124 <handleDown>
 8007440:	00001306 	br	8007490 <handleTouch+0xa0>
		  } else {
			handleMove(handler, point);
 8007444:	e13fff17 	ldw	r4,-4(fp)
 8007448:	e17ff917 	ldw	r5,-28(fp)
 800744c:	e1bffa17 	ldw	r6,-24(fp)
 8007450:	e1fffb17 	ldw	r7,-20(fp)
 8007454:	80071a00 	call	80071a0 <handleMove>
 8007458:	00002106 	br	80074e0 <handleTouch+0xf0>
		  }
		} else if(point.status == RELEASED) {
 800745c:	e0bff917 	ldw	r2,-28(fp)
 8007460:	10800098 	cmpnei	r2,r2,2
 8007464:	10000a1e 	bne	r2,zero,8007490 <handleTouch+0xa0>
		  if(handler->pastPressed) {
 8007468:	e0bfff17 	ldw	r2,-4(fp)
 800746c:	10800317 	ldw	r2,12(r2)
 8007470:	10000726 	beq	r2,zero,8007490 <handleTouch+0xa0>
			  handleUp(handler, point);
 8007474:	e13fff17 	ldw	r4,-4(fp)
 8007478:	e17ff917 	ldw	r5,-28(fp)
 800747c:	e1bffa17 	ldw	r6,-24(fp)
 8007480:	e1fffb17 	ldw	r7,-20(fp)
 8007484:	80072a80 	call	80072a8 <handleUp>
			  DE1_clearLastTouchLocation();
 8007488:	8001abc0 	call	8001abc <DE1_clearLastTouchLocation>
 800748c:	00001406 	br	80074e0 <handleTouch+0xf0>
 8007490:	00001306 	br	80074e0 <handleTouch+0xf0>
		  }
		}
	} else {
		count++;
 8007494:	d0a71d17 	ldw	r2,-25484(gp)
 8007498:	10800044 	addi	r2,r2,1
 800749c:	d0a71d15 	stw	r2,-25484(gp)
		if(count == 9) {
 80074a0:	d0a71d17 	ldw	r2,-25484(gp)
 80074a4:	10800258 	cmpnei	r2,r2,9
 80074a8:	10000d1e 	bne	r2,zero,80074e0 <handleTouch+0xf0>
			struct Point point = DE1_getLastTouchLocation();
 80074ac:	e0bffc04 	addi	r2,fp,-16
 80074b0:	1009883a 	mov	r4,r2
 80074b4:	80017600 	call	8001760 <DE1_getLastTouchLocation>
			if(handler->pastPressed) {
 80074b8:	e0bfff17 	ldw	r2,-4(fp)
 80074bc:	10800317 	ldw	r2,12(r2)
 80074c0:	10000626 	beq	r2,zero,80074dc <handleTouch+0xec>
				handleUp(handler, point);
 80074c4:	e13fff17 	ldw	r4,-4(fp)
 80074c8:	e17ffc17 	ldw	r5,-16(fp)
 80074cc:	e1bffd17 	ldw	r6,-12(fp)
 80074d0:	e1fffe17 	ldw	r7,-8(fp)
 80074d4:	80072a80 	call	80072a8 <handleUp>
				DE1_clearLastTouchLocation();
 80074d8:	8001abc0 	call	8001abc <DE1_clearLastTouchLocation>
			}
			count = 0;
 80074dc:	d0271d15 	stw	zero,-25484(gp)
		}
	}
}
 80074e0:	e037883a 	mov	sp,fp
 80074e4:	dfc00117 	ldw	ra,4(sp)
 80074e8:	df000017 	ldw	fp,0(sp)
 80074ec:	dec00204 	addi	sp,sp,8
 80074f0:	f800283a 	ret

080074f4 <propagateTouchEvent>:

void propagateTouchEvent(struct TouchEventHandler* handler, int type)
{
 80074f4:	defff704 	addi	sp,sp,-36
 80074f8:	dfc00815 	stw	ra,32(sp)
 80074fc:	df000715 	stw	fp,28(sp)
 8007500:	df000704 	addi	fp,sp,28
 8007504:	e13ffe15 	stw	r4,-8(fp)
 8007508:	e17fff15 	stw	r5,-4(fp)
  struct TouchEventPath* next = handler->head;
 800750c:	e0bffe17 	ldw	r2,-8(fp)
 8007510:	10800117 	ldw	r2,4(r2)
 8007514:	e0bffa15 	stw	r2,-24(fp)
  while(next) {
 8007518:	00006c06 	br	80076cc <propagateTouchEvent+0x1d8>
    struct View* view = next->view;
 800751c:	e0bffa17 	ldw	r2,-24(fp)
 8007520:	10800117 	ldw	r2,4(r2)
 8007524:	e0bffd15 	stw	r2,-12(fp)
    struct EventListener* nextListener = view->listenerHead;
 8007528:	e0bffd17 	ldw	r2,-12(fp)
 800752c:	10800617 	ldw	r2,24(r2)
 8007530:	e0bffb15 	stw	r2,-20(fp)
    while(nextListener)
 8007534:	00006006 	br	80076b8 <propagateTouchEvent+0x1c4>
    {
      if(type == nextListener->type) {
 8007538:	e0bffb17 	ldw	r2,-20(fp)
 800753c:	10c00117 	ldw	r3,4(r2)
 8007540:	e0bfff17 	ldw	r2,-4(fp)
 8007544:	1880591e 	bne	r3,r2,80076ac <propagateTouchEvent+0x1b8>
        int result = 0;
 8007548:	e03ffc15 	stw	zero,-16(fp)
        switch (type) {
 800754c:	e0bfff17 	ldw	r2,-4(fp)
 8007550:	10c000a0 	cmpeqi	r3,r2,2
 8007554:	18001d1e 	bne	r3,zero,80075cc <propagateTouchEvent+0xd8>
 8007558:	10c000c8 	cmpgei	r3,r2,3
 800755c:	1800031e 	bne	r3,zero,800756c <propagateTouchEvent+0x78>
 8007560:	10800060 	cmpeqi	r2,r2,1
 8007564:	1000061e 	bne	r2,zero,8007580 <propagateTouchEvent+0x8c>
 8007568:	00004806 	br	800768c <propagateTouchEvent+0x198>
 800756c:	10c000e0 	cmpeqi	r3,r2,3
 8007570:	1800291e 	bne	r3,zero,8007618 <propagateTouchEvent+0x124>
 8007574:	10800120 	cmpeqi	r2,r2,4
 8007578:	10003e1e 	bne	r2,zero,8007674 <propagateTouchEvent+0x180>
 800757c:	00004306 	br	800768c <propagateTouchEvent+0x198>
          case DOWN_EVENT:;
          result = nextListener->callback(view, handler->x - view->absBounds->x1, handler->y - view->absBounds->y1);
 8007580:	e0bffb17 	ldw	r2,-20(fp)
 8007584:	10800217 	ldw	r2,8(r2)
 8007588:	e0fffe17 	ldw	r3,-8(fp)
 800758c:	19000517 	ldw	r4,20(r3)
 8007590:	e0fffd17 	ldw	r3,-12(fp)
 8007594:	18c00517 	ldw	r3,20(r3)
 8007598:	18c00017 	ldw	r3,0(r3)
 800759c:	20cbc83a 	sub	r5,r4,r3
 80075a0:	e0fffe17 	ldw	r3,-8(fp)
 80075a4:	19000617 	ldw	r4,24(r3)
 80075a8:	e0fffd17 	ldw	r3,-12(fp)
 80075ac:	18c00517 	ldw	r3,20(r3)
 80075b0:	18c00217 	ldw	r3,8(r3)
 80075b4:	20c7c83a 	sub	r3,r4,r3
 80075b8:	e13ffd17 	ldw	r4,-12(fp)
 80075bc:	180d883a 	mov	r6,r3
 80075c0:	103ee83a 	callr	r2
 80075c4:	e0bffc15 	stw	r2,-16(fp)
          break;
 80075c8:	00003006 	br	800768c <propagateTouchEvent+0x198>
          case UP_EVENT:;
          result = nextListener->callback(view, handler->x - view->absBounds->x1, handler->y - view->absBounds->y1);
 80075cc:	e0bffb17 	ldw	r2,-20(fp)
 80075d0:	10800217 	ldw	r2,8(r2)
 80075d4:	e0fffe17 	ldw	r3,-8(fp)
 80075d8:	19000517 	ldw	r4,20(r3)
 80075dc:	e0fffd17 	ldw	r3,-12(fp)
 80075e0:	18c00517 	ldw	r3,20(r3)
 80075e4:	18c00017 	ldw	r3,0(r3)
 80075e8:	20cbc83a 	sub	r5,r4,r3
 80075ec:	e0fffe17 	ldw	r3,-8(fp)
 80075f0:	19000617 	ldw	r4,24(r3)
 80075f4:	e0fffd17 	ldw	r3,-12(fp)
 80075f8:	18c00517 	ldw	r3,20(r3)
 80075fc:	18c00217 	ldw	r3,8(r3)
 8007600:	20c7c83a 	sub	r3,r4,r3
 8007604:	e13ffd17 	ldw	r4,-12(fp)
 8007608:	180d883a 	mov	r6,r3
 800760c:	103ee83a 	callr	r2
 8007610:	e0bffc15 	stw	r2,-16(fp)
          break;
 8007614:	00001d06 	br	800768c <propagateTouchEvent+0x198>
          case MOVE_EVENT:;
          result = nextListener->callback(view, handler->x - view->absBounds->x1, handler->y - view->absBounds->y1, handler->dx, handler->dy);
 8007618:	e0bffb17 	ldw	r2,-20(fp)
 800761c:	10800217 	ldw	r2,8(r2)
 8007620:	e0fffe17 	ldw	r3,-8(fp)
 8007624:	19000517 	ldw	r4,20(r3)
 8007628:	e0fffd17 	ldw	r3,-12(fp)
 800762c:	18c00517 	ldw	r3,20(r3)
 8007630:	18c00017 	ldw	r3,0(r3)
 8007634:	20cbc83a 	sub	r5,r4,r3
 8007638:	e0fffe17 	ldw	r3,-8(fp)
 800763c:	19000617 	ldw	r4,24(r3)
 8007640:	e0fffd17 	ldw	r3,-12(fp)
 8007644:	18c00517 	ldw	r3,20(r3)
 8007648:	18c00217 	ldw	r3,8(r3)
 800764c:	20cdc83a 	sub	r6,r4,r3
 8007650:	e0fffe17 	ldw	r3,-8(fp)
 8007654:	19c00717 	ldw	r7,28(r3)
 8007658:	e0fffe17 	ldw	r3,-8(fp)
 800765c:	18c00817 	ldw	r3,32(r3)
 8007660:	d8c00015 	stw	r3,0(sp)
 8007664:	e13ffd17 	ldw	r4,-12(fp)
 8007668:	103ee83a 	callr	r2
 800766c:	e0bffc15 	stw	r2,-16(fp)
          break;
 8007670:	00000606 	br	800768c <propagateTouchEvent+0x198>
          case CLICK_EVENT:;
          result = nextListener->callback(view);
 8007674:	e0bffb17 	ldw	r2,-20(fp)
 8007678:	10800217 	ldw	r2,8(r2)
 800767c:	e13ffd17 	ldw	r4,-12(fp)
 8007680:	103ee83a 	callr	r2
 8007684:	e0bffc15 	stw	r2,-16(fp)
          break;
 8007688:	0001883a 	nop
        }
        if(result){
 800768c:	e0bffc17 	ldw	r2,-16(fp)
 8007690:	10000626 	beq	r2,zero,80076ac <propagateTouchEvent+0x1b8>
          removeRestOfPath(next->next);
 8007694:	e0bffa17 	ldw	r2,-24(fp)
 8007698:	10800017 	ldw	r2,0(r2)
 800769c:	1009883a 	mov	r4,r2
 80076a0:	80070840 	call	8007084 <removeRestOfPath>
          next->next = 0;
 80076a4:	e0bffa17 	ldw	r2,-24(fp)
 80076a8:	10000015 	stw	zero,0(r2)
        }
      }
      nextListener = nextListener->next;
 80076ac:	e0bffb17 	ldw	r2,-20(fp)
 80076b0:	10800017 	ldw	r2,0(r2)
 80076b4:	e0bffb15 	stw	r2,-20(fp)
{
  struct TouchEventPath* next = handler->head;
  while(next) {
    struct View* view = next->view;
    struct EventListener* nextListener = view->listenerHead;
    while(nextListener)
 80076b8:	e0bffb17 	ldw	r2,-20(fp)
 80076bc:	103f9e1e 	bne	r2,zero,8007538 <__alt_data_end+0xfc007538>
        }
      }
      nextListener = nextListener->next;
    }

    next = next->next;
 80076c0:	e0bffa17 	ldw	r2,-24(fp)
 80076c4:	10800017 	ldw	r2,0(r2)
 80076c8:	e0bffa15 	stw	r2,-24(fp)
}

void propagateTouchEvent(struct TouchEventHandler* handler, int type)
{
  struct TouchEventPath* next = handler->head;
  while(next) {
 80076cc:	e0bffa17 	ldw	r2,-24(fp)
 80076d0:	103f921e 	bne	r2,zero,800751c <__alt_data_end+0xfc00751c>
      nextListener = nextListener->next;
    }

    next = next->next;
  }
}
 80076d4:	e037883a 	mov	sp,fp
 80076d8:	dfc00117 	ldw	ra,4(sp)
 80076dc:	df000017 	ldw	fp,0(sp)
 80076e0:	dec00204 	addi	sp,sp,8
 80076e4:	f800283a 	ret

080076e8 <generateTouchListChildren>:

void generateTouchListChildren(struct TouchEventHandler* handler, void* _view, int x, int y)
{
 80076e8:	defff604 	addi	sp,sp,-40
 80076ec:	dfc00915 	stw	ra,36(sp)
 80076f0:	df000815 	stw	fp,32(sp)
 80076f4:	df000804 	addi	fp,sp,32
 80076f8:	e13ffc15 	stw	r4,-16(fp)
 80076fc:	e17ffd15 	stw	r5,-12(fp)
 8007700:	e1bffe15 	stw	r6,-8(fp)
 8007704:	e1ffff15 	stw	r7,-4(fp)
  struct View* view = _view;
 8007708:	e0bffd17 	ldw	r2,-12(fp)
 800770c:	e0bff915 	stw	r2,-28(fp)
  if(view->visible && containsPoint(x, y, view->absBounds)) {
 8007710:	e0bff917 	ldw	r2,-28(fp)
 8007714:	10800b17 	ldw	r2,44(r2)
 8007718:	10003226 	beq	r2,zero,80077e4 <generateTouchListChildren+0xfc>
 800771c:	e0bff917 	ldw	r2,-28(fp)
 8007720:	10800517 	ldw	r2,20(r2)
 8007724:	e13ffe17 	ldw	r4,-8(fp)
 8007728:	e17fff17 	ldw	r5,-4(fp)
 800772c:	100d883a 	mov	r6,r2
 8007730:	80001f80 	call	80001f8 <containsPoint>
 8007734:	10002b26 	beq	r2,zero,80077e4 <generateTouchListChildren+0xfc>
    struct TouchEventPath* path = malloc(sizeof(struct TouchEventPath));
 8007738:	01000204 	movi	r4,8
 800773c:	800bd300 	call	800bd30 <malloc>
 8007740:	e0bffa15 	stw	r2,-24(fp)
    path->view = _view;
 8007744:	e0bffa17 	ldw	r2,-24(fp)
 8007748:	e0fffd17 	ldw	r3,-12(fp)
 800774c:	10c00115 	stw	r3,4(r2)
    path->next = 0;
 8007750:	e0bffa17 	ldw	r2,-24(fp)
 8007754:	10000015 	stw	zero,0(r2)
    if(handler->tail) {
 8007758:	e0bffc17 	ldw	r2,-16(fp)
 800775c:	10800217 	ldw	r2,8(r2)
 8007760:	10000826 	beq	r2,zero,8007784 <generateTouchListChildren+0x9c>
      handler->tail->next = path;
 8007764:	e0bffc17 	ldw	r2,-16(fp)
 8007768:	10800217 	ldw	r2,8(r2)
 800776c:	e0fffa17 	ldw	r3,-24(fp)
 8007770:	10c00015 	stw	r3,0(r2)
      handler->tail = path;
 8007774:	e0bffc17 	ldw	r2,-16(fp)
 8007778:	e0fffa17 	ldw	r3,-24(fp)
 800777c:	10c00215 	stw	r3,8(r2)
 8007780:	00000706 	br	80077a0 <generateTouchListChildren+0xb8>
    } else {
      handler->head = handler->tail = path;
 8007784:	e0bffc17 	ldw	r2,-16(fp)
 8007788:	e0fffa17 	ldw	r3,-24(fp)
 800778c:	10c00215 	stw	r3,8(r2)
 8007790:	e0bffc17 	ldw	r2,-16(fp)
 8007794:	10c00217 	ldw	r3,8(r2)
 8007798:	e0bffc17 	ldw	r2,-16(fp)
 800779c:	10c00115 	stw	r3,4(r2)
    }

    struct ChildView* prevView = view->viewTail;
 80077a0:	e0bff917 	ldw	r2,-28(fp)
 80077a4:	10800917 	ldw	r2,36(r2)
 80077a8:	e0bff815 	stw	r2,-32(fp)
    while(prevView)
 80077ac:	00000b06 	br	80077dc <generateTouchListChildren+0xf4>
    {
      struct View* childView = prevView->view;
 80077b0:	e0bff817 	ldw	r2,-32(fp)
 80077b4:	10800217 	ldw	r2,8(r2)
 80077b8:	e0bffb15 	stw	r2,-20(fp)
      generateTouchListChildren(handler, childView, x, y);
 80077bc:	e13ffc17 	ldw	r4,-16(fp)
 80077c0:	e17ffb17 	ldw	r5,-20(fp)
 80077c4:	e1bffe17 	ldw	r6,-8(fp)
 80077c8:	e1ffff17 	ldw	r7,-4(fp)
 80077cc:	80076e80 	call	80076e8 <generateTouchListChildren>
      prevView = prevView->prev;
 80077d0:	e0bff817 	ldw	r2,-32(fp)
 80077d4:	10800117 	ldw	r2,4(r2)
 80077d8:	e0bff815 	stw	r2,-32(fp)
    } else {
      handler->head = handler->tail = path;
    }

    struct ChildView* prevView = view->viewTail;
    while(prevView)
 80077dc:	e0bff817 	ldw	r2,-32(fp)
 80077e0:	103ff31e 	bne	r2,zero,80077b0 <__alt_data_end+0xfc0077b0>
      struct View* childView = prevView->view;
      generateTouchListChildren(handler, childView, x, y);
      prevView = prevView->prev;
    }
  }
}
 80077e4:	e037883a 	mov	sp,fp
 80077e8:	dfc00117 	ldw	ra,4(sp)
 80077ec:	df000017 	ldw	fp,0(sp)
 80077f0:	dec00204 	addi	sp,sp,8
 80077f4:	f800283a 	ret

080077f8 <generateTouchList>:

void generateTouchList(struct TouchEventHandler* handler, int x, int y)
{
 80077f8:	defffb04 	addi	sp,sp,-20
 80077fc:	dfc00415 	stw	ra,16(sp)
 8007800:	df000315 	stw	fp,12(sp)
 8007804:	df000304 	addi	fp,sp,12
 8007808:	e13ffd15 	stw	r4,-12(fp)
 800780c:	e17ffe15 	stw	r5,-8(fp)
 8007810:	e1bfff15 	stw	r6,-4(fp)
  generateTouchListChildren(handler, handler->rootView, x, y);
 8007814:	e0bffd17 	ldw	r2,-12(fp)
 8007818:	10800017 	ldw	r2,0(r2)
 800781c:	e13ffd17 	ldw	r4,-12(fp)
 8007820:	100b883a 	mov	r5,r2
 8007824:	e1bffe17 	ldw	r6,-8(fp)
 8007828:	e1ffff17 	ldw	r7,-4(fp)
 800782c:	80076e80 	call	80076e8 <generateTouchListChildren>
}
 8007830:	e037883a 	mov	sp,fp
 8007834:	dfc00117 	ldw	ra,4(sp)
 8007838:	df000017 	ldw	fp,0(sp)
 800783c:	dec00204 	addi	sp,sp,8
 8007840:	f800283a 	ret

08007844 <timer_isr>:
#include "TouchEventHandler.h"
#include "Renderer.h"
#include "Volume.h"

static void timer_isr (void * context)
{
 8007844:	defffd04 	addi	sp,sp,-12
 8007848:	dfc00215 	stw	ra,8(sp)
 800784c:	df000115 	stw	fp,4(sp)
 8007850:	df000104 	addi	fp,sp,4
 8007854:	e13fff15 	stw	r4,-4(fp)


  IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
 8007858:	0007883a 	mov	r3,zero
 800785c:	00882004 	movi	r2,8320
 8007860:	10c00035 	stwio	r3,0(r2)

  IOWR_ALTERA_AVALON_PIO_DATA(LED_PIO_BASE, 1);
 8007864:	00c00044 	movi	r3,1
 8007868:	00880404 	movi	r2,8208
 800786c:	10c00035 	stwio	r3,0(r2)

  setVolume();
 8007870:	80086a80 	call	80086a8 <setVolume>
}
 8007874:	e037883a 	mov	sp,fp
 8007878:	dfc00117 	ldw	ra,4(sp)
 800787c:	df000017 	ldw	fp,0(sp)
 8007880:	dec00204 	addi	sp,sp,8
 8007884:	f800283a 	ret

08007888 <Init_Interrupt>:


void Init_Interrupt(){
 8007888:	defffd04 	addi	sp,sp,-12
 800788c:	dfc00215 	stw	ra,8(sp)
 8007890:	df000115 	stw	fp,4(sp)
 8007894:	df000104 	addi	fp,sp,4



	  //Timer Initialization
	  IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
 8007898:	00c000c4 	movi	r3,3
 800789c:	00882104 	movi	r2,8324
 80078a0:	10c00035 	stwio	r3,0(r2)
	  IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
 80078a4:	0007883a 	mov	r3,zero
 80078a8:	00882004 	movi	r2,8320
 80078ac:	10c00035 	stwio	r3,0(r2)

	  //This can be changed to alter timer freq
	  IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0xff00);//ff00); //ff00);//870);//0x9f00);
 80078b0:	00ffc014 	movui	r3,65280
 80078b4:	00882204 	movi	r2,8328
 80078b8:	10c00035 	stwio	r3,0(r2)
	  IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x0024);//24);
 80078bc:	00c00904 	movi	r3,36
 80078c0:	00882304 	movi	r2,8332
 80078c4:	10c00035 	stwio	r3,0(r2)

	  //Register ISR for timer event
	  alt_ic_isr_register(TIMER_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_IRQ, timer_isr, 0, 0);
 80078c8:	d8000015 	stw	zero,0(sp)
 80078cc:	01000104 	movi	r4,4
 80078d0:	01400104 	movi	r5,4
 80078d4:	01820034 	movhi	r6,2048
 80078d8:	319e1104 	addi	r6,r6,30788
 80078dc:	000f883a 	mov	r7,zero
 80078e0:	801934c0 	call	801934c <alt_ic_isr_register>


	  //Start timer and begin the work
	  IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
 80078e4:	00c001c4 	movi	r3,7
 80078e8:	00882104 	movi	r2,8324
 80078ec:	10c00035 	stwio	r3,0(r2)

	  printf("Init interrupt\n");
 80078f0:	010200b4 	movhi	r4,2050
 80078f4:	211be904 	addi	r4,r4,28580
 80078f8:	800c89c0 	call	800c89c <puts>
//
//		short* reading_in = &rin;
//		short* reading_in_prev = &rin_prev;
//		short* reading_in_prev_1 = &rin_prev_1;
//		short* reading_in_next = &rin_next;
}
 80078fc:	e037883a 	mov	sp,fp
 8007900:	dfc00117 	ldw	ra,4(sp)
 8007904:	df000017 	ldw	fp,0(sp)
 8007908:	dec00204 	addi	sp,sp,8
 800790c:	f800283a 	ret

08007910 <View_ctor>:
#include <stdlib.h>
#include "View.h"

static void* View_ctor(void* _self, va_list* app)
{
 8007910:	defffb04 	addi	sp,sp,-20
 8007914:	dfc00415 	stw	ra,16(sp)
 8007918:	df000315 	stw	fp,12(sp)
 800791c:	df000304 	addi	fp,sp,12
 8007920:	e13ffe15 	stw	r4,-8(fp)
 8007924:	e17fff15 	stw	r5,-4(fp)
	struct View* self = super_ctor(View, _self, app);
 8007928:	d0a71e17 	ldw	r2,-25480(gp)
 800792c:	1009883a 	mov	r4,r2
 8007930:	e17ffe17 	ldw	r5,-8(fp)
 8007934:	e1bfff17 	ldw	r6,-4(fp)
 8007938:	80054180 	call	8005418 <super_ctor>
 800793c:	e0bffd15 	stw	r2,-12(fp)

	self -> x = 0;
 8007940:	e0bffd17 	ldw	r2,-12(fp)
 8007944:	10000115 	stw	zero,4(r2)
	self -> y = 0;
 8007948:	e0bffd17 	ldw	r2,-12(fp)
 800794c:	10000215 	stw	zero,8(r2)
	self -> width = 0;
 8007950:	e0bffd17 	ldw	r2,-12(fp)
 8007954:	10000315 	stw	zero,12(r2)
	self -> height = 0;
 8007958:	e0bffd17 	ldw	r2,-12(fp)
 800795c:	10000415 	stw	zero,16(r2)

	self->listenerHead = 0;
 8007960:	e0bffd17 	ldw	r2,-12(fp)
 8007964:	10000615 	stw	zero,24(r2)
	self->listenerTail = 0;
 8007968:	e0bffd17 	ldw	r2,-12(fp)
 800796c:	10000715 	stw	zero,28(r2)

	self->viewHead = 0;
 8007970:	e0bffd17 	ldw	r2,-12(fp)
 8007974:	10000815 	stw	zero,32(r2)
	self->viewTail = 0;
 8007978:	e0bffd17 	ldw	r2,-12(fp)
 800797c:	10000915 	stw	zero,36(r2)

	self -> absBounds = malloc(sizeof(struct Bounds));
 8007980:	01000404 	movi	r4,16
 8007984:	800bd300 	call	800bd30 <malloc>
 8007988:	1007883a 	mov	r3,r2
 800798c:	e0bffd17 	ldw	r2,-12(fp)
 8007990:	10c00515 	stw	r3,20(r2)
	self -> absBounds -> x1 = 0;
 8007994:	e0bffd17 	ldw	r2,-12(fp)
 8007998:	10800517 	ldw	r2,20(r2)
 800799c:	10000015 	stw	zero,0(r2)
	self -> absBounds -> x2 = 0;
 80079a0:	e0bffd17 	ldw	r2,-12(fp)
 80079a4:	10800517 	ldw	r2,20(r2)
 80079a8:	10000115 	stw	zero,4(r2)
	self -> absBounds -> y1 = 0;
 80079ac:	e0bffd17 	ldw	r2,-12(fp)
 80079b0:	10800517 	ldw	r2,20(r2)
 80079b4:	10000215 	stw	zero,8(r2)
	self -> absBounds -> y2 = 0;
 80079b8:	e0bffd17 	ldw	r2,-12(fp)
 80079bc:	10800517 	ldw	r2,20(r2)
 80079c0:	10000315 	stw	zero,12(r2)

	self->renderer = 0;
 80079c4:	e0bffd17 	ldw	r2,-12(fp)
 80079c8:	10000a15 	stw	zero,40(r2)

	self->visible = 1;
 80079cc:	e0bffd17 	ldw	r2,-12(fp)
 80079d0:	00c00044 	movi	r3,1
 80079d4:	10c00b15 	stw	r3,44(r2)

	return self;
 80079d8:	e0bffd17 	ldw	r2,-12(fp)
}
 80079dc:	e037883a 	mov	sp,fp
 80079e0:	dfc00117 	ldw	ra,4(sp)
 80079e4:	df000017 	ldw	fp,0(sp)
 80079e8:	dec00204 	addi	sp,sp,8
 80079ec:	f800283a 	ret

080079f0 <View_draw>:

static void View_draw(void* _self, struct Bounds* clip)
{
 80079f0:	defffd04 	addi	sp,sp,-12
 80079f4:	df000215 	stw	fp,8(sp)
 80079f8:	df000204 	addi	fp,sp,8
 80079fc:	e13ffe15 	stw	r4,-8(fp)
 8007a00:	e17fff15 	stw	r5,-4(fp)
	(void) _self;
	(void) clip;
}
 8007a04:	e037883a 	mov	sp,fp
 8007a08:	df000017 	ldw	fp,0(sp)
 8007a0c:	dec00104 	addi	sp,sp,4
 8007a10:	f800283a 	ret

08007a14 <draw>:

void draw(void* _self, struct Bounds* clip)
{
 8007a14:	defffb04 	addi	sp,sp,-20
 8007a18:	dfc00415 	stw	ra,16(sp)
 8007a1c:	df000315 	stw	fp,12(sp)
 8007a20:	df000304 	addi	fp,sp,12
 8007a24:	e13ffe15 	stw	r4,-8(fp)
 8007a28:	e17fff15 	stw	r5,-4(fp)
	const struct ViewClass* class = classOf(_self);
 8007a2c:	e13ffe17 	ldw	r4,-8(fp)
 8007a30:	8004f580 	call	8004f58 <classOf>
 8007a34:	e0bffd15 	stw	r2,-12(fp)

	class->draw(_self, clip);
 8007a38:	e0bffd17 	ldw	r2,-12(fp)
 8007a3c:	10800717 	ldw	r2,28(r2)
 8007a40:	e13ffe17 	ldw	r4,-8(fp)
 8007a44:	e17fff17 	ldw	r5,-4(fp)
 8007a48:	103ee83a 	callr	r2
}
 8007a4c:	e037883a 	mov	sp,fp
 8007a50:	dfc00117 	ldw	ra,4(sp)
 8007a54:	df000017 	ldw	fp,0(sp)
 8007a58:	dec00204 	addi	sp,sp,8
 8007a5c:	f800283a 	ret

08007a60 <super_draw>:

void super_draw(const void* _class, void* _self, struct Bounds* clip)
{
 8007a60:	defffa04 	addi	sp,sp,-24
 8007a64:	dfc00515 	stw	ra,20(sp)
 8007a68:	df000415 	stw	fp,16(sp)
 8007a6c:	df000404 	addi	fp,sp,16
 8007a70:	e13ffd15 	stw	r4,-12(fp)
 8007a74:	e17ffe15 	stw	r5,-8(fp)
 8007a78:	e1bfff15 	stw	r6,-4(fp)
	const struct ViewClass *superClass = super(_class);
 8007a7c:	e13ffd17 	ldw	r4,-12(fp)
 8007a80:	80052280 	call	8005228 <super>
 8007a84:	e0bffc15 	stw	r2,-16(fp)

	superClass->draw(_self, clip);
 8007a88:	e0bffc17 	ldw	r2,-16(fp)
 8007a8c:	10800717 	ldw	r2,28(r2)
 8007a90:	e13ffe17 	ldw	r4,-8(fp)
 8007a94:	e17fff17 	ldw	r5,-4(fp)
 8007a98:	103ee83a 	callr	r2
}
 8007a9c:	e037883a 	mov	sp,fp
 8007aa0:	dfc00117 	ldw	ra,4(sp)
 8007aa4:	df000017 	ldw	fp,0(sp)
 8007aa8:	dec00204 	addi	sp,sp,8
 8007aac:	f800283a 	ret

08007ab0 <View_measure>:

static void View_measure(void* _self, struct Bounds* parent)
{
 8007ab0:	defffb04 	addi	sp,sp,-20
 8007ab4:	df000415 	stw	fp,16(sp)
 8007ab8:	df000404 	addi	fp,sp,16
 8007abc:	e13ffe15 	stw	r4,-8(fp)
 8007ac0:	e17fff15 	stw	r5,-4(fp)
	struct View* self = _self;
 8007ac4:	e0bffe17 	ldw	r2,-8(fp)
 8007ac8:	e0bffc15 	stw	r2,-16(fp)

	struct Bounds* child = self -> absBounds;
 8007acc:	e0bffc17 	ldw	r2,-16(fp)
 8007ad0:	10800517 	ldw	r2,20(r2)
 8007ad4:	e0bffd15 	stw	r2,-12(fp)
	child -> x1 = parent -> x1 + self -> x;
 8007ad8:	e0bfff17 	ldw	r2,-4(fp)
 8007adc:	10c00017 	ldw	r3,0(r2)
 8007ae0:	e0bffc17 	ldw	r2,-16(fp)
 8007ae4:	10800117 	ldw	r2,4(r2)
 8007ae8:	1887883a 	add	r3,r3,r2
 8007aec:	e0bffd17 	ldw	r2,-12(fp)
 8007af0:	10c00015 	stw	r3,0(r2)
	child -> x2 = parent -> x1 + self -> x + self -> width;
 8007af4:	e0bfff17 	ldw	r2,-4(fp)
 8007af8:	10c00017 	ldw	r3,0(r2)
 8007afc:	e0bffc17 	ldw	r2,-16(fp)
 8007b00:	10800117 	ldw	r2,4(r2)
 8007b04:	1887883a 	add	r3,r3,r2
 8007b08:	e0bffc17 	ldw	r2,-16(fp)
 8007b0c:	10800317 	ldw	r2,12(r2)
 8007b10:	1887883a 	add	r3,r3,r2
 8007b14:	e0bffd17 	ldw	r2,-12(fp)
 8007b18:	10c00115 	stw	r3,4(r2)
	child -> y1 = parent -> y1 + self -> y;
 8007b1c:	e0bfff17 	ldw	r2,-4(fp)
 8007b20:	10c00217 	ldw	r3,8(r2)
 8007b24:	e0bffc17 	ldw	r2,-16(fp)
 8007b28:	10800217 	ldw	r2,8(r2)
 8007b2c:	1887883a 	add	r3,r3,r2
 8007b30:	e0bffd17 	ldw	r2,-12(fp)
 8007b34:	10c00215 	stw	r3,8(r2)
	child -> y2 = parent -> y1 + self -> y + self -> height;
 8007b38:	e0bfff17 	ldw	r2,-4(fp)
 8007b3c:	10c00217 	ldw	r3,8(r2)
 8007b40:	e0bffc17 	ldw	r2,-16(fp)
 8007b44:	10800217 	ldw	r2,8(r2)
 8007b48:	1887883a 	add	r3,r3,r2
 8007b4c:	e0bffc17 	ldw	r2,-16(fp)
 8007b50:	10800417 	ldw	r2,16(r2)
 8007b54:	1887883a 	add	r3,r3,r2
 8007b58:	e0bffd17 	ldw	r2,-12(fp)
 8007b5c:	10c00315 	stw	r3,12(r2)
	self -> absBounds = child;
 8007b60:	e0bffc17 	ldw	r2,-16(fp)
 8007b64:	e0fffd17 	ldw	r3,-12(fp)
 8007b68:	10c00515 	stw	r3,20(r2)
}
 8007b6c:	e037883a 	mov	sp,fp
 8007b70:	df000017 	ldw	fp,0(sp)
 8007b74:	dec00104 	addi	sp,sp,4
 8007b78:	f800283a 	ret

08007b7c <measure>:

void measure(void* _self, struct Bounds* parent)
{
 8007b7c:	defffb04 	addi	sp,sp,-20
 8007b80:	dfc00415 	stw	ra,16(sp)
 8007b84:	df000315 	stw	fp,12(sp)
 8007b88:	df000304 	addi	fp,sp,12
 8007b8c:	e13ffe15 	stw	r4,-8(fp)
 8007b90:	e17fff15 	stw	r5,-4(fp)
	const struct ViewClass* class = classOf(_self);
 8007b94:	e13ffe17 	ldw	r4,-8(fp)
 8007b98:	8004f580 	call	8004f58 <classOf>
 8007b9c:	e0bffd15 	stw	r2,-12(fp)
	class->measure(_self, parent);
 8007ba0:	e0bffd17 	ldw	r2,-12(fp)
 8007ba4:	10800817 	ldw	r2,32(r2)
 8007ba8:	e13ffe17 	ldw	r4,-8(fp)
 8007bac:	e17fff17 	ldw	r5,-4(fp)
 8007bb0:	103ee83a 	callr	r2
}
 8007bb4:	e037883a 	mov	sp,fp
 8007bb8:	dfc00117 	ldw	ra,4(sp)
 8007bbc:	df000017 	ldw	fp,0(sp)
 8007bc0:	dec00204 	addi	sp,sp,8
 8007bc4:	f800283a 	ret

08007bc8 <super_measure>:

void super_measure(const void* _class, void* _self, struct Bounds* parent)
{
 8007bc8:	defffa04 	addi	sp,sp,-24
 8007bcc:	dfc00515 	stw	ra,20(sp)
 8007bd0:	df000415 	stw	fp,16(sp)
 8007bd4:	df000404 	addi	fp,sp,16
 8007bd8:	e13ffd15 	stw	r4,-12(fp)
 8007bdc:	e17ffe15 	stw	r5,-8(fp)
 8007be0:	e1bfff15 	stw	r6,-4(fp)
	const struct ViewClass *superClass = super(_class);
 8007be4:	e13ffd17 	ldw	r4,-12(fp)
 8007be8:	80052280 	call	8005228 <super>
 8007bec:	e0bffc15 	stw	r2,-16(fp)
	superClass->measure(_self, parent);
 8007bf0:	e0bffc17 	ldw	r2,-16(fp)
 8007bf4:	10800817 	ldw	r2,32(r2)
 8007bf8:	e13ffe17 	ldw	r4,-8(fp)
 8007bfc:	e17fff17 	ldw	r5,-4(fp)
 8007c00:	103ee83a 	callr	r2
}
 8007c04:	e037883a 	mov	sp,fp
 8007c08:	dfc00117 	ldw	ra,4(sp)
 8007c0c:	df000017 	ldw	fp,0(sp)
 8007c10:	dec00204 	addi	sp,sp,8
 8007c14:	f800283a 	ret

08007c18 <setX>:

void setX(void* _self, int x)
{
 8007c18:	defff604 	addi	sp,sp,-40
 8007c1c:	dfc00915 	stw	ra,36(sp)
 8007c20:	df000815 	stw	fp,32(sp)
 8007c24:	df000804 	addi	fp,sp,32
 8007c28:	e13ffe15 	stw	r4,-8(fp)
 8007c2c:	e17fff15 	stw	r5,-4(fp)
	struct View* self = _self;
 8007c30:	e0bffe17 	ldw	r2,-8(fp)
 8007c34:	e0bff815 	stw	r2,-32(fp)
	self -> x = x;
 8007c38:	e0bff817 	ldw	r2,-32(fp)
 8007c3c:	e0ffff17 	ldw	r3,-4(fp)
 8007c40:	10c00115 	stw	r3,4(r2)

	struct Bounds newRegion;
	newRegion.x1 = self-> x;
 8007c44:	e0bff817 	ldw	r2,-32(fp)
 8007c48:	10800117 	ldw	r2,4(r2)
 8007c4c:	e0bffa15 	stw	r2,-24(fp)
	newRegion.y1 = self -> y;
 8007c50:	e0bff817 	ldw	r2,-32(fp)
 8007c54:	10800217 	ldw	r2,8(r2)
 8007c58:	e0bffc15 	stw	r2,-16(fp)
	newRegion.x2 = self -> x + self -> width;
 8007c5c:	e0bff817 	ldw	r2,-32(fp)
 8007c60:	10c00117 	ldw	r3,4(r2)
 8007c64:	e0bff817 	ldw	r2,-32(fp)
 8007c68:	10800317 	ldw	r2,12(r2)
 8007c6c:	1885883a 	add	r2,r3,r2
 8007c70:	e0bffb15 	stw	r2,-20(fp)
	newRegion.y2 = self -> y + self -> height;
 8007c74:	e0bff817 	ldw	r2,-32(fp)
 8007c78:	10c00217 	ldw	r3,8(r2)
 8007c7c:	e0bff817 	ldw	r2,-32(fp)
 8007c80:	10800417 	ldw	r2,16(r2)
 8007c84:	1885883a 	add	r2,r3,r2
 8007c88:	e0bffd15 	stw	r2,-12(fp)

	struct Bounds* result = merge(self -> absBounds, &newRegion);
 8007c8c:	e0bff817 	ldw	r2,-32(fp)
 8007c90:	10c00517 	ldw	r3,20(r2)
 8007c94:	e0bffa04 	addi	r2,fp,-24
 8007c98:	1809883a 	mov	r4,r3
 8007c9c:	100b883a 	mov	r5,r2
 8007ca0:	80003740 	call	8000374 <merge>
 8007ca4:	e0bff915 	stw	r2,-28(fp)

	if(self->renderer) invalidate(self->renderer, result);
 8007ca8:	e0bff817 	ldw	r2,-32(fp)
 8007cac:	10800a17 	ldw	r2,40(r2)
 8007cb0:	10000526 	beq	r2,zero,8007cc8 <setX+0xb0>
 8007cb4:	e0bff817 	ldw	r2,-32(fp)
 8007cb8:	10800a17 	ldw	r2,40(r2)
 8007cbc:	1009883a 	mov	r4,r2
 8007cc0:	e17ff917 	ldw	r5,-28(fp)
 8007cc4:	80066240 	call	8006624 <invalidate>

	free(result);
 8007cc8:	e13ff917 	ldw	r4,-28(fp)
 8007ccc:	800bd440 	call	800bd44 <free>
}
 8007cd0:	e037883a 	mov	sp,fp
 8007cd4:	dfc00117 	ldw	ra,4(sp)
 8007cd8:	df000017 	ldw	fp,0(sp)
 8007cdc:	dec00204 	addi	sp,sp,8
 8007ce0:	f800283a 	ret

08007ce4 <setY>:

void setY(void* _self, int y)
{
 8007ce4:	defff604 	addi	sp,sp,-40
 8007ce8:	dfc00915 	stw	ra,36(sp)
 8007cec:	df000815 	stw	fp,32(sp)
 8007cf0:	df000804 	addi	fp,sp,32
 8007cf4:	e13ffe15 	stw	r4,-8(fp)
 8007cf8:	e17fff15 	stw	r5,-4(fp)
	struct View* self = _self;
 8007cfc:	e0bffe17 	ldw	r2,-8(fp)
 8007d00:	e0bff815 	stw	r2,-32(fp)
	self -> y = y;
 8007d04:	e0bff817 	ldw	r2,-32(fp)
 8007d08:	e0ffff17 	ldw	r3,-4(fp)
 8007d0c:	10c00215 	stw	r3,8(r2)

	struct Bounds newRegion;
	newRegion.x1 = self-> x;
 8007d10:	e0bff817 	ldw	r2,-32(fp)
 8007d14:	10800117 	ldw	r2,4(r2)
 8007d18:	e0bffa15 	stw	r2,-24(fp)
	newRegion.y1 = self -> y;
 8007d1c:	e0bff817 	ldw	r2,-32(fp)
 8007d20:	10800217 	ldw	r2,8(r2)
 8007d24:	e0bffc15 	stw	r2,-16(fp)
	newRegion.x2 = self -> x + self -> width;
 8007d28:	e0bff817 	ldw	r2,-32(fp)
 8007d2c:	10c00117 	ldw	r3,4(r2)
 8007d30:	e0bff817 	ldw	r2,-32(fp)
 8007d34:	10800317 	ldw	r2,12(r2)
 8007d38:	1885883a 	add	r2,r3,r2
 8007d3c:	e0bffb15 	stw	r2,-20(fp)
	newRegion.y2 = self -> y + self -> height;
 8007d40:	e0bff817 	ldw	r2,-32(fp)
 8007d44:	10c00217 	ldw	r3,8(r2)
 8007d48:	e0bff817 	ldw	r2,-32(fp)
 8007d4c:	10800417 	ldw	r2,16(r2)
 8007d50:	1885883a 	add	r2,r3,r2
 8007d54:	e0bffd15 	stw	r2,-12(fp)

	struct Bounds* result = merge(self -> absBounds, &newRegion);
 8007d58:	e0bff817 	ldw	r2,-32(fp)
 8007d5c:	10c00517 	ldw	r3,20(r2)
 8007d60:	e0bffa04 	addi	r2,fp,-24
 8007d64:	1809883a 	mov	r4,r3
 8007d68:	100b883a 	mov	r5,r2
 8007d6c:	80003740 	call	8000374 <merge>
 8007d70:	e0bff915 	stw	r2,-28(fp)

	if(self->renderer) invalidate(self->renderer, result);
 8007d74:	e0bff817 	ldw	r2,-32(fp)
 8007d78:	10800a17 	ldw	r2,40(r2)
 8007d7c:	10000526 	beq	r2,zero,8007d94 <setY+0xb0>
 8007d80:	e0bff817 	ldw	r2,-32(fp)
 8007d84:	10800a17 	ldw	r2,40(r2)
 8007d88:	1009883a 	mov	r4,r2
 8007d8c:	e17ff917 	ldw	r5,-28(fp)
 8007d90:	80066240 	call	8006624 <invalidate>

	free(result);
 8007d94:	e13ff917 	ldw	r4,-28(fp)
 8007d98:	800bd440 	call	800bd44 <free>
}
 8007d9c:	e037883a 	mov	sp,fp
 8007da0:	dfc00117 	ldw	ra,4(sp)
 8007da4:	df000017 	ldw	fp,0(sp)
 8007da8:	dec00204 	addi	sp,sp,8
 8007dac:	f800283a 	ret

08007db0 <setWidth>:

void setWidth(void* _self, int width)
{
 8007db0:	defff604 	addi	sp,sp,-40
 8007db4:	dfc00915 	stw	ra,36(sp)
 8007db8:	df000815 	stw	fp,32(sp)
 8007dbc:	df000804 	addi	fp,sp,32
 8007dc0:	e13ffe15 	stw	r4,-8(fp)
 8007dc4:	e17fff15 	stw	r5,-4(fp)
	struct View* self = _self;
 8007dc8:	e0bffe17 	ldw	r2,-8(fp)
 8007dcc:	e0bff815 	stw	r2,-32(fp)
	self -> width = width;
 8007dd0:	e0bff817 	ldw	r2,-32(fp)
 8007dd4:	e0ffff17 	ldw	r3,-4(fp)
 8007dd8:	10c00315 	stw	r3,12(r2)

	struct Bounds newRegion;
	newRegion.x1 = self-> x;
 8007ddc:	e0bff817 	ldw	r2,-32(fp)
 8007de0:	10800117 	ldw	r2,4(r2)
 8007de4:	e0bffa15 	stw	r2,-24(fp)
	newRegion.y1 = self -> y;
 8007de8:	e0bff817 	ldw	r2,-32(fp)
 8007dec:	10800217 	ldw	r2,8(r2)
 8007df0:	e0bffc15 	stw	r2,-16(fp)
	newRegion.x2 = self -> x + self -> width;
 8007df4:	e0bff817 	ldw	r2,-32(fp)
 8007df8:	10c00117 	ldw	r3,4(r2)
 8007dfc:	e0bff817 	ldw	r2,-32(fp)
 8007e00:	10800317 	ldw	r2,12(r2)
 8007e04:	1885883a 	add	r2,r3,r2
 8007e08:	e0bffb15 	stw	r2,-20(fp)
	newRegion.y2 = self -> y + self -> height;
 8007e0c:	e0bff817 	ldw	r2,-32(fp)
 8007e10:	10c00217 	ldw	r3,8(r2)
 8007e14:	e0bff817 	ldw	r2,-32(fp)
 8007e18:	10800417 	ldw	r2,16(r2)
 8007e1c:	1885883a 	add	r2,r3,r2
 8007e20:	e0bffd15 	stw	r2,-12(fp)

	struct Bounds* result = merge(self -> absBounds, &newRegion);
 8007e24:	e0bff817 	ldw	r2,-32(fp)
 8007e28:	10c00517 	ldw	r3,20(r2)
 8007e2c:	e0bffa04 	addi	r2,fp,-24
 8007e30:	1809883a 	mov	r4,r3
 8007e34:	100b883a 	mov	r5,r2
 8007e38:	80003740 	call	8000374 <merge>
 8007e3c:	e0bff915 	stw	r2,-28(fp)

	if(self->renderer) invalidate(self->renderer, result);
 8007e40:	e0bff817 	ldw	r2,-32(fp)
 8007e44:	10800a17 	ldw	r2,40(r2)
 8007e48:	10000526 	beq	r2,zero,8007e60 <setWidth+0xb0>
 8007e4c:	e0bff817 	ldw	r2,-32(fp)
 8007e50:	10800a17 	ldw	r2,40(r2)
 8007e54:	1009883a 	mov	r4,r2
 8007e58:	e17ff917 	ldw	r5,-28(fp)
 8007e5c:	80066240 	call	8006624 <invalidate>

	free(result);
 8007e60:	e13ff917 	ldw	r4,-28(fp)
 8007e64:	800bd440 	call	800bd44 <free>
}
 8007e68:	e037883a 	mov	sp,fp
 8007e6c:	dfc00117 	ldw	ra,4(sp)
 8007e70:	df000017 	ldw	fp,0(sp)
 8007e74:	dec00204 	addi	sp,sp,8
 8007e78:	f800283a 	ret

08007e7c <setHeight>:

void setHeight(void* _self, int height)
{
 8007e7c:	defff604 	addi	sp,sp,-40
 8007e80:	dfc00915 	stw	ra,36(sp)
 8007e84:	df000815 	stw	fp,32(sp)
 8007e88:	df000804 	addi	fp,sp,32
 8007e8c:	e13ffe15 	stw	r4,-8(fp)
 8007e90:	e17fff15 	stw	r5,-4(fp)
	struct View* self = _self;
 8007e94:	e0bffe17 	ldw	r2,-8(fp)
 8007e98:	e0bff815 	stw	r2,-32(fp)
	self -> height = height;
 8007e9c:	e0bff817 	ldw	r2,-32(fp)
 8007ea0:	e0ffff17 	ldw	r3,-4(fp)
 8007ea4:	10c00415 	stw	r3,16(r2)

	struct Bounds newRegion;
	newRegion.x1 = self-> x;
 8007ea8:	e0bff817 	ldw	r2,-32(fp)
 8007eac:	10800117 	ldw	r2,4(r2)
 8007eb0:	e0bffa15 	stw	r2,-24(fp)
	newRegion.y1 = self -> y;
 8007eb4:	e0bff817 	ldw	r2,-32(fp)
 8007eb8:	10800217 	ldw	r2,8(r2)
 8007ebc:	e0bffc15 	stw	r2,-16(fp)
	newRegion.x2 = self -> x + self -> width;
 8007ec0:	e0bff817 	ldw	r2,-32(fp)
 8007ec4:	10c00117 	ldw	r3,4(r2)
 8007ec8:	e0bff817 	ldw	r2,-32(fp)
 8007ecc:	10800317 	ldw	r2,12(r2)
 8007ed0:	1885883a 	add	r2,r3,r2
 8007ed4:	e0bffb15 	stw	r2,-20(fp)
	newRegion.y2 = self -> y + self -> height;
 8007ed8:	e0bff817 	ldw	r2,-32(fp)
 8007edc:	10c00217 	ldw	r3,8(r2)
 8007ee0:	e0bff817 	ldw	r2,-32(fp)
 8007ee4:	10800417 	ldw	r2,16(r2)
 8007ee8:	1885883a 	add	r2,r3,r2
 8007eec:	e0bffd15 	stw	r2,-12(fp)

	struct Bounds* result = merge(self -> absBounds, &newRegion);
 8007ef0:	e0bff817 	ldw	r2,-32(fp)
 8007ef4:	10c00517 	ldw	r3,20(r2)
 8007ef8:	e0bffa04 	addi	r2,fp,-24
 8007efc:	1809883a 	mov	r4,r3
 8007f00:	100b883a 	mov	r5,r2
 8007f04:	80003740 	call	8000374 <merge>
 8007f08:	e0bff915 	stw	r2,-28(fp)

	if(self->renderer) invalidate(self->renderer, result);
 8007f0c:	e0bff817 	ldw	r2,-32(fp)
 8007f10:	10800a17 	ldw	r2,40(r2)
 8007f14:	10000526 	beq	r2,zero,8007f2c <setHeight+0xb0>
 8007f18:	e0bff817 	ldw	r2,-32(fp)
 8007f1c:	10800a17 	ldw	r2,40(r2)
 8007f20:	1009883a 	mov	r4,r2
 8007f24:	e17ff917 	ldw	r5,-28(fp)
 8007f28:	80066240 	call	8006624 <invalidate>

	free(result);
 8007f2c:	e13ff917 	ldw	r4,-28(fp)
 8007f30:	800bd440 	call	800bd44 <free>
}
 8007f34:	e037883a 	mov	sp,fp
 8007f38:	dfc00117 	ldw	ra,4(sp)
 8007f3c:	df000017 	ldw	fp,0(sp)
 8007f40:	dec00204 	addi	sp,sp,8
 8007f44:	f800283a 	ret

08007f48 <setVisible>:

void setVisible(void* _self, int visible)
{
 8007f48:	defffb04 	addi	sp,sp,-20
 8007f4c:	dfc00415 	stw	ra,16(sp)
 8007f50:	df000315 	stw	fp,12(sp)
 8007f54:	df000304 	addi	fp,sp,12
 8007f58:	e13ffe15 	stw	r4,-8(fp)
 8007f5c:	e17fff15 	stw	r5,-4(fp)
	struct View* self = _self;
 8007f60:	e0bffe17 	ldw	r2,-8(fp)
 8007f64:	e0bffd15 	stw	r2,-12(fp)
	if(self->visible != visible)
 8007f68:	e0bffd17 	ldw	r2,-12(fp)
 8007f6c:	10c00b17 	ldw	r3,44(r2)
 8007f70:	e0bfff17 	ldw	r2,-4(fp)
 8007f74:	18800a26 	beq	r3,r2,8007fa0 <setVisible+0x58>
	{
		self->visible = visible;
 8007f78:	e0bffd17 	ldw	r2,-12(fp)
 8007f7c:	e0ffff17 	ldw	r3,-4(fp)
 8007f80:	10c00b15 	stw	r3,44(r2)
		invalidate(self->renderer, self->absBounds);
 8007f84:	e0bffd17 	ldw	r2,-12(fp)
 8007f88:	10c00a17 	ldw	r3,40(r2)
 8007f8c:	e0bffd17 	ldw	r2,-12(fp)
 8007f90:	10800517 	ldw	r2,20(r2)
 8007f94:	1809883a 	mov	r4,r3
 8007f98:	100b883a 	mov	r5,r2
 8007f9c:	80066240 	call	8006624 <invalidate>
	}
}
 8007fa0:	e037883a 	mov	sp,fp
 8007fa4:	dfc00117 	ldw	ra,4(sp)
 8007fa8:	df000017 	ldw	fp,0(sp)
 8007fac:	dec00204 	addi	sp,sp,8
 8007fb0:	f800283a 	ret

08007fb4 <attachView>:

void attachView(void* _self, void* view)
{
 8007fb4:	defffa04 	addi	sp,sp,-24
 8007fb8:	dfc00515 	stw	ra,20(sp)
 8007fbc:	df000415 	stw	fp,16(sp)
 8007fc0:	df000404 	addi	fp,sp,16
 8007fc4:	e13ffe15 	stw	r4,-8(fp)
 8007fc8:	e17fff15 	stw	r5,-4(fp)
	struct View* self = _self;
 8007fcc:	e0bffe17 	ldw	r2,-8(fp)
 8007fd0:	e0bffc15 	stw	r2,-16(fp)

	setRenderer(view, self->renderer);
 8007fd4:	e0bffc17 	ldw	r2,-16(fp)
 8007fd8:	10800a17 	ldw	r2,40(r2)
 8007fdc:	e13fff17 	ldw	r4,-4(fp)
 8007fe0:	100b883a 	mov	r5,r2
 8007fe4:	80081340 	call	8008134 <setRenderer>
	measure(self, view);
 8007fe8:	e13ffc17 	ldw	r4,-16(fp)
 8007fec:	e17fff17 	ldw	r5,-4(fp)
 8007ff0:	8007b7c0 	call	8007b7c <measure>

	struct ChildView* child = malloc(sizeof(struct ChildView));
 8007ff4:	01000304 	movi	r4,12
 8007ff8:	800bd300 	call	800bd30 <malloc>
 8007ffc:	e0bffd15 	stw	r2,-12(fp)
	child -> next = 0;
 8008000:	e0bffd17 	ldw	r2,-12(fp)
 8008004:	10000015 	stw	zero,0(r2)
	child -> prev = 0;
 8008008:	e0bffd17 	ldw	r2,-12(fp)
 800800c:	10000115 	stw	zero,4(r2)
	child -> view = view;
 8008010:	e0bffd17 	ldw	r2,-12(fp)
 8008014:	e0ffff17 	ldw	r3,-4(fp)
 8008018:	10c00215 	stw	r3,8(r2)

	if(self -> viewTail == 0) {
 800801c:	e0bffc17 	ldw	r2,-16(fp)
 8008020:	10800917 	ldw	r2,36(r2)
 8008024:	1000081e 	bne	r2,zero,8008048 <attachView+0x94>
		self -> viewHead = self -> viewTail = child;
 8008028:	e0bffc17 	ldw	r2,-16(fp)
 800802c:	e0fffd17 	ldw	r3,-12(fp)
 8008030:	10c00915 	stw	r3,36(r2)
 8008034:	e0bffc17 	ldw	r2,-16(fp)
 8008038:	10c00917 	ldw	r3,36(r2)
 800803c:	e0bffc17 	ldw	r2,-16(fp)
 8008040:	10c00815 	stw	r3,32(r2)
 8008044:	00000b06 	br	8008074 <attachView+0xc0>
	} else {
		self -> viewTail -> next = child;
 8008048:	e0bffc17 	ldw	r2,-16(fp)
 800804c:	10800917 	ldw	r2,36(r2)
 8008050:	e0fffd17 	ldw	r3,-12(fp)
 8008054:	10c00015 	stw	r3,0(r2)
		child -> prev = self -> viewTail;
 8008058:	e0bffc17 	ldw	r2,-16(fp)
 800805c:	10c00917 	ldw	r3,36(r2)
 8008060:	e0bffd17 	ldw	r2,-12(fp)
 8008064:	10c00115 	stw	r3,4(r2)
		self -> viewTail = child;
 8008068:	e0bffc17 	ldw	r2,-16(fp)
 800806c:	e0fffd17 	ldw	r3,-12(fp)
 8008070:	10c00915 	stw	r3,36(r2)
	}
}
 8008074:	e037883a 	mov	sp,fp
 8008078:	dfc00117 	ldw	ra,4(sp)
 800807c:	df000017 	ldw	fp,0(sp)
 8008080:	dec00204 	addi	sp,sp,8
 8008084:	f800283a 	ret

08008088 <addEventListener>:

void addEventListener(void* _self, int type, int (*callback)())
{
 8008088:	defff904 	addi	sp,sp,-28
 800808c:	dfc00615 	stw	ra,24(sp)
 8008090:	df000515 	stw	fp,20(sp)
 8008094:	df000504 	addi	fp,sp,20
 8008098:	e13ffd15 	stw	r4,-12(fp)
 800809c:	e17ffe15 	stw	r5,-8(fp)
 80080a0:	e1bfff15 	stw	r6,-4(fp)
	struct View* self = _self;
 80080a4:	e0bffd17 	ldw	r2,-12(fp)
 80080a8:	e0bffb15 	stw	r2,-20(fp)

	struct EventListener* child = malloc(sizeof(struct EventListener));
 80080ac:	01000304 	movi	r4,12
 80080b0:	800bd300 	call	800bd30 <malloc>
 80080b4:	e0bffc15 	stw	r2,-16(fp)
	child -> type = type;
 80080b8:	e0bffc17 	ldw	r2,-16(fp)
 80080bc:	e0fffe17 	ldw	r3,-8(fp)
 80080c0:	10c00115 	stw	r3,4(r2)
	child -> callback = callback;
 80080c4:	e0bffc17 	ldw	r2,-16(fp)
 80080c8:	e0ffff17 	ldw	r3,-4(fp)
 80080cc:	10c00215 	stw	r3,8(r2)
	child -> next = 0;
 80080d0:	e0bffc17 	ldw	r2,-16(fp)
 80080d4:	10000015 	stw	zero,0(r2)

	if(self -> listenerTail == 0) {
 80080d8:	e0bffb17 	ldw	r2,-20(fp)
 80080dc:	10800717 	ldw	r2,28(r2)
 80080e0:	1000081e 	bne	r2,zero,8008104 <addEventListener+0x7c>
		self -> listenerHead = self -> listenerTail = child;
 80080e4:	e0bffb17 	ldw	r2,-20(fp)
 80080e8:	e0fffc17 	ldw	r3,-16(fp)
 80080ec:	10c00715 	stw	r3,28(r2)
 80080f0:	e0bffb17 	ldw	r2,-20(fp)
 80080f4:	10c00717 	ldw	r3,28(r2)
 80080f8:	e0bffb17 	ldw	r2,-20(fp)
 80080fc:	10c00615 	stw	r3,24(r2)
 8008100:	00000706 	br	8008120 <addEventListener+0x98>
	} else {
		self -> listenerTail -> next = child;
 8008104:	e0bffb17 	ldw	r2,-20(fp)
 8008108:	10800717 	ldw	r2,28(r2)
 800810c:	e0fffc17 	ldw	r3,-16(fp)
 8008110:	10c00015 	stw	r3,0(r2)
		self -> listenerTail = child;
 8008114:	e0bffb17 	ldw	r2,-20(fp)
 8008118:	e0fffc17 	ldw	r3,-16(fp)
 800811c:	10c00715 	stw	r3,28(r2)
	}
}
 8008120:	e037883a 	mov	sp,fp
 8008124:	dfc00117 	ldw	ra,4(sp)
 8008128:	df000017 	ldw	fp,0(sp)
 800812c:	dec00204 	addi	sp,sp,8
 8008130:	f800283a 	ret

08008134 <setRenderer>:

void setRenderer(void* _self, struct Renderer* renderer)
{
 8008134:	defffa04 	addi	sp,sp,-24
 8008138:	dfc00515 	stw	ra,20(sp)
 800813c:	df000415 	stw	fp,16(sp)
 8008140:	df000404 	addi	fp,sp,16
 8008144:	e13ffe15 	stw	r4,-8(fp)
 8008148:	e17fff15 	stw	r5,-4(fp)
	struct View* self = _self;
 800814c:	e0bffe17 	ldw	r2,-8(fp)
 8008150:	e0bffc15 	stw	r2,-16(fp)
	self -> renderer = renderer;
 8008154:	e0bffc17 	ldw	r2,-16(fp)
 8008158:	e0ffff17 	ldw	r3,-4(fp)
 800815c:	10c00a15 	stw	r3,40(r2)

	struct ChildView* next = self->viewHead;
 8008160:	e0bffc17 	ldw	r2,-16(fp)
 8008164:	10800817 	ldw	r2,32(r2)
 8008168:	e0bffd15 	stw	r2,-12(fp)
	while(next)
 800816c:	00000306 	br	800817c <setRenderer+0x48>
	{
		setRenderer(self, renderer);
 8008170:	e13ffc17 	ldw	r4,-16(fp)
 8008174:	e17fff17 	ldw	r5,-4(fp)
 8008178:	80081340 	call	8008134 <setRenderer>
{
	struct View* self = _self;
	self -> renderer = renderer;

	struct ChildView* next = self->viewHead;
	while(next)
 800817c:	e0bffd17 	ldw	r2,-12(fp)
 8008180:	103ffb1e 	bne	r2,zero,8008170 <__alt_data_end+0xfc008170>
	{
		setRenderer(self, renderer);
	}
}
 8008184:	e037883a 	mov	sp,fp
 8008188:	dfc00117 	ldw	ra,4(sp)
 800818c:	df000017 	ldw	fp,0(sp)
 8008190:	dec00204 	addi	sp,sp,8
 8008194:	f800283a 	ret

08008198 <ViewClass_ctor>:

static void* ViewClass_ctor(void* _self, va_list* app) {
 8008198:	defff804 	addi	sp,sp,-32
 800819c:	dfc00715 	stw	ra,28(sp)
 80081a0:	df000615 	stw	fp,24(sp)
 80081a4:	df000604 	addi	fp,sp,24
 80081a8:	e13ffe15 	stw	r4,-8(fp)
 80081ac:	e17fff15 	stw	r5,-4(fp)
	struct ViewClass* self = super_ctor(ViewClass, _self, app);
 80081b0:	d0a71f17 	ldw	r2,-25476(gp)
 80081b4:	1009883a 	mov	r4,r2
 80081b8:	e17ffe17 	ldw	r5,-8(fp)
 80081bc:	e1bfff17 	ldw	r6,-4(fp)
 80081c0:	80054180 	call	8005418 <super_ctor>
 80081c4:	e0bffa15 	stw	r2,-24(fp)
	typedef void (*voidf) ();
	voidf selector;

#ifdef va_copy
	va_list ap;
	va_copy(ap, *app);
 80081c8:	e0bfff17 	ldw	r2,-4(fp)
 80081cc:	10800017 	ldw	r2,0(r2)
 80081d0:	e0bffd15 	stw	r2,-12(fp)
#else
	va_list ap = *app;
#endif

	while((selector = va_arg(ap, voidf)))
 80081d4:	00001506 	br	800822c <ViewClass_ctor+0x94>
	{
		voidf method = va_arg(ap, voidf);
 80081d8:	e0bffd17 	ldw	r2,-12(fp)
 80081dc:	10c00104 	addi	r3,r2,4
 80081e0:	e0fffd15 	stw	r3,-12(fp)
 80081e4:	10800017 	ldw	r2,0(r2)
 80081e8:	e0bffc15 	stw	r2,-16(fp)

		if(selector == (voidf) draw)
 80081ec:	e0fffb17 	ldw	r3,-20(fp)
 80081f0:	00820034 	movhi	r2,2048
 80081f4:	109e8504 	addi	r2,r2,31252
 80081f8:	1880041e 	bne	r3,r2,800820c <ViewClass_ctor+0x74>
			* (voidf*) & self->draw = method;
 80081fc:	e0bffa17 	ldw	r2,-24(fp)
 8008200:	10800704 	addi	r2,r2,28
 8008204:	e0fffc17 	ldw	r3,-16(fp)
 8008208:	10c00015 	stw	r3,0(r2)

		if(selector == (voidf) measure)
 800820c:	e0fffb17 	ldw	r3,-20(fp)
 8008210:	00820034 	movhi	r2,2048
 8008214:	109edf04 	addi	r2,r2,31612
 8008218:	1880041e 	bne	r3,r2,800822c <ViewClass_ctor+0x94>
							* (voidf*) & self->measure = method;
 800821c:	e0bffa17 	ldw	r2,-24(fp)
 8008220:	10800804 	addi	r2,r2,32
 8008224:	e0fffc17 	ldw	r3,-16(fp)
 8008228:	10c00015 	stw	r3,0(r2)
	va_copy(ap, *app);
#else
	va_list ap = *app;
#endif

	while((selector = va_arg(ap, voidf)))
 800822c:	e0bffd17 	ldw	r2,-12(fp)
 8008230:	10c00104 	addi	r3,r2,4
 8008234:	e0fffd15 	stw	r3,-12(fp)
 8008238:	10800017 	ldw	r2,0(r2)
 800823c:	e0bffb15 	stw	r2,-20(fp)
 8008240:	e0bffb17 	ldw	r2,-20(fp)
 8008244:	103fe41e 	bne	r2,zero,80081d8 <__alt_data_end+0xfc0081d8>

#ifdef va_copy
	va_end(ap);
#endif

	return self;
 8008248:	e0bffa17 	ldw	r2,-24(fp)
}
 800824c:	e037883a 	mov	sp,fp
 8008250:	dfc00117 	ldw	ra,4(sp)
 8008254:	df000017 	ldw	fp,0(sp)
 8008258:	dec00204 	addi	sp,sp,8
 800825c:	f800283a 	ret

08008260 <initView>:

const void* ViewClass, *View;

void initView()
{
 8008260:	defff704 	addi	sp,sp,-36
 8008264:	dfc00815 	stw	ra,32(sp)
 8008268:	df000715 	stw	fp,28(sp)
 800826c:	df000704 	addi	fp,sp,28
	if(!ViewClass)
 8008270:	d0a71f17 	ldw	r2,-25476(gp)
 8008274:	1000131e 	bne	r2,zero,80082c4 <initView+0x64>
		ViewClass = new(Class, "ViewClass", Class, sizeof(struct ViewClass),
 8008278:	008200f4 	movhi	r2,2051
 800827c:	10a3df04 	addi	r2,r2,-28804
 8008280:	11000017 	ldw	r4,0(r2)
 8008284:	008200f4 	movhi	r2,2051
 8008288:	10a3df04 	addi	r2,r2,-28804
 800828c:	10c00017 	ldw	r3,0(r2)
 8008290:	00820034 	movhi	r2,2048
 8008294:	1094e904 	addi	r2,r2,21412
 8008298:	d8800015 	stw	r2,0(sp)
 800829c:	00820074 	movhi	r2,2049
 80082a0:	10a06604 	addi	r2,r2,-32360
 80082a4:	d8800115 	stw	r2,4(sp)
 80082a8:	d8000215 	stw	zero,8(sp)
 80082ac:	014200b4 	movhi	r5,2050
 80082b0:	295bed04 	addi	r5,r5,28596
 80082b4:	180d883a 	mov	r6,r3
 80082b8:	01c00904 	movi	r7,36
 80082bc:	80052900 	call	8005290 <new>
 80082c0:	d0a71f15 	stw	r2,-25476(gp)
						ctor, ViewClass_ctor, 0);
	if(!View)
 80082c4:	d0a71e17 	ldw	r2,-25480(gp)
 80082c8:	10001d1e 	bne	r2,zero,8008340 <initView+0xe0>
		View = new(ViewClass, "View", Object, sizeof(struct View),
 80082cc:	d1271f17 	ldw	r4,-25476(gp)
 80082d0:	008200f4 	movhi	r2,2051
 80082d4:	10a3de04 	addi	r2,r2,-28808
 80082d8:	10c00017 	ldw	r3,0(r2)
 80082dc:	00820034 	movhi	r2,2048
 80082e0:	1094e904 	addi	r2,r2,21412
 80082e4:	d8800015 	stw	r2,0(sp)
 80082e8:	00820034 	movhi	r2,2048
 80082ec:	109e4404 	addi	r2,r2,30992
 80082f0:	d8800115 	stw	r2,4(sp)
 80082f4:	00820034 	movhi	r2,2048
 80082f8:	109e8504 	addi	r2,r2,31252
 80082fc:	d8800215 	stw	r2,8(sp)
 8008300:	00820034 	movhi	r2,2048
 8008304:	109e7c04 	addi	r2,r2,31216
 8008308:	d8800315 	stw	r2,12(sp)
 800830c:	00820034 	movhi	r2,2048
 8008310:	109edf04 	addi	r2,r2,31612
 8008314:	d8800415 	stw	r2,16(sp)
 8008318:	00820034 	movhi	r2,2048
 800831c:	109eac04 	addi	r2,r2,31408
 8008320:	d8800515 	stw	r2,20(sp)
 8008324:	d8000615 	stw	zero,24(sp)
 8008328:	014200b4 	movhi	r5,2050
 800832c:	295bf004 	addi	r5,r5,28608
 8008330:	180d883a 	mov	r6,r3
 8008334:	01c00c04 	movi	r7,48
 8008338:	80052900 	call	8005290 <new>
 800833c:	d0a71e15 	stw	r2,-25480(gp)
				   ctor, View_ctor, draw, View_draw, measure, View_measure, 0);
}
 8008340:	e037883a 	mov	sp,fp
 8008344:	dfc00117 	ldw	ra,4(sp)
 8008348:	df000017 	ldw	fp,0(sp)
 800834c:	dec00204 	addi	sp,sp,8
 8008350:	f800283a 	ret

08008354 <volume_control>:
#include <stdio.h>
#include <math.h>
#include "Volume.h"


void volume_control(char* data_in, short* reading_in, short* reading_in_prev, short* reading_in_prev_1, short* reading_in_next) {
 8008354:	defffa04 	addi	sp,sp,-24
 8008358:	dfc00515 	stw	ra,20(sp)
 800835c:	df000415 	stw	fp,16(sp)
 8008360:	df000404 	addi	fp,sp,16
 8008364:	e13ffc15 	stw	r4,-16(fp)
 8008368:	e17ffd15 	stw	r5,-12(fp)
 800836c:	e1bffe15 	stw	r6,-8(fp)
 8008370:	e1ffff15 	stw	r7,-4(fp)
	printf("volume control\n");
 8008374:	010200b4 	movhi	r4,2050
 8008378:	211bf204 	addi	r4,r4,28616
 800837c:	800c89c0 	call	800c89c <puts>
		printf("while loop\n");
 8008380:	010200b4 	movhi	r4,2050
 8008384:	211bf604 	addi	r4,r4,28632
 8008388:	800c89c0 	call	800c89c <puts>
		pot = *reading_in;
 800838c:	0007883a 	mov	r3,zero
 8008390:	e0bffd17 	ldw	r2,-12(fp)
 8008394:	1080000b 	ldhu	r2,0(r2)
 8008398:	1880000d 	sth	r2,0(r3)
		*reading_in_next = getSensorReading();
 800839c:	80085e40 	call	80085e4 <getSensorReading>
 80083a0:	1007883a 	mov	r3,r2
 80083a4:	e0800217 	ldw	r2,8(fp)
 80083a8:	10c0000d 	sth	r3,0(r2)
		printf("reading_in_next :%d\n", *reading_in_next);
 80083ac:	e0800217 	ldw	r2,8(fp)
 80083b0:	1080000b 	ldhu	r2,0(r2)
 80083b4:	10bfffcc 	andi	r2,r2,65535
 80083b8:	10a0001c 	xori	r2,r2,32768
 80083bc:	10a00004 	addi	r2,r2,-32768
 80083c0:	010200b4 	movhi	r4,2050
 80083c4:	211bf904 	addi	r4,r4,28644
 80083c8:	100b883a 	mov	r5,r2
 80083cc:	800c7880 	call	800c788 <printf>
		printf("reading_in_prev_1 :%d\n", *reading_in_prev_1);
 80083d0:	e0bfff17 	ldw	r2,-4(fp)
 80083d4:	1080000b 	ldhu	r2,0(r2)
 80083d8:	10bfffcc 	andi	r2,r2,65535
 80083dc:	10a0001c 	xori	r2,r2,32768
 80083e0:	10a00004 	addi	r2,r2,-32768
 80083e4:	010200b4 	movhi	r4,2050
 80083e8:	211bff04 	addi	r4,r4,28668
 80083ec:	100b883a 	mov	r5,r2
 80083f0:	800c7880 	call	800c788 <printf>
		printf("Absolute value of reading_in_next and reading_in_prev1: %d\n", abs(*reading_in_next - *reading_in_prev_1));
 80083f4:	e0800217 	ldw	r2,8(fp)
 80083f8:	1080000b 	ldhu	r2,0(r2)
 80083fc:	10ffffcc 	andi	r3,r2,65535
 8008400:	18e0001c 	xori	r3,r3,32768
 8008404:	18e00004 	addi	r3,r3,-32768
 8008408:	e0bfff17 	ldw	r2,-4(fp)
 800840c:	1080000b 	ldhu	r2,0(r2)
 8008410:	10bfffcc 	andi	r2,r2,65535
 8008414:	10a0001c 	xori	r2,r2,32768
 8008418:	10a00004 	addi	r2,r2,-32768
 800841c:	1885c83a 	sub	r2,r3,r2
 8008420:	1000010e 	bge	r2,zero,8008428 <volume_control+0xd4>
 8008424:	0085c83a 	sub	r2,zero,r2
 8008428:	010200b4 	movhi	r4,2050
 800842c:	211c0504 	addi	r4,r4,28692
 8008430:	100b883a 	mov	r5,r2
 8008434:	800c7880 	call	800c788 <printf>
		if(abs(*reading_in_next - *reading_in_prev_1) > 10) {
 8008438:	e0800217 	ldw	r2,8(fp)
 800843c:	1080000b 	ldhu	r2,0(r2)
 8008440:	10ffffcc 	andi	r3,r2,65535
 8008444:	18e0001c 	xori	r3,r3,32768
 8008448:	18e00004 	addi	r3,r3,-32768
 800844c:	e0bfff17 	ldw	r2,-4(fp)
 8008450:	1080000b 	ldhu	r2,0(r2)
 8008454:	10bfffcc 	andi	r2,r2,65535
 8008458:	10a0001c 	xori	r2,r2,32768
 800845c:	10a00004 	addi	r2,r2,-32768
 8008460:	1885c83a 	sub	r2,r3,r2
 8008464:	1000010e 	bge	r2,zero,800846c <volume_control+0x118>
 8008468:	0085c83a 	sub	r2,zero,r2
 800846c:	108002d0 	cmplti	r2,r2,11
 8008470:	1000181e 	bne	r2,zero,80084d4 <volume_control+0x180>
			if(*reading_in_next > *reading_in_prev_1) *reading_in = *reading_in_next;
 8008474:	e0800217 	ldw	r2,8(fp)
 8008478:	1100000b 	ldhu	r4,0(r2)
 800847c:	e0bfff17 	ldw	r2,-4(fp)
 8008480:	10c0000b 	ldhu	r3,0(r2)
 8008484:	20bfffcc 	andi	r2,r4,65535
 8008488:	10a0001c 	xori	r2,r2,32768
 800848c:	10a00004 	addi	r2,r2,-32768
 8008490:	18ffffcc 	andi	r3,r3,65535
 8008494:	18e0001c 	xori	r3,r3,32768
 8008498:	18e00004 	addi	r3,r3,-32768
 800849c:	1880050e 	bge	r3,r2,80084b4 <volume_control+0x160>
 80084a0:	e0800217 	ldw	r2,8(fp)
 80084a4:	10c0000b 	ldhu	r3,0(r2)
 80084a8:	e0bffd17 	ldw	r2,-12(fp)
 80084ac:	10c0000d 	sth	r3,0(r2)
 80084b0:	00000c06 	br	80084e4 <volume_control+0x190>
			else {
				printf("reset next reading to prev_1\n");
 80084b4:	010200b4 	movhi	r4,2050
 80084b8:	211c1404 	addi	r4,r4,28752
 80084bc:	800c89c0 	call	800c89c <puts>
				*reading_in = *reading_in_prev_1;
 80084c0:	e0bfff17 	ldw	r2,-4(fp)
 80084c4:	10c0000b 	ldhu	r3,0(r2)
 80084c8:	e0bffd17 	ldw	r2,-12(fp)
 80084cc:	10c0000d 	sth	r3,0(r2)
 80084d0:	00000406 	br	80084e4 <volume_control+0x190>
			}
		}
		else
			*reading_in = *reading_in_next;
 80084d4:	e0800217 	ldw	r2,8(fp)
 80084d8:	10c0000b 	ldhu	r3,0(r2)
 80084dc:	e0bffd17 	ldw	r2,-12(fp)
 80084e0:	10c0000d 	sth	r3,0(r2)
		printf("reading_in_maxdiff :%d\n", *reading_in);
 80084e4:	e0bffd17 	ldw	r2,-12(fp)
 80084e8:	1080000b 	ldhu	r2,0(r2)
 80084ec:	10bfffcc 	andi	r2,r2,65535
 80084f0:	10a0001c 	xori	r2,r2,32768
 80084f4:	10a00004 	addi	r2,r2,-32768
 80084f8:	010200b4 	movhi	r4,2050
 80084fc:	211c1c04 	addi	r4,r4,28784
 8008500:	100b883a 	mov	r5,r2
 8008504:	800c7880 	call	800c788 <printf>
		//reading_in = (short) (reading_in_next + reading_in_prev) / 2;
		if(abs(*reading_in) > 500 ) *reading_in = *reading_in_prev_1;
 8008508:	e0bffd17 	ldw	r2,-12(fp)
 800850c:	1080000b 	ldhu	r2,0(r2)
 8008510:	10bfffcc 	andi	r2,r2,65535
 8008514:	10a0001c 	xori	r2,r2,32768
 8008518:	10a00004 	addi	r2,r2,-32768
 800851c:	1000010e 	bge	r2,zero,8008524 <volume_control+0x1d0>
 8008520:	0085c83a 	sub	r2,zero,r2
 8008524:	10807d50 	cmplti	r2,r2,501
 8008528:	1000041e 	bne	r2,zero,800853c <volume_control+0x1e8>
 800852c:	e0bfff17 	ldw	r2,-4(fp)
 8008530:	10c0000b 	ldhu	r3,0(r2)
 8008534:	e0bffd17 	ldw	r2,-12(fp)
 8008538:	10c0000d 	sth	r3,0(r2)
		printf("reading_in_capped :%d\n", *reading_in);
 800853c:	e0bffd17 	ldw	r2,-12(fp)
 8008540:	1080000b 	ldhu	r2,0(r2)
 8008544:	10bfffcc 	andi	r2,r2,65535
 8008548:	10a0001c 	xori	r2,r2,32768
 800854c:	10a00004 	addi	r2,r2,-32768
 8008550:	010200b4 	movhi	r4,2050
 8008554:	211c2204 	addi	r4,r4,28808
 8008558:	100b883a 	mov	r5,r2
 800855c:	800c7880 	call	800c788 <printf>
		*reading_in_prev_1 = *reading_in_prev;
 8008560:	e0bffe17 	ldw	r2,-8(fp)
 8008564:	10c0000b 	ldhu	r3,0(r2)
 8008568:	e0bfff17 	ldw	r2,-4(fp)
 800856c:	10c0000d 	sth	r3,0(r2)
		*reading_in_prev = *reading_in_next;
 8008570:	e0800217 	ldw	r2,8(fp)
 8008574:	10c0000b 	ldhu	r3,0(r2)
 8008578:	e0bffe17 	ldw	r2,-8(fp)
 800857c:	10c0000d 	sth	r3,0(r2)

}
 8008580:	e037883a 	mov	sp,fp
 8008584:	dfc00117 	ldw	ra,4(sp)
 8008588:	df000017 	ldw	fp,0(sp)
 800858c:	dec00204 	addi	sp,sp,8
 8008590:	f800283a 	ret

08008594 <Init_Volume>:

void Init_Volume(){
 8008594:	defffe04 	addi	sp,sp,-8
 8008598:	dfc00115 	stw	ra,4(sp)
 800859c:	df000015 	stw	fp,0(sp)
 80085a0:	d839883a 	mov	fp,sp
	printf("Init volume\n");
 80085a4:	010200b4 	movhi	r4,2050
 80085a8:	211c2804 	addi	r4,r4,28832
 80085ac:	800c89c0 	call	800c89c <puts>
	Baud = 0x05;
 80085b0:	00a10034 	movhi	r2,33792
 80085b4:	10808104 	addi	r2,r2,516
 80085b8:	00c00144 	movi	r3,5
 80085bc:	10c00005 	stb	r3,0(r2)
	Control = 0x15;
 80085c0:	00a10034 	movhi	r2,33792
 80085c4:	10808004 	addi	r2,r2,512
 80085c8:	00c00544 	movi	r3,21
 80085cc:	10c00005 	stb	r3,0(r2)
}
 80085d0:	e037883a 	mov	sp,fp
 80085d4:	dfc00117 	ldw	ra,4(sp)
 80085d8:	df000017 	ldw	fp,0(sp)
 80085dc:	dec00204 	addi	sp,sp,8
 80085e0:	f800283a 	ret

080085e4 <getSensorReading>:
short getSensorReading(){
 80085e4:	defffc04 	addi	sp,sp,-16
 80085e8:	dfc00315 	stw	ra,12(sp)
 80085ec:	df000215 	stw	fp,8(sp)
 80085f0:	df000204 	addi	fp,sp,8
	short data = 0;
 80085f4:	e03ffe0d 	sth	zero,-8(fp)
	char data_in = getCharArduino();
 80085f8:	80086600 	call	8008660 <getCharArduino>
 80085fc:	e0bffe85 	stb	r2,-6(fp)
	//if(data_in == 'N') return 350;
	short data_in_num = data_in - '0';
 8008600:	e0bffe87 	ldb	r2,-6(fp)
 8008604:	10bff404 	addi	r2,r2,-48
 8008608:	e0bfff0d 	sth	r2,-4(fp)
	while(data_in != ','){
 800860c:	00000b06 	br	800863c <getSensorReading+0x58>
		data = 10*data + (data_in_num);
 8008610:	e0bffe0b 	ldhu	r2,-8(fp)
 8008614:	108002a4 	muli	r2,r2,10
 8008618:	1007883a 	mov	r3,r2
 800861c:	e0bfff0b 	ldhu	r2,-4(fp)
 8008620:	1885883a 	add	r2,r3,r2
 8008624:	e0bffe0d 	sth	r2,-8(fp)
		data_in = getCharArduino();
 8008628:	80086600 	call	8008660 <getCharArduino>
 800862c:	e0bffe85 	stb	r2,-6(fp)
		//if(data_in == 'N') return 350;
		data_in_num = data_in - '0';
 8008630:	e0bffe87 	ldb	r2,-6(fp)
 8008634:	10bff404 	addi	r2,r2,-48
 8008638:	e0bfff0d 	sth	r2,-4(fp)
short getSensorReading(){
	short data = 0;
	char data_in = getCharArduino();
	//if(data_in == 'N') return 350;
	short data_in_num = data_in - '0';
	while(data_in != ','){
 800863c:	e0bffe87 	ldb	r2,-6(fp)
 8008640:	10800b18 	cmpnei	r2,r2,44
 8008644:	103ff21e 	bne	r2,zero,8008610 <__alt_data_end+0xfc008610>
		data = 10*data + (data_in_num);
		data_in = getCharArduino();
		//if(data_in == 'N') return 350;
		data_in_num = data_in - '0';
	}
	return data;
 8008648:	e0bffe0b 	ldhu	r2,-8(fp)
}
 800864c:	e037883a 	mov	sp,fp
 8008650:	dfc00117 	ldw	ra,4(sp)
 8008654:	df000017 	ldw	fp,0(sp)
 8008658:	dec00204 	addi	sp,sp,8
 800865c:	f800283a 	ret

08008660 <getCharArduino>:

char getCharArduino(){
 8008660:	defffe04 	addi	sp,sp,-8
 8008664:	df000115 	stw	fp,4(sp)
 8008668:	df000104 	addi	fp,sp,4
	int i = 0;
 800866c:	e03fff15 	stw	zero,-4(fp)
	while (!(Status & 0x1)) {
 8008670:	0001883a 	nop
 8008674:	00a10034 	movhi	r2,33792
 8008678:	10808004 	addi	r2,r2,512
 800867c:	10800003 	ldbu	r2,0(r2)
 8008680:	10803fcc 	andi	r2,r2,255
 8008684:	1080004c 	andi	r2,r2,1
 8008688:	103ffa26 	beq	r2,zero,8008674 <__alt_data_end+0xfc008674>
		//return 'N';
	}
	return RxData;
 800868c:	00a10034 	movhi	r2,33792
 8008690:	10808084 	addi	r2,r2,514
 8008694:	10800003 	ldbu	r2,0(r2)
}
 8008698:	e037883a 	mov	sp,fp
 800869c:	df000017 	ldw	fp,0(sp)
 80086a0:	dec00104 	addi	sp,sp,4
 80086a4:	f800283a 	ret

080086a8 <setVolume>:

void setVolume(){
 80086a8:	defffb04 	addi	sp,sp,-20
 80086ac:	dfc00415 	stw	ra,16(sp)
 80086b0:	df000315 	stw	fp,12(sp)
 80086b4:	df000304 	addi	fp,sp,12
	short reading = getSensorReading();
 80086b8:	80085e40 	call	80085e4 <getSensorReading>
 80086bc:	e0bffd0d 	sth	r2,-12(fp)
	short reading1 = getSensorReading();
 80086c0:	80085e40 	call	80085e4 <getSensorReading>
 80086c4:	e0bffd8d 	sth	r2,-10(fp)
	short reading2 = getSensorReading();
 80086c8:	80085e40 	call	80085e4 <getSensorReading>
 80086cc:	e0bffe0d 	sth	r2,-8(fp)

	char c = RxData;
 80086d0:	00a10034 	movhi	r2,33792
 80086d4:	10808084 	addi	r2,r2,514
 80086d8:	10800003 	ldbu	r2,0(r2)
 80086dc:	e0bffe85 	stb	r2,-6(fp)


	short average = (reading + reading1 + reading2)/3;
 80086e0:	e0fffd0f 	ldh	r3,-12(fp)
 80086e4:	e0bffd8f 	ldh	r2,-10(fp)
 80086e8:	1887883a 	add	r3,r3,r2
 80086ec:	e0bffe0f 	ldh	r2,-8(fp)
 80086f0:	1887883a 	add	r3,r3,r2
 80086f4:	008000c4 	movi	r2,3
 80086f8:	1885283a 	div	r2,r3,r2
 80086fc:	e0bfff0d 	sth	r2,-4(fp)

	if(reading > average){
 8008700:	e0bffd0f 	ldh	r2,-12(fp)
 8008704:	e0ffff0f 	ldh	r3,-4(fp)
 8008708:	1880040e 	bge	r3,r2,800871c <setVolume+0x74>
		pot = reading;
 800870c:	0007883a 	mov	r3,zero
 8008710:	e0bffd0b 	ldhu	r2,-12(fp)
 8008714:	1880000d 	sth	r2,0(r3)
 8008718:	00000d06 	br	8008750 <setVolume+0xa8>
	}
	else if(reading1 > average){
 800871c:	e0bffd8f 	ldh	r2,-10(fp)
 8008720:	e0ffff0f 	ldh	r3,-4(fp)
 8008724:	1880040e 	bge	r3,r2,8008738 <setVolume+0x90>
		pot = reading1;
 8008728:	0007883a 	mov	r3,zero
 800872c:	e0bffd8b 	ldhu	r2,-10(fp)
 8008730:	1880000d 	sth	r2,0(r3)
 8008734:	00000606 	br	8008750 <setVolume+0xa8>
	}
	else if(reading2 > average){
 8008738:	e0bffe0f 	ldh	r2,-8(fp)
 800873c:	e0ffff0f 	ldh	r3,-4(fp)
 8008740:	1880030e 	bge	r3,r2,8008750 <setVolume+0xa8>
		pot = reading2;
 8008744:	0007883a 	mov	r3,zero
 8008748:	e0bffe0b 	ldhu	r2,-8(fp)
 800874c:	1880000d 	sth	r2,0(r3)
	}

	//short finalValue = pot;
	//printf("Volume: %d\n", finalValue);
	usleep(10000);
 8008750:	0109c404 	movi	r4,10000
 8008754:	8019dac0 	call	8019dac <usleep>

}
 8008758:	e037883a 	mov	sp,fp
 800875c:	dfc00117 	ldw	ra,4(sp)
 8008760:	df000017 	ldw	fp,0(sp)
 8008764:	dec00204 	addi	sp,sp,8
 8008768:	f800283a 	ret

0800876c <Init_Wifi>:

  return 0;
}*/


void Init_Wifi(void){
 800876c:	defffe04 	addi	sp,sp,-8
 8008770:	dfc00115 	stw	ra,4(sp)
 8008774:	df000015 	stw	fp,0(sp)
 8008778:	d839883a 	mov	fp,sp
	 Wifi_Control = 0b00010101;
 800877c:	00a10034 	movhi	r2,33792
 8008780:	10808804 	addi	r2,r2,544
 8008784:	00c00544 	movi	r3,21
 8008788:	10c00005 	stb	r3,0(r2)
	 Wifi_Baud = 0x01;	//115k
 800878c:	00a10034 	movhi	r2,33792
 8008790:	10808904 	addi	r2,r2,548
 8008794:	00c00044 	movi	r3,1
 8008798:	10c00005 	stb	r3,0(r2)
	 printf("Init wifi\n");
 800879c:	010200b4 	movhi	r4,2050
 80087a0:	211c2b04 	addi	r4,r4,28844
 80087a4:	800c89c0 	call	800c89c <puts>
}
 80087a8:	e037883a 	mov	sp,fp
 80087ac:	dfc00117 	ldw	ra,4(sp)
 80087b0:	df000017 	ldw	fp,0(sp)
 80087b4:	dec00204 	addi	sp,sp,8
 80087b8:	f800283a 	ret

080087bc <putcharWifi>:

void putcharWifi(char c){
 80087bc:	defffc04 	addi	sp,sp,-16
 80087c0:	dfc00315 	stw	ra,12(sp)
 80087c4:	df000215 	stw	fp,8(sp)
 80087c8:	df000204 	addi	fp,sp,8
 80087cc:	2005883a 	mov	r2,r4
 80087d0:	e0bfff05 	stb	r2,-4(fp)

	while (!(Wifi_Status & 0x2));
 80087d4:	0001883a 	nop
 80087d8:	00a10034 	movhi	r2,33792
 80087dc:	10808804 	addi	r2,r2,544
 80087e0:	10800003 	ldbu	r2,0(r2)
 80087e4:	10803fcc 	andi	r2,r2,255
 80087e8:	1080008c 	andi	r2,r2,2
 80087ec:	103ffa26 	beq	r2,zero,80087d8 <__alt_data_end+0xfc0087d8>

	Wifi_TxData = c;
 80087f0:	00a10034 	movhi	r2,33792
 80087f4:	10808884 	addi	r2,r2,546
 80087f8:	e0ffff03 	ldbu	r3,-4(fp)
 80087fc:	10c00005 	stb	r3,0(r2)
	printf("%c", c);
 8008800:	e0bfff07 	ldb	r2,-4(fp)
 8008804:	1009883a 	mov	r4,r2
 8008808:	800c7cc0 	call	800c7cc <putchar>

	int i = 10000; //50000;
 800880c:	0089c404 	movi	r2,10000
 8008810:	e0bffe15 	stw	r2,-8(fp)
	while(i > 0){
 8008814:	00000306 	br	8008824 <putcharWifi+0x68>
		i--;
 8008818:	e0bffe17 	ldw	r2,-8(fp)
 800881c:	10bfffc4 	addi	r2,r2,-1
 8008820:	e0bffe15 	stw	r2,-8(fp)

	Wifi_TxData = c;
	printf("%c", c);

	int i = 10000; //50000;
	while(i > 0){
 8008824:	e0bffe17 	ldw	r2,-8(fp)
 8008828:	00bffb16 	blt	zero,r2,8008818 <__alt_data_end+0xfc008818>
		i--;
	}
}
 800882c:	e037883a 	mov	sp,fp
 8008830:	dfc00117 	ldw	ra,4(sp)
 8008834:	df000017 	ldw	fp,0(sp)
 8008838:	dec00204 	addi	sp,sp,8
 800883c:	f800283a 	ret

08008840 <getcharWifi>:

char getcharWifi(void){
 8008840:	deffff04 	addi	sp,sp,-4
 8008844:	df000015 	stw	fp,0(sp)
 8008848:	d839883a 	mov	fp,sp

	while (!(Wifi_Status & 0x1));
 800884c:	0001883a 	nop
 8008850:	00a10034 	movhi	r2,33792
 8008854:	10808804 	addi	r2,r2,544
 8008858:	10800003 	ldbu	r2,0(r2)
 800885c:	10803fcc 	andi	r2,r2,255
 8008860:	1080004c 	andi	r2,r2,1
 8008864:	103ffa26 	beq	r2,zero,8008850 <__alt_data_end+0xfc008850>

	return Wifi_RxData;
 8008868:	00a10034 	movhi	r2,33792
 800886c:	10808884 	addi	r2,r2,546
 8008870:	10800003 	ldbu	r2,0(r2)

}
 8008874:	e037883a 	mov	sp,fp
 8008878:	df000017 	ldw	fp,0(sp)
 800887c:	dec00104 	addi	sp,sp,4
 8008880:	f800283a 	ret

08008884 <waitWifi>:

void waitWifi(void){
 8008884:	defffb04 	addi	sp,sp,-20
 8008888:	dfc00415 	stw	ra,16(sp)
 800888c:	df000315 	stw	fp,12(sp)
 8008890:	df000304 	addi	fp,sp,12

	char command[] = "\r\n";
 8008894:	00828344 	movi	r2,2573
 8008898:	e0bfff0d 	sth	r2,-4(fp)
 800889c:	e03fff85 	stb	zero,-2(fp)
	int len = strlen(command);
 80088a0:	e0bfff04 	addi	r2,fp,-4
 80088a4:	1009883a 	mov	r4,r2
 80088a8:	800ca6c0 	call	800ca6c <strlen>
 80088ac:	e0bffe15 	stw	r2,-8(fp)
	int i = 0;
 80088b0:	e03ffd15 	stw	zero,-12(fp)
	for(i = 0; i < len; i++){
 80088b4:	e03ffd15 	stw	zero,-12(fp)
 80088b8:	00000c06 	br	80088ec <waitWifi+0x68>
		putcharWifi (command[i]);
 80088bc:	e0ffff04 	addi	r3,fp,-4
 80088c0:	e0bffd17 	ldw	r2,-12(fp)
 80088c4:	1885883a 	add	r2,r3,r2
 80088c8:	10800003 	ldbu	r2,0(r2)
 80088cc:	10803fcc 	andi	r2,r2,255
 80088d0:	1080201c 	xori	r2,r2,128
 80088d4:	10bfe004 	addi	r2,r2,-128
 80088d8:	1009883a 	mov	r4,r2
 80088dc:	80087bc0 	call	80087bc <putcharWifi>
void waitWifi(void){

	char command[] = "\r\n";
	int len = strlen(command);
	int i = 0;
	for(i = 0; i < len; i++){
 80088e0:	e0bffd17 	ldw	r2,-12(fp)
 80088e4:	10800044 	addi	r2,r2,1
 80088e8:	e0bffd15 	stw	r2,-12(fp)
 80088ec:	e0fffd17 	ldw	r3,-12(fp)
 80088f0:	e0bffe17 	ldw	r2,-8(fp)
 80088f4:	18bff116 	blt	r3,r2,80088bc <__alt_data_end+0xfc0088bc>
		putcharWifi (command[i]);
	}
	printf("<\n");
 80088f8:	010200b4 	movhi	r4,2050
 80088fc:	211c2e04 	addi	r4,r4,28856
 8008900:	800c89c0 	call	800c89c <puts>
}
 8008904:	e037883a 	mov	sp,fp
 8008908:	dfc00117 	ldw	ra,4(sp)
 800890c:	df000017 	ldw	fp,0(sp)
 8008910:	dec00204 	addi	sp,sp,8
 8008914:	f800283a 	ret

08008918 <dofile_command>:

void dofile_command(void){
 8008918:	defff304 	addi	sp,sp,-52
 800891c:	dfc00c15 	stw	ra,48(sp)
 8008920:	df000b15 	stw	fp,44(sp)
 8008924:	df000b04 	addi	fp,sp,44

	char command[] = "dofile(\"send_text_message.lua\")\r\n";
 8008928:	009a59b4 	movhi	r2,26982
 800892c:	109bd904 	addi	r2,r2,28516
 8008930:	e0bff715 	stw	r2,-36(fp)
 8008934:	00888a34 	movhi	r2,8744
 8008938:	10995b04 	addi	r2,r2,25964
 800893c:	e0bff815 	stw	r2,-32(fp)
 8008940:	00991bb4 	movhi	r2,25710
 8008944:	10995cc4 	addi	r2,r2,25971
 8008948:	e0bff915 	stw	r2,-28(fp)
 800894c:	009e1974 	movhi	r2,30821
 8008950:	109d17c4 	addi	r2,r2,29791
 8008954:	e0bffa15 	stw	r2,-24(fp)
 8008958:	00995b74 	movhi	r2,25965
 800895c:	1097dd04 	addi	r2,r2,24436
 8008960:	e0bffb15 	stw	r2,-20(fp)
 8008964:	0099d874 	movhi	r2,26465
 8008968:	109cdcc4 	addi	r2,r2,29555
 800896c:	e0bffc15 	stw	r2,-16(fp)
 8008970:	009d5b34 	movhi	r2,30060
 8008974:	108b9944 	addi	r2,r2,11877
 8008978:	e0bffd15 	stw	r2,-12(fp)
 800897c:	00834a74 	movhi	r2,3369
 8008980:	10889844 	addi	r2,r2,8801
 8008984:	e0bffe15 	stw	r2,-8(fp)
 8008988:	00800284 	movi	r2,10
 800898c:	e0bfff0d 	sth	r2,-4(fp)
	int len = strlen(command);
 8008990:	e0bff704 	addi	r2,fp,-36
 8008994:	1009883a 	mov	r4,r2
 8008998:	800ca6c0 	call	800ca6c <strlen>
 800899c:	e0bff615 	stw	r2,-40(fp)
	int i = 0;
 80089a0:	e03ff515 	stw	zero,-44(fp)
	for(i = 0; i < len; i++){
 80089a4:	e03ff515 	stw	zero,-44(fp)
 80089a8:	00000c06 	br	80089dc <dofile_command+0xc4>
		putcharWifi (command[i]);
 80089ac:	e0fff704 	addi	r3,fp,-36
 80089b0:	e0bff517 	ldw	r2,-44(fp)
 80089b4:	1885883a 	add	r2,r3,r2
 80089b8:	10800003 	ldbu	r2,0(r2)
 80089bc:	10803fcc 	andi	r2,r2,255
 80089c0:	1080201c 	xori	r2,r2,128
 80089c4:	10bfe004 	addi	r2,r2,-128
 80089c8:	1009883a 	mov	r4,r2
 80089cc:	80087bc0 	call	80087bc <putcharWifi>
void dofile_command(void){

	char command[] = "dofile(\"send_text_message.lua\")\r\n";
	int len = strlen(command);
	int i = 0;
	for(i = 0; i < len; i++){
 80089d0:	e0bff517 	ldw	r2,-44(fp)
 80089d4:	10800044 	addi	r2,r2,1
 80089d8:	e0bff515 	stw	r2,-44(fp)
 80089dc:	e0fff517 	ldw	r3,-44(fp)
 80089e0:	e0bff617 	ldw	r2,-40(fp)
 80089e4:	18bff116 	blt	r3,r2,80089ac <__alt_data_end+0xfc0089ac>
		putcharWifi (command[i]);
	}

}
 80089e8:	e037883a 	mov	sp,fp
 80089ec:	dfc00117 	ldw	ra,4(sp)
 80089f0:	df000017 	ldw	fp,0(sp)
 80089f4:	dec00204 	addi	sp,sp,8
 80089f8:	f800283a 	ret

080089fc <check_wifi_command>:

void check_wifi_command(void){
 80089fc:	defff804 	addi	sp,sp,-32
 8008a00:	dfc00715 	stw	ra,28(sp)
 8008a04:	df000615 	stw	fp,24(sp)
 8008a08:	df000604 	addi	fp,sp,24

	char command[] = "check_wifi()\r\n";
 8008a0c:	0098d974 	movhi	r2,25445
 8008a10:	109a18c4 	addi	r2,r2,26723
 8008a14:	e0bffc15 	stw	r2,-16(fp)
 8008a18:	009a5df4 	movhi	r2,26999
 8008a1c:	1097dac4 	addi	r2,r2,24427
 8008a20:	e0bffd15 	stw	r2,-12(fp)
 8008a24:	008a4a34 	movhi	r2,10536
 8008a28:	109a5984 	addi	r2,r2,26982
 8008a2c:	e0bffe15 	stw	r2,-8(fp)
 8008a30:	00828344 	movi	r2,2573
 8008a34:	e0bfff0d 	sth	r2,-4(fp)
 8008a38:	e03fff85 	stb	zero,-2(fp)
	int len = strlen(command);
 8008a3c:	e0bffc04 	addi	r2,fp,-16
 8008a40:	1009883a 	mov	r4,r2
 8008a44:	800ca6c0 	call	800ca6c <strlen>
 8008a48:	e0bffb15 	stw	r2,-20(fp)
	int i = 0;
 8008a4c:	e03ffa15 	stw	zero,-24(fp)
	for(i = 0; i < len; i++){
 8008a50:	e03ffa15 	stw	zero,-24(fp)
 8008a54:	00000c06 	br	8008a88 <check_wifi_command+0x8c>
		putcharWifi (command[i]);
 8008a58:	e0fffc04 	addi	r3,fp,-16
 8008a5c:	e0bffa17 	ldw	r2,-24(fp)
 8008a60:	1885883a 	add	r2,r3,r2
 8008a64:	10800003 	ldbu	r2,0(r2)
 8008a68:	10803fcc 	andi	r2,r2,255
 8008a6c:	1080201c 	xori	r2,r2,128
 8008a70:	10bfe004 	addi	r2,r2,-128
 8008a74:	1009883a 	mov	r4,r2
 8008a78:	80087bc0 	call	80087bc <putcharWifi>
void check_wifi_command(void){

	char command[] = "check_wifi()\r\n";
	int len = strlen(command);
	int i = 0;
	for(i = 0; i < len; i++){
 8008a7c:	e0bffa17 	ldw	r2,-24(fp)
 8008a80:	10800044 	addi	r2,r2,1
 8008a84:	e0bffa15 	stw	r2,-24(fp)
 8008a88:	e0fffa17 	ldw	r3,-24(fp)
 8008a8c:	e0bffb17 	ldw	r2,-20(fp)
 8008a90:	18bff116 	blt	r3,r2,8008a58 <__alt_data_end+0xfc008a58>
		putcharWifi (command[i]);
	}

	getreply();
 8008a94:	8008aac0 	call	8008aac <getreply>

}
 8008a98:	e037883a 	mov	sp,fp
 8008a9c:	dfc00117 	ldw	ra,4(sp)
 8008aa0:	df000017 	ldw	fp,0(sp)
 8008aa4:	dec00204 	addi	sp,sp,8
 8008aa8:	f800283a 	ret

08008aac <getreply>:

void getreply(void){
 8008aac:	deffe404 	addi	sp,sp,-112
 8008ab0:	dfc01b15 	stw	ra,108(sp)
 8008ab4:	df001a15 	stw	fp,104(sp)
 8008ab8:	df001a04 	addi	fp,sp,104


//	printf("status : %#010x\n", Wifi_Status);

	char reply[100];
	int i = 0;
 8008abc:	e03fe615 	stw	zero,-104(fp)
	while(!(Wifi_Status & 0x01));
 8008ac0:	0001883a 	nop
 8008ac4:	00a10034 	movhi	r2,33792
 8008ac8:	10808804 	addi	r2,r2,544
 8008acc:	10800003 	ldbu	r2,0(r2)
 8008ad0:	10803fcc 	andi	r2,r2,255
 8008ad4:	1080004c 	andi	r2,r2,1
 8008ad8:	103ffa26 	beq	r2,zero,8008ac4 <__alt_data_end+0xfc008ac4>

	for(i = 0; i < 30; i++){
 8008adc:	e03fe615 	stw	zero,-104(fp)
 8008ae0:	00000906 	br	8008b08 <getreply+0x5c>
		reply[i] = getcharWifi();
 8008ae4:	80088400 	call	8008840 <getcharWifi>
 8008ae8:	1009883a 	mov	r4,r2
 8008aec:	e0ffe704 	addi	r3,fp,-100
 8008af0:	e0bfe617 	ldw	r2,-104(fp)
 8008af4:	1885883a 	add	r2,r3,r2
 8008af8:	11000005 	stb	r4,0(r2)

	char reply[100];
	int i = 0;
	while(!(Wifi_Status & 0x01));

	for(i = 0; i < 30; i++){
 8008afc:	e0bfe617 	ldw	r2,-104(fp)
 8008b00:	10800044 	addi	r2,r2,1
 8008b04:	e0bfe615 	stw	r2,-104(fp)
 8008b08:	e0bfe617 	ldw	r2,-104(fp)
 8008b0c:	10800790 	cmplti	r2,r2,30
 8008b10:	103ff41e 	bne	r2,zero,8008ae4 <__alt_data_end+0xfc008ae4>
		reply[i] = getcharWifi();
		//reply[i] = Wifi_RxData;
	}

	printf("reply : %s\n", reply);
 8008b14:	e0bfe704 	addi	r2,fp,-100
 8008b18:	010200b4 	movhi	r4,2050
 8008b1c:	211c2f04 	addi	r4,r4,28860
 8008b20:	100b883a 	mov	r5,r2
 8008b24:	800c7880 	call	800c788 <printf>

}
 8008b28:	e037883a 	mov	sp,fp
 8008b2c:	dfc00117 	ldw	ra,4(sp)
 8008b30:	df000017 	ldw	fp,0(sp)
 8008b34:	dec00204 	addi	sp,sp,8
 8008b38:	f800283a 	ret

08008b3c <wifi_setup_command>:

void wifi_setup_command(void){
 8008b3c:	defff804 	addi	sp,sp,-32
 8008b40:	dfc00715 	stw	ra,28(sp)
 8008b44:	df000615 	stw	fp,24(sp)
 8008b48:	df000604 	addi	fp,sp,24
	char command[] = "wifi_setup()\r\n";
 8008b4c:	009a59b4 	movhi	r2,26982
 8008b50:	109a5dc4 	addi	r2,r2,26999
 8008b54:	e0bffc15 	stw	r2,-16(fp)
 8008b58:	009d1974 	movhi	r2,29797
 8008b5c:	109cd7c4 	addi	r2,r2,29535
 8008b60:	e0bffd15 	stw	r2,-12(fp)
 8008b64:	008a4a34 	movhi	r2,10536
 8008b68:	109c1d44 	addi	r2,r2,28789
 8008b6c:	e0bffe15 	stw	r2,-8(fp)
 8008b70:	00828344 	movi	r2,2573
 8008b74:	e0bfff0d 	sth	r2,-4(fp)
 8008b78:	e03fff85 	stb	zero,-2(fp)
	int len = strlen(command);
 8008b7c:	e0bffc04 	addi	r2,fp,-16
 8008b80:	1009883a 	mov	r4,r2
 8008b84:	800ca6c0 	call	800ca6c <strlen>
 8008b88:	e0bffb15 	stw	r2,-20(fp)
	int i = 0;
 8008b8c:	e03ffa15 	stw	zero,-24(fp)
	for(i = 0; i < len; i++){
 8008b90:	e03ffa15 	stw	zero,-24(fp)
 8008b94:	00000c06 	br	8008bc8 <wifi_setup_command+0x8c>
		putcharWifi (command[i]);
 8008b98:	e0fffc04 	addi	r3,fp,-16
 8008b9c:	e0bffa17 	ldw	r2,-24(fp)
 8008ba0:	1885883a 	add	r2,r3,r2
 8008ba4:	10800003 	ldbu	r2,0(r2)
 8008ba8:	10803fcc 	andi	r2,r2,255
 8008bac:	1080201c 	xori	r2,r2,128
 8008bb0:	10bfe004 	addi	r2,r2,-128
 8008bb4:	1009883a 	mov	r4,r2
 8008bb8:	80087bc0 	call	80087bc <putcharWifi>

void wifi_setup_command(void){
	char command[] = "wifi_setup()\r\n";
	int len = strlen(command);
	int i = 0;
	for(i = 0; i < len; i++){
 8008bbc:	e0bffa17 	ldw	r2,-24(fp)
 8008bc0:	10800044 	addi	r2,r2,1
 8008bc4:	e0bffa15 	stw	r2,-24(fp)
 8008bc8:	e0fffa17 	ldw	r3,-24(fp)
 8008bcc:	e0bffb17 	ldw	r2,-20(fp)
 8008bd0:	18bff116 	blt	r3,r2,8008b98 <__alt_data_end+0xfc008b98>
		putcharWifi (command[i]);
	}
	getreply();
 8008bd4:	8008aac0 	call	8008aac <getreply>
}
 8008bd8:	e037883a 	mov	sp,fp
 8008bdc:	dfc00117 	ldw	ra,4(sp)
 8008be0:	df000017 	ldw	fp,0(sp)
 8008be4:	dec00204 	addi	sp,sp,8
 8008be8:	f800283a 	ret

08008bec <wifi_play_pause_command>:

void wifi_play_pause_command(void){
 8008bec:	defff104 	addi	sp,sp,-60
 8008bf0:	dfc00e15 	stw	ra,56(sp)
 8008bf4:	df000d15 	stw	fp,52(sp)
 8008bf8:	df000d04 	addi	fp,sp,52
	char command[] = "url_get(\"http://192.168.43.21:8080/P\")\r\n";
 8008bfc:	0097db34 	movhi	r2,24428
 8008c00:	109c9d44 	addi	r2,r2,29301
 8008c04:	e0bff515 	stw	r2,-44(fp)
 8008c08:	008a1d34 	movhi	r2,10356
 8008c0c:	109959c4 	addi	r2,r2,25959
 8008c10:	e0bff615 	stw	r2,-40(fp)
 8008c14:	009d1d34 	movhi	r2,29812
 8008c18:	109a0884 	addi	r2,r2,26658
 8008c1c:	e0bff715 	stw	r2,-36(fp)
 8008c20:	008bcbf4 	movhi	r2,12079
 8008c24:	108e9c04 	addi	r2,r2,14960
 8008c28:	e0bff815 	stw	r2,-32(fp)
 8008c2c:	008b8cb4 	movhi	r2,11826
 8008c30:	108e4c44 	addi	r2,r2,14641
 8008c34:	e0bff915 	stw	r2,-28(fp)
 8008c38:	008b8e34 	movhi	r2,11832
 8008c3c:	108d8c44 	addi	r2,r2,13873
 8008c40:	e0bffa15 	stw	r2,-24(fp)
 8008c44:	008c8bb4 	movhi	r2,12846
 8008c48:	108ccd04 	addi	r2,r2,13108
 8008c4c:	e0bffb15 	stw	r2,-20(fp)
 8008c50:	008c0e34 	movhi	r2,12344
 8008c54:	108e8c44 	addi	r2,r2,14897
 8008c58:	e0bffc15 	stw	r2,-16(fp)
 8008c5c:	00940bf4 	movhi	r2,20527
 8008c60:	108c0e04 	addi	r2,r2,12344
 8008c64:	e0bffd15 	stw	r2,-12(fp)
 8008c68:	00828374 	movhi	r2,2573
 8008c6c:	108a4884 	addi	r2,r2,10530
 8008c70:	e0bffe15 	stw	r2,-8(fp)
 8008c74:	e03fff05 	stb	zero,-4(fp)
	int len = strlen(command);
 8008c78:	e0bff504 	addi	r2,fp,-44
 8008c7c:	1009883a 	mov	r4,r2
 8008c80:	800ca6c0 	call	800ca6c <strlen>
 8008c84:	e0bff415 	stw	r2,-48(fp)
	int i = 0;
 8008c88:	e03ff315 	stw	zero,-52(fp)
	for(i = 0; i < len; i++){
 8008c8c:	e03ff315 	stw	zero,-52(fp)
 8008c90:	00000c06 	br	8008cc4 <wifi_play_pause_command+0xd8>
		putcharWifi (command[i]);
 8008c94:	e0fff504 	addi	r3,fp,-44
 8008c98:	e0bff317 	ldw	r2,-52(fp)
 8008c9c:	1885883a 	add	r2,r3,r2
 8008ca0:	10800003 	ldbu	r2,0(r2)
 8008ca4:	10803fcc 	andi	r2,r2,255
 8008ca8:	1080201c 	xori	r2,r2,128
 8008cac:	10bfe004 	addi	r2,r2,-128
 8008cb0:	1009883a 	mov	r4,r2
 8008cb4:	80087bc0 	call	80087bc <putcharWifi>

void wifi_play_pause_command(void){
	char command[] = "url_get(\"http://192.168.43.21:8080/P\")\r\n";
	int len = strlen(command);
	int i = 0;
	for(i = 0; i < len; i++){
 8008cb8:	e0bff317 	ldw	r2,-52(fp)
 8008cbc:	10800044 	addi	r2,r2,1
 8008cc0:	e0bff315 	stw	r2,-52(fp)
 8008cc4:	e0fff317 	ldw	r3,-52(fp)
 8008cc8:	e0bff417 	ldw	r2,-48(fp)
 8008ccc:	18bff116 	blt	r3,r2,8008c94 <__alt_data_end+0xfc008c94>
		putcharWifi (command[i]);
	}
	//getreply();
	printf("done\n");
 8008cd0:	010200b4 	movhi	r4,2050
 8008cd4:	211c3204 	addi	r4,r4,28872
 8008cd8:	800c89c0 	call	800c89c <puts>
}
 8008cdc:	e037883a 	mov	sp,fp
 8008ce0:	dfc00117 	ldw	ra,4(sp)
 8008ce4:	df000017 	ldw	fp,0(sp)
 8008ce8:	dec00204 	addi	sp,sp,8
 8008cec:	f800283a 	ret

08008cf0 <wifi_ch1_command>:

void wifi_ch1_command(void){
 8008cf0:	defff104 	addi	sp,sp,-60
 8008cf4:	dfc00e15 	stw	ra,56(sp)
 8008cf8:	df000d15 	stw	fp,52(sp)
 8008cfc:	df000d04 	addi	fp,sp,52
	char command[] = "url_get(\"http://192.168.43.21:8080/1\")\r\n";
 8008d00:	0097db34 	movhi	r2,24428
 8008d04:	109c9d44 	addi	r2,r2,29301
 8008d08:	e0bff515 	stw	r2,-44(fp)
 8008d0c:	008a1d34 	movhi	r2,10356
 8008d10:	109959c4 	addi	r2,r2,25959
 8008d14:	e0bff615 	stw	r2,-40(fp)
 8008d18:	009d1d34 	movhi	r2,29812
 8008d1c:	109a0884 	addi	r2,r2,26658
 8008d20:	e0bff715 	stw	r2,-36(fp)
 8008d24:	008bcbf4 	movhi	r2,12079
 8008d28:	108e9c04 	addi	r2,r2,14960
 8008d2c:	e0bff815 	stw	r2,-32(fp)
 8008d30:	008b8cb4 	movhi	r2,11826
 8008d34:	108e4c44 	addi	r2,r2,14641
 8008d38:	e0bff915 	stw	r2,-28(fp)
 8008d3c:	008b8e34 	movhi	r2,11832
 8008d40:	108d8c44 	addi	r2,r2,13873
 8008d44:	e0bffa15 	stw	r2,-24(fp)
 8008d48:	008c8bb4 	movhi	r2,12846
 8008d4c:	108ccd04 	addi	r2,r2,13108
 8008d50:	e0bffb15 	stw	r2,-20(fp)
 8008d54:	008c0e34 	movhi	r2,12344
 8008d58:	108e8c44 	addi	r2,r2,14897
 8008d5c:	e0bffc15 	stw	r2,-16(fp)
 8008d60:	008c4bf4 	movhi	r2,12591
 8008d64:	108c0e04 	addi	r2,r2,12344
 8008d68:	e0bffd15 	stw	r2,-12(fp)
 8008d6c:	00828374 	movhi	r2,2573
 8008d70:	108a4884 	addi	r2,r2,10530
 8008d74:	e0bffe15 	stw	r2,-8(fp)
 8008d78:	e03fff05 	stb	zero,-4(fp)
	int len = strlen(command);
 8008d7c:	e0bff504 	addi	r2,fp,-44
 8008d80:	1009883a 	mov	r4,r2
 8008d84:	800ca6c0 	call	800ca6c <strlen>
 8008d88:	e0bff415 	stw	r2,-48(fp)
	int i = 0;
 8008d8c:	e03ff315 	stw	zero,-52(fp)
	for(i = 0; i < len; i++){
 8008d90:	e03ff315 	stw	zero,-52(fp)
 8008d94:	00000c06 	br	8008dc8 <wifi_ch1_command+0xd8>
		putcharWifi (command[i]);
 8008d98:	e0fff504 	addi	r3,fp,-44
 8008d9c:	e0bff317 	ldw	r2,-52(fp)
 8008da0:	1885883a 	add	r2,r3,r2
 8008da4:	10800003 	ldbu	r2,0(r2)
 8008da8:	10803fcc 	andi	r2,r2,255
 8008dac:	1080201c 	xori	r2,r2,128
 8008db0:	10bfe004 	addi	r2,r2,-128
 8008db4:	1009883a 	mov	r4,r2
 8008db8:	80087bc0 	call	80087bc <putcharWifi>

void wifi_ch1_command(void){
	char command[] = "url_get(\"http://192.168.43.21:8080/1\")\r\n";
	int len = strlen(command);
	int i = 0;
	for(i = 0; i < len; i++){
 8008dbc:	e0bff317 	ldw	r2,-52(fp)
 8008dc0:	10800044 	addi	r2,r2,1
 8008dc4:	e0bff315 	stw	r2,-52(fp)
 8008dc8:	e0fff317 	ldw	r3,-52(fp)
 8008dcc:	e0bff417 	ldw	r2,-48(fp)
 8008dd0:	18bff116 	blt	r3,r2,8008d98 <__alt_data_end+0xfc008d98>
		putcharWifi (command[i]);
	}
	//getreply();
	printf("done\n");
 8008dd4:	010200b4 	movhi	r4,2050
 8008dd8:	211c3204 	addi	r4,r4,28872
 8008ddc:	800c89c0 	call	800c89c <puts>
}
 8008de0:	e037883a 	mov	sp,fp
 8008de4:	dfc00117 	ldw	ra,4(sp)
 8008de8:	df000017 	ldw	fp,0(sp)
 8008dec:	dec00204 	addi	sp,sp,8
 8008df0:	f800283a 	ret

08008df4 <wifi_ch2_command>:

void wifi_ch2_command(void){
 8008df4:	defff104 	addi	sp,sp,-60
 8008df8:	dfc00e15 	stw	ra,56(sp)
 8008dfc:	df000d15 	stw	fp,52(sp)
 8008e00:	df000d04 	addi	fp,sp,52
	char command[] = "url_get(\"http://192.168.43.21:8080/2\")\r\n";
 8008e04:	0097db34 	movhi	r2,24428
 8008e08:	109c9d44 	addi	r2,r2,29301
 8008e0c:	e0bff515 	stw	r2,-44(fp)
 8008e10:	008a1d34 	movhi	r2,10356
 8008e14:	109959c4 	addi	r2,r2,25959
 8008e18:	e0bff615 	stw	r2,-40(fp)
 8008e1c:	009d1d34 	movhi	r2,29812
 8008e20:	109a0884 	addi	r2,r2,26658
 8008e24:	e0bff715 	stw	r2,-36(fp)
 8008e28:	008bcbf4 	movhi	r2,12079
 8008e2c:	108e9c04 	addi	r2,r2,14960
 8008e30:	e0bff815 	stw	r2,-32(fp)
 8008e34:	008b8cb4 	movhi	r2,11826
 8008e38:	108e4c44 	addi	r2,r2,14641
 8008e3c:	e0bff915 	stw	r2,-28(fp)
 8008e40:	008b8e34 	movhi	r2,11832
 8008e44:	108d8c44 	addi	r2,r2,13873
 8008e48:	e0bffa15 	stw	r2,-24(fp)
 8008e4c:	008c8bb4 	movhi	r2,12846
 8008e50:	108ccd04 	addi	r2,r2,13108
 8008e54:	e0bffb15 	stw	r2,-20(fp)
 8008e58:	008c0e34 	movhi	r2,12344
 8008e5c:	108e8c44 	addi	r2,r2,14897
 8008e60:	e0bffc15 	stw	r2,-16(fp)
 8008e64:	008c8bf4 	movhi	r2,12847
 8008e68:	108c0e04 	addi	r2,r2,12344
 8008e6c:	e0bffd15 	stw	r2,-12(fp)
 8008e70:	00828374 	movhi	r2,2573
 8008e74:	108a4884 	addi	r2,r2,10530
 8008e78:	e0bffe15 	stw	r2,-8(fp)
 8008e7c:	e03fff05 	stb	zero,-4(fp)
	int len = strlen(command);
 8008e80:	e0bff504 	addi	r2,fp,-44
 8008e84:	1009883a 	mov	r4,r2
 8008e88:	800ca6c0 	call	800ca6c <strlen>
 8008e8c:	e0bff415 	stw	r2,-48(fp)
	int i = 0;
 8008e90:	e03ff315 	stw	zero,-52(fp)
	for(i = 0; i < len; i++){
 8008e94:	e03ff315 	stw	zero,-52(fp)
 8008e98:	00000c06 	br	8008ecc <wifi_ch2_command+0xd8>
		putcharWifi (command[i]);
 8008e9c:	e0fff504 	addi	r3,fp,-44
 8008ea0:	e0bff317 	ldw	r2,-52(fp)
 8008ea4:	1885883a 	add	r2,r3,r2
 8008ea8:	10800003 	ldbu	r2,0(r2)
 8008eac:	10803fcc 	andi	r2,r2,255
 8008eb0:	1080201c 	xori	r2,r2,128
 8008eb4:	10bfe004 	addi	r2,r2,-128
 8008eb8:	1009883a 	mov	r4,r2
 8008ebc:	80087bc0 	call	80087bc <putcharWifi>

void wifi_ch2_command(void){
	char command[] = "url_get(\"http://192.168.43.21:8080/2\")\r\n";
	int len = strlen(command);
	int i = 0;
	for(i = 0; i < len; i++){
 8008ec0:	e0bff317 	ldw	r2,-52(fp)
 8008ec4:	10800044 	addi	r2,r2,1
 8008ec8:	e0bff315 	stw	r2,-52(fp)
 8008ecc:	e0fff317 	ldw	r3,-52(fp)
 8008ed0:	e0bff417 	ldw	r2,-48(fp)
 8008ed4:	18bff116 	blt	r3,r2,8008e9c <__alt_data_end+0xfc008e9c>
		putcharWifi (command[i]);
	}
	//getreply();
	printf("done\n");
 8008ed8:	010200b4 	movhi	r4,2050
 8008edc:	211c3204 	addi	r4,r4,28872
 8008ee0:	800c89c0 	call	800c89c <puts>
}
 8008ee4:	e037883a 	mov	sp,fp
 8008ee8:	dfc00117 	ldw	ra,4(sp)
 8008eec:	df000017 	ldw	fp,0(sp)
 8008ef0:	dec00204 	addi	sp,sp,8
 8008ef4:	f800283a 	ret

08008ef8 <wifi_ch3_command>:

void wifi_ch3_command(void){
 8008ef8:	defff104 	addi	sp,sp,-60
 8008efc:	dfc00e15 	stw	ra,56(sp)
 8008f00:	df000d15 	stw	fp,52(sp)
 8008f04:	df000d04 	addi	fp,sp,52
	char command[] = "url_get(\"http://192.168.43.21:8080/3\")\r\n";
 8008f08:	0097db34 	movhi	r2,24428
 8008f0c:	109c9d44 	addi	r2,r2,29301
 8008f10:	e0bff515 	stw	r2,-44(fp)
 8008f14:	008a1d34 	movhi	r2,10356
 8008f18:	109959c4 	addi	r2,r2,25959
 8008f1c:	e0bff615 	stw	r2,-40(fp)
 8008f20:	009d1d34 	movhi	r2,29812
 8008f24:	109a0884 	addi	r2,r2,26658
 8008f28:	e0bff715 	stw	r2,-36(fp)
 8008f2c:	008bcbf4 	movhi	r2,12079
 8008f30:	108e9c04 	addi	r2,r2,14960
 8008f34:	e0bff815 	stw	r2,-32(fp)
 8008f38:	008b8cb4 	movhi	r2,11826
 8008f3c:	108e4c44 	addi	r2,r2,14641
 8008f40:	e0bff915 	stw	r2,-28(fp)
 8008f44:	008b8e34 	movhi	r2,11832
 8008f48:	108d8c44 	addi	r2,r2,13873
 8008f4c:	e0bffa15 	stw	r2,-24(fp)
 8008f50:	008c8bb4 	movhi	r2,12846
 8008f54:	108ccd04 	addi	r2,r2,13108
 8008f58:	e0bffb15 	stw	r2,-20(fp)
 8008f5c:	008c0e34 	movhi	r2,12344
 8008f60:	108e8c44 	addi	r2,r2,14897
 8008f64:	e0bffc15 	stw	r2,-16(fp)
 8008f68:	008ccbf4 	movhi	r2,13103
 8008f6c:	108c0e04 	addi	r2,r2,12344
 8008f70:	e0bffd15 	stw	r2,-12(fp)
 8008f74:	00828374 	movhi	r2,2573
 8008f78:	108a4884 	addi	r2,r2,10530
 8008f7c:	e0bffe15 	stw	r2,-8(fp)
 8008f80:	e03fff05 	stb	zero,-4(fp)
	int len = strlen(command);
 8008f84:	e0bff504 	addi	r2,fp,-44
 8008f88:	1009883a 	mov	r4,r2
 8008f8c:	800ca6c0 	call	800ca6c <strlen>
 8008f90:	e0bff415 	stw	r2,-48(fp)
	int i = 0;
 8008f94:	e03ff315 	stw	zero,-52(fp)
	for(i = 0; i < len; i++){
 8008f98:	e03ff315 	stw	zero,-52(fp)
 8008f9c:	00000c06 	br	8008fd0 <wifi_ch3_command+0xd8>
		putcharWifi (command[i]);
 8008fa0:	e0fff504 	addi	r3,fp,-44
 8008fa4:	e0bff317 	ldw	r2,-52(fp)
 8008fa8:	1885883a 	add	r2,r3,r2
 8008fac:	10800003 	ldbu	r2,0(r2)
 8008fb0:	10803fcc 	andi	r2,r2,255
 8008fb4:	1080201c 	xori	r2,r2,128
 8008fb8:	10bfe004 	addi	r2,r2,-128
 8008fbc:	1009883a 	mov	r4,r2
 8008fc0:	80087bc0 	call	80087bc <putcharWifi>

void wifi_ch3_command(void){
	char command[] = "url_get(\"http://192.168.43.21:8080/3\")\r\n";
	int len = strlen(command);
	int i = 0;
	for(i = 0; i < len; i++){
 8008fc4:	e0bff317 	ldw	r2,-52(fp)
 8008fc8:	10800044 	addi	r2,r2,1
 8008fcc:	e0bff315 	stw	r2,-52(fp)
 8008fd0:	e0fff317 	ldw	r3,-52(fp)
 8008fd4:	e0bff417 	ldw	r2,-48(fp)
 8008fd8:	18bff116 	blt	r3,r2,8008fa0 <__alt_data_end+0xfc008fa0>
		putcharWifi (command[i]);
	}
	//getreply();
	printf("done\n");
 8008fdc:	010200b4 	movhi	r4,2050
 8008fe0:	211c3204 	addi	r4,r4,28872
 8008fe4:	800c89c0 	call	800c89c <puts>
}
 8008fe8:	e037883a 	mov	sp,fp
 8008fec:	dfc00117 	ldw	ra,4(sp)
 8008ff0:	df000017 	ldw	fp,0(sp)
 8008ff4:	dec00204 	addi	sp,sp,8
 8008ff8:	f800283a 	ret

08008ffc <wifi_commands_init>:

void wifi_commands_init(void){
 8008ffc:	defffe04 	addi	sp,sp,-8
 8009000:	dfc00115 	stw	ra,4(sp)
 8009004:	df000015 	stw	fp,0(sp)
 8009008:	d839883a 	mov	fp,sp
	waitWifi();
 800900c:	80088840 	call	8008884 <waitWifi>
	waitWifi();
 8009010:	80088840 	call	8008884 <waitWifi>
	waitWifi();
 8009014:	80088840 	call	8008884 <waitWifi>
	waitWifi();
 8009018:	80088840 	call	8008884 <waitWifi>

	dofile_command();
 800901c:	80089180 	call	8008918 <dofile_command>

	waitWifi();
 8009020:	80088840 	call	8008884 <waitWifi>
	waitWifi();
 8009024:	80088840 	call	8008884 <waitWifi>

	wifi_setup_command();
 8009028:	8008b3c0 	call	8008b3c <wifi_setup_command>
	waitWifi();
 800902c:	80088840 	call	8008884 <waitWifi>
	waitWifi();
 8009030:	80088840 	call	8008884 <waitWifi>
	printf("All done wifi_commands_init\n");
 8009034:	010200b4 	movhi	r4,2050
 8009038:	211c3404 	addi	r4,r4,28880
 800903c:	800c89c0 	call	800c89c <puts>
}
 8009040:	e037883a 	mov	sp,fp
 8009044:	dfc00117 	ldw	ra,4(sp)
 8009048:	df000017 	ldw	fp,0(sp)
 800904c:	dec00204 	addi	sp,sp,8
 8009050:	f800283a 	ret

08009054 <__fixsfsi>:
 8009054:	2006d5fa 	srli	r3,r4,23
 8009058:	00802034 	movhi	r2,128
 800905c:	10bfffc4 	addi	r2,r2,-1
 8009060:	18c03fcc 	andi	r3,r3,255
 8009064:	01401f84 	movi	r5,126
 8009068:	1104703a 	and	r2,r2,r4
 800906c:	2008d7fa 	srli	r4,r4,31
 8009070:	28c0110e 	bge	r5,r3,80090b8 <__fixsfsi+0x64>
 8009074:	01402744 	movi	r5,157
 8009078:	28c00b16 	blt	r5,r3,80090a8 <__fixsfsi+0x54>
 800907c:	01402544 	movi	r5,149
 8009080:	10802034 	orhi	r2,r2,128
 8009084:	28c00e16 	blt	r5,r3,80090c0 <__fixsfsi+0x6c>
 8009088:	01402584 	movi	r5,150
 800908c:	28c7c83a 	sub	r3,r5,r3
 8009090:	10c6d83a 	srl	r3,r2,r3
 8009094:	21003fcc 	andi	r4,r4,255
 8009098:	0105c83a 	sub	r2,zero,r4
 800909c:	1886f03a 	xor	r3,r3,r2
 80090a0:	1905883a 	add	r2,r3,r4
 80090a4:	f800283a 	ret
 80090a8:	00a00034 	movhi	r2,32768
 80090ac:	10bfffc4 	addi	r2,r2,-1
 80090b0:	2085883a 	add	r2,r4,r2
 80090b4:	f800283a 	ret
 80090b8:	0005883a 	mov	r2,zero
 80090bc:	f800283a 	ret
 80090c0:	18ffda84 	addi	r3,r3,-150
 80090c4:	10c6983a 	sll	r3,r2,r3
 80090c8:	003ff206 	br	8009094 <__alt_data_end+0xfc009094>

080090cc <__floatsisf>:
 80090cc:	defffd04 	addi	sp,sp,-12
 80090d0:	dc000015 	stw	r16,0(sp)
 80090d4:	dfc00215 	stw	ra,8(sp)
 80090d8:	dc400115 	stw	r17,4(sp)
 80090dc:	2021883a 	mov	r16,r4
 80090e0:	20003a26 	beq	r4,zero,80091cc <__floatsisf+0x100>
 80090e4:	2022d7fa 	srli	r17,r4,31
 80090e8:	88000126 	beq	r17,zero,80090f0 <__floatsisf+0x24>
 80090ec:	0121c83a 	sub	r16,zero,r4
 80090f0:	8009883a 	mov	r4,r16
 80090f4:	800b9a00 	call	800b9a0 <__clzsi2>
 80090f8:	00c02784 	movi	r3,158
 80090fc:	1887c83a 	sub	r3,r3,r2
 8009100:	01802584 	movi	r6,150
 8009104:	800b883a 	mov	r5,r16
 8009108:	30c01616 	blt	r6,r3,8009164 <__floatsisf+0x98>
 800910c:	01000204 	movi	r4,8
 8009110:	2080020e 	bge	r4,r2,800911c <__floatsisf+0x50>
 8009114:	10bffe04 	addi	r2,r2,-8
 8009118:	80a0983a 	sll	r16,r16,r2
 800911c:	00802034 	movhi	r2,128
 8009120:	10bfffc4 	addi	r2,r2,-1
 8009124:	8809883a 	mov	r4,r17
 8009128:	80a0703a 	and	r16,r16,r2
 800912c:	18803fcc 	andi	r2,r3,255
 8009130:	100695fa 	slli	r3,r2,23
 8009134:	20803fcc 	andi	r2,r4,255
 8009138:	100897fa 	slli	r4,r2,31
 800913c:	00802034 	movhi	r2,128
 8009140:	10bfffc4 	addi	r2,r2,-1
 8009144:	8084703a 	and	r2,r16,r2
 8009148:	10c4b03a 	or	r2,r2,r3
 800914c:	1104b03a 	or	r2,r2,r4
 8009150:	dfc00217 	ldw	ra,8(sp)
 8009154:	dc400117 	ldw	r17,4(sp)
 8009158:	dc000017 	ldw	r16,0(sp)
 800915c:	dec00304 	addi	sp,sp,12
 8009160:	f800283a 	ret
 8009164:	01002644 	movi	r4,153
 8009168:	20c01c16 	blt	r4,r3,80091dc <__floatsisf+0x110>
 800916c:	01000144 	movi	r4,5
 8009170:	2080020e 	bge	r4,r2,800917c <__floatsisf+0xb0>
 8009174:	113ffec4 	addi	r4,r2,-5
 8009178:	290a983a 	sll	r5,r5,r4
 800917c:	043f0034 	movhi	r16,64512
 8009180:	843fffc4 	addi	r16,r16,-1
 8009184:	298001cc 	andi	r6,r5,7
 8009188:	2c20703a 	and	r16,r5,r16
 800918c:	30000426 	beq	r6,zero,80091a0 <__floatsisf+0xd4>
 8009190:	294003cc 	andi	r5,r5,15
 8009194:	01000104 	movi	r4,4
 8009198:	29000126 	beq	r5,r4,80091a0 <__floatsisf+0xd4>
 800919c:	8121883a 	add	r16,r16,r4
 80091a0:	8101002c 	andhi	r4,r16,1024
 80091a4:	20000526 	beq	r4,zero,80091bc <__floatsisf+0xf0>
 80091a8:	00c027c4 	movi	r3,159
 80091ac:	1887c83a 	sub	r3,r3,r2
 80091b0:	00bf0034 	movhi	r2,64512
 80091b4:	10bfffc4 	addi	r2,r2,-1
 80091b8:	80a0703a 	and	r16,r16,r2
 80091bc:	802091ba 	slli	r16,r16,6
 80091c0:	8809883a 	mov	r4,r17
 80091c4:	8020d27a 	srli	r16,r16,9
 80091c8:	003fd806 	br	800912c <__alt_data_end+0xfc00912c>
 80091cc:	0009883a 	mov	r4,zero
 80091d0:	0007883a 	mov	r3,zero
 80091d4:	0021883a 	mov	r16,zero
 80091d8:	003fd406 	br	800912c <__alt_data_end+0xfc00912c>
 80091dc:	01800144 	movi	r6,5
 80091e0:	110006c4 	addi	r4,r2,27
 80091e4:	8108983a 	sll	r4,r16,r4
 80091e8:	308fc83a 	sub	r7,r6,r2
 80091ec:	81cad83a 	srl	r5,r16,r7
 80091f0:	2008c03a 	cmpne	r4,r4,zero
 80091f4:	214ab03a 	or	r5,r4,r5
 80091f8:	30bfe00e 	bge	r6,r2,800917c <__alt_data_end+0xfc00917c>
 80091fc:	003fdd06 	br	8009174 <__alt_data_end+0xfc009174>

08009200 <__adddf3>:
 8009200:	02000434 	movhi	r8,16
 8009204:	423fffc4 	addi	r8,r8,-1
 8009208:	defffb04 	addi	sp,sp,-20
 800920c:	2a12703a 	and	r9,r5,r8
 8009210:	2806d7fa 	srli	r3,r5,31
 8009214:	3a10703a 	and	r8,r7,r8
 8009218:	3804d53a 	srli	r2,r7,20
 800921c:	3014d77a 	srli	r10,r6,29
 8009220:	dc000015 	stw	r16,0(sp)
 8009224:	481290fa 	slli	r9,r9,3
 8009228:	2820d53a 	srli	r16,r5,20
 800922c:	401090fa 	slli	r8,r8,3
 8009230:	200ad77a 	srli	r5,r4,29
 8009234:	380ed7fa 	srli	r7,r7,31
 8009238:	dc800215 	stw	r18,8(sp)
 800923c:	dc400115 	stw	r17,4(sp)
 8009240:	dfc00415 	stw	ra,16(sp)
 8009244:	dcc00315 	stw	r19,12(sp)
 8009248:	1c803fcc 	andi	r18,r3,255
 800924c:	8401ffcc 	andi	r16,r16,2047
 8009250:	494ab03a 	or	r5,r9,r5
 8009254:	202290fa 	slli	r17,r4,3
 8009258:	1081ffcc 	andi	r2,r2,2047
 800925c:	4290b03a 	or	r8,r8,r10
 8009260:	300c90fa 	slli	r6,r6,3
 8009264:	91c07026 	beq	r18,r7,8009428 <__adddf3+0x228>
 8009268:	8087c83a 	sub	r3,r16,r2
 800926c:	00c0b30e 	bge	zero,r3,800953c <__adddf3+0x33c>
 8009270:	10002a1e 	bne	r2,zero,800931c <__adddf3+0x11c>
 8009274:	4184b03a 	or	r2,r8,r6
 8009278:	1000991e 	bne	r2,zero,80094e0 <__adddf3+0x2e0>
 800927c:	888001cc 	andi	r2,r17,7
 8009280:	10005b26 	beq	r2,zero,80093f0 <__adddf3+0x1f0>
 8009284:	88c003cc 	andi	r3,r17,15
 8009288:	00800104 	movi	r2,4
 800928c:	18805826 	beq	r3,r2,80093f0 <__adddf3+0x1f0>
 8009290:	89800104 	addi	r6,r17,4
 8009294:	3463803a 	cmpltu	r17,r6,r17
 8009298:	2c4b883a 	add	r5,r5,r17
 800929c:	2880202c 	andhi	r2,r5,128
 80092a0:	9007883a 	mov	r3,r18
 80092a4:	3023883a 	mov	r17,r6
 80092a8:	10005426 	beq	r2,zero,80093fc <__adddf3+0x1fc>
 80092ac:	84000044 	addi	r16,r16,1
 80092b0:	0081ffc4 	movi	r2,2047
 80092b4:	8080c126 	beq	r16,r2,80095bc <__adddf3+0x3bc>
 80092b8:	013fe034 	movhi	r4,65408
 80092bc:	213fffc4 	addi	r4,r4,-1
 80092c0:	290a703a 	and	r5,r5,r4
 80092c4:	2804977a 	slli	r2,r5,29
 80092c8:	280a927a 	slli	r5,r5,9
 80092cc:	8822d0fa 	srli	r17,r17,3
 80092d0:	8401ffcc 	andi	r16,r16,2047
 80092d4:	2808d33a 	srli	r4,r5,12
 80092d8:	1444b03a 	or	r2,r2,r17
 80092dc:	8401ffcc 	andi	r16,r16,2047
 80092e0:	800a953a 	slli	r5,r16,20
 80092e4:	18c03fcc 	andi	r3,r3,255
 80092e8:	04000434 	movhi	r16,16
 80092ec:	180697fa 	slli	r3,r3,31
 80092f0:	843fffc4 	addi	r16,r16,-1
 80092f4:	2420703a 	and	r16,r4,r16
 80092f8:	8160b03a 	or	r16,r16,r5
 80092fc:	80c6b03a 	or	r3,r16,r3
 8009300:	dfc00417 	ldw	ra,16(sp)
 8009304:	dcc00317 	ldw	r19,12(sp)
 8009308:	dc800217 	ldw	r18,8(sp)
 800930c:	dc400117 	ldw	r17,4(sp)
 8009310:	dc000017 	ldw	r16,0(sp)
 8009314:	dec00504 	addi	sp,sp,20
 8009318:	f800283a 	ret
 800931c:	0081ffc4 	movi	r2,2047
 8009320:	80bfd626 	beq	r16,r2,800927c <__alt_data_end+0xfc00927c>
 8009324:	42002034 	orhi	r8,r8,128
 8009328:	00800e04 	movi	r2,56
 800932c:	10c0a616 	blt	r2,r3,80095c8 <__adddf3+0x3c8>
 8009330:	008007c4 	movi	r2,31
 8009334:	10c0c916 	blt	r2,r3,800965c <__adddf3+0x45c>
 8009338:	00800804 	movi	r2,32
 800933c:	10c5c83a 	sub	r2,r2,r3
 8009340:	408e983a 	sll	r7,r8,r2
 8009344:	30c8d83a 	srl	r4,r6,r3
 8009348:	3084983a 	sll	r2,r6,r2
 800934c:	40c6d83a 	srl	r3,r8,r3
 8009350:	390cb03a 	or	r6,r7,r4
 8009354:	1004c03a 	cmpne	r2,r2,zero
 8009358:	308cb03a 	or	r6,r6,r2
 800935c:	898dc83a 	sub	r6,r17,r6
 8009360:	89a3803a 	cmpltu	r17,r17,r6
 8009364:	28cbc83a 	sub	r5,r5,r3
 8009368:	2c4bc83a 	sub	r5,r5,r17
 800936c:	3023883a 	mov	r17,r6
 8009370:	2880202c 	andhi	r2,r5,128
 8009374:	10006d26 	beq	r2,zero,800952c <__adddf3+0x32c>
 8009378:	04c02034 	movhi	r19,128
 800937c:	9cffffc4 	addi	r19,r19,-1
 8009380:	2ce6703a 	and	r19,r5,r19
 8009384:	98007e26 	beq	r19,zero,8009580 <__adddf3+0x380>
 8009388:	9809883a 	mov	r4,r19
 800938c:	800b9a00 	call	800b9a0 <__clzsi2>
 8009390:	10fffe04 	addi	r3,r2,-8
 8009394:	010007c4 	movi	r4,31
 8009398:	20c07f16 	blt	r4,r3,8009598 <__adddf3+0x398>
 800939c:	01400a04 	movi	r5,40
 80093a0:	2885c83a 	sub	r2,r5,r2
 80093a4:	888ad83a 	srl	r5,r17,r2
 80093a8:	98e6983a 	sll	r19,r19,r3
 80093ac:	88e2983a 	sll	r17,r17,r3
 80093b0:	2ce6b03a 	or	r19,r5,r19
 80093b4:	1c007c16 	blt	r3,r16,80095a8 <__adddf3+0x3a8>
 80093b8:	1c21c83a 	sub	r16,r3,r16
 80093bc:	81400044 	addi	r5,r16,1
 80093c0:	00c007c4 	movi	r3,31
 80093c4:	19409816 	blt	r3,r5,8009628 <__adddf3+0x428>
 80093c8:	1c21c83a 	sub	r16,r3,r16
 80093cc:	8c08983a 	sll	r4,r17,r16
 80093d0:	8946d83a 	srl	r3,r17,r5
 80093d4:	9c20983a 	sll	r16,r19,r16
 80093d8:	2008c03a 	cmpne	r4,r4,zero
 80093dc:	994ad83a 	srl	r5,r19,r5
 80093e0:	1c06b03a 	or	r3,r3,r16
 80093e4:	1922b03a 	or	r17,r3,r4
 80093e8:	0021883a 	mov	r16,zero
 80093ec:	003fa306 	br	800927c <__alt_data_end+0xfc00927c>
 80093f0:	2880202c 	andhi	r2,r5,128
 80093f4:	9007883a 	mov	r3,r18
 80093f8:	103fac1e 	bne	r2,zero,80092ac <__alt_data_end+0xfc0092ac>
 80093fc:	2804977a 	slli	r2,r5,29
 8009400:	8822d0fa 	srli	r17,r17,3
 8009404:	0101ffc4 	movi	r4,2047
 8009408:	280ad0fa 	srli	r5,r5,3
 800940c:	1444b03a 	or	r2,r2,r17
 8009410:	81002c26 	beq	r16,r4,80094c4 <__adddf3+0x2c4>
 8009414:	8120703a 	and	r16,r16,r4
 8009418:	01000434 	movhi	r4,16
 800941c:	213fffc4 	addi	r4,r4,-1
 8009420:	2908703a 	and	r4,r5,r4
 8009424:	003fad06 	br	80092dc <__alt_data_end+0xfc0092dc>
 8009428:	8089c83a 	sub	r4,r16,r2
 800942c:	01006a0e 	bge	zero,r4,80095d8 <__adddf3+0x3d8>
 8009430:	10003326 	beq	r2,zero,8009500 <__adddf3+0x300>
 8009434:	0081ffc4 	movi	r2,2047
 8009438:	80bf9026 	beq	r16,r2,800927c <__alt_data_end+0xfc00927c>
 800943c:	42002034 	orhi	r8,r8,128
 8009440:	00800e04 	movi	r2,56
 8009444:	1100b116 	blt	r2,r4,800970c <__adddf3+0x50c>
 8009448:	008007c4 	movi	r2,31
 800944c:	1100e216 	blt	r2,r4,80097d8 <__adddf3+0x5d8>
 8009450:	00800804 	movi	r2,32
 8009454:	1105c83a 	sub	r2,r2,r4
 8009458:	4092983a 	sll	r9,r8,r2
 800945c:	310ed83a 	srl	r7,r6,r4
 8009460:	3084983a 	sll	r2,r6,r2
 8009464:	4110d83a 	srl	r8,r8,r4
 8009468:	49ccb03a 	or	r6,r9,r7
 800946c:	1004c03a 	cmpne	r2,r2,zero
 8009470:	308cb03a 	or	r6,r6,r2
 8009474:	344d883a 	add	r6,r6,r17
 8009478:	3463803a 	cmpltu	r17,r6,r17
 800947c:	414b883a 	add	r5,r8,r5
 8009480:	2c4b883a 	add	r5,r5,r17
 8009484:	3023883a 	mov	r17,r6
 8009488:	2880202c 	andhi	r2,r5,128
 800948c:	10002726 	beq	r2,zero,800952c <__adddf3+0x32c>
 8009490:	84000044 	addi	r16,r16,1
 8009494:	0081ffc4 	movi	r2,2047
 8009498:	8080ae26 	beq	r16,r2,8009754 <__adddf3+0x554>
 800949c:	00bfe034 	movhi	r2,65408
 80094a0:	10bfffc4 	addi	r2,r2,-1
 80094a4:	288a703a 	and	r5,r5,r2
 80094a8:	880cd07a 	srli	r6,r17,1
 80094ac:	280897fa 	slli	r4,r5,31
 80094b0:	88c0004c 	andi	r3,r17,1
 80094b4:	30e2b03a 	or	r17,r6,r3
 80094b8:	280ad07a 	srli	r5,r5,1
 80094bc:	8922b03a 	or	r17,r17,r4
 80094c0:	003f6e06 	br	800927c <__alt_data_end+0xfc00927c>
 80094c4:	1148b03a 	or	r4,r2,r5
 80094c8:	20003c26 	beq	r4,zero,80095bc <__adddf3+0x3bc>
 80094cc:	29000234 	orhi	r4,r5,8
 80094d0:	01400434 	movhi	r5,16
 80094d4:	297fffc4 	addi	r5,r5,-1
 80094d8:	2148703a 	and	r4,r4,r5
 80094dc:	003f7f06 	br	80092dc <__alt_data_end+0xfc0092dc>
 80094e0:	18ffffc4 	addi	r3,r3,-1
 80094e4:	18004d1e 	bne	r3,zero,800961c <__adddf3+0x41c>
 80094e8:	898dc83a 	sub	r6,r17,r6
 80094ec:	89a3803a 	cmpltu	r17,r17,r6
 80094f0:	2a0bc83a 	sub	r5,r5,r8
 80094f4:	2c4bc83a 	sub	r5,r5,r17
 80094f8:	3023883a 	mov	r17,r6
 80094fc:	003f9c06 	br	8009370 <__alt_data_end+0xfc009370>
 8009500:	4184b03a 	or	r2,r8,r6
 8009504:	103f5d26 	beq	r2,zero,800927c <__alt_data_end+0xfc00927c>
 8009508:	213fffc4 	addi	r4,r4,-1
 800950c:	203fd926 	beq	r4,zero,8009474 <__alt_data_end+0xfc009474>
 8009510:	0081ffc4 	movi	r2,2047
 8009514:	80bfca1e 	bne	r16,r2,8009440 <__alt_data_end+0xfc009440>
 8009518:	003f5806 	br	800927c <__alt_data_end+0xfc00927c>
 800951c:	10c8b03a 	or	r4,r2,r3
 8009520:	20008b26 	beq	r4,zero,8009750 <__adddf3+0x550>
 8009524:	100b883a 	mov	r5,r2
 8009528:	1823883a 	mov	r17,r3
 800952c:	888001cc 	andi	r2,r17,7
 8009530:	103f541e 	bne	r2,zero,8009284 <__alt_data_end+0xfc009284>
 8009534:	9007883a 	mov	r3,r18
 8009538:	003fb006 	br	80093fc <__alt_data_end+0xfc0093fc>
 800953c:	1800531e 	bne	r3,zero,800968c <__adddf3+0x48c>
 8009540:	80800044 	addi	r2,r16,1
 8009544:	1081ffcc 	andi	r2,r2,2047
 8009548:	00c00044 	movi	r3,1
 800954c:	1880990e 	bge	r3,r2,80097b4 <__adddf3+0x5b4>
 8009550:	8985c83a 	sub	r2,r17,r6
 8009554:	8887803a 	cmpltu	r3,r17,r2
 8009558:	2a27c83a 	sub	r19,r5,r8
 800955c:	98e7c83a 	sub	r19,r19,r3
 8009560:	98c0202c 	andhi	r3,r19,128
 8009564:	18006226 	beq	r3,zero,80096f0 <__adddf3+0x4f0>
 8009568:	3463c83a 	sub	r17,r6,r17
 800956c:	4151c83a 	sub	r8,r8,r5
 8009570:	344d803a 	cmpltu	r6,r6,r17
 8009574:	41a7c83a 	sub	r19,r8,r6
 8009578:	3825883a 	mov	r18,r7
 800957c:	983f821e 	bne	r19,zero,8009388 <__alt_data_end+0xfc009388>
 8009580:	8809883a 	mov	r4,r17
 8009584:	800b9a00 	call	800b9a0 <__clzsi2>
 8009588:	10800804 	addi	r2,r2,32
 800958c:	10fffe04 	addi	r3,r2,-8
 8009590:	010007c4 	movi	r4,31
 8009594:	20ff810e 	bge	r4,r3,800939c <__alt_data_end+0xfc00939c>
 8009598:	14fff604 	addi	r19,r2,-40
 800959c:	8ce6983a 	sll	r19,r17,r19
 80095a0:	0023883a 	mov	r17,zero
 80095a4:	1c3f840e 	bge	r3,r16,80093b8 <__alt_data_end+0xfc0093b8>
 80095a8:	017fe034 	movhi	r5,65408
 80095ac:	297fffc4 	addi	r5,r5,-1
 80095b0:	80e1c83a 	sub	r16,r16,r3
 80095b4:	994a703a 	and	r5,r19,r5
 80095b8:	003f3006 	br	800927c <__alt_data_end+0xfc00927c>
 80095bc:	0009883a 	mov	r4,zero
 80095c0:	0005883a 	mov	r2,zero
 80095c4:	003f4506 	br	80092dc <__alt_data_end+0xfc0092dc>
 80095c8:	418cb03a 	or	r6,r8,r6
 80095cc:	300cc03a 	cmpne	r6,r6,zero
 80095d0:	0007883a 	mov	r3,zero
 80095d4:	003f6106 	br	800935c <__alt_data_end+0xfc00935c>
 80095d8:	2000921e 	bne	r4,zero,8009824 <__adddf3+0x624>
 80095dc:	80800044 	addi	r2,r16,1
 80095e0:	11c1ffcc 	andi	r7,r2,2047
 80095e4:	01000044 	movi	r4,1
 80095e8:	21c0610e 	bge	r4,r7,8009770 <__adddf3+0x570>
 80095ec:	0101ffc4 	movi	r4,2047
 80095f0:	1100a326 	beq	r2,r4,8009880 <__adddf3+0x680>
 80095f4:	344d883a 	add	r6,r6,r17
 80095f8:	3463803a 	cmpltu	r17,r6,r17
 80095fc:	414b883a 	add	r5,r8,r5
 8009600:	2c4b883a 	add	r5,r5,r17
 8009604:	282297fa 	slli	r17,r5,31
 8009608:	300cd07a 	srli	r6,r6,1
 800960c:	280ad07a 	srli	r5,r5,1
 8009610:	1021883a 	mov	r16,r2
 8009614:	89a2b03a 	or	r17,r17,r6
 8009618:	003f1806 	br	800927c <__alt_data_end+0xfc00927c>
 800961c:	0081ffc4 	movi	r2,2047
 8009620:	80bf411e 	bne	r16,r2,8009328 <__alt_data_end+0xfc009328>
 8009624:	003f1506 	br	800927c <__alt_data_end+0xfc00927c>
 8009628:	80bff844 	addi	r2,r16,-31
 800962c:	00c00804 	movi	r3,32
 8009630:	9884d83a 	srl	r2,r19,r2
 8009634:	28c04a26 	beq	r5,r3,8009760 <__adddf3+0x560>
 8009638:	00c00fc4 	movi	r3,63
 800963c:	1c21c83a 	sub	r16,r3,r16
 8009640:	9c26983a 	sll	r19,r19,r16
 8009644:	9c62b03a 	or	r17,r19,r17
 8009648:	8822c03a 	cmpne	r17,r17,zero
 800964c:	88a2b03a 	or	r17,r17,r2
 8009650:	000b883a 	mov	r5,zero
 8009654:	0021883a 	mov	r16,zero
 8009658:	003fb406 	br	800952c <__alt_data_end+0xfc00952c>
 800965c:	18bff804 	addi	r2,r3,-32
 8009660:	01000804 	movi	r4,32
 8009664:	4084d83a 	srl	r2,r8,r2
 8009668:	19003f26 	beq	r3,r4,8009768 <__adddf3+0x568>
 800966c:	01001004 	movi	r4,64
 8009670:	20c7c83a 	sub	r3,r4,r3
 8009674:	40d0983a 	sll	r8,r8,r3
 8009678:	418cb03a 	or	r6,r8,r6
 800967c:	300cc03a 	cmpne	r6,r6,zero
 8009680:	308cb03a 	or	r6,r6,r2
 8009684:	0007883a 	mov	r3,zero
 8009688:	003f3406 	br	800935c <__alt_data_end+0xfc00935c>
 800968c:	80002326 	beq	r16,zero,800971c <__adddf3+0x51c>
 8009690:	0101ffc4 	movi	r4,2047
 8009694:	11005e26 	beq	r2,r4,8009810 <__adddf3+0x610>
 8009698:	00c7c83a 	sub	r3,zero,r3
 800969c:	29402034 	orhi	r5,r5,128
 80096a0:	01000e04 	movi	r4,56
 80096a4:	20c07216 	blt	r4,r3,8009870 <__adddf3+0x670>
 80096a8:	010007c4 	movi	r4,31
 80096ac:	20c0ce16 	blt	r4,r3,80099e8 <__adddf3+0x7e8>
 80096b0:	01000804 	movi	r4,32
 80096b4:	20c9c83a 	sub	r4,r4,r3
 80096b8:	2914983a 	sll	r10,r5,r4
 80096bc:	88d2d83a 	srl	r9,r17,r3
 80096c0:	8908983a 	sll	r4,r17,r4
 80096c4:	28c6d83a 	srl	r3,r5,r3
 80096c8:	5262b03a 	or	r17,r10,r9
 80096cc:	2008c03a 	cmpne	r4,r4,zero
 80096d0:	8922b03a 	or	r17,r17,r4
 80096d4:	3463c83a 	sub	r17,r6,r17
 80096d8:	40c7c83a 	sub	r3,r8,r3
 80096dc:	344d803a 	cmpltu	r6,r6,r17
 80096e0:	198bc83a 	sub	r5,r3,r6
 80096e4:	1021883a 	mov	r16,r2
 80096e8:	3825883a 	mov	r18,r7
 80096ec:	003f2006 	br	8009370 <__alt_data_end+0xfc009370>
 80096f0:	9886b03a 	or	r3,r19,r2
 80096f4:	1800141e 	bne	r3,zero,8009748 <__adddf3+0x548>
 80096f8:	0007883a 	mov	r3,zero
 80096fc:	000b883a 	mov	r5,zero
 8009700:	0023883a 	mov	r17,zero
 8009704:	0021883a 	mov	r16,zero
 8009708:	003f3c06 	br	80093fc <__alt_data_end+0xfc0093fc>
 800970c:	418cb03a 	or	r6,r8,r6
 8009710:	300cc03a 	cmpne	r6,r6,zero
 8009714:	0011883a 	mov	r8,zero
 8009718:	003f5606 	br	8009474 <__alt_data_end+0xfc009474>
 800971c:	2c48b03a 	or	r4,r5,r17
 8009720:	20003b26 	beq	r4,zero,8009810 <__adddf3+0x610>
 8009724:	00c6303a 	nor	r3,zero,r3
 8009728:	1800371e 	bne	r3,zero,8009808 <__adddf3+0x608>
 800972c:	3463c83a 	sub	r17,r6,r17
 8009730:	414bc83a 	sub	r5,r8,r5
 8009734:	344d803a 	cmpltu	r6,r6,r17
 8009738:	298bc83a 	sub	r5,r5,r6
 800973c:	1021883a 	mov	r16,r2
 8009740:	3825883a 	mov	r18,r7
 8009744:	003f0a06 	br	8009370 <__alt_data_end+0xfc009370>
 8009748:	1023883a 	mov	r17,r2
 800974c:	003f0d06 	br	8009384 <__alt_data_end+0xfc009384>
 8009750:	0007883a 	mov	r3,zero
 8009754:	000b883a 	mov	r5,zero
 8009758:	0023883a 	mov	r17,zero
 800975c:	003f2706 	br	80093fc <__alt_data_end+0xfc0093fc>
 8009760:	0027883a 	mov	r19,zero
 8009764:	003fb706 	br	8009644 <__alt_data_end+0xfc009644>
 8009768:	0011883a 	mov	r8,zero
 800976c:	003fc206 	br	8009678 <__alt_data_end+0xfc009678>
 8009770:	2c44b03a 	or	r2,r5,r17
 8009774:	8000871e 	bne	r16,zero,8009994 <__adddf3+0x794>
 8009778:	1000b126 	beq	r2,zero,8009a40 <__adddf3+0x840>
 800977c:	4184b03a 	or	r2,r8,r6
 8009780:	103ebe26 	beq	r2,zero,800927c <__alt_data_end+0xfc00927c>
 8009784:	3445883a 	add	r2,r6,r17
 8009788:	1463803a 	cmpltu	r17,r2,r17
 800978c:	414b883a 	add	r5,r8,r5
 8009790:	2c4b883a 	add	r5,r5,r17
 8009794:	28c0202c 	andhi	r3,r5,128
 8009798:	1023883a 	mov	r17,r2
 800979c:	183f6326 	beq	r3,zero,800952c <__alt_data_end+0xfc00952c>
 80097a0:	00bfe034 	movhi	r2,65408
 80097a4:	10bfffc4 	addi	r2,r2,-1
 80097a8:	2021883a 	mov	r16,r4
 80097ac:	288a703a 	and	r5,r5,r2
 80097b0:	003eb206 	br	800927c <__alt_data_end+0xfc00927c>
 80097b4:	2c44b03a 	or	r2,r5,r17
 80097b8:	8000251e 	bne	r16,zero,8009850 <__adddf3+0x650>
 80097bc:	10004b1e 	bne	r2,zero,80098ec <__adddf3+0x6ec>
 80097c0:	4184b03a 	or	r2,r8,r6
 80097c4:	103fe226 	beq	r2,zero,8009750 <__alt_data_end+0xfc009750>
 80097c8:	400b883a 	mov	r5,r8
 80097cc:	3023883a 	mov	r17,r6
 80097d0:	3825883a 	mov	r18,r7
 80097d4:	003ea906 	br	800927c <__alt_data_end+0xfc00927c>
 80097d8:	20bff804 	addi	r2,r4,-32
 80097dc:	01c00804 	movi	r7,32
 80097e0:	4084d83a 	srl	r2,r8,r2
 80097e4:	21c07e26 	beq	r4,r7,80099e0 <__adddf3+0x7e0>
 80097e8:	01c01004 	movi	r7,64
 80097ec:	3909c83a 	sub	r4,r7,r4
 80097f0:	4110983a 	sll	r8,r8,r4
 80097f4:	418cb03a 	or	r6,r8,r6
 80097f8:	300cc03a 	cmpne	r6,r6,zero
 80097fc:	308cb03a 	or	r6,r6,r2
 8009800:	0011883a 	mov	r8,zero
 8009804:	003f1b06 	br	8009474 <__alt_data_end+0xfc009474>
 8009808:	0101ffc4 	movi	r4,2047
 800980c:	113fa41e 	bne	r2,r4,80096a0 <__alt_data_end+0xfc0096a0>
 8009810:	400b883a 	mov	r5,r8
 8009814:	3023883a 	mov	r17,r6
 8009818:	1021883a 	mov	r16,r2
 800981c:	3825883a 	mov	r18,r7
 8009820:	003e9606 	br	800927c <__alt_data_end+0xfc00927c>
 8009824:	80001a1e 	bne	r16,zero,8009890 <__adddf3+0x690>
 8009828:	2c4eb03a 	or	r7,r5,r17
 800982c:	38005526 	beq	r7,zero,8009984 <__adddf3+0x784>
 8009830:	0108303a 	nor	r4,zero,r4
 8009834:	2000511e 	bne	r4,zero,800997c <__adddf3+0x77c>
 8009838:	89a3883a 	add	r17,r17,r6
 800983c:	414b883a 	add	r5,r8,r5
 8009840:	898d803a 	cmpltu	r6,r17,r6
 8009844:	298b883a 	add	r5,r5,r6
 8009848:	1021883a 	mov	r16,r2
 800984c:	003f0e06 	br	8009488 <__alt_data_end+0xfc009488>
 8009850:	1000341e 	bne	r2,zero,8009924 <__adddf3+0x724>
 8009854:	4184b03a 	or	r2,r8,r6
 8009858:	10006f26 	beq	r2,zero,8009a18 <__adddf3+0x818>
 800985c:	400b883a 	mov	r5,r8
 8009860:	3023883a 	mov	r17,r6
 8009864:	3825883a 	mov	r18,r7
 8009868:	0401ffc4 	movi	r16,2047
 800986c:	003e8306 	br	800927c <__alt_data_end+0xfc00927c>
 8009870:	2c62b03a 	or	r17,r5,r17
 8009874:	8822c03a 	cmpne	r17,r17,zero
 8009878:	0007883a 	mov	r3,zero
 800987c:	003f9506 	br	80096d4 <__alt_data_end+0xfc0096d4>
 8009880:	1021883a 	mov	r16,r2
 8009884:	000b883a 	mov	r5,zero
 8009888:	0023883a 	mov	r17,zero
 800988c:	003edb06 	br	80093fc <__alt_data_end+0xfc0093fc>
 8009890:	01c1ffc4 	movi	r7,2047
 8009894:	11c03b26 	beq	r2,r7,8009984 <__adddf3+0x784>
 8009898:	0109c83a 	sub	r4,zero,r4
 800989c:	29402034 	orhi	r5,r5,128
 80098a0:	01c00e04 	movi	r7,56
 80098a4:	39006216 	blt	r7,r4,8009a30 <__adddf3+0x830>
 80098a8:	01c007c4 	movi	r7,31
 80098ac:	39006b16 	blt	r7,r4,8009a5c <__adddf3+0x85c>
 80098b0:	01c00804 	movi	r7,32
 80098b4:	390fc83a 	sub	r7,r7,r4
 80098b8:	29d4983a 	sll	r10,r5,r7
 80098bc:	8912d83a 	srl	r9,r17,r4
 80098c0:	89ce983a 	sll	r7,r17,r7
 80098c4:	2908d83a 	srl	r4,r5,r4
 80098c8:	5262b03a 	or	r17,r10,r9
 80098cc:	380ac03a 	cmpne	r5,r7,zero
 80098d0:	8962b03a 	or	r17,r17,r5
 80098d4:	89a3883a 	add	r17,r17,r6
 80098d8:	2211883a 	add	r8,r4,r8
 80098dc:	898d803a 	cmpltu	r6,r17,r6
 80098e0:	418b883a 	add	r5,r8,r6
 80098e4:	1021883a 	mov	r16,r2
 80098e8:	003ee706 	br	8009488 <__alt_data_end+0xfc009488>
 80098ec:	4184b03a 	or	r2,r8,r6
 80098f0:	103e6226 	beq	r2,zero,800927c <__alt_data_end+0xfc00927c>
 80098f4:	8987c83a 	sub	r3,r17,r6
 80098f8:	88c9803a 	cmpltu	r4,r17,r3
 80098fc:	2a05c83a 	sub	r2,r5,r8
 8009900:	1105c83a 	sub	r2,r2,r4
 8009904:	1100202c 	andhi	r4,r2,128
 8009908:	203f0426 	beq	r4,zero,800951c <__alt_data_end+0xfc00951c>
 800990c:	3463c83a 	sub	r17,r6,r17
 8009910:	414bc83a 	sub	r5,r8,r5
 8009914:	344d803a 	cmpltu	r6,r6,r17
 8009918:	298bc83a 	sub	r5,r5,r6
 800991c:	3825883a 	mov	r18,r7
 8009920:	003e5606 	br	800927c <__alt_data_end+0xfc00927c>
 8009924:	4184b03a 	or	r2,r8,r6
 8009928:	10002b26 	beq	r2,zero,80099d8 <__adddf3+0x7d8>
 800992c:	2804d0fa 	srli	r2,r5,3
 8009930:	8822d0fa 	srli	r17,r17,3
 8009934:	280a977a 	slli	r5,r5,29
 8009938:	10c0022c 	andhi	r3,r2,8
 800993c:	2c62b03a 	or	r17,r5,r17
 8009940:	18000826 	beq	r3,zero,8009964 <__adddf3+0x764>
 8009944:	4008d0fa 	srli	r4,r8,3
 8009948:	20c0022c 	andhi	r3,r4,8
 800994c:	1800051e 	bne	r3,zero,8009964 <__adddf3+0x764>
 8009950:	300cd0fa 	srli	r6,r6,3
 8009954:	4010977a 	slli	r8,r8,29
 8009958:	2005883a 	mov	r2,r4
 800995c:	3825883a 	mov	r18,r7
 8009960:	41a2b03a 	or	r17,r8,r6
 8009964:	880ad77a 	srli	r5,r17,29
 8009968:	100490fa 	slli	r2,r2,3
 800996c:	882290fa 	slli	r17,r17,3
 8009970:	0401ffc4 	movi	r16,2047
 8009974:	288ab03a 	or	r5,r5,r2
 8009978:	003e4006 	br	800927c <__alt_data_end+0xfc00927c>
 800997c:	01c1ffc4 	movi	r7,2047
 8009980:	11ffc71e 	bne	r2,r7,80098a0 <__alt_data_end+0xfc0098a0>
 8009984:	400b883a 	mov	r5,r8
 8009988:	3023883a 	mov	r17,r6
 800998c:	1021883a 	mov	r16,r2
 8009990:	003e3a06 	br	800927c <__alt_data_end+0xfc00927c>
 8009994:	10002d26 	beq	r2,zero,8009a4c <__adddf3+0x84c>
 8009998:	4184b03a 	or	r2,r8,r6
 800999c:	10000e26 	beq	r2,zero,80099d8 <__adddf3+0x7d8>
 80099a0:	2804d0fa 	srli	r2,r5,3
 80099a4:	8822d0fa 	srli	r17,r17,3
 80099a8:	280a977a 	slli	r5,r5,29
 80099ac:	10c0022c 	andhi	r3,r2,8
 80099b0:	2c62b03a 	or	r17,r5,r17
 80099b4:	183feb26 	beq	r3,zero,8009964 <__alt_data_end+0xfc009964>
 80099b8:	4008d0fa 	srli	r4,r8,3
 80099bc:	20c0022c 	andhi	r3,r4,8
 80099c0:	183fe81e 	bne	r3,zero,8009964 <__alt_data_end+0xfc009964>
 80099c4:	300cd0fa 	srli	r6,r6,3
 80099c8:	4010977a 	slli	r8,r8,29
 80099cc:	2005883a 	mov	r2,r4
 80099d0:	41a2b03a 	or	r17,r8,r6
 80099d4:	003fe306 	br	8009964 <__alt_data_end+0xfc009964>
 80099d8:	0401ffc4 	movi	r16,2047
 80099dc:	003e2706 	br	800927c <__alt_data_end+0xfc00927c>
 80099e0:	0011883a 	mov	r8,zero
 80099e4:	003f8306 	br	80097f4 <__alt_data_end+0xfc0097f4>
 80099e8:	193ff804 	addi	r4,r3,-32
 80099ec:	02400804 	movi	r9,32
 80099f0:	2908d83a 	srl	r4,r5,r4
 80099f4:	1a402526 	beq	r3,r9,8009a8c <__adddf3+0x88c>
 80099f8:	02401004 	movi	r9,64
 80099fc:	48c7c83a 	sub	r3,r9,r3
 8009a00:	28ca983a 	sll	r5,r5,r3
 8009a04:	2c62b03a 	or	r17,r5,r17
 8009a08:	8822c03a 	cmpne	r17,r17,zero
 8009a0c:	8922b03a 	or	r17,r17,r4
 8009a10:	0007883a 	mov	r3,zero
 8009a14:	003f2f06 	br	80096d4 <__alt_data_end+0xfc0096d4>
 8009a18:	01402034 	movhi	r5,128
 8009a1c:	0007883a 	mov	r3,zero
 8009a20:	297fffc4 	addi	r5,r5,-1
 8009a24:	047ffe04 	movi	r17,-8
 8009a28:	0401ffc4 	movi	r16,2047
 8009a2c:	003e7306 	br	80093fc <__alt_data_end+0xfc0093fc>
 8009a30:	2c62b03a 	or	r17,r5,r17
 8009a34:	8822c03a 	cmpne	r17,r17,zero
 8009a38:	0009883a 	mov	r4,zero
 8009a3c:	003fa506 	br	80098d4 <__alt_data_end+0xfc0098d4>
 8009a40:	400b883a 	mov	r5,r8
 8009a44:	3023883a 	mov	r17,r6
 8009a48:	003e0c06 	br	800927c <__alt_data_end+0xfc00927c>
 8009a4c:	400b883a 	mov	r5,r8
 8009a50:	3023883a 	mov	r17,r6
 8009a54:	0401ffc4 	movi	r16,2047
 8009a58:	003e0806 	br	800927c <__alt_data_end+0xfc00927c>
 8009a5c:	21fff804 	addi	r7,r4,-32
 8009a60:	02400804 	movi	r9,32
 8009a64:	29ced83a 	srl	r7,r5,r7
 8009a68:	22400a26 	beq	r4,r9,8009a94 <__adddf3+0x894>
 8009a6c:	02401004 	movi	r9,64
 8009a70:	4909c83a 	sub	r4,r9,r4
 8009a74:	290a983a 	sll	r5,r5,r4
 8009a78:	2c62b03a 	or	r17,r5,r17
 8009a7c:	8822c03a 	cmpne	r17,r17,zero
 8009a80:	89e2b03a 	or	r17,r17,r7
 8009a84:	0009883a 	mov	r4,zero
 8009a88:	003f9206 	br	80098d4 <__alt_data_end+0xfc0098d4>
 8009a8c:	000b883a 	mov	r5,zero
 8009a90:	003fdc06 	br	8009a04 <__alt_data_end+0xfc009a04>
 8009a94:	000b883a 	mov	r5,zero
 8009a98:	003ff706 	br	8009a78 <__alt_data_end+0xfc009a78>

08009a9c <__divdf3>:
 8009a9c:	defff204 	addi	sp,sp,-56
 8009aa0:	dd000815 	stw	r20,32(sp)
 8009aa4:	2828d53a 	srli	r20,r5,20
 8009aa8:	dd800a15 	stw	r22,40(sp)
 8009aac:	282cd7fa 	srli	r22,r5,31
 8009ab0:	dc000415 	stw	r16,16(sp)
 8009ab4:	04000434 	movhi	r16,16
 8009ab8:	df000c15 	stw	fp,48(sp)
 8009abc:	dcc00715 	stw	r19,28(sp)
 8009ac0:	dc800615 	stw	r18,24(sp)
 8009ac4:	dc400515 	stw	r17,20(sp)
 8009ac8:	843fffc4 	addi	r16,r16,-1
 8009acc:	dfc00d15 	stw	ra,52(sp)
 8009ad0:	ddc00b15 	stw	r23,44(sp)
 8009ad4:	dd400915 	stw	r21,36(sp)
 8009ad8:	a501ffcc 	andi	r20,r20,2047
 8009adc:	2025883a 	mov	r18,r4
 8009ae0:	2027883a 	mov	r19,r4
 8009ae4:	2c22703a 	and	r17,r5,r16
 8009ae8:	b7003fcc 	andi	fp,r22,255
 8009aec:	a0005e26 	beq	r20,zero,8009c68 <__divdf3+0x1cc>
 8009af0:	0081ffc4 	movi	r2,2047
 8009af4:	a0803526 	beq	r20,r2,8009bcc <__divdf3+0x130>
 8009af8:	8c000434 	orhi	r16,r17,16
 8009afc:	2004d77a 	srli	r2,r4,29
 8009b00:	802090fa 	slli	r16,r16,3
 8009b04:	202690fa 	slli	r19,r4,3
 8009b08:	a53f0044 	addi	r20,r20,-1023
 8009b0c:	80a2b03a 	or	r17,r16,r2
 8009b10:	0025883a 	mov	r18,zero
 8009b14:	0011883a 	mov	r8,zero
 8009b18:	380ad53a 	srli	r5,r7,20
 8009b1c:	382ed7fa 	srli	r23,r7,31
 8009b20:	04000434 	movhi	r16,16
 8009b24:	843fffc4 	addi	r16,r16,-1
 8009b28:	2941ffcc 	andi	r5,r5,2047
 8009b2c:	302b883a 	mov	r21,r6
 8009b30:	3c20703a 	and	r16,r7,r16
 8009b34:	ba403fcc 	andi	r9,r23,255
 8009b38:	28006726 	beq	r5,zero,8009cd8 <__divdf3+0x23c>
 8009b3c:	0081ffc4 	movi	r2,2047
 8009b40:	28805f26 	beq	r5,r2,8009cc0 <__divdf3+0x224>
 8009b44:	84000434 	orhi	r16,r16,16
 8009b48:	3004d77a 	srli	r2,r6,29
 8009b4c:	802090fa 	slli	r16,r16,3
 8009b50:	302a90fa 	slli	r21,r6,3
 8009b54:	297f0044 	addi	r5,r5,-1023
 8009b58:	80a0b03a 	or	r16,r16,r2
 8009b5c:	000f883a 	mov	r7,zero
 8009b60:	3c86b03a 	or	r3,r7,r18
 8009b64:	180690ba 	slli	r3,r3,2
 8009b68:	00820074 	movhi	r2,2049
 8009b6c:	10a6e304 	addi	r2,r2,-25716
 8009b70:	1887883a 	add	r3,r3,r2
 8009b74:	18c00017 	ldw	r3,0(r3)
 8009b78:	b5c8f03a 	xor	r4,r22,r23
 8009b7c:	200d883a 	mov	r6,r4
 8009b80:	24803fcc 	andi	r18,r4,255
 8009b84:	a169c83a 	sub	r20,r20,r5
 8009b88:	1800683a 	jmp	r3
 8009b8c:	08009dd4 	ori	zero,at,631
 8009b90:	08009c04 	addi	zero,at,624
 8009b94:	08009d98 	cmpnei	zero,at,630
 8009b98:	08009be8 	cmpgeui	zero,at,623
 8009b9c:	08009d98 	cmpnei	zero,at,630
 8009ba0:	08009d6c 	andhi	zero,at,629
 8009ba4:	08009d98 	cmpnei	zero,at,630
 8009ba8:	08009be8 	cmpgeui	zero,at,623
 8009bac:	08009c04 	addi	zero,at,624
 8009bb0:	08009c04 	addi	zero,at,624
 8009bb4:	08009d6c 	andhi	zero,at,629
 8009bb8:	08009be8 	cmpgeui	zero,at,623
 8009bbc:	08009bf8 	rdprs	zero,at,623
 8009bc0:	08009bf8 	rdprs	zero,at,623
 8009bc4:	08009bf8 	rdprs	zero,at,623
 8009bc8:	08009da8 	cmpgeui	zero,at,630
 8009bcc:	8904b03a 	or	r2,r17,r4
 8009bd0:	1000631e 	bne	r2,zero,8009d60 <__divdf3+0x2c4>
 8009bd4:	04800204 	movi	r18,8
 8009bd8:	0023883a 	mov	r17,zero
 8009bdc:	0027883a 	mov	r19,zero
 8009be0:	02000084 	movi	r8,2
 8009be4:	003fcc06 	br	8009b18 <__alt_data_end+0xfc009b18>
 8009be8:	8023883a 	mov	r17,r16
 8009bec:	a827883a 	mov	r19,r21
 8009bf0:	4839883a 	mov	fp,r9
 8009bf4:	3811883a 	mov	r8,r7
 8009bf8:	00800084 	movi	r2,2
 8009bfc:	40812a1e 	bne	r8,r2,800a0a8 <__divdf3+0x60c>
 8009c00:	e025883a 	mov	r18,fp
 8009c04:	9180004c 	andi	r6,r18,1
 8009c08:	0101ffc4 	movi	r4,2047
 8009c0c:	000b883a 	mov	r5,zero
 8009c10:	0027883a 	mov	r19,zero
 8009c14:	2008953a 	slli	r4,r4,20
 8009c18:	30c03fcc 	andi	r3,r6,255
 8009c1c:	04000434 	movhi	r16,16
 8009c20:	180697fa 	slli	r3,r3,31
 8009c24:	843fffc4 	addi	r16,r16,-1
 8009c28:	2c20703a 	and	r16,r5,r16
 8009c2c:	8120b03a 	or	r16,r16,r4
 8009c30:	80c6b03a 	or	r3,r16,r3
 8009c34:	9805883a 	mov	r2,r19
 8009c38:	dfc00d17 	ldw	ra,52(sp)
 8009c3c:	df000c17 	ldw	fp,48(sp)
 8009c40:	ddc00b17 	ldw	r23,44(sp)
 8009c44:	dd800a17 	ldw	r22,40(sp)
 8009c48:	dd400917 	ldw	r21,36(sp)
 8009c4c:	dd000817 	ldw	r20,32(sp)
 8009c50:	dcc00717 	ldw	r19,28(sp)
 8009c54:	dc800617 	ldw	r18,24(sp)
 8009c58:	dc400517 	ldw	r17,20(sp)
 8009c5c:	dc000417 	ldw	r16,16(sp)
 8009c60:	dec00e04 	addi	sp,sp,56
 8009c64:	f800283a 	ret
 8009c68:	8904b03a 	or	r2,r17,r4
 8009c6c:	10003726 	beq	r2,zero,8009d4c <__divdf3+0x2b0>
 8009c70:	88011c26 	beq	r17,zero,800a0e4 <__divdf3+0x648>
 8009c74:	8809883a 	mov	r4,r17
 8009c78:	d9800315 	stw	r6,12(sp)
 8009c7c:	d9c00115 	stw	r7,4(sp)
 8009c80:	800b9a00 	call	800b9a0 <__clzsi2>
 8009c84:	d9800317 	ldw	r6,12(sp)
 8009c88:	d9c00117 	ldw	r7,4(sp)
 8009c8c:	1007883a 	mov	r3,r2
 8009c90:	01000a04 	movi	r4,40
 8009c94:	1cfffe04 	addi	r19,r3,-8
 8009c98:	20c9c83a 	sub	r4,r4,r3
 8009c9c:	8cca983a 	sll	r5,r17,r19
 8009ca0:	9108d83a 	srl	r4,r18,r4
 8009ca4:	94e6983a 	sll	r19,r18,r19
 8009ca8:	2162b03a 	or	r17,r4,r5
 8009cac:	053f0344 	movi	r20,-1011
 8009cb0:	a0e9c83a 	sub	r20,r20,r3
 8009cb4:	0025883a 	mov	r18,zero
 8009cb8:	0011883a 	mov	r8,zero
 8009cbc:	003f9606 	br	8009b18 <__alt_data_end+0xfc009b18>
 8009cc0:	8184b03a 	or	r2,r16,r6
 8009cc4:	10001f1e 	bne	r2,zero,8009d44 <__divdf3+0x2a8>
 8009cc8:	0021883a 	mov	r16,zero
 8009ccc:	002b883a 	mov	r21,zero
 8009cd0:	01c00084 	movi	r7,2
 8009cd4:	003fa206 	br	8009b60 <__alt_data_end+0xfc009b60>
 8009cd8:	8184b03a 	or	r2,r16,r6
 8009cdc:	10001526 	beq	r2,zero,8009d34 <__divdf3+0x298>
 8009ce0:	80010c26 	beq	r16,zero,800a114 <__divdf3+0x678>
 8009ce4:	8009883a 	mov	r4,r16
 8009ce8:	d9800315 	stw	r6,12(sp)
 8009cec:	da000215 	stw	r8,8(sp)
 8009cf0:	da400015 	stw	r9,0(sp)
 8009cf4:	800b9a00 	call	800b9a0 <__clzsi2>
 8009cf8:	d9800317 	ldw	r6,12(sp)
 8009cfc:	da000217 	ldw	r8,8(sp)
 8009d00:	da400017 	ldw	r9,0(sp)
 8009d04:	1007883a 	mov	r3,r2
 8009d08:	01000a04 	movi	r4,40
 8009d0c:	1d7ffe04 	addi	r21,r3,-8
 8009d10:	20c9c83a 	sub	r4,r4,r3
 8009d14:	8560983a 	sll	r16,r16,r21
 8009d18:	3108d83a 	srl	r4,r6,r4
 8009d1c:	356a983a 	sll	r21,r6,r21
 8009d20:	2420b03a 	or	r16,r4,r16
 8009d24:	017f0344 	movi	r5,-1011
 8009d28:	28cbc83a 	sub	r5,r5,r3
 8009d2c:	000f883a 	mov	r7,zero
 8009d30:	003f8b06 	br	8009b60 <__alt_data_end+0xfc009b60>
 8009d34:	0021883a 	mov	r16,zero
 8009d38:	002b883a 	mov	r21,zero
 8009d3c:	01c00044 	movi	r7,1
 8009d40:	003f8706 	br	8009b60 <__alt_data_end+0xfc009b60>
 8009d44:	01c000c4 	movi	r7,3
 8009d48:	003f8506 	br	8009b60 <__alt_data_end+0xfc009b60>
 8009d4c:	04800104 	movi	r18,4
 8009d50:	0023883a 	mov	r17,zero
 8009d54:	0027883a 	mov	r19,zero
 8009d58:	02000044 	movi	r8,1
 8009d5c:	003f6e06 	br	8009b18 <__alt_data_end+0xfc009b18>
 8009d60:	04800304 	movi	r18,12
 8009d64:	020000c4 	movi	r8,3
 8009d68:	003f6b06 	br	8009b18 <__alt_data_end+0xfc009b18>
 8009d6c:	01400434 	movhi	r5,16
 8009d70:	000d883a 	mov	r6,zero
 8009d74:	297fffc4 	addi	r5,r5,-1
 8009d78:	04ffffc4 	movi	r19,-1
 8009d7c:	0101ffc4 	movi	r4,2047
 8009d80:	003fa406 	br	8009c14 <__alt_data_end+0xfc009c14>
 8009d84:	043f0084 	movi	r16,-1022
 8009d88:	8521c83a 	sub	r16,r16,r20
 8009d8c:	00800e04 	movi	r2,56
 8009d90:	1401200e 	bge	r2,r16,800a214 <__divdf3+0x778>
 8009d94:	9180004c 	andi	r6,r18,1
 8009d98:	0009883a 	mov	r4,zero
 8009d9c:	000b883a 	mov	r5,zero
 8009da0:	0027883a 	mov	r19,zero
 8009da4:	003f9b06 	br	8009c14 <__alt_data_end+0xfc009c14>
 8009da8:	8880022c 	andhi	r2,r17,8
 8009dac:	1000c726 	beq	r2,zero,800a0cc <__divdf3+0x630>
 8009db0:	8080022c 	andhi	r2,r16,8
 8009db4:	1000c51e 	bne	r2,zero,800a0cc <__divdf3+0x630>
 8009db8:	00800434 	movhi	r2,16
 8009dbc:	81400234 	orhi	r5,r16,8
 8009dc0:	10bfffc4 	addi	r2,r2,-1
 8009dc4:	b80d883a 	mov	r6,r23
 8009dc8:	288a703a 	and	r5,r5,r2
 8009dcc:	a827883a 	mov	r19,r21
 8009dd0:	003fea06 	br	8009d7c <__alt_data_end+0xfc009d7c>
 8009dd4:	8440ea36 	bltu	r16,r17,800a180 <__divdf3+0x6e4>
 8009dd8:	8c00e826 	beq	r17,r16,800a17c <__divdf3+0x6e0>
 8009ddc:	a53fffc4 	addi	r20,r20,-1
 8009de0:	882d883a 	mov	r22,r17
 8009de4:	000d883a 	mov	r6,zero
 8009de8:	a804d63a 	srli	r2,r21,24
 8009dec:	8020923a 	slli	r16,r16,8
 8009df0:	b009883a 	mov	r4,r22
 8009df4:	d9800315 	stw	r6,12(sp)
 8009df8:	1420b03a 	or	r16,r2,r16
 8009dfc:	802ed43a 	srli	r23,r16,16
 8009e00:	873fffcc 	andi	fp,r16,65535
 8009e04:	a82a923a 	slli	r21,r21,8
 8009e08:	b80b883a 	mov	r5,r23
 8009e0c:	800bb200 	call	800bb20 <__udivsi3>
 8009e10:	b009883a 	mov	r4,r22
 8009e14:	b80b883a 	mov	r5,r23
 8009e18:	1023883a 	mov	r17,r2
 8009e1c:	800bb280 	call	800bb28 <__umodsi3>
 8009e20:	1004943a 	slli	r2,r2,16
 8009e24:	9808d43a 	srli	r4,r19,16
 8009e28:	8f2d383a 	mul	r22,r17,fp
 8009e2c:	d9800317 	ldw	r6,12(sp)
 8009e30:	1106b03a 	or	r3,r2,r4
 8009e34:	1d80062e 	bgeu	r3,r22,8009e50 <__divdf3+0x3b4>
 8009e38:	1c07883a 	add	r3,r3,r16
 8009e3c:	88bfffc4 	addi	r2,r17,-1
 8009e40:	1c00dc36 	bltu	r3,r16,800a1b4 <__divdf3+0x718>
 8009e44:	1d80db2e 	bgeu	r3,r22,800a1b4 <__divdf3+0x718>
 8009e48:	8c7fff84 	addi	r17,r17,-2
 8009e4c:	1c07883a 	add	r3,r3,r16
 8009e50:	1dadc83a 	sub	r22,r3,r22
 8009e54:	b009883a 	mov	r4,r22
 8009e58:	b80b883a 	mov	r5,r23
 8009e5c:	d9800315 	stw	r6,12(sp)
 8009e60:	800bb200 	call	800bb20 <__udivsi3>
 8009e64:	b009883a 	mov	r4,r22
 8009e68:	b80b883a 	mov	r5,r23
 8009e6c:	d8800015 	stw	r2,0(sp)
 8009e70:	800bb280 	call	800bb28 <__umodsi3>
 8009e74:	da400017 	ldw	r9,0(sp)
 8009e78:	1004943a 	slli	r2,r2,16
 8009e7c:	9cffffcc 	andi	r19,r19,65535
 8009e80:	4f07383a 	mul	r3,r9,fp
 8009e84:	14c8b03a 	or	r4,r2,r19
 8009e88:	d9800317 	ldw	r6,12(sp)
 8009e8c:	20c0062e 	bgeu	r4,r3,8009ea8 <__divdf3+0x40c>
 8009e90:	2409883a 	add	r4,r4,r16
 8009e94:	48bfffc4 	addi	r2,r9,-1
 8009e98:	2400c436 	bltu	r4,r16,800a1ac <__divdf3+0x710>
 8009e9c:	20c0c32e 	bgeu	r4,r3,800a1ac <__divdf3+0x710>
 8009ea0:	4a7fff84 	addi	r9,r9,-2
 8009ea4:	2409883a 	add	r4,r4,r16
 8009ea8:	8822943a 	slli	r17,r17,16
 8009eac:	a80ed43a 	srli	r7,r21,16
 8009eb0:	aa3fffcc 	andi	r8,r21,65535
 8009eb4:	4c62b03a 	or	r17,r9,r17
 8009eb8:	8816d43a 	srli	r11,r17,16
 8009ebc:	897fffcc 	andi	r5,r17,65535
 8009ec0:	2a15383a 	mul	r10,r5,r8
 8009ec4:	5a19383a 	mul	r12,r11,r8
 8009ec8:	29cb383a 	mul	r5,r5,r7
 8009ecc:	5012d43a 	srli	r9,r10,16
 8009ed0:	20c5c83a 	sub	r2,r4,r3
 8009ed4:	614b883a 	add	r5,r12,r5
 8009ed8:	2a4b883a 	add	r5,r5,r9
 8009edc:	59c7383a 	mul	r3,r11,r7
 8009ee0:	2b00022e 	bgeu	r5,r12,8009eec <__divdf3+0x450>
 8009ee4:	01000074 	movhi	r4,1
 8009ee8:	1907883a 	add	r3,r3,r4
 8009eec:	2808d43a 	srli	r4,r5,16
 8009ef0:	280a943a 	slli	r5,r5,16
 8009ef4:	54ffffcc 	andi	r19,r10,65535
 8009ef8:	1907883a 	add	r3,r3,r4
 8009efc:	2ccb883a 	add	r5,r5,r19
 8009f00:	10c09336 	bltu	r2,r3,800a150 <__divdf3+0x6b4>
 8009f04:	10c0ad26 	beq	r2,r3,800a1bc <__divdf3+0x720>
 8009f08:	10c7c83a 	sub	r3,r2,r3
 8009f0c:	3167c83a 	sub	r19,r6,r5
 8009f10:	34ed803a 	cmpltu	r22,r6,r19
 8009f14:	1dadc83a 	sub	r22,r3,r22
 8009f18:	b400b226 	beq	r22,r16,800a1e4 <__divdf3+0x748>
 8009f1c:	b009883a 	mov	r4,r22
 8009f20:	b80b883a 	mov	r5,r23
 8009f24:	d9c00115 	stw	r7,4(sp)
 8009f28:	da000215 	stw	r8,8(sp)
 8009f2c:	800bb200 	call	800bb20 <__udivsi3>
 8009f30:	b009883a 	mov	r4,r22
 8009f34:	b80b883a 	mov	r5,r23
 8009f38:	d8800315 	stw	r2,12(sp)
 8009f3c:	800bb280 	call	800bb28 <__umodsi3>
 8009f40:	d9800317 	ldw	r6,12(sp)
 8009f44:	1004943a 	slli	r2,r2,16
 8009f48:	9808d43a 	srli	r4,r19,16
 8009f4c:	372d383a 	mul	r22,r6,fp
 8009f50:	d9c00117 	ldw	r7,4(sp)
 8009f54:	1106b03a 	or	r3,r2,r4
 8009f58:	da000217 	ldw	r8,8(sp)
 8009f5c:	1d80062e 	bgeu	r3,r22,8009f78 <__divdf3+0x4dc>
 8009f60:	1c07883a 	add	r3,r3,r16
 8009f64:	30bfffc4 	addi	r2,r6,-1
 8009f68:	1c00a036 	bltu	r3,r16,800a1ec <__divdf3+0x750>
 8009f6c:	1d809f2e 	bgeu	r3,r22,800a1ec <__divdf3+0x750>
 8009f70:	31bfff84 	addi	r6,r6,-2
 8009f74:	1c07883a 	add	r3,r3,r16
 8009f78:	1dadc83a 	sub	r22,r3,r22
 8009f7c:	b009883a 	mov	r4,r22
 8009f80:	b80b883a 	mov	r5,r23
 8009f84:	d9800315 	stw	r6,12(sp)
 8009f88:	d9c00115 	stw	r7,4(sp)
 8009f8c:	da000215 	stw	r8,8(sp)
 8009f90:	800bb200 	call	800bb20 <__udivsi3>
 8009f94:	b009883a 	mov	r4,r22
 8009f98:	b80b883a 	mov	r5,r23
 8009f9c:	d8800015 	stw	r2,0(sp)
 8009fa0:	800bb280 	call	800bb28 <__umodsi3>
 8009fa4:	da400017 	ldw	r9,0(sp)
 8009fa8:	1004943a 	slli	r2,r2,16
 8009fac:	993fffcc 	andi	r4,r19,65535
 8009fb0:	4f39383a 	mul	fp,r9,fp
 8009fb4:	1106b03a 	or	r3,r2,r4
 8009fb8:	d9800317 	ldw	r6,12(sp)
 8009fbc:	d9c00117 	ldw	r7,4(sp)
 8009fc0:	da000217 	ldw	r8,8(sp)
 8009fc4:	1f00062e 	bgeu	r3,fp,8009fe0 <__divdf3+0x544>
 8009fc8:	1c07883a 	add	r3,r3,r16
 8009fcc:	48bfffc4 	addi	r2,r9,-1
 8009fd0:	1c008836 	bltu	r3,r16,800a1f4 <__divdf3+0x758>
 8009fd4:	1f00872e 	bgeu	r3,fp,800a1f4 <__divdf3+0x758>
 8009fd8:	4a7fff84 	addi	r9,r9,-2
 8009fdc:	1c07883a 	add	r3,r3,r16
 8009fe0:	3008943a 	slli	r4,r6,16
 8009fe4:	1f07c83a 	sub	r3,r3,fp
 8009fe8:	4926b03a 	or	r19,r9,r4
 8009fec:	993fffcc 	andi	r4,r19,65535
 8009ff0:	980cd43a 	srli	r6,r19,16
 8009ff4:	220b383a 	mul	r5,r4,r8
 8009ff8:	21c5383a 	mul	r2,r4,r7
 8009ffc:	3211383a 	mul	r8,r6,r8
 800a000:	2808d43a 	srli	r4,r5,16
 800a004:	31cf383a 	mul	r7,r6,r7
 800a008:	4085883a 	add	r2,r8,r2
 800a00c:	1105883a 	add	r2,r2,r4
 800a010:	1200022e 	bgeu	r2,r8,800a01c <__divdf3+0x580>
 800a014:	01000074 	movhi	r4,1
 800a018:	390f883a 	add	r7,r7,r4
 800a01c:	1008d43a 	srli	r4,r2,16
 800a020:	1004943a 	slli	r2,r2,16
 800a024:	297fffcc 	andi	r5,r5,65535
 800a028:	390f883a 	add	r7,r7,r4
 800a02c:	1145883a 	add	r2,r2,r5
 800a030:	19c06536 	bltu	r3,r7,800a1c8 <__divdf3+0x72c>
 800a034:	19c09f26 	beq	r3,r7,800a2b4 <__divdf3+0x818>
 800a038:	9cc00054 	ori	r19,r19,1
 800a03c:	a100ffc4 	addi	r4,r20,1023
 800a040:	013f500e 	bge	zero,r4,8009d84 <__alt_data_end+0xfc009d84>
 800a044:	988001cc 	andi	r2,r19,7
 800a048:	10000726 	beq	r2,zero,800a068 <__divdf3+0x5cc>
 800a04c:	98c003cc 	andi	r3,r19,15
 800a050:	00800104 	movi	r2,4
 800a054:	18800426 	beq	r3,r2,800a068 <__divdf3+0x5cc>
 800a058:	9885883a 	add	r2,r19,r2
 800a05c:	14e1803a 	cmpltu	r16,r2,r19
 800a060:	8c23883a 	add	r17,r17,r16
 800a064:	1027883a 	mov	r19,r2
 800a068:	8880402c 	andhi	r2,r17,256
 800a06c:	10000426 	beq	r2,zero,800a080 <__divdf3+0x5e4>
 800a070:	00bfc034 	movhi	r2,65280
 800a074:	10bfffc4 	addi	r2,r2,-1
 800a078:	a1010004 	addi	r4,r20,1024
 800a07c:	88a2703a 	and	r17,r17,r2
 800a080:	0081ff84 	movi	r2,2046
 800a084:	113edf16 	blt	r2,r4,8009c04 <__alt_data_end+0xfc009c04>
 800a088:	9826d0fa 	srli	r19,r19,3
 800a08c:	8804977a 	slli	r2,r17,29
 800a090:	8820927a 	slli	r16,r17,9
 800a094:	2101ffcc 	andi	r4,r4,2047
 800a098:	14e6b03a 	or	r19,r2,r19
 800a09c:	800ad33a 	srli	r5,r16,12
 800a0a0:	9180004c 	andi	r6,r18,1
 800a0a4:	003edb06 	br	8009c14 <__alt_data_end+0xfc009c14>
 800a0a8:	008000c4 	movi	r2,3
 800a0ac:	4080a826 	beq	r8,r2,800a350 <__divdf3+0x8b4>
 800a0b0:	00800044 	movi	r2,1
 800a0b4:	4080551e 	bne	r8,r2,800a20c <__divdf3+0x770>
 800a0b8:	e00d883a 	mov	r6,fp
 800a0bc:	0009883a 	mov	r4,zero
 800a0c0:	000b883a 	mov	r5,zero
 800a0c4:	0027883a 	mov	r19,zero
 800a0c8:	003ed206 	br	8009c14 <__alt_data_end+0xfc009c14>
 800a0cc:	00800434 	movhi	r2,16
 800a0d0:	89400234 	orhi	r5,r17,8
 800a0d4:	10bfffc4 	addi	r2,r2,-1
 800a0d8:	b00d883a 	mov	r6,r22
 800a0dc:	288a703a 	and	r5,r5,r2
 800a0e0:	003f2606 	br	8009d7c <__alt_data_end+0xfc009d7c>
 800a0e4:	d9800315 	stw	r6,12(sp)
 800a0e8:	d9c00115 	stw	r7,4(sp)
 800a0ec:	800b9a00 	call	800b9a0 <__clzsi2>
 800a0f0:	10c00804 	addi	r3,r2,32
 800a0f4:	010009c4 	movi	r4,39
 800a0f8:	d9800317 	ldw	r6,12(sp)
 800a0fc:	d9c00117 	ldw	r7,4(sp)
 800a100:	20fee30e 	bge	r4,r3,8009c90 <__alt_data_end+0xfc009c90>
 800a104:	117ffe04 	addi	r5,r2,-8
 800a108:	9162983a 	sll	r17,r18,r5
 800a10c:	0027883a 	mov	r19,zero
 800a110:	003ee606 	br	8009cac <__alt_data_end+0xfc009cac>
 800a114:	3009883a 	mov	r4,r6
 800a118:	d9800315 	stw	r6,12(sp)
 800a11c:	da000215 	stw	r8,8(sp)
 800a120:	da400015 	stw	r9,0(sp)
 800a124:	800b9a00 	call	800b9a0 <__clzsi2>
 800a128:	10c00804 	addi	r3,r2,32
 800a12c:	010009c4 	movi	r4,39
 800a130:	d9800317 	ldw	r6,12(sp)
 800a134:	da000217 	ldw	r8,8(sp)
 800a138:	da400017 	ldw	r9,0(sp)
 800a13c:	20fef20e 	bge	r4,r3,8009d08 <__alt_data_end+0xfc009d08>
 800a140:	10bffe04 	addi	r2,r2,-8
 800a144:	a8a0983a 	sll	r16,r21,r2
 800a148:	002b883a 	mov	r21,zero
 800a14c:	003ef506 	br	8009d24 <__alt_data_end+0xfc009d24>
 800a150:	354d883a 	add	r6,r6,r21
 800a154:	3549803a 	cmpltu	r4,r6,r21
 800a158:	2409883a 	add	r4,r4,r16
 800a15c:	2089883a 	add	r4,r4,r2
 800a160:	88bfffc4 	addi	r2,r17,-1
 800a164:	81000c2e 	bgeu	r16,r4,800a198 <__divdf3+0x6fc>
 800a168:	20c04436 	bltu	r4,r3,800a27c <__divdf3+0x7e0>
 800a16c:	19006f26 	beq	r3,r4,800a32c <__divdf3+0x890>
 800a170:	20c7c83a 	sub	r3,r4,r3
 800a174:	1023883a 	mov	r17,r2
 800a178:	003f6406 	br	8009f0c <__alt_data_end+0xfc009f0c>
 800a17c:	9d7f1736 	bltu	r19,r21,8009ddc <__alt_data_end+0xfc009ddc>
 800a180:	9806d07a 	srli	r3,r19,1
 800a184:	880497fa 	slli	r2,r17,31
 800a188:	980c97fa 	slli	r6,r19,31
 800a18c:	882cd07a 	srli	r22,r17,1
 800a190:	18a6b03a 	or	r19,r3,r2
 800a194:	003f1406 	br	8009de8 <__alt_data_end+0xfc009de8>
 800a198:	243ff51e 	bne	r4,r16,800a170 <__alt_data_end+0xfc00a170>
 800a19c:	357ff22e 	bgeu	r6,r21,800a168 <__alt_data_end+0xfc00a168>
 800a1a0:	80c7c83a 	sub	r3,r16,r3
 800a1a4:	1023883a 	mov	r17,r2
 800a1a8:	003f5806 	br	8009f0c <__alt_data_end+0xfc009f0c>
 800a1ac:	1013883a 	mov	r9,r2
 800a1b0:	003f3d06 	br	8009ea8 <__alt_data_end+0xfc009ea8>
 800a1b4:	1023883a 	mov	r17,r2
 800a1b8:	003f2506 	br	8009e50 <__alt_data_end+0xfc009e50>
 800a1bc:	317fe436 	bltu	r6,r5,800a150 <__alt_data_end+0xfc00a150>
 800a1c0:	0007883a 	mov	r3,zero
 800a1c4:	003f5106 	br	8009f0c <__alt_data_end+0xfc009f0c>
 800a1c8:	1c07883a 	add	r3,r3,r16
 800a1cc:	993fffc4 	addi	r4,r19,-1
 800a1d0:	1c000a2e 	bgeu	r3,r16,800a1fc <__divdf3+0x760>
 800a1d4:	2027883a 	mov	r19,r4
 800a1d8:	19ff971e 	bne	r3,r7,800a038 <__alt_data_end+0xfc00a038>
 800a1dc:	a8bf961e 	bne	r21,r2,800a038 <__alt_data_end+0xfc00a038>
 800a1e0:	003f9606 	br	800a03c <__alt_data_end+0xfc00a03c>
 800a1e4:	04ffffc4 	movi	r19,-1
 800a1e8:	003f9406 	br	800a03c <__alt_data_end+0xfc00a03c>
 800a1ec:	100d883a 	mov	r6,r2
 800a1f0:	003f6106 	br	8009f78 <__alt_data_end+0xfc009f78>
 800a1f4:	1013883a 	mov	r9,r2
 800a1f8:	003f7906 	br	8009fe0 <__alt_data_end+0xfc009fe0>
 800a1fc:	19c02636 	bltu	r3,r7,800a298 <__divdf3+0x7fc>
 800a200:	38c04d26 	beq	r7,r3,800a338 <__divdf3+0x89c>
 800a204:	2027883a 	mov	r19,r4
 800a208:	003f8b06 	br	800a038 <__alt_data_end+0xfc00a038>
 800a20c:	e025883a 	mov	r18,fp
 800a210:	003f8a06 	br	800a03c <__alt_data_end+0xfc00a03c>
 800a214:	008007c4 	movi	r2,31
 800a218:	14002a16 	blt	r2,r16,800a2c4 <__divdf3+0x828>
 800a21c:	a5010784 	addi	r20,r20,1054
 800a220:	8d04983a 	sll	r2,r17,r20
 800a224:	9c06d83a 	srl	r3,r19,r16
 800a228:	9d28983a 	sll	r20,r19,r20
 800a22c:	8c20d83a 	srl	r16,r17,r16
 800a230:	1886b03a 	or	r3,r3,r2
 800a234:	a004c03a 	cmpne	r2,r20,zero
 800a238:	1884b03a 	or	r2,r3,r2
 800a23c:	10c001cc 	andi	r3,r2,7
 800a240:	18000726 	beq	r3,zero,800a260 <__divdf3+0x7c4>
 800a244:	110003cc 	andi	r4,r2,15
 800a248:	00c00104 	movi	r3,4
 800a24c:	20c00426 	beq	r4,r3,800a260 <__divdf3+0x7c4>
 800a250:	10c00104 	addi	r3,r2,4
 800a254:	1885803a 	cmpltu	r2,r3,r2
 800a258:	80a1883a 	add	r16,r16,r2
 800a25c:	1805883a 	mov	r2,r3
 800a260:	80c0202c 	andhi	r3,r16,128
 800a264:	18002d26 	beq	r3,zero,800a31c <__divdf3+0x880>
 800a268:	9180004c 	andi	r6,r18,1
 800a26c:	01000044 	movi	r4,1
 800a270:	000b883a 	mov	r5,zero
 800a274:	0027883a 	mov	r19,zero
 800a278:	003e6606 	br	8009c14 <__alt_data_end+0xfc009c14>
 800a27c:	354d883a 	add	r6,r6,r21
 800a280:	356d803a 	cmpltu	r22,r6,r21
 800a284:	b42d883a 	add	r22,r22,r16
 800a288:	b12d883a 	add	r22,r22,r4
 800a28c:	8c7fff84 	addi	r17,r17,-2
 800a290:	b0c7c83a 	sub	r3,r22,r3
 800a294:	003f1d06 	br	8009f0c <__alt_data_end+0xfc009f0c>
 800a298:	ad4b883a 	add	r5,r21,r21
 800a29c:	2d6b803a 	cmpltu	r21,r5,r21
 800a2a0:	ac2b883a 	add	r21,r21,r16
 800a2a4:	1d47883a 	add	r3,r3,r21
 800a2a8:	993fff84 	addi	r4,r19,-2
 800a2ac:	282b883a 	mov	r21,r5
 800a2b0:	003fc806 	br	800a1d4 <__alt_data_end+0xfc00a1d4>
 800a2b4:	103fc41e 	bne	r2,zero,800a1c8 <__alt_data_end+0xfc00a1c8>
 800a2b8:	002b883a 	mov	r21,zero
 800a2bc:	a8bf5e1e 	bne	r21,r2,800a038 <__alt_data_end+0xfc00a038>
 800a2c0:	003f5e06 	br	800a03c <__alt_data_end+0xfc00a03c>
 800a2c4:	00bef884 	movi	r2,-1054
 800a2c8:	1505c83a 	sub	r2,r2,r20
 800a2cc:	00c00804 	movi	r3,32
 800a2d0:	8884d83a 	srl	r2,r17,r2
 800a2d4:	80c01c26 	beq	r16,r3,800a348 <__divdf3+0x8ac>
 800a2d8:	a0c10f84 	addi	r3,r20,1086
 800a2dc:	88c6983a 	sll	r3,r17,r3
 800a2e0:	1cc6b03a 	or	r3,r3,r19
 800a2e4:	1806c03a 	cmpne	r3,r3,zero
 800a2e8:	1884b03a 	or	r2,r3,r2
 800a2ec:	140001cc 	andi	r16,r2,7
 800a2f0:	8000061e 	bne	r16,zero,800a30c <__divdf3+0x870>
 800a2f4:	000b883a 	mov	r5,zero
 800a2f8:	1004d0fa 	srli	r2,r2,3
 800a2fc:	9180004c 	andi	r6,r18,1
 800a300:	0009883a 	mov	r4,zero
 800a304:	1426b03a 	or	r19,r2,r16
 800a308:	003e4206 	br	8009c14 <__alt_data_end+0xfc009c14>
 800a30c:	110003cc 	andi	r4,r2,15
 800a310:	00c00104 	movi	r3,4
 800a314:	0021883a 	mov	r16,zero
 800a318:	20ffcd1e 	bne	r4,r3,800a250 <__alt_data_end+0xfc00a250>
 800a31c:	800a927a 	slli	r5,r16,9
 800a320:	8020977a 	slli	r16,r16,29
 800a324:	280ad33a 	srli	r5,r5,12
 800a328:	003ff306 	br	800a2f8 <__alt_data_end+0xfc00a2f8>
 800a32c:	317fd336 	bltu	r6,r5,800a27c <__alt_data_end+0xfc00a27c>
 800a330:	1023883a 	mov	r17,r2
 800a334:	003fa206 	br	800a1c0 <__alt_data_end+0xfc00a1c0>
 800a338:	a8bfd736 	bltu	r21,r2,800a298 <__alt_data_end+0xfc00a298>
 800a33c:	2027883a 	mov	r19,r4
 800a340:	a8bf3d1e 	bne	r21,r2,800a038 <__alt_data_end+0xfc00a038>
 800a344:	003f3d06 	br	800a03c <__alt_data_end+0xfc00a03c>
 800a348:	0007883a 	mov	r3,zero
 800a34c:	003fe406 	br	800a2e0 <__alt_data_end+0xfc00a2e0>
 800a350:	00800434 	movhi	r2,16
 800a354:	89400234 	orhi	r5,r17,8
 800a358:	10bfffc4 	addi	r2,r2,-1
 800a35c:	e00d883a 	mov	r6,fp
 800a360:	288a703a 	and	r5,r5,r2
 800a364:	003e8506 	br	8009d7c <__alt_data_end+0xfc009d7c>

0800a368 <__eqdf2>:
 800a368:	2804d53a 	srli	r2,r5,20
 800a36c:	3806d53a 	srli	r3,r7,20
 800a370:	02000434 	movhi	r8,16
 800a374:	423fffc4 	addi	r8,r8,-1
 800a378:	1081ffcc 	andi	r2,r2,2047
 800a37c:	0241ffc4 	movi	r9,2047
 800a380:	2a14703a 	and	r10,r5,r8
 800a384:	18c1ffcc 	andi	r3,r3,2047
 800a388:	3a10703a 	and	r8,r7,r8
 800a38c:	280ad7fa 	srli	r5,r5,31
 800a390:	380ed7fa 	srli	r7,r7,31
 800a394:	12400f26 	beq	r2,r9,800a3d4 <__eqdf2+0x6c>
 800a398:	0241ffc4 	movi	r9,2047
 800a39c:	1a400326 	beq	r3,r9,800a3ac <__eqdf2+0x44>
 800a3a0:	10c00526 	beq	r2,r3,800a3b8 <__eqdf2+0x50>
 800a3a4:	00800044 	movi	r2,1
 800a3a8:	f800283a 	ret
 800a3ac:	4192b03a 	or	r9,r8,r6
 800a3b0:	483ffc1e 	bne	r9,zero,800a3a4 <__alt_data_end+0xfc00a3a4>
 800a3b4:	10fffb1e 	bne	r2,r3,800a3a4 <__alt_data_end+0xfc00a3a4>
 800a3b8:	523ffa1e 	bne	r10,r8,800a3a4 <__alt_data_end+0xfc00a3a4>
 800a3bc:	21bff91e 	bne	r4,r6,800a3a4 <__alt_data_end+0xfc00a3a4>
 800a3c0:	29c00826 	beq	r5,r7,800a3e4 <__eqdf2+0x7c>
 800a3c4:	103ff71e 	bne	r2,zero,800a3a4 <__alt_data_end+0xfc00a3a4>
 800a3c8:	5104b03a 	or	r2,r10,r4
 800a3cc:	1004c03a 	cmpne	r2,r2,zero
 800a3d0:	f800283a 	ret
 800a3d4:	5112b03a 	or	r9,r10,r4
 800a3d8:	483fef26 	beq	r9,zero,800a398 <__alt_data_end+0xfc00a398>
 800a3dc:	00800044 	movi	r2,1
 800a3e0:	f800283a 	ret
 800a3e4:	0005883a 	mov	r2,zero
 800a3e8:	f800283a 	ret

0800a3ec <__gedf2>:
 800a3ec:	2804d53a 	srli	r2,r5,20
 800a3f0:	3806d53a 	srli	r3,r7,20
 800a3f4:	02000434 	movhi	r8,16
 800a3f8:	423fffc4 	addi	r8,r8,-1
 800a3fc:	0241ffc4 	movi	r9,2047
 800a400:	1081ffcc 	andi	r2,r2,2047
 800a404:	2a14703a 	and	r10,r5,r8
 800a408:	1a46703a 	and	r3,r3,r9
 800a40c:	3a10703a 	and	r8,r7,r8
 800a410:	280ad7fa 	srli	r5,r5,31
 800a414:	380ed7fa 	srli	r7,r7,31
 800a418:	12400b26 	beq	r2,r9,800a448 <__gedf2+0x5c>
 800a41c:	1a401626 	beq	r3,r9,800a478 <__gedf2+0x8c>
 800a420:	10000c1e 	bne	r2,zero,800a454 <__gedf2+0x68>
 800a424:	5112b03a 	or	r9,r10,r4
 800a428:	4813003a 	cmpeq	r9,r9,zero
 800a42c:	4817883a 	mov	r11,r9
 800a430:	18000c1e 	bne	r3,zero,800a464 <__gedf2+0x78>
 800a434:	4198b03a 	or	r12,r8,r6
 800a438:	60000a1e 	bne	r12,zero,800a464 <__gedf2+0x78>
 800a43c:	48001326 	beq	r9,zero,800a48c <__gedf2+0xa0>
 800a440:	0005883a 	mov	r2,zero
 800a444:	f800283a 	ret
 800a448:	5112b03a 	or	r9,r10,r4
 800a44c:	4800191e 	bne	r9,zero,800a4b4 <__gedf2+0xc8>
 800a450:	18800926 	beq	r3,r2,800a478 <__gedf2+0x8c>
 800a454:	18000b1e 	bne	r3,zero,800a484 <__gedf2+0x98>
 800a458:	4192b03a 	or	r9,r8,r6
 800a45c:	0017883a 	mov	r11,zero
 800a460:	48000a26 	beq	r9,zero,800a48c <__gedf2+0xa0>
 800a464:	39c03fcc 	andi	r7,r7,255
 800a468:	58000726 	beq	r11,zero,800a488 <__gedf2+0x9c>
 800a46c:	3800081e 	bne	r7,zero,800a490 <__gedf2+0xa4>
 800a470:	00bfffc4 	movi	r2,-1
 800a474:	f800283a 	ret
 800a478:	4192b03a 	or	r9,r8,r6
 800a47c:	48000d1e 	bne	r9,zero,800a4b4 <__gedf2+0xc8>
 800a480:	103fe826 	beq	r2,zero,800a424 <__alt_data_end+0xfc00a424>
 800a484:	39c03fcc 	andi	r7,r7,255
 800a488:	29c00326 	beq	r5,r7,800a498 <__gedf2+0xac>
 800a48c:	283ff81e 	bne	r5,zero,800a470 <__alt_data_end+0xfc00a470>
 800a490:	00800044 	movi	r2,1
 800a494:	f800283a 	ret
 800a498:	18bffc16 	blt	r3,r2,800a48c <__alt_data_end+0xfc00a48c>
 800a49c:	10c00316 	blt	r2,r3,800a4ac <__gedf2+0xc0>
 800a4a0:	42bffa36 	bltu	r8,r10,800a48c <__alt_data_end+0xfc00a48c>
 800a4a4:	52000526 	beq	r10,r8,800a4bc <__gedf2+0xd0>
 800a4a8:	523fe52e 	bgeu	r10,r8,800a440 <__alt_data_end+0xfc00a440>
 800a4ac:	283ff026 	beq	r5,zero,800a470 <__alt_data_end+0xfc00a470>
 800a4b0:	003ff706 	br	800a490 <__alt_data_end+0xfc00a490>
 800a4b4:	00bfff84 	movi	r2,-2
 800a4b8:	f800283a 	ret
 800a4bc:	313ff336 	bltu	r6,r4,800a48c <__alt_data_end+0xfc00a48c>
 800a4c0:	21bfdf2e 	bgeu	r4,r6,800a440 <__alt_data_end+0xfc00a440>
 800a4c4:	283fea26 	beq	r5,zero,800a470 <__alt_data_end+0xfc00a470>
 800a4c8:	003ff106 	br	800a490 <__alt_data_end+0xfc00a490>

0800a4cc <__ledf2>:
 800a4cc:	2804d53a 	srli	r2,r5,20
 800a4d0:	3810d53a 	srli	r8,r7,20
 800a4d4:	00c00434 	movhi	r3,16
 800a4d8:	18ffffc4 	addi	r3,r3,-1
 800a4dc:	0241ffc4 	movi	r9,2047
 800a4e0:	1081ffcc 	andi	r2,r2,2047
 800a4e4:	28d4703a 	and	r10,r5,r3
 800a4e8:	4250703a 	and	r8,r8,r9
 800a4ec:	38c6703a 	and	r3,r7,r3
 800a4f0:	280ad7fa 	srli	r5,r5,31
 800a4f4:	380ed7fa 	srli	r7,r7,31
 800a4f8:	12400b26 	beq	r2,r9,800a528 <__ledf2+0x5c>
 800a4fc:	42401926 	beq	r8,r9,800a564 <__ledf2+0x98>
 800a500:	10000c1e 	bne	r2,zero,800a534 <__ledf2+0x68>
 800a504:	5112b03a 	or	r9,r10,r4
 800a508:	4813003a 	cmpeq	r9,r9,zero
 800a50c:	4817883a 	mov	r11,r9
 800a510:	40000f26 	beq	r8,zero,800a550 <__ledf2+0x84>
 800a514:	39c03fcc 	andi	r7,r7,255
 800a518:	58001826 	beq	r11,zero,800a57c <__ledf2+0xb0>
 800a51c:	38000a1e 	bne	r7,zero,800a548 <__ledf2+0x7c>
 800a520:	00bfffc4 	movi	r2,-1
 800a524:	f800283a 	ret
 800a528:	5112b03a 	or	r9,r10,r4
 800a52c:	48000f1e 	bne	r9,zero,800a56c <__ledf2+0xa0>
 800a530:	40800c26 	beq	r8,r2,800a564 <__ledf2+0x98>
 800a534:	4000101e 	bne	r8,zero,800a578 <__ledf2+0xac>
 800a538:	1992b03a 	or	r9,r3,r6
 800a53c:	0017883a 	mov	r11,zero
 800a540:	483ff41e 	bne	r9,zero,800a514 <__alt_data_end+0xfc00a514>
 800a544:	283ff61e 	bne	r5,zero,800a520 <__alt_data_end+0xfc00a520>
 800a548:	00800044 	movi	r2,1
 800a54c:	f800283a 	ret
 800a550:	1998b03a 	or	r12,r3,r6
 800a554:	603fef1e 	bne	r12,zero,800a514 <__alt_data_end+0xfc00a514>
 800a558:	483ffa26 	beq	r9,zero,800a544 <__alt_data_end+0xfc00a544>
 800a55c:	0005883a 	mov	r2,zero
 800a560:	f800283a 	ret
 800a564:	1992b03a 	or	r9,r3,r6
 800a568:	48000226 	beq	r9,zero,800a574 <__ledf2+0xa8>
 800a56c:	00800084 	movi	r2,2
 800a570:	f800283a 	ret
 800a574:	103fe326 	beq	r2,zero,800a504 <__alt_data_end+0xfc00a504>
 800a578:	39c03fcc 	andi	r7,r7,255
 800a57c:	29fff11e 	bne	r5,r7,800a544 <__alt_data_end+0xfc00a544>
 800a580:	40bff016 	blt	r8,r2,800a544 <__alt_data_end+0xfc00a544>
 800a584:	12000316 	blt	r2,r8,800a594 <__ledf2+0xc8>
 800a588:	1abfee36 	bltu	r3,r10,800a544 <__alt_data_end+0xfc00a544>
 800a58c:	50c00326 	beq	r10,r3,800a59c <__ledf2+0xd0>
 800a590:	50fff22e 	bgeu	r10,r3,800a55c <__alt_data_end+0xfc00a55c>
 800a594:	283fe226 	beq	r5,zero,800a520 <__alt_data_end+0xfc00a520>
 800a598:	003feb06 	br	800a548 <__alt_data_end+0xfc00a548>
 800a59c:	313fe936 	bltu	r6,r4,800a544 <__alt_data_end+0xfc00a544>
 800a5a0:	21bfee2e 	bgeu	r4,r6,800a55c <__alt_data_end+0xfc00a55c>
 800a5a4:	283fde26 	beq	r5,zero,800a520 <__alt_data_end+0xfc00a520>
 800a5a8:	003fe706 	br	800a548 <__alt_data_end+0xfc00a548>

0800a5ac <__muldf3>:
 800a5ac:	defff204 	addi	sp,sp,-56
 800a5b0:	2804d53a 	srli	r2,r5,20
 800a5b4:	dd800a15 	stw	r22,40(sp)
 800a5b8:	282cd7fa 	srli	r22,r5,31
 800a5bc:	dc000415 	stw	r16,16(sp)
 800a5c0:	04000434 	movhi	r16,16
 800a5c4:	df000c15 	stw	fp,48(sp)
 800a5c8:	dd000815 	stw	r20,32(sp)
 800a5cc:	dcc00715 	stw	r19,28(sp)
 800a5d0:	dc800615 	stw	r18,24(sp)
 800a5d4:	dc400515 	stw	r17,20(sp)
 800a5d8:	843fffc4 	addi	r16,r16,-1
 800a5dc:	dfc00d15 	stw	ra,52(sp)
 800a5e0:	ddc00b15 	stw	r23,44(sp)
 800a5e4:	dd400915 	stw	r21,36(sp)
 800a5e8:	1501ffcc 	andi	r20,r2,2047
 800a5ec:	2023883a 	mov	r17,r4
 800a5f0:	2025883a 	mov	r18,r4
 800a5f4:	2c20703a 	and	r16,r5,r16
 800a5f8:	b027883a 	mov	r19,r22
 800a5fc:	b7003fcc 	andi	fp,r22,255
 800a600:	a0005926 	beq	r20,zero,800a768 <__muldf3+0x1bc>
 800a604:	0081ffc4 	movi	r2,2047
 800a608:	a0803426 	beq	r20,r2,800a6dc <__muldf3+0x130>
 800a60c:	84000434 	orhi	r16,r16,16
 800a610:	2004d77a 	srli	r2,r4,29
 800a614:	802090fa 	slli	r16,r16,3
 800a618:	202490fa 	slli	r18,r4,3
 800a61c:	a53f0044 	addi	r20,r20,-1023
 800a620:	80a0b03a 	or	r16,r16,r2
 800a624:	002b883a 	mov	r21,zero
 800a628:	0015883a 	mov	r10,zero
 800a62c:	3812d53a 	srli	r9,r7,20
 800a630:	3806d7fa 	srli	r3,r7,31
 800a634:	02000434 	movhi	r8,16
 800a638:	423fffc4 	addi	r8,r8,-1
 800a63c:	4941ffcc 	andi	r5,r9,2047
 800a640:	302f883a 	mov	r23,r6
 800a644:	3a22703a 	and	r17,r7,r8
 800a648:	1ac03fcc 	andi	r11,r3,255
 800a64c:	28006226 	beq	r5,zero,800a7d8 <__muldf3+0x22c>
 800a650:	0081ffc4 	movi	r2,2047
 800a654:	28805a26 	beq	r5,r2,800a7c0 <__muldf3+0x214>
 800a658:	8a000434 	orhi	r8,r17,16
 800a65c:	3004d77a 	srli	r2,r6,29
 800a660:	401090fa 	slli	r8,r8,3
 800a664:	302e90fa 	slli	r23,r6,3
 800a668:	297f0044 	addi	r5,r5,-1023
 800a66c:	40a2b03a 	or	r17,r8,r2
 800a670:	0013883a 	mov	r9,zero
 800a674:	4d4cb03a 	or	r6,r9,r21
 800a678:	300c90ba 	slli	r6,r6,2
 800a67c:	02020074 	movhi	r8,2049
 800a680:	4229a704 	addi	r8,r8,-22884
 800a684:	320d883a 	add	r6,r6,r8
 800a688:	31800017 	ldw	r6,0(r6)
 800a68c:	a14b883a 	add	r5,r20,r5
 800a690:	1dacf03a 	xor	r22,r3,r22
 800a694:	2b000044 	addi	r12,r5,1
 800a698:	3000683a 	jmp	r6
 800a69c:	0800a8d8 	cmpnei	zero,at,675
 800a6a0:	0800a8c4 	addi	zero,at,675
 800a6a4:	0800a8c4 	addi	zero,at,675
 800a6a8:	0800a8b0 	cmpltui	zero,at,674
 800a6ac:	0800a6f8 	rdprs	zero,at,667
 800a6b0:	0800a6f8 	rdprs	zero,at,667
 800a6b4:	0800a898 	cmpnei	zero,at,674
 800a6b8:	0800a8b0 	cmpltui	zero,at,674
 800a6bc:	0800a6f8 	rdprs	zero,at,667
 800a6c0:	0800a898 	cmpnei	zero,at,674
 800a6c4:	0800a6f8 	rdprs	zero,at,667
 800a6c8:	0800a8b0 	cmpltui	zero,at,674
 800a6cc:	0800a6fc 	xorhi	zero,at,667
 800a6d0:	0800a6fc 	xorhi	zero,at,667
 800a6d4:	0800a6fc 	xorhi	zero,at,667
 800a6d8:	0800aad4 	ori	zero,at,683
 800a6dc:	8104b03a 	or	r2,r16,r4
 800a6e0:	10006a1e 	bne	r2,zero,800a88c <__muldf3+0x2e0>
 800a6e4:	05400204 	movi	r21,8
 800a6e8:	0021883a 	mov	r16,zero
 800a6ec:	0025883a 	mov	r18,zero
 800a6f0:	02800084 	movi	r10,2
 800a6f4:	003fcd06 	br	800a62c <__alt_data_end+0xfc00a62c>
 800a6f8:	b039883a 	mov	fp,r22
 800a6fc:	00800084 	movi	r2,2
 800a700:	50804e1e 	bne	r10,r2,800a83c <__muldf3+0x290>
 800a704:	e4c0004c 	andi	r19,fp,1
 800a708:	0101ffc4 	movi	r4,2047
 800a70c:	0021883a 	mov	r16,zero
 800a710:	0025883a 	mov	r18,zero
 800a714:	2008953a 	slli	r4,r4,20
 800a718:	98c03fcc 	andi	r3,r19,255
 800a71c:	01400434 	movhi	r5,16
 800a720:	297fffc4 	addi	r5,r5,-1
 800a724:	180697fa 	slli	r3,r3,31
 800a728:	8160703a 	and	r16,r16,r5
 800a72c:	8120b03a 	or	r16,r16,r4
 800a730:	80c6b03a 	or	r3,r16,r3
 800a734:	9005883a 	mov	r2,r18
 800a738:	dfc00d17 	ldw	ra,52(sp)
 800a73c:	df000c17 	ldw	fp,48(sp)
 800a740:	ddc00b17 	ldw	r23,44(sp)
 800a744:	dd800a17 	ldw	r22,40(sp)
 800a748:	dd400917 	ldw	r21,36(sp)
 800a74c:	dd000817 	ldw	r20,32(sp)
 800a750:	dcc00717 	ldw	r19,28(sp)
 800a754:	dc800617 	ldw	r18,24(sp)
 800a758:	dc400517 	ldw	r17,20(sp)
 800a75c:	dc000417 	ldw	r16,16(sp)
 800a760:	dec00e04 	addi	sp,sp,56
 800a764:	f800283a 	ret
 800a768:	8104b03a 	or	r2,r16,r4
 800a76c:	10004226 	beq	r2,zero,800a878 <__muldf3+0x2cc>
 800a770:	8000f926 	beq	r16,zero,800ab58 <__muldf3+0x5ac>
 800a774:	8009883a 	mov	r4,r16
 800a778:	d9800315 	stw	r6,12(sp)
 800a77c:	d9c00015 	stw	r7,0(sp)
 800a780:	800b9a00 	call	800b9a0 <__clzsi2>
 800a784:	d9800317 	ldw	r6,12(sp)
 800a788:	d9c00017 	ldw	r7,0(sp)
 800a78c:	1007883a 	mov	r3,r2
 800a790:	01000a04 	movi	r4,40
 800a794:	18bffe04 	addi	r2,r3,-8
 800a798:	20c9c83a 	sub	r4,r4,r3
 800a79c:	80a0983a 	sll	r16,r16,r2
 800a7a0:	8908d83a 	srl	r4,r17,r4
 800a7a4:	88a4983a 	sll	r18,r17,r2
 800a7a8:	2420b03a 	or	r16,r4,r16
 800a7ac:	017f0344 	movi	r5,-1011
 800a7b0:	28e9c83a 	sub	r20,r5,r3
 800a7b4:	002b883a 	mov	r21,zero
 800a7b8:	0015883a 	mov	r10,zero
 800a7bc:	003f9b06 	br	800a62c <__alt_data_end+0xfc00a62c>
 800a7c0:	8984b03a 	or	r2,r17,r6
 800a7c4:	10002a1e 	bne	r2,zero,800a870 <__muldf3+0x2c4>
 800a7c8:	0023883a 	mov	r17,zero
 800a7cc:	002f883a 	mov	r23,zero
 800a7d0:	02400084 	movi	r9,2
 800a7d4:	003fa706 	br	800a674 <__alt_data_end+0xfc00a674>
 800a7d8:	8984b03a 	or	r2,r17,r6
 800a7dc:	10002026 	beq	r2,zero,800a860 <__muldf3+0x2b4>
 800a7e0:	8800cc26 	beq	r17,zero,800ab14 <__muldf3+0x568>
 800a7e4:	8809883a 	mov	r4,r17
 800a7e8:	d8c00215 	stw	r3,8(sp)
 800a7ec:	d9800315 	stw	r6,12(sp)
 800a7f0:	da800015 	stw	r10,0(sp)
 800a7f4:	dac00115 	stw	r11,4(sp)
 800a7f8:	800b9a00 	call	800b9a0 <__clzsi2>
 800a7fc:	d8c00217 	ldw	r3,8(sp)
 800a800:	d9800317 	ldw	r6,12(sp)
 800a804:	da800017 	ldw	r10,0(sp)
 800a808:	dac00117 	ldw	r11,4(sp)
 800a80c:	1009883a 	mov	r4,r2
 800a810:	01400a04 	movi	r5,40
 800a814:	25fffe04 	addi	r23,r4,-8
 800a818:	290bc83a 	sub	r5,r5,r4
 800a81c:	8dd0983a 	sll	r8,r17,r23
 800a820:	314ad83a 	srl	r5,r6,r5
 800a824:	35ee983a 	sll	r23,r6,r23
 800a828:	2a22b03a 	or	r17,r5,r8
 800a82c:	017f0344 	movi	r5,-1011
 800a830:	290bc83a 	sub	r5,r5,r4
 800a834:	0013883a 	mov	r9,zero
 800a838:	003f8e06 	br	800a674 <__alt_data_end+0xfc00a674>
 800a83c:	008000c4 	movi	r2,3
 800a840:	50811d26 	beq	r10,r2,800acb8 <__muldf3+0x70c>
 800a844:	00800044 	movi	r2,1
 800a848:	5080e01e 	bne	r10,r2,800abcc <__muldf3+0x620>
 800a84c:	e0a6703a 	and	r19,fp,r2
 800a850:	0009883a 	mov	r4,zero
 800a854:	0021883a 	mov	r16,zero
 800a858:	0025883a 	mov	r18,zero
 800a85c:	003fad06 	br	800a714 <__alt_data_end+0xfc00a714>
 800a860:	0023883a 	mov	r17,zero
 800a864:	002f883a 	mov	r23,zero
 800a868:	02400044 	movi	r9,1
 800a86c:	003f8106 	br	800a674 <__alt_data_end+0xfc00a674>
 800a870:	024000c4 	movi	r9,3
 800a874:	003f7f06 	br	800a674 <__alt_data_end+0xfc00a674>
 800a878:	05400104 	movi	r21,4
 800a87c:	0021883a 	mov	r16,zero
 800a880:	0025883a 	mov	r18,zero
 800a884:	02800044 	movi	r10,1
 800a888:	003f6806 	br	800a62c <__alt_data_end+0xfc00a62c>
 800a88c:	05400304 	movi	r21,12
 800a890:	028000c4 	movi	r10,3
 800a894:	003f6506 	br	800a62c <__alt_data_end+0xfc00a62c>
 800a898:	04000434 	movhi	r16,16
 800a89c:	0027883a 	mov	r19,zero
 800a8a0:	843fffc4 	addi	r16,r16,-1
 800a8a4:	04bfffc4 	movi	r18,-1
 800a8a8:	0101ffc4 	movi	r4,2047
 800a8ac:	003f9906 	br	800a714 <__alt_data_end+0xfc00a714>
 800a8b0:	8821883a 	mov	r16,r17
 800a8b4:	b825883a 	mov	r18,r23
 800a8b8:	5839883a 	mov	fp,r11
 800a8bc:	4815883a 	mov	r10,r9
 800a8c0:	003f8e06 	br	800a6fc <__alt_data_end+0xfc00a6fc>
 800a8c4:	8821883a 	mov	r16,r17
 800a8c8:	b825883a 	mov	r18,r23
 800a8cc:	b039883a 	mov	fp,r22
 800a8d0:	4815883a 	mov	r10,r9
 800a8d4:	003f8906 	br	800a6fc <__alt_data_end+0xfc00a6fc>
 800a8d8:	b80cd43a 	srli	r6,r23,16
 800a8dc:	9006d43a 	srli	r3,r18,16
 800a8e0:	90bfffcc 	andi	r2,r18,65535
 800a8e4:	bdffffcc 	andi	r23,r23,65535
 800a8e8:	b891383a 	mul	r8,r23,r2
 800a8ec:	b8c9383a 	mul	r4,r23,r3
 800a8f0:	309b383a 	mul	r13,r6,r2
 800a8f4:	400ed43a 	srli	r7,r8,16
 800a8f8:	30df383a 	mul	r15,r6,r3
 800a8fc:	235b883a 	add	r13,r4,r13
 800a900:	69db883a 	add	r13,r13,r7
 800a904:	6900022e 	bgeu	r13,r4,800a910 <__muldf3+0x364>
 800a908:	01000074 	movhi	r4,1
 800a90c:	791f883a 	add	r15,r15,r4
 800a910:	8828d43a 	srli	r20,r17,16
 800a914:	8c7fffcc 	andi	r17,r17,65535
 800a918:	888f383a 	mul	r7,r17,r2
 800a91c:	88d3383a 	mul	r9,r17,r3
 800a920:	a0a5383a 	mul	r18,r20,r2
 800a924:	3816d43a 	srli	r11,r7,16
 800a928:	6814943a 	slli	r10,r13,16
 800a92c:	4ca5883a 	add	r18,r9,r18
 800a930:	423fffcc 	andi	r8,r8,65535
 800a934:	92e5883a 	add	r18,r18,r11
 800a938:	6808d43a 	srli	r4,r13,16
 800a93c:	5215883a 	add	r10,r10,r8
 800a940:	a0c7383a 	mul	r3,r20,r3
 800a944:	9240022e 	bgeu	r18,r9,800a950 <__muldf3+0x3a4>
 800a948:	00800074 	movhi	r2,1
 800a94c:	1887883a 	add	r3,r3,r2
 800a950:	802ad43a 	srli	r21,r16,16
 800a954:	80bfffcc 	andi	r2,r16,65535
 800a958:	b893383a 	mul	r9,r23,r2
 800a95c:	3091383a 	mul	r8,r6,r2
 800a960:	bd6f383a 	mul	r23,r23,r21
 800a964:	9026943a 	slli	r19,r18,16
 800a968:	481ad43a 	srli	r13,r9,16
 800a96c:	9024d43a 	srli	r18,r18,16
 800a970:	39ffffcc 	andi	r7,r7,65535
 800a974:	ba11883a 	add	r8,r23,r8
 800a978:	99e7883a 	add	r19,r19,r7
 800a97c:	4351883a 	add	r8,r8,r13
 800a980:	1c97883a 	add	r11,r3,r18
 800a984:	354d383a 	mul	r6,r6,r21
 800a988:	9925883a 	add	r18,r19,r4
 800a98c:	45c0022e 	bgeu	r8,r23,800a998 <__muldf3+0x3ec>
 800a990:	00c00074 	movhi	r3,1
 800a994:	30cd883a 	add	r6,r6,r3
 800a998:	8889383a 	mul	r4,r17,r2
 800a99c:	8d63383a 	mul	r17,r17,r21
 800a9a0:	a085383a 	mul	r2,r20,r2
 800a9a4:	200ed43a 	srli	r7,r4,16
 800a9a8:	401cd43a 	srli	r14,r8,16
 800a9ac:	401a943a 	slli	r13,r8,16
 800a9b0:	8885883a 	add	r2,r17,r2
 800a9b4:	4a3fffcc 	andi	r8,r9,65535
 800a9b8:	11c5883a 	add	r2,r2,r7
 800a9bc:	339d883a 	add	r14,r6,r14
 800a9c0:	6a11883a 	add	r8,r13,r8
 800a9c4:	a561383a 	mul	r16,r20,r21
 800a9c8:	1440022e 	bgeu	r2,r17,800a9d4 <__muldf3+0x428>
 800a9cc:	00c00074 	movhi	r3,1
 800a9d0:	80e1883a 	add	r16,r16,r3
 800a9d4:	1006943a 	slli	r3,r2,16
 800a9d8:	213fffcc 	andi	r4,r4,65535
 800a9dc:	93db883a 	add	r13,r18,r15
 800a9e0:	1909883a 	add	r4,r3,r4
 800a9e4:	22c7883a 	add	r3,r4,r11
 800a9e8:	6cd3803a 	cmpltu	r9,r13,r19
 800a9ec:	6a09883a 	add	r4,r13,r8
 800a9f0:	1a5b883a 	add	r13,r3,r9
 800a9f4:	2211803a 	cmpltu	r8,r4,r8
 800a9f8:	734d883a 	add	r6,r14,r13
 800a9fc:	100ed43a 	srli	r7,r2,16
 800aa00:	6a53803a 	cmpltu	r9,r13,r9
 800aa04:	3205883a 	add	r2,r6,r8
 800aa08:	1ac7803a 	cmpltu	r3,r3,r11
 800aa0c:	1211803a 	cmpltu	r8,r2,r8
 800aa10:	48c6b03a 	or	r3,r9,r3
 800aa14:	338d803a 	cmpltu	r6,r6,r14
 800aa18:	19c7883a 	add	r3,r3,r7
 800aa1c:	418cb03a 	or	r6,r8,r6
 800aa20:	1987883a 	add	r3,r3,r6
 800aa24:	2024927a 	slli	r18,r4,9
 800aa28:	1c07883a 	add	r3,r3,r16
 800aa2c:	1806927a 	slli	r3,r3,9
 800aa30:	1020d5fa 	srli	r16,r2,23
 800aa34:	2008d5fa 	srli	r4,r4,23
 800aa38:	9294b03a 	or	r10,r18,r10
 800aa3c:	1004927a 	slli	r2,r2,9
 800aa40:	5024c03a 	cmpne	r18,r10,zero
 800aa44:	1c20b03a 	or	r16,r3,r16
 800aa48:	9108b03a 	or	r4,r18,r4
 800aa4c:	80c0402c 	andhi	r3,r16,256
 800aa50:	20a4b03a 	or	r18,r4,r2
 800aa54:	18000726 	beq	r3,zero,800aa74 <__muldf3+0x4c8>
 800aa58:	9006d07a 	srli	r3,r18,1
 800aa5c:	800897fa 	slli	r4,r16,31
 800aa60:	9080004c 	andi	r2,r18,1
 800aa64:	8020d07a 	srli	r16,r16,1
 800aa68:	10c4b03a 	or	r2,r2,r3
 800aa6c:	1124b03a 	or	r18,r2,r4
 800aa70:	600b883a 	mov	r5,r12
 800aa74:	2900ffc4 	addi	r4,r5,1023
 800aa78:	01004b0e 	bge	zero,r4,800aba8 <__muldf3+0x5fc>
 800aa7c:	908001cc 	andi	r2,r18,7
 800aa80:	10000726 	beq	r2,zero,800aaa0 <__muldf3+0x4f4>
 800aa84:	90c003cc 	andi	r3,r18,15
 800aa88:	00800104 	movi	r2,4
 800aa8c:	18800426 	beq	r3,r2,800aaa0 <__muldf3+0x4f4>
 800aa90:	9087883a 	add	r3,r18,r2
 800aa94:	1c85803a 	cmpltu	r2,r3,r18
 800aa98:	80a1883a 	add	r16,r16,r2
 800aa9c:	1825883a 	mov	r18,r3
 800aaa0:	8080402c 	andhi	r2,r16,256
 800aaa4:	10000426 	beq	r2,zero,800aab8 <__muldf3+0x50c>
 800aaa8:	00bfc034 	movhi	r2,65280
 800aaac:	10bfffc4 	addi	r2,r2,-1
 800aab0:	29010004 	addi	r4,r5,1024
 800aab4:	80a0703a 	and	r16,r16,r2
 800aab8:	0081ff84 	movi	r2,2046
 800aabc:	1100320e 	bge	r2,r4,800ab88 <__muldf3+0x5dc>
 800aac0:	b4c0004c 	andi	r19,r22,1
 800aac4:	0101ffc4 	movi	r4,2047
 800aac8:	0021883a 	mov	r16,zero
 800aacc:	0025883a 	mov	r18,zero
 800aad0:	003f1006 	br	800a714 <__alt_data_end+0xfc00a714>
 800aad4:	8080022c 	andhi	r2,r16,8
 800aad8:	10000926 	beq	r2,zero,800ab00 <__muldf3+0x554>
 800aadc:	8880022c 	andhi	r2,r17,8
 800aae0:	1000071e 	bne	r2,zero,800ab00 <__muldf3+0x554>
 800aae4:	00800434 	movhi	r2,16
 800aae8:	8c000234 	orhi	r16,r17,8
 800aaec:	10bfffc4 	addi	r2,r2,-1
 800aaf0:	1827883a 	mov	r19,r3
 800aaf4:	80a0703a 	and	r16,r16,r2
 800aaf8:	b825883a 	mov	r18,r23
 800aafc:	003f6a06 	br	800a8a8 <__alt_data_end+0xfc00a8a8>
 800ab00:	00800434 	movhi	r2,16
 800ab04:	84000234 	orhi	r16,r16,8
 800ab08:	10bfffc4 	addi	r2,r2,-1
 800ab0c:	80a0703a 	and	r16,r16,r2
 800ab10:	003f6506 	br	800a8a8 <__alt_data_end+0xfc00a8a8>
 800ab14:	3009883a 	mov	r4,r6
 800ab18:	d8c00215 	stw	r3,8(sp)
 800ab1c:	d9800315 	stw	r6,12(sp)
 800ab20:	da800015 	stw	r10,0(sp)
 800ab24:	dac00115 	stw	r11,4(sp)
 800ab28:	800b9a00 	call	800b9a0 <__clzsi2>
 800ab2c:	11000804 	addi	r4,r2,32
 800ab30:	014009c4 	movi	r5,39
 800ab34:	d8c00217 	ldw	r3,8(sp)
 800ab38:	d9800317 	ldw	r6,12(sp)
 800ab3c:	da800017 	ldw	r10,0(sp)
 800ab40:	dac00117 	ldw	r11,4(sp)
 800ab44:	293f320e 	bge	r5,r4,800a810 <__alt_data_end+0xfc00a810>
 800ab48:	10bffe04 	addi	r2,r2,-8
 800ab4c:	b8a2983a 	sll	r17,r23,r2
 800ab50:	002f883a 	mov	r23,zero
 800ab54:	003f3506 	br	800a82c <__alt_data_end+0xfc00a82c>
 800ab58:	d9800315 	stw	r6,12(sp)
 800ab5c:	d9c00015 	stw	r7,0(sp)
 800ab60:	800b9a00 	call	800b9a0 <__clzsi2>
 800ab64:	10c00804 	addi	r3,r2,32
 800ab68:	010009c4 	movi	r4,39
 800ab6c:	d9800317 	ldw	r6,12(sp)
 800ab70:	d9c00017 	ldw	r7,0(sp)
 800ab74:	20ff060e 	bge	r4,r3,800a790 <__alt_data_end+0xfc00a790>
 800ab78:	10bffe04 	addi	r2,r2,-8
 800ab7c:	88a0983a 	sll	r16,r17,r2
 800ab80:	0025883a 	mov	r18,zero
 800ab84:	003f0906 	br	800a7ac <__alt_data_end+0xfc00a7ac>
 800ab88:	9004d0fa 	srli	r2,r18,3
 800ab8c:	8024977a 	slli	r18,r16,29
 800ab90:	8020927a 	slli	r16,r16,9
 800ab94:	2101ffcc 	andi	r4,r4,2047
 800ab98:	90a4b03a 	or	r18,r18,r2
 800ab9c:	8020d33a 	srli	r16,r16,12
 800aba0:	b4c0004c 	andi	r19,r22,1
 800aba4:	003edb06 	br	800a714 <__alt_data_end+0xfc00a714>
 800aba8:	00ff0084 	movi	r3,-1022
 800abac:	1947c83a 	sub	r3,r3,r5
 800abb0:	00800e04 	movi	r2,56
 800abb4:	10c0080e 	bge	r2,r3,800abd8 <__muldf3+0x62c>
 800abb8:	b4c0004c 	andi	r19,r22,1
 800abbc:	0009883a 	mov	r4,zero
 800abc0:	0021883a 	mov	r16,zero
 800abc4:	0025883a 	mov	r18,zero
 800abc8:	003ed206 	br	800a714 <__alt_data_end+0xfc00a714>
 800abcc:	600b883a 	mov	r5,r12
 800abd0:	e02d883a 	mov	r22,fp
 800abd4:	003fa706 	br	800aa74 <__alt_data_end+0xfc00aa74>
 800abd8:	008007c4 	movi	r2,31
 800abdc:	10c01816 	blt	r2,r3,800ac40 <__muldf3+0x694>
 800abe0:	29410784 	addi	r5,r5,1054
 800abe4:	8144983a 	sll	r2,r16,r5
 800abe8:	90c8d83a 	srl	r4,r18,r3
 800abec:	914a983a 	sll	r5,r18,r5
 800abf0:	80c6d83a 	srl	r3,r16,r3
 800abf4:	2088b03a 	or	r4,r4,r2
 800abf8:	2804c03a 	cmpne	r2,r5,zero
 800abfc:	2084b03a 	or	r2,r4,r2
 800ac00:	110001cc 	andi	r4,r2,7
 800ac04:	20000726 	beq	r4,zero,800ac24 <__muldf3+0x678>
 800ac08:	114003cc 	andi	r5,r2,15
 800ac0c:	01000104 	movi	r4,4
 800ac10:	29000426 	beq	r5,r4,800ac24 <__muldf3+0x678>
 800ac14:	11000104 	addi	r4,r2,4
 800ac18:	2085803a 	cmpltu	r2,r4,r2
 800ac1c:	1887883a 	add	r3,r3,r2
 800ac20:	2005883a 	mov	r2,r4
 800ac24:	1900202c 	andhi	r4,r3,128
 800ac28:	20001826 	beq	r4,zero,800ac8c <__muldf3+0x6e0>
 800ac2c:	b4c0004c 	andi	r19,r22,1
 800ac30:	01000044 	movi	r4,1
 800ac34:	0021883a 	mov	r16,zero
 800ac38:	0025883a 	mov	r18,zero
 800ac3c:	003eb506 	br	800a714 <__alt_data_end+0xfc00a714>
 800ac40:	00bef884 	movi	r2,-1054
 800ac44:	1145c83a 	sub	r2,r2,r5
 800ac48:	8088d83a 	srl	r4,r16,r2
 800ac4c:	00800804 	movi	r2,32
 800ac50:	18801726 	beq	r3,r2,800acb0 <__muldf3+0x704>
 800ac54:	28810f84 	addi	r2,r5,1086
 800ac58:	8084983a 	sll	r2,r16,r2
 800ac5c:	1484b03a 	or	r2,r2,r18
 800ac60:	1004c03a 	cmpne	r2,r2,zero
 800ac64:	1104b03a 	or	r2,r2,r4
 800ac68:	10c001cc 	andi	r3,r2,7
 800ac6c:	18000b1e 	bne	r3,zero,800ac9c <__muldf3+0x6f0>
 800ac70:	0021883a 	mov	r16,zero
 800ac74:	1004d0fa 	srli	r2,r2,3
 800ac78:	b4c0004c 	andi	r19,r22,1
 800ac7c:	0009883a 	mov	r4,zero
 800ac80:	10e4b03a 	or	r18,r2,r3
 800ac84:	003ea306 	br	800a714 <__alt_data_end+0xfc00a714>
 800ac88:	0007883a 	mov	r3,zero
 800ac8c:	1820927a 	slli	r16,r3,9
 800ac90:	1806977a 	slli	r3,r3,29
 800ac94:	8020d33a 	srli	r16,r16,12
 800ac98:	003ff606 	br	800ac74 <__alt_data_end+0xfc00ac74>
 800ac9c:	110003cc 	andi	r4,r2,15
 800aca0:	00c00104 	movi	r3,4
 800aca4:	20fff826 	beq	r4,r3,800ac88 <__alt_data_end+0xfc00ac88>
 800aca8:	0007883a 	mov	r3,zero
 800acac:	003fd906 	br	800ac14 <__alt_data_end+0xfc00ac14>
 800acb0:	0005883a 	mov	r2,zero
 800acb4:	003fe906 	br	800ac5c <__alt_data_end+0xfc00ac5c>
 800acb8:	00800434 	movhi	r2,16
 800acbc:	84000234 	orhi	r16,r16,8
 800acc0:	10bfffc4 	addi	r2,r2,-1
 800acc4:	e4c0004c 	andi	r19,fp,1
 800acc8:	80a0703a 	and	r16,r16,r2
 800accc:	003ef606 	br	800a8a8 <__alt_data_end+0xfc00a8a8>

0800acd0 <__subdf3>:
 800acd0:	00c00434 	movhi	r3,16
 800acd4:	18ffffc4 	addi	r3,r3,-1
 800acd8:	defffb04 	addi	sp,sp,-20
 800acdc:	28d2703a 	and	r9,r5,r3
 800ace0:	3814d53a 	srli	r10,r7,20
 800ace4:	38c6703a 	and	r3,r7,r3
 800ace8:	3004d77a 	srli	r2,r6,29
 800acec:	dc800215 	stw	r18,8(sp)
 800acf0:	dc000015 	stw	r16,0(sp)
 800acf4:	2824d7fa 	srli	r18,r5,31
 800acf8:	2820d53a 	srli	r16,r5,20
 800acfc:	481290fa 	slli	r9,r9,3
 800ad00:	200ad77a 	srli	r5,r4,29
 800ad04:	180690fa 	slli	r3,r3,3
 800ad08:	dc400115 	stw	r17,4(sp)
 800ad0c:	dfc00415 	stw	ra,16(sp)
 800ad10:	202290fa 	slli	r17,r4,3
 800ad14:	dcc00315 	stw	r19,12(sp)
 800ad18:	5281ffcc 	andi	r10,r10,2047
 800ad1c:	0101ffc4 	movi	r4,2047
 800ad20:	9011883a 	mov	r8,r18
 800ad24:	8401ffcc 	andi	r16,r16,2047
 800ad28:	94803fcc 	andi	r18,r18,255
 800ad2c:	494ab03a 	or	r5,r9,r5
 800ad30:	380ed7fa 	srli	r7,r7,31
 800ad34:	1886b03a 	or	r3,r3,r2
 800ad38:	300c90fa 	slli	r6,r6,3
 800ad3c:	51009026 	beq	r10,r4,800af80 <__subdf3+0x2b0>
 800ad40:	39c0005c 	xori	r7,r7,1
 800ad44:	8285c83a 	sub	r2,r16,r10
 800ad48:	91c06f26 	beq	r18,r7,800af08 <__subdf3+0x238>
 800ad4c:	0080b10e 	bge	zero,r2,800b014 <__subdf3+0x344>
 800ad50:	50002a1e 	bne	r10,zero,800adfc <__subdf3+0x12c>
 800ad54:	1988b03a 	or	r4,r3,r6
 800ad58:	2000941e 	bne	r4,zero,800afac <__subdf3+0x2dc>
 800ad5c:	888001cc 	andi	r2,r17,7
 800ad60:	10005b26 	beq	r2,zero,800aed0 <__subdf3+0x200>
 800ad64:	88c003cc 	andi	r3,r17,15
 800ad68:	00800104 	movi	r2,4
 800ad6c:	18805826 	beq	r3,r2,800aed0 <__subdf3+0x200>
 800ad70:	88c00104 	addi	r3,r17,4
 800ad74:	1c63803a 	cmpltu	r17,r3,r17
 800ad78:	2c4b883a 	add	r5,r5,r17
 800ad7c:	2880202c 	andhi	r2,r5,128
 800ad80:	9200004c 	andi	r8,r18,1
 800ad84:	1823883a 	mov	r17,r3
 800ad88:	10005426 	beq	r2,zero,800aedc <__subdf3+0x20c>
 800ad8c:	84000044 	addi	r16,r16,1
 800ad90:	0081ffc4 	movi	r2,2047
 800ad94:	8080bf26 	beq	r16,r2,800b094 <__subdf3+0x3c4>
 800ad98:	013fe034 	movhi	r4,65408
 800ad9c:	213fffc4 	addi	r4,r4,-1
 800ada0:	290a703a 	and	r5,r5,r4
 800ada4:	2804977a 	slli	r2,r5,29
 800ada8:	280a927a 	slli	r5,r5,9
 800adac:	8822d0fa 	srli	r17,r17,3
 800adb0:	8401ffcc 	andi	r16,r16,2047
 800adb4:	2808d33a 	srli	r4,r5,12
 800adb8:	1444b03a 	or	r2,r2,r17
 800adbc:	8401ffcc 	andi	r16,r16,2047
 800adc0:	800a953a 	slli	r5,r16,20
 800adc4:	40c03fcc 	andi	r3,r8,255
 800adc8:	04000434 	movhi	r16,16
 800adcc:	180697fa 	slli	r3,r3,31
 800add0:	843fffc4 	addi	r16,r16,-1
 800add4:	2420703a 	and	r16,r4,r16
 800add8:	8160b03a 	or	r16,r16,r5
 800addc:	80c6b03a 	or	r3,r16,r3
 800ade0:	dfc00417 	ldw	ra,16(sp)
 800ade4:	dcc00317 	ldw	r19,12(sp)
 800ade8:	dc800217 	ldw	r18,8(sp)
 800adec:	dc400117 	ldw	r17,4(sp)
 800adf0:	dc000017 	ldw	r16,0(sp)
 800adf4:	dec00504 	addi	sp,sp,20
 800adf8:	f800283a 	ret
 800adfc:	0101ffc4 	movi	r4,2047
 800ae00:	813fd626 	beq	r16,r4,800ad5c <__alt_data_end+0xfc00ad5c>
 800ae04:	18c02034 	orhi	r3,r3,128
 800ae08:	01000e04 	movi	r4,56
 800ae0c:	2080a416 	blt	r4,r2,800b0a0 <__subdf3+0x3d0>
 800ae10:	010007c4 	movi	r4,31
 800ae14:	2080c716 	blt	r4,r2,800b134 <__subdf3+0x464>
 800ae18:	01000804 	movi	r4,32
 800ae1c:	2089c83a 	sub	r4,r4,r2
 800ae20:	1910983a 	sll	r8,r3,r4
 800ae24:	308ed83a 	srl	r7,r6,r2
 800ae28:	3108983a 	sll	r4,r6,r4
 800ae2c:	1884d83a 	srl	r2,r3,r2
 800ae30:	41ccb03a 	or	r6,r8,r7
 800ae34:	2008c03a 	cmpne	r4,r4,zero
 800ae38:	310cb03a 	or	r6,r6,r4
 800ae3c:	898dc83a 	sub	r6,r17,r6
 800ae40:	89a3803a 	cmpltu	r17,r17,r6
 800ae44:	288bc83a 	sub	r5,r5,r2
 800ae48:	2c4bc83a 	sub	r5,r5,r17
 800ae4c:	3023883a 	mov	r17,r6
 800ae50:	2880202c 	andhi	r2,r5,128
 800ae54:	10006b26 	beq	r2,zero,800b004 <__subdf3+0x334>
 800ae58:	04c02034 	movhi	r19,128
 800ae5c:	9cffffc4 	addi	r19,r19,-1
 800ae60:	2ce6703a 	and	r19,r5,r19
 800ae64:	98007c26 	beq	r19,zero,800b058 <__subdf3+0x388>
 800ae68:	9809883a 	mov	r4,r19
 800ae6c:	800b9a00 	call	800b9a0 <__clzsi2>
 800ae70:	10fffe04 	addi	r3,r2,-8
 800ae74:	010007c4 	movi	r4,31
 800ae78:	20c07d16 	blt	r4,r3,800b070 <__subdf3+0x3a0>
 800ae7c:	01400a04 	movi	r5,40
 800ae80:	2885c83a 	sub	r2,r5,r2
 800ae84:	888ad83a 	srl	r5,r17,r2
 800ae88:	98e6983a 	sll	r19,r19,r3
 800ae8c:	88e2983a 	sll	r17,r17,r3
 800ae90:	2ce6b03a 	or	r19,r5,r19
 800ae94:	1c007a16 	blt	r3,r16,800b080 <__subdf3+0x3b0>
 800ae98:	1c21c83a 	sub	r16,r3,r16
 800ae9c:	81400044 	addi	r5,r16,1
 800aea0:	00c007c4 	movi	r3,31
 800aea4:	19409616 	blt	r3,r5,800b100 <__subdf3+0x430>
 800aea8:	1c21c83a 	sub	r16,r3,r16
 800aeac:	8c08983a 	sll	r4,r17,r16
 800aeb0:	8946d83a 	srl	r3,r17,r5
 800aeb4:	9c20983a 	sll	r16,r19,r16
 800aeb8:	2008c03a 	cmpne	r4,r4,zero
 800aebc:	994ad83a 	srl	r5,r19,r5
 800aec0:	1c06b03a 	or	r3,r3,r16
 800aec4:	1922b03a 	or	r17,r3,r4
 800aec8:	0021883a 	mov	r16,zero
 800aecc:	003fa306 	br	800ad5c <__alt_data_end+0xfc00ad5c>
 800aed0:	2880202c 	andhi	r2,r5,128
 800aed4:	9200004c 	andi	r8,r18,1
 800aed8:	103fac1e 	bne	r2,zero,800ad8c <__alt_data_end+0xfc00ad8c>
 800aedc:	2804977a 	slli	r2,r5,29
 800aee0:	8822d0fa 	srli	r17,r17,3
 800aee4:	00c1ffc4 	movi	r3,2047
 800aee8:	280ad0fa 	srli	r5,r5,3
 800aeec:	1444b03a 	or	r2,r2,r17
 800aef0:	80c02726 	beq	r16,r3,800af90 <__subdf3+0x2c0>
 800aef4:	01000434 	movhi	r4,16
 800aef8:	213fffc4 	addi	r4,r4,-1
 800aefc:	80e0703a 	and	r16,r16,r3
 800af00:	2908703a 	and	r4,r5,r4
 800af04:	003fad06 	br	800adbc <__alt_data_end+0xfc00adbc>
 800af08:	0080690e 	bge	zero,r2,800b0b0 <__subdf3+0x3e0>
 800af0c:	50002f26 	beq	r10,zero,800afcc <__subdf3+0x2fc>
 800af10:	0101ffc4 	movi	r4,2047
 800af14:	813f9126 	beq	r16,r4,800ad5c <__alt_data_end+0xfc00ad5c>
 800af18:	18c02034 	orhi	r3,r3,128
 800af1c:	01000e04 	movi	r4,56
 800af20:	2080b00e 	bge	r4,r2,800b1e4 <__subdf3+0x514>
 800af24:	198cb03a 	or	r6,r3,r6
 800af28:	300ec03a 	cmpne	r7,r6,zero
 800af2c:	0005883a 	mov	r2,zero
 800af30:	3c4f883a 	add	r7,r7,r17
 800af34:	3c63803a 	cmpltu	r17,r7,r17
 800af38:	114b883a 	add	r5,r2,r5
 800af3c:	2c4b883a 	add	r5,r5,r17
 800af40:	3823883a 	mov	r17,r7
 800af44:	2880202c 	andhi	r2,r5,128
 800af48:	10002e26 	beq	r2,zero,800b004 <__subdf3+0x334>
 800af4c:	84000044 	addi	r16,r16,1
 800af50:	0081ffc4 	movi	r2,2047
 800af54:	8080de26 	beq	r16,r2,800b2d0 <__subdf3+0x600>
 800af58:	00bfe034 	movhi	r2,65408
 800af5c:	10bfffc4 	addi	r2,r2,-1
 800af60:	288a703a 	and	r5,r5,r2
 800af64:	880cd07a 	srli	r6,r17,1
 800af68:	280897fa 	slli	r4,r5,31
 800af6c:	88c0004c 	andi	r3,r17,1
 800af70:	30e2b03a 	or	r17,r6,r3
 800af74:	280ad07a 	srli	r5,r5,1
 800af78:	8922b03a 	or	r17,r17,r4
 800af7c:	003f7706 	br	800ad5c <__alt_data_end+0xfc00ad5c>
 800af80:	1984b03a 	or	r2,r3,r6
 800af84:	103f6e26 	beq	r2,zero,800ad40 <__alt_data_end+0xfc00ad40>
 800af88:	39c03fcc 	andi	r7,r7,255
 800af8c:	003f6d06 	br	800ad44 <__alt_data_end+0xfc00ad44>
 800af90:	1146b03a 	or	r3,r2,r5
 800af94:	18003f26 	beq	r3,zero,800b094 <__subdf3+0x3c4>
 800af98:	00c00434 	movhi	r3,16
 800af9c:	29000234 	orhi	r4,r5,8
 800afa0:	18ffffc4 	addi	r3,r3,-1
 800afa4:	20c8703a 	and	r4,r4,r3
 800afa8:	003f8406 	br	800adbc <__alt_data_end+0xfc00adbc>
 800afac:	10bfffc4 	addi	r2,r2,-1
 800afb0:	1000501e 	bne	r2,zero,800b0f4 <__subdf3+0x424>
 800afb4:	898fc83a 	sub	r7,r17,r6
 800afb8:	89e3803a 	cmpltu	r17,r17,r7
 800afbc:	28cbc83a 	sub	r5,r5,r3
 800afc0:	2c4bc83a 	sub	r5,r5,r17
 800afc4:	3823883a 	mov	r17,r7
 800afc8:	003fa106 	br	800ae50 <__alt_data_end+0xfc00ae50>
 800afcc:	1988b03a 	or	r4,r3,r6
 800afd0:	203f6226 	beq	r4,zero,800ad5c <__alt_data_end+0xfc00ad5c>
 800afd4:	10bfffc4 	addi	r2,r2,-1
 800afd8:	10009b1e 	bne	r2,zero,800b248 <__subdf3+0x578>
 800afdc:	344d883a 	add	r6,r6,r17
 800afe0:	3463803a 	cmpltu	r17,r6,r17
 800afe4:	194b883a 	add	r5,r3,r5
 800afe8:	2c4b883a 	add	r5,r5,r17
 800afec:	3023883a 	mov	r17,r6
 800aff0:	003fd406 	br	800af44 <__alt_data_end+0xfc00af44>
 800aff4:	1106b03a 	or	r3,r2,r4
 800aff8:	1800b426 	beq	r3,zero,800b2cc <__subdf3+0x5fc>
 800affc:	100b883a 	mov	r5,r2
 800b000:	2023883a 	mov	r17,r4
 800b004:	888001cc 	andi	r2,r17,7
 800b008:	103f561e 	bne	r2,zero,800ad64 <__alt_data_end+0xfc00ad64>
 800b00c:	9200004c 	andi	r8,r18,1
 800b010:	003fb206 	br	800aedc <__alt_data_end+0xfc00aedc>
 800b014:	1000531e 	bne	r2,zero,800b164 <__subdf3+0x494>
 800b018:	80800044 	addi	r2,r16,1
 800b01c:	1081ffcc 	andi	r2,r2,2047
 800b020:	01000044 	movi	r4,1
 800b024:	2080a00e 	bge	r4,r2,800b2a8 <__subdf3+0x5d8>
 800b028:	8985c83a 	sub	r2,r17,r6
 800b02c:	8889803a 	cmpltu	r4,r17,r2
 800b030:	28e7c83a 	sub	r19,r5,r3
 800b034:	9927c83a 	sub	r19,r19,r4
 800b038:	9900202c 	andhi	r4,r19,128
 800b03c:	20006226 	beq	r4,zero,800b1c8 <__subdf3+0x4f8>
 800b040:	3463c83a 	sub	r17,r6,r17
 800b044:	194bc83a 	sub	r5,r3,r5
 800b048:	344d803a 	cmpltu	r6,r6,r17
 800b04c:	29a7c83a 	sub	r19,r5,r6
 800b050:	3825883a 	mov	r18,r7
 800b054:	983f841e 	bne	r19,zero,800ae68 <__alt_data_end+0xfc00ae68>
 800b058:	8809883a 	mov	r4,r17
 800b05c:	800b9a00 	call	800b9a0 <__clzsi2>
 800b060:	10800804 	addi	r2,r2,32
 800b064:	10fffe04 	addi	r3,r2,-8
 800b068:	010007c4 	movi	r4,31
 800b06c:	20ff830e 	bge	r4,r3,800ae7c <__alt_data_end+0xfc00ae7c>
 800b070:	14fff604 	addi	r19,r2,-40
 800b074:	8ce6983a 	sll	r19,r17,r19
 800b078:	0023883a 	mov	r17,zero
 800b07c:	1c3f860e 	bge	r3,r16,800ae98 <__alt_data_end+0xfc00ae98>
 800b080:	017fe034 	movhi	r5,65408
 800b084:	297fffc4 	addi	r5,r5,-1
 800b088:	80e1c83a 	sub	r16,r16,r3
 800b08c:	994a703a 	and	r5,r19,r5
 800b090:	003f3206 	br	800ad5c <__alt_data_end+0xfc00ad5c>
 800b094:	0009883a 	mov	r4,zero
 800b098:	0005883a 	mov	r2,zero
 800b09c:	003f4706 	br	800adbc <__alt_data_end+0xfc00adbc>
 800b0a0:	198cb03a 	or	r6,r3,r6
 800b0a4:	300cc03a 	cmpne	r6,r6,zero
 800b0a8:	0005883a 	mov	r2,zero
 800b0ac:	003f6306 	br	800ae3c <__alt_data_end+0xfc00ae3c>
 800b0b0:	10009d1e 	bne	r2,zero,800b328 <__subdf3+0x658>
 800b0b4:	81c00044 	addi	r7,r16,1
 800b0b8:	3881ffcc 	andi	r2,r7,2047
 800b0bc:	02400044 	movi	r9,1
 800b0c0:	4880680e 	bge	r9,r2,800b264 <__subdf3+0x594>
 800b0c4:	0081ffc4 	movi	r2,2047
 800b0c8:	3880ae26 	beq	r7,r2,800b384 <__subdf3+0x6b4>
 800b0cc:	344d883a 	add	r6,r6,r17
 800b0d0:	3463803a 	cmpltu	r17,r6,r17
 800b0d4:	194b883a 	add	r5,r3,r5
 800b0d8:	2c4b883a 	add	r5,r5,r17
 800b0dc:	282297fa 	slli	r17,r5,31
 800b0e0:	300cd07a 	srli	r6,r6,1
 800b0e4:	280ad07a 	srli	r5,r5,1
 800b0e8:	3821883a 	mov	r16,r7
 800b0ec:	89a2b03a 	or	r17,r17,r6
 800b0f0:	003f1a06 	br	800ad5c <__alt_data_end+0xfc00ad5c>
 800b0f4:	0101ffc4 	movi	r4,2047
 800b0f8:	813f431e 	bne	r16,r4,800ae08 <__alt_data_end+0xfc00ae08>
 800b0fc:	003f1706 	br	800ad5c <__alt_data_end+0xfc00ad5c>
 800b100:	80bff844 	addi	r2,r16,-31
 800b104:	00c00804 	movi	r3,32
 800b108:	9884d83a 	srl	r2,r19,r2
 800b10c:	28c05126 	beq	r5,r3,800b254 <__subdf3+0x584>
 800b110:	00c00fc4 	movi	r3,63
 800b114:	1c21c83a 	sub	r16,r3,r16
 800b118:	9c26983a 	sll	r19,r19,r16
 800b11c:	9c62b03a 	or	r17,r19,r17
 800b120:	8822c03a 	cmpne	r17,r17,zero
 800b124:	88a2b03a 	or	r17,r17,r2
 800b128:	000b883a 	mov	r5,zero
 800b12c:	0021883a 	mov	r16,zero
 800b130:	003fb406 	br	800b004 <__alt_data_end+0xfc00b004>
 800b134:	113ff804 	addi	r4,r2,-32
 800b138:	01c00804 	movi	r7,32
 800b13c:	1908d83a 	srl	r4,r3,r4
 800b140:	11c04626 	beq	r2,r7,800b25c <__subdf3+0x58c>
 800b144:	01c01004 	movi	r7,64
 800b148:	3885c83a 	sub	r2,r7,r2
 800b14c:	1884983a 	sll	r2,r3,r2
 800b150:	118cb03a 	or	r6,r2,r6
 800b154:	300cc03a 	cmpne	r6,r6,zero
 800b158:	310cb03a 	or	r6,r6,r4
 800b15c:	0005883a 	mov	r2,zero
 800b160:	003f3606 	br	800ae3c <__alt_data_end+0xfc00ae3c>
 800b164:	80002b26 	beq	r16,zero,800b214 <__subdf3+0x544>
 800b168:	0101ffc4 	movi	r4,2047
 800b16c:	51006926 	beq	r10,r4,800b314 <__subdf3+0x644>
 800b170:	0085c83a 	sub	r2,zero,r2
 800b174:	29402034 	orhi	r5,r5,128
 800b178:	01000e04 	movi	r4,56
 800b17c:	20807d16 	blt	r4,r2,800b374 <__subdf3+0x6a4>
 800b180:	010007c4 	movi	r4,31
 800b184:	2080d916 	blt	r4,r2,800b4ec <__subdf3+0x81c>
 800b188:	01000804 	movi	r4,32
 800b18c:	2089c83a 	sub	r4,r4,r2
 800b190:	2912983a 	sll	r9,r5,r4
 800b194:	8890d83a 	srl	r8,r17,r2
 800b198:	8908983a 	sll	r4,r17,r4
 800b19c:	2884d83a 	srl	r2,r5,r2
 800b1a0:	4a22b03a 	or	r17,r9,r8
 800b1a4:	2008c03a 	cmpne	r4,r4,zero
 800b1a8:	8922b03a 	or	r17,r17,r4
 800b1ac:	3463c83a 	sub	r17,r6,r17
 800b1b0:	1885c83a 	sub	r2,r3,r2
 800b1b4:	344d803a 	cmpltu	r6,r6,r17
 800b1b8:	118bc83a 	sub	r5,r2,r6
 800b1bc:	5021883a 	mov	r16,r10
 800b1c0:	3825883a 	mov	r18,r7
 800b1c4:	003f2206 	br	800ae50 <__alt_data_end+0xfc00ae50>
 800b1c8:	9886b03a 	or	r3,r19,r2
 800b1cc:	18001c1e 	bne	r3,zero,800b240 <__subdf3+0x570>
 800b1d0:	0011883a 	mov	r8,zero
 800b1d4:	000b883a 	mov	r5,zero
 800b1d8:	0023883a 	mov	r17,zero
 800b1dc:	0021883a 	mov	r16,zero
 800b1e0:	003f3e06 	br	800aedc <__alt_data_end+0xfc00aedc>
 800b1e4:	010007c4 	movi	r4,31
 800b1e8:	20803c16 	blt	r4,r2,800b2dc <__subdf3+0x60c>
 800b1ec:	01000804 	movi	r4,32
 800b1f0:	2089c83a 	sub	r4,r4,r2
 800b1f4:	1912983a 	sll	r9,r3,r4
 800b1f8:	308ed83a 	srl	r7,r6,r2
 800b1fc:	3108983a 	sll	r4,r6,r4
 800b200:	1884d83a 	srl	r2,r3,r2
 800b204:	49ceb03a 	or	r7,r9,r7
 800b208:	2008c03a 	cmpne	r4,r4,zero
 800b20c:	390eb03a 	or	r7,r7,r4
 800b210:	003f4706 	br	800af30 <__alt_data_end+0xfc00af30>
 800b214:	2c48b03a 	or	r4,r5,r17
 800b218:	20003e26 	beq	r4,zero,800b314 <__subdf3+0x644>
 800b21c:	0084303a 	nor	r2,zero,r2
 800b220:	10003a1e 	bne	r2,zero,800b30c <__subdf3+0x63c>
 800b224:	3463c83a 	sub	r17,r6,r17
 800b228:	194bc83a 	sub	r5,r3,r5
 800b22c:	344d803a 	cmpltu	r6,r6,r17
 800b230:	298bc83a 	sub	r5,r5,r6
 800b234:	5021883a 	mov	r16,r10
 800b238:	3825883a 	mov	r18,r7
 800b23c:	003f0406 	br	800ae50 <__alt_data_end+0xfc00ae50>
 800b240:	1023883a 	mov	r17,r2
 800b244:	003f0706 	br	800ae64 <__alt_data_end+0xfc00ae64>
 800b248:	0101ffc4 	movi	r4,2047
 800b24c:	813f331e 	bne	r16,r4,800af1c <__alt_data_end+0xfc00af1c>
 800b250:	003ec206 	br	800ad5c <__alt_data_end+0xfc00ad5c>
 800b254:	0027883a 	mov	r19,zero
 800b258:	003fb006 	br	800b11c <__alt_data_end+0xfc00b11c>
 800b25c:	0005883a 	mov	r2,zero
 800b260:	003fbb06 	br	800b150 <__alt_data_end+0xfc00b150>
 800b264:	2c44b03a 	or	r2,r5,r17
 800b268:	80008b1e 	bne	r16,zero,800b498 <__subdf3+0x7c8>
 800b26c:	1000b526 	beq	r2,zero,800b544 <__subdf3+0x874>
 800b270:	1984b03a 	or	r2,r3,r6
 800b274:	103eb926 	beq	r2,zero,800ad5c <__alt_data_end+0xfc00ad5c>
 800b278:	3449883a 	add	r4,r6,r17
 800b27c:	2463803a 	cmpltu	r17,r4,r17
 800b280:	194b883a 	add	r5,r3,r5
 800b284:	2c4b883a 	add	r5,r5,r17
 800b288:	2880202c 	andhi	r2,r5,128
 800b28c:	2023883a 	mov	r17,r4
 800b290:	103f5c26 	beq	r2,zero,800b004 <__alt_data_end+0xfc00b004>
 800b294:	00bfe034 	movhi	r2,65408
 800b298:	10bfffc4 	addi	r2,r2,-1
 800b29c:	4821883a 	mov	r16,r9
 800b2a0:	288a703a 	and	r5,r5,r2
 800b2a4:	003ead06 	br	800ad5c <__alt_data_end+0xfc00ad5c>
 800b2a8:	2c44b03a 	or	r2,r5,r17
 800b2ac:	8000291e 	bne	r16,zero,800b354 <__subdf3+0x684>
 800b2b0:	10004f1e 	bne	r2,zero,800b3f0 <__subdf3+0x720>
 800b2b4:	1984b03a 	or	r2,r3,r6
 800b2b8:	10000426 	beq	r2,zero,800b2cc <__subdf3+0x5fc>
 800b2bc:	180b883a 	mov	r5,r3
 800b2c0:	3023883a 	mov	r17,r6
 800b2c4:	3825883a 	mov	r18,r7
 800b2c8:	003ea406 	br	800ad5c <__alt_data_end+0xfc00ad5c>
 800b2cc:	0011883a 	mov	r8,zero
 800b2d0:	000b883a 	mov	r5,zero
 800b2d4:	0023883a 	mov	r17,zero
 800b2d8:	003f0006 	br	800aedc <__alt_data_end+0xfc00aedc>
 800b2dc:	11fff804 	addi	r7,r2,-32
 800b2e0:	19c8d83a 	srl	r4,r3,r7
 800b2e4:	01c00804 	movi	r7,32
 800b2e8:	11c07e26 	beq	r2,r7,800b4e4 <__subdf3+0x814>
 800b2ec:	01c01004 	movi	r7,64
 800b2f0:	3885c83a 	sub	r2,r7,r2
 800b2f4:	1884983a 	sll	r2,r3,r2
 800b2f8:	118cb03a 	or	r6,r2,r6
 800b2fc:	300ec03a 	cmpne	r7,r6,zero
 800b300:	390eb03a 	or	r7,r7,r4
 800b304:	0005883a 	mov	r2,zero
 800b308:	003f0906 	br	800af30 <__alt_data_end+0xfc00af30>
 800b30c:	0101ffc4 	movi	r4,2047
 800b310:	513f991e 	bne	r10,r4,800b178 <__alt_data_end+0xfc00b178>
 800b314:	180b883a 	mov	r5,r3
 800b318:	3023883a 	mov	r17,r6
 800b31c:	5021883a 	mov	r16,r10
 800b320:	3825883a 	mov	r18,r7
 800b324:	003e8d06 	br	800ad5c <__alt_data_end+0xfc00ad5c>
 800b328:	80001a1e 	bne	r16,zero,800b394 <__subdf3+0x6c4>
 800b32c:	2c48b03a 	or	r4,r5,r17
 800b330:	20005526 	beq	r4,zero,800b488 <__subdf3+0x7b8>
 800b334:	0084303a 	nor	r2,zero,r2
 800b338:	1000511e 	bne	r2,zero,800b480 <__subdf3+0x7b0>
 800b33c:	89a3883a 	add	r17,r17,r6
 800b340:	194b883a 	add	r5,r3,r5
 800b344:	898d803a 	cmpltu	r6,r17,r6
 800b348:	298b883a 	add	r5,r5,r6
 800b34c:	5021883a 	mov	r16,r10
 800b350:	003efc06 	br	800af44 <__alt_data_end+0xfc00af44>
 800b354:	1000341e 	bne	r2,zero,800b428 <__subdf3+0x758>
 800b358:	1984b03a 	or	r2,r3,r6
 800b35c:	10006f26 	beq	r2,zero,800b51c <__subdf3+0x84c>
 800b360:	180b883a 	mov	r5,r3
 800b364:	3023883a 	mov	r17,r6
 800b368:	3825883a 	mov	r18,r7
 800b36c:	0401ffc4 	movi	r16,2047
 800b370:	003e7a06 	br	800ad5c <__alt_data_end+0xfc00ad5c>
 800b374:	2c62b03a 	or	r17,r5,r17
 800b378:	8822c03a 	cmpne	r17,r17,zero
 800b37c:	0005883a 	mov	r2,zero
 800b380:	003f8a06 	br	800b1ac <__alt_data_end+0xfc00b1ac>
 800b384:	3821883a 	mov	r16,r7
 800b388:	000b883a 	mov	r5,zero
 800b38c:	0023883a 	mov	r17,zero
 800b390:	003ed206 	br	800aedc <__alt_data_end+0xfc00aedc>
 800b394:	0101ffc4 	movi	r4,2047
 800b398:	51003b26 	beq	r10,r4,800b488 <__subdf3+0x7b8>
 800b39c:	0085c83a 	sub	r2,zero,r2
 800b3a0:	29402034 	orhi	r5,r5,128
 800b3a4:	01000e04 	movi	r4,56
 800b3a8:	20806216 	blt	r4,r2,800b534 <__subdf3+0x864>
 800b3ac:	010007c4 	movi	r4,31
 800b3b0:	20806b16 	blt	r4,r2,800b560 <__subdf3+0x890>
 800b3b4:	01000804 	movi	r4,32
 800b3b8:	2089c83a 	sub	r4,r4,r2
 800b3bc:	2912983a 	sll	r9,r5,r4
 800b3c0:	888ed83a 	srl	r7,r17,r2
 800b3c4:	8908983a 	sll	r4,r17,r4
 800b3c8:	2884d83a 	srl	r2,r5,r2
 800b3cc:	49e2b03a 	or	r17,r9,r7
 800b3d0:	2008c03a 	cmpne	r4,r4,zero
 800b3d4:	8922b03a 	or	r17,r17,r4
 800b3d8:	89a3883a 	add	r17,r17,r6
 800b3dc:	10c5883a 	add	r2,r2,r3
 800b3e0:	898d803a 	cmpltu	r6,r17,r6
 800b3e4:	118b883a 	add	r5,r2,r6
 800b3e8:	5021883a 	mov	r16,r10
 800b3ec:	003ed506 	br	800af44 <__alt_data_end+0xfc00af44>
 800b3f0:	1984b03a 	or	r2,r3,r6
 800b3f4:	103e5926 	beq	r2,zero,800ad5c <__alt_data_end+0xfc00ad5c>
 800b3f8:	8989c83a 	sub	r4,r17,r6
 800b3fc:	8911803a 	cmpltu	r8,r17,r4
 800b400:	28c5c83a 	sub	r2,r5,r3
 800b404:	1205c83a 	sub	r2,r2,r8
 800b408:	1200202c 	andhi	r8,r2,128
 800b40c:	403ef926 	beq	r8,zero,800aff4 <__alt_data_end+0xfc00aff4>
 800b410:	3463c83a 	sub	r17,r6,r17
 800b414:	194bc83a 	sub	r5,r3,r5
 800b418:	344d803a 	cmpltu	r6,r6,r17
 800b41c:	298bc83a 	sub	r5,r5,r6
 800b420:	3825883a 	mov	r18,r7
 800b424:	003e4d06 	br	800ad5c <__alt_data_end+0xfc00ad5c>
 800b428:	1984b03a 	or	r2,r3,r6
 800b42c:	10002b26 	beq	r2,zero,800b4dc <__subdf3+0x80c>
 800b430:	2808d0fa 	srli	r4,r5,3
 800b434:	8822d0fa 	srli	r17,r17,3
 800b438:	280a977a 	slli	r5,r5,29
 800b43c:	2080022c 	andhi	r2,r4,8
 800b440:	2c62b03a 	or	r17,r5,r17
 800b444:	10000826 	beq	r2,zero,800b468 <__subdf3+0x798>
 800b448:	1810d0fa 	srli	r8,r3,3
 800b44c:	4080022c 	andhi	r2,r8,8
 800b450:	1000051e 	bne	r2,zero,800b468 <__subdf3+0x798>
 800b454:	300cd0fa 	srli	r6,r6,3
 800b458:	1804977a 	slli	r2,r3,29
 800b45c:	4009883a 	mov	r4,r8
 800b460:	3825883a 	mov	r18,r7
 800b464:	11a2b03a 	or	r17,r2,r6
 800b468:	880ad77a 	srli	r5,r17,29
 800b46c:	200890fa 	slli	r4,r4,3
 800b470:	882290fa 	slli	r17,r17,3
 800b474:	0401ffc4 	movi	r16,2047
 800b478:	290ab03a 	or	r5,r5,r4
 800b47c:	003e3706 	br	800ad5c <__alt_data_end+0xfc00ad5c>
 800b480:	0101ffc4 	movi	r4,2047
 800b484:	513fc71e 	bne	r10,r4,800b3a4 <__alt_data_end+0xfc00b3a4>
 800b488:	180b883a 	mov	r5,r3
 800b48c:	3023883a 	mov	r17,r6
 800b490:	5021883a 	mov	r16,r10
 800b494:	003e3106 	br	800ad5c <__alt_data_end+0xfc00ad5c>
 800b498:	10002d26 	beq	r2,zero,800b550 <__subdf3+0x880>
 800b49c:	1984b03a 	or	r2,r3,r6
 800b4a0:	10000e26 	beq	r2,zero,800b4dc <__subdf3+0x80c>
 800b4a4:	2808d0fa 	srli	r4,r5,3
 800b4a8:	8822d0fa 	srli	r17,r17,3
 800b4ac:	280a977a 	slli	r5,r5,29
 800b4b0:	2080022c 	andhi	r2,r4,8
 800b4b4:	2c62b03a 	or	r17,r5,r17
 800b4b8:	103feb26 	beq	r2,zero,800b468 <__alt_data_end+0xfc00b468>
 800b4bc:	180ed0fa 	srli	r7,r3,3
 800b4c0:	3880022c 	andhi	r2,r7,8
 800b4c4:	103fe81e 	bne	r2,zero,800b468 <__alt_data_end+0xfc00b468>
 800b4c8:	300cd0fa 	srli	r6,r6,3
 800b4cc:	1804977a 	slli	r2,r3,29
 800b4d0:	3809883a 	mov	r4,r7
 800b4d4:	11a2b03a 	or	r17,r2,r6
 800b4d8:	003fe306 	br	800b468 <__alt_data_end+0xfc00b468>
 800b4dc:	0401ffc4 	movi	r16,2047
 800b4e0:	003e1e06 	br	800ad5c <__alt_data_end+0xfc00ad5c>
 800b4e4:	0005883a 	mov	r2,zero
 800b4e8:	003f8306 	br	800b2f8 <__alt_data_end+0xfc00b2f8>
 800b4ec:	113ff804 	addi	r4,r2,-32
 800b4f0:	02000804 	movi	r8,32
 800b4f4:	2908d83a 	srl	r4,r5,r4
 800b4f8:	12002526 	beq	r2,r8,800b590 <__subdf3+0x8c0>
 800b4fc:	02001004 	movi	r8,64
 800b500:	4085c83a 	sub	r2,r8,r2
 800b504:	288a983a 	sll	r5,r5,r2
 800b508:	2c62b03a 	or	r17,r5,r17
 800b50c:	8822c03a 	cmpne	r17,r17,zero
 800b510:	8922b03a 	or	r17,r17,r4
 800b514:	0005883a 	mov	r2,zero
 800b518:	003f2406 	br	800b1ac <__alt_data_end+0xfc00b1ac>
 800b51c:	01402034 	movhi	r5,128
 800b520:	0011883a 	mov	r8,zero
 800b524:	297fffc4 	addi	r5,r5,-1
 800b528:	047ffe04 	movi	r17,-8
 800b52c:	0401ffc4 	movi	r16,2047
 800b530:	003e6a06 	br	800aedc <__alt_data_end+0xfc00aedc>
 800b534:	2c62b03a 	or	r17,r5,r17
 800b538:	8822c03a 	cmpne	r17,r17,zero
 800b53c:	0005883a 	mov	r2,zero
 800b540:	003fa506 	br	800b3d8 <__alt_data_end+0xfc00b3d8>
 800b544:	180b883a 	mov	r5,r3
 800b548:	3023883a 	mov	r17,r6
 800b54c:	003e0306 	br	800ad5c <__alt_data_end+0xfc00ad5c>
 800b550:	180b883a 	mov	r5,r3
 800b554:	3023883a 	mov	r17,r6
 800b558:	0401ffc4 	movi	r16,2047
 800b55c:	003dff06 	br	800ad5c <__alt_data_end+0xfc00ad5c>
 800b560:	113ff804 	addi	r4,r2,-32
 800b564:	01c00804 	movi	r7,32
 800b568:	2908d83a 	srl	r4,r5,r4
 800b56c:	11c00a26 	beq	r2,r7,800b598 <__subdf3+0x8c8>
 800b570:	01c01004 	movi	r7,64
 800b574:	3885c83a 	sub	r2,r7,r2
 800b578:	288a983a 	sll	r5,r5,r2
 800b57c:	2c62b03a 	or	r17,r5,r17
 800b580:	8822c03a 	cmpne	r17,r17,zero
 800b584:	8922b03a 	or	r17,r17,r4
 800b588:	0005883a 	mov	r2,zero
 800b58c:	003f9206 	br	800b3d8 <__alt_data_end+0xfc00b3d8>
 800b590:	000b883a 	mov	r5,zero
 800b594:	003fdc06 	br	800b508 <__alt_data_end+0xfc00b508>
 800b598:	000b883a 	mov	r5,zero
 800b59c:	003ff706 	br	800b57c <__alt_data_end+0xfc00b57c>

0800b5a0 <__fixdfsi>:
 800b5a0:	2806d53a 	srli	r3,r5,20
 800b5a4:	00800434 	movhi	r2,16
 800b5a8:	10bfffc4 	addi	r2,r2,-1
 800b5ac:	18c1ffcc 	andi	r3,r3,2047
 800b5b0:	0180ff84 	movi	r6,1022
 800b5b4:	2884703a 	and	r2,r5,r2
 800b5b8:	280ad7fa 	srli	r5,r5,31
 800b5bc:	30c0130e 	bge	r6,r3,800b60c <__fixdfsi+0x6c>
 800b5c0:	01810744 	movi	r6,1053
 800b5c4:	30c00d16 	blt	r6,r3,800b5fc <__fixdfsi+0x5c>
 800b5c8:	01810cc4 	movi	r6,1075
 800b5cc:	30cdc83a 	sub	r6,r6,r3
 800b5d0:	01c007c4 	movi	r7,31
 800b5d4:	10800434 	orhi	r2,r2,16
 800b5d8:	39800e0e 	bge	r7,r6,800b614 <__fixdfsi+0x74>
 800b5dc:	010104c4 	movi	r4,1043
 800b5e0:	20c7c83a 	sub	r3,r4,r3
 800b5e4:	10c6d83a 	srl	r3,r2,r3
 800b5e8:	29403fcc 	andi	r5,r5,255
 800b5ec:	0145c83a 	sub	r2,zero,r5
 800b5f0:	1884f03a 	xor	r2,r3,r2
 800b5f4:	1145883a 	add	r2,r2,r5
 800b5f8:	f800283a 	ret
 800b5fc:	00a00034 	movhi	r2,32768
 800b600:	10bfffc4 	addi	r2,r2,-1
 800b604:	2885883a 	add	r2,r5,r2
 800b608:	f800283a 	ret
 800b60c:	0005883a 	mov	r2,zero
 800b610:	f800283a 	ret
 800b614:	18fefb44 	addi	r3,r3,-1043
 800b618:	2188d83a 	srl	r4,r4,r6
 800b61c:	10c6983a 	sll	r3,r2,r3
 800b620:	20c6b03a 	or	r3,r4,r3
 800b624:	003ff006 	br	800b5e8 <__alt_data_end+0xfc00b5e8>

0800b628 <__floatsidf>:
 800b628:	defffd04 	addi	sp,sp,-12
 800b62c:	dc400115 	stw	r17,4(sp)
 800b630:	dfc00215 	stw	ra,8(sp)
 800b634:	dc000015 	stw	r16,0(sp)
 800b638:	2023883a 	mov	r17,r4
 800b63c:	20001426 	beq	r4,zero,800b690 <__floatsidf+0x68>
 800b640:	2020d7fa 	srli	r16,r4,31
 800b644:	80000126 	beq	r16,zero,800b64c <__floatsidf+0x24>
 800b648:	0123c83a 	sub	r17,zero,r4
 800b64c:	8809883a 	mov	r4,r17
 800b650:	800b9a00 	call	800b9a0 <__clzsi2>
 800b654:	01410784 	movi	r5,1054
 800b658:	00c00284 	movi	r3,10
 800b65c:	288bc83a 	sub	r5,r5,r2
 800b660:	18801c16 	blt	r3,r2,800b6d4 <__floatsidf+0xac>
 800b664:	00c002c4 	movi	r3,11
 800b668:	1887c83a 	sub	r3,r3,r2
 800b66c:	88c8d83a 	srl	r4,r17,r3
 800b670:	00c00434 	movhi	r3,16
 800b674:	18ffffc4 	addi	r3,r3,-1
 800b678:	10800544 	addi	r2,r2,21
 800b67c:	20c8703a 	and	r4,r4,r3
 800b680:	8884983a 	sll	r2,r17,r2
 800b684:	28c1ffcc 	andi	r3,r5,2047
 800b688:	800d883a 	mov	r6,r16
 800b68c:	00000406 	br	800b6a0 <__floatsidf+0x78>
 800b690:	000d883a 	mov	r6,zero
 800b694:	0007883a 	mov	r3,zero
 800b698:	0009883a 	mov	r4,zero
 800b69c:	0005883a 	mov	r2,zero
 800b6a0:	180a953a 	slli	r5,r3,20
 800b6a4:	31803fcc 	andi	r6,r6,255
 800b6a8:	00c00434 	movhi	r3,16
 800b6ac:	300c97fa 	slli	r6,r6,31
 800b6b0:	18ffffc4 	addi	r3,r3,-1
 800b6b4:	20c6703a 	and	r3,r4,r3
 800b6b8:	1946b03a 	or	r3,r3,r5
 800b6bc:	1986b03a 	or	r3,r3,r6
 800b6c0:	dfc00217 	ldw	ra,8(sp)
 800b6c4:	dc400117 	ldw	r17,4(sp)
 800b6c8:	dc000017 	ldw	r16,0(sp)
 800b6cc:	dec00304 	addi	sp,sp,12
 800b6d0:	f800283a 	ret
 800b6d4:	10fffd44 	addi	r3,r2,-11
 800b6d8:	88c8983a 	sll	r4,r17,r3
 800b6dc:	00800434 	movhi	r2,16
 800b6e0:	10bfffc4 	addi	r2,r2,-1
 800b6e4:	2088703a 	and	r4,r4,r2
 800b6e8:	28c1ffcc 	andi	r3,r5,2047
 800b6ec:	800d883a 	mov	r6,r16
 800b6f0:	0005883a 	mov	r2,zero
 800b6f4:	003fea06 	br	800b6a0 <__alt_data_end+0xfc00b6a0>

0800b6f8 <__extendsfdf2>:
 800b6f8:	200ad5fa 	srli	r5,r4,23
 800b6fc:	defffd04 	addi	sp,sp,-12
 800b700:	dc400115 	stw	r17,4(sp)
 800b704:	29403fcc 	andi	r5,r5,255
 800b708:	29800044 	addi	r6,r5,1
 800b70c:	04402034 	movhi	r17,128
 800b710:	dc000015 	stw	r16,0(sp)
 800b714:	8c7fffc4 	addi	r17,r17,-1
 800b718:	dfc00215 	stw	ra,8(sp)
 800b71c:	31803fcc 	andi	r6,r6,255
 800b720:	00800044 	movi	r2,1
 800b724:	8922703a 	and	r17,r17,r4
 800b728:	2020d7fa 	srli	r16,r4,31
 800b72c:	1180110e 	bge	r2,r6,800b774 <__extendsfdf2+0x7c>
 800b730:	880ed0fa 	srli	r7,r17,3
 800b734:	8822977a 	slli	r17,r17,29
 800b738:	2940e004 	addi	r5,r5,896
 800b73c:	2941ffcc 	andi	r5,r5,2047
 800b740:	280c953a 	slli	r6,r5,20
 800b744:	01400434 	movhi	r5,16
 800b748:	800697fa 	slli	r3,r16,31
 800b74c:	297fffc4 	addi	r5,r5,-1
 800b750:	394a703a 	and	r5,r7,r5
 800b754:	298ab03a 	or	r5,r5,r6
 800b758:	8805883a 	mov	r2,r17
 800b75c:	28c6b03a 	or	r3,r5,r3
 800b760:	dfc00217 	ldw	ra,8(sp)
 800b764:	dc400117 	ldw	r17,4(sp)
 800b768:	dc000017 	ldw	r16,0(sp)
 800b76c:	dec00304 	addi	sp,sp,12
 800b770:	f800283a 	ret
 800b774:	2800111e 	bne	r5,zero,800b7bc <__extendsfdf2+0xc4>
 800b778:	88001c26 	beq	r17,zero,800b7ec <__extendsfdf2+0xf4>
 800b77c:	8809883a 	mov	r4,r17
 800b780:	800b9a00 	call	800b9a0 <__clzsi2>
 800b784:	00c00284 	movi	r3,10
 800b788:	18801b16 	blt	r3,r2,800b7f8 <__extendsfdf2+0x100>
 800b78c:	01c002c4 	movi	r7,11
 800b790:	388fc83a 	sub	r7,r7,r2
 800b794:	10c00544 	addi	r3,r2,21
 800b798:	89ced83a 	srl	r7,r17,r7
 800b79c:	88e2983a 	sll	r17,r17,r3
 800b7a0:	0180e244 	movi	r6,905
 800b7a4:	308bc83a 	sub	r5,r6,r2
 800b7a8:	01800434 	movhi	r6,16
 800b7ac:	31bfffc4 	addi	r6,r6,-1
 800b7b0:	398e703a 	and	r7,r7,r6
 800b7b4:	2941ffcc 	andi	r5,r5,2047
 800b7b8:	003fe006 	br	800b73c <__alt_data_end+0xfc00b73c>
 800b7bc:	88000826 	beq	r17,zero,800b7e0 <__extendsfdf2+0xe8>
 800b7c0:	880ed0fa 	srli	r7,r17,3
 800b7c4:	00800434 	movhi	r2,16
 800b7c8:	10bfffc4 	addi	r2,r2,-1
 800b7cc:	39c00234 	orhi	r7,r7,8
 800b7d0:	8822977a 	slli	r17,r17,29
 800b7d4:	388e703a 	and	r7,r7,r2
 800b7d8:	0141ffc4 	movi	r5,2047
 800b7dc:	003fd706 	br	800b73c <__alt_data_end+0xfc00b73c>
 800b7e0:	0141ffc4 	movi	r5,2047
 800b7e4:	000f883a 	mov	r7,zero
 800b7e8:	003fd406 	br	800b73c <__alt_data_end+0xfc00b73c>
 800b7ec:	000b883a 	mov	r5,zero
 800b7f0:	000f883a 	mov	r7,zero
 800b7f4:	003fd106 	br	800b73c <__alt_data_end+0xfc00b73c>
 800b7f8:	11fffd44 	addi	r7,r2,-11
 800b7fc:	89ce983a 	sll	r7,r17,r7
 800b800:	0023883a 	mov	r17,zero
 800b804:	003fe606 	br	800b7a0 <__alt_data_end+0xfc00b7a0>

0800b808 <__truncdfsf2>:
 800b808:	2810d53a 	srli	r8,r5,20
 800b80c:	01c00434 	movhi	r7,16
 800b810:	39ffffc4 	addi	r7,r7,-1
 800b814:	29ce703a 	and	r7,r5,r7
 800b818:	380e90fa 	slli	r7,r7,3
 800b81c:	4201ffcc 	andi	r8,r8,2047
 800b820:	200cd77a 	srli	r6,r4,29
 800b824:	42400044 	addi	r9,r8,1
 800b828:	4a41ffcc 	andi	r9,r9,2047
 800b82c:	00800044 	movi	r2,1
 800b830:	398cb03a 	or	r6,r7,r6
 800b834:	280ad7fa 	srli	r5,r5,31
 800b838:	200e90fa 	slli	r7,r4,3
 800b83c:	1240230e 	bge	r2,r9,800b8cc <__truncdfsf2+0xc4>
 800b840:	40ff2004 	addi	r3,r8,-896
 800b844:	00803f84 	movi	r2,254
 800b848:	10c01516 	blt	r2,r3,800b8a0 <__truncdfsf2+0x98>
 800b84c:	00c02d0e 	bge	zero,r3,800b904 <__truncdfsf2+0xfc>
 800b850:	200891ba 	slli	r4,r4,6
 800b854:	300c90fa 	slli	r6,r6,3
 800b858:	380ed77a 	srli	r7,r7,29
 800b85c:	2008c03a 	cmpne	r4,r4,zero
 800b860:	310cb03a 	or	r6,r6,r4
 800b864:	31ccb03a 	or	r6,r6,r7
 800b868:	308001cc 	andi	r2,r6,7
 800b86c:	10000426 	beq	r2,zero,800b880 <__truncdfsf2+0x78>
 800b870:	310003cc 	andi	r4,r6,15
 800b874:	00800104 	movi	r2,4
 800b878:	20800126 	beq	r4,r2,800b880 <__truncdfsf2+0x78>
 800b87c:	31800104 	addi	r6,r6,4
 800b880:	3081002c 	andhi	r2,r6,1024
 800b884:	10002326 	beq	r2,zero,800b914 <__truncdfsf2+0x10c>
 800b888:	18c00044 	addi	r3,r3,1
 800b88c:	00803fc4 	movi	r2,255
 800b890:	18800326 	beq	r3,r2,800b8a0 <__truncdfsf2+0x98>
 800b894:	300c91ba 	slli	r6,r6,6
 800b898:	300cd27a 	srli	r6,r6,9
 800b89c:	00000206 	br	800b8a8 <__truncdfsf2+0xa0>
 800b8a0:	00ffffc4 	movi	r3,-1
 800b8a4:	000d883a 	mov	r6,zero
 800b8a8:	18c03fcc 	andi	r3,r3,255
 800b8ac:	180895fa 	slli	r4,r3,23
 800b8b0:	00c02034 	movhi	r3,128
 800b8b4:	280a97fa 	slli	r5,r5,31
 800b8b8:	18ffffc4 	addi	r3,r3,-1
 800b8bc:	30c6703a 	and	r3,r6,r3
 800b8c0:	1906b03a 	or	r3,r3,r4
 800b8c4:	1944b03a 	or	r2,r3,r5
 800b8c8:	f800283a 	ret
 800b8cc:	4000071e 	bne	r8,zero,800b8ec <__truncdfsf2+0xe4>
 800b8d0:	31ccb03a 	or	r6,r6,r7
 800b8d4:	30000d1e 	bne	r6,zero,800b90c <__truncdfsf2+0x104>
 800b8d8:	0007883a 	mov	r3,zero
 800b8dc:	00802034 	movhi	r2,128
 800b8e0:	10bfffc4 	addi	r2,r2,-1
 800b8e4:	308c703a 	and	r6,r6,r2
 800b8e8:	003fef06 	br	800b8a8 <__alt_data_end+0xfc00b8a8>
 800b8ec:	31c8b03a 	or	r4,r6,r7
 800b8f0:	203feb26 	beq	r4,zero,800b8a0 <__alt_data_end+0xfc00b8a0>
 800b8f4:	300c90fa 	slli	r6,r6,3
 800b8f8:	00c03fc4 	movi	r3,255
 800b8fc:	31808034 	orhi	r6,r6,512
 800b900:	003fd906 	br	800b868 <__alt_data_end+0xfc00b868>
 800b904:	00bffa44 	movi	r2,-23
 800b908:	1880090e 	bge	r3,r2,800b930 <__truncdfsf2+0x128>
 800b90c:	01800144 	movi	r6,5
 800b910:	0007883a 	mov	r3,zero
 800b914:	00803fc4 	movi	r2,255
 800b918:	300cd0fa 	srli	r6,r6,3
 800b91c:	18bfef1e 	bne	r3,r2,800b8dc <__alt_data_end+0xfc00b8dc>
 800b920:	303fdf26 	beq	r6,zero,800b8a0 <__alt_data_end+0xfc00b8a0>
 800b924:	31801034 	orhi	r6,r6,64
 800b928:	00ffffc4 	movi	r3,-1
 800b92c:	003feb06 	br	800b8dc <__alt_data_end+0xfc00b8dc>
 800b930:	0080e784 	movi	r2,926
 800b934:	1205c83a 	sub	r2,r2,r8
 800b938:	00c007c4 	movi	r3,31
 800b93c:	31802034 	orhi	r6,r6,128
 800b940:	18800916 	blt	r3,r2,800b968 <__truncdfsf2+0x160>
 800b944:	423f2084 	addi	r8,r8,-894
 800b948:	3a06983a 	sll	r3,r7,r8
 800b94c:	3210983a 	sll	r8,r6,r8
 800b950:	388ed83a 	srl	r7,r7,r2
 800b954:	180cc03a 	cmpne	r6,r3,zero
 800b958:	418cb03a 	or	r6,r8,r6
 800b95c:	31ccb03a 	or	r6,r6,r7
 800b960:	0007883a 	mov	r3,zero
 800b964:	003fc006 	br	800b868 <__alt_data_end+0xfc00b868>
 800b968:	00c0df84 	movi	r3,894
 800b96c:	1a07c83a 	sub	r3,r3,r8
 800b970:	01000804 	movi	r4,32
 800b974:	30c6d83a 	srl	r3,r6,r3
 800b978:	11000726 	beq	r2,r4,800b998 <__truncdfsf2+0x190>
 800b97c:	423f2884 	addi	r8,r8,-862
 800b980:	3210983a 	sll	r8,r6,r8
 800b984:	41ceb03a 	or	r7,r8,r7
 800b988:	380ec03a 	cmpne	r7,r7,zero
 800b98c:	38ccb03a 	or	r6,r7,r3
 800b990:	0007883a 	mov	r3,zero
 800b994:	003fb406 	br	800b868 <__alt_data_end+0xfc00b868>
 800b998:	0011883a 	mov	r8,zero
 800b99c:	003ff906 	br	800b984 <__alt_data_end+0xfc00b984>

0800b9a0 <__clzsi2>:
 800b9a0:	00bfffd4 	movui	r2,65535
 800b9a4:	11000b36 	bltu	r2,r4,800b9d4 <__clzsi2+0x34>
 800b9a8:	00803fc4 	movi	r2,255
 800b9ac:	1100122e 	bgeu	r2,r4,800b9f8 <__clzsi2+0x58>
 800b9b0:	00c00204 	movi	r3,8
 800b9b4:	01400604 	movi	r5,24
 800b9b8:	20c8d83a 	srl	r4,r4,r3
 800b9bc:	008200b4 	movhi	r2,2050
 800b9c0:	109c3b04 	addi	r2,r2,28908
 800b9c4:	1109883a 	add	r4,r2,r4
 800b9c8:	20800003 	ldbu	r2,0(r4)
 800b9cc:	2885c83a 	sub	r2,r5,r2
 800b9d0:	f800283a 	ret
 800b9d4:	00804034 	movhi	r2,256
 800b9d8:	10bfffc4 	addi	r2,r2,-1
 800b9dc:	11000336 	bltu	r2,r4,800b9ec <__clzsi2+0x4c>
 800b9e0:	00c00404 	movi	r3,16
 800b9e4:	180b883a 	mov	r5,r3
 800b9e8:	003ff306 	br	800b9b8 <__alt_data_end+0xfc00b9b8>
 800b9ec:	00c00604 	movi	r3,24
 800b9f0:	01400204 	movi	r5,8
 800b9f4:	003ff006 	br	800b9b8 <__alt_data_end+0xfc00b9b8>
 800b9f8:	0007883a 	mov	r3,zero
 800b9fc:	01400804 	movi	r5,32
 800ba00:	003fed06 	br	800b9b8 <__alt_data_end+0xfc00b9b8>

0800ba04 <udivmodsi4>:
 800ba04:	2900182e 	bgeu	r5,r4,800ba68 <udivmodsi4+0x64>
 800ba08:	28001716 	blt	r5,zero,800ba68 <udivmodsi4+0x64>
 800ba0c:	00800804 	movi	r2,32
 800ba10:	00c00044 	movi	r3,1
 800ba14:	00000206 	br	800ba20 <udivmodsi4+0x1c>
 800ba18:	10001126 	beq	r2,zero,800ba60 <udivmodsi4+0x5c>
 800ba1c:	28000516 	blt	r5,zero,800ba34 <udivmodsi4+0x30>
 800ba20:	294b883a 	add	r5,r5,r5
 800ba24:	10bfffc4 	addi	r2,r2,-1
 800ba28:	18c7883a 	add	r3,r3,r3
 800ba2c:	293ffa36 	bltu	r5,r4,800ba18 <__alt_data_end+0xfc00ba18>
 800ba30:	18000b26 	beq	r3,zero,800ba60 <udivmodsi4+0x5c>
 800ba34:	0005883a 	mov	r2,zero
 800ba38:	21400236 	bltu	r4,r5,800ba44 <udivmodsi4+0x40>
 800ba3c:	2149c83a 	sub	r4,r4,r5
 800ba40:	10c4b03a 	or	r2,r2,r3
 800ba44:	1806d07a 	srli	r3,r3,1
 800ba48:	280ad07a 	srli	r5,r5,1
 800ba4c:	183ffa1e 	bne	r3,zero,800ba38 <__alt_data_end+0xfc00ba38>
 800ba50:	3000011e 	bne	r6,zero,800ba58 <udivmodsi4+0x54>
 800ba54:	f800283a 	ret
 800ba58:	2005883a 	mov	r2,r4
 800ba5c:	f800283a 	ret
 800ba60:	0005883a 	mov	r2,zero
 800ba64:	003ffa06 	br	800ba50 <__alt_data_end+0xfc00ba50>
 800ba68:	00c00044 	movi	r3,1
 800ba6c:	003ff106 	br	800ba34 <__alt_data_end+0xfc00ba34>

0800ba70 <__divsi3>:
 800ba70:	defffe04 	addi	sp,sp,-8
 800ba74:	dfc00115 	stw	ra,4(sp)
 800ba78:	dc000015 	stw	r16,0(sp)
 800ba7c:	20000b16 	blt	r4,zero,800baac <__divsi3+0x3c>
 800ba80:	0021883a 	mov	r16,zero
 800ba84:	28000c16 	blt	r5,zero,800bab8 <__divsi3+0x48>
 800ba88:	000d883a 	mov	r6,zero
 800ba8c:	800ba040 	call	800ba04 <udivmodsi4>
 800ba90:	0407c83a 	sub	r3,zero,r16
 800ba94:	1884f03a 	xor	r2,r3,r2
 800ba98:	1405883a 	add	r2,r2,r16
 800ba9c:	dfc00117 	ldw	ra,4(sp)
 800baa0:	dc000017 	ldw	r16,0(sp)
 800baa4:	dec00204 	addi	sp,sp,8
 800baa8:	f800283a 	ret
 800baac:	0109c83a 	sub	r4,zero,r4
 800bab0:	04000044 	movi	r16,1
 800bab4:	283ff40e 	bge	r5,zero,800ba88 <__alt_data_end+0xfc00ba88>
 800bab8:	014bc83a 	sub	r5,zero,r5
 800babc:	8400005c 	xori	r16,r16,1
 800bac0:	003ff106 	br	800ba88 <__alt_data_end+0xfc00ba88>

0800bac4 <__modsi3>:
 800bac4:	defffd04 	addi	sp,sp,-12
 800bac8:	dfc00215 	stw	ra,8(sp)
 800bacc:	dc400115 	stw	r17,4(sp)
 800bad0:	dc000015 	stw	r16,0(sp)
 800bad4:	20000c16 	blt	r4,zero,800bb08 <__modsi3+0x44>
 800bad8:	0023883a 	mov	r17,zero
 800badc:	0021883a 	mov	r16,zero
 800bae0:	28000d16 	blt	r5,zero,800bb18 <__modsi3+0x54>
 800bae4:	01800044 	movi	r6,1
 800bae8:	800ba040 	call	800ba04 <udivmodsi4>
 800baec:	1404f03a 	xor	r2,r2,r16
 800baf0:	8885883a 	add	r2,r17,r2
 800baf4:	dfc00217 	ldw	ra,8(sp)
 800baf8:	dc400117 	ldw	r17,4(sp)
 800bafc:	dc000017 	ldw	r16,0(sp)
 800bb00:	dec00304 	addi	sp,sp,12
 800bb04:	f800283a 	ret
 800bb08:	0109c83a 	sub	r4,zero,r4
 800bb0c:	04400044 	movi	r17,1
 800bb10:	043fffc4 	movi	r16,-1
 800bb14:	283ff30e 	bge	r5,zero,800bae4 <__alt_data_end+0xfc00bae4>
 800bb18:	014bc83a 	sub	r5,zero,r5
 800bb1c:	003ff106 	br	800bae4 <__alt_data_end+0xfc00bae4>

0800bb20 <__udivsi3>:
 800bb20:	000d883a 	mov	r6,zero
 800bb24:	800ba041 	jmpi	800ba04 <udivmodsi4>

0800bb28 <__umodsi3>:
 800bb28:	01800044 	movi	r6,1
 800bb2c:	800ba041 	jmpi	800ba04 <udivmodsi4>

0800bb30 <__assert_func>:
 800bb30:	008200f4 	movhi	r2,2051
 800bb34:	10a3ec04 	addi	r2,r2,-28752
 800bb38:	10800017 	ldw	r2,0(r2)
 800bb3c:	defffc04 	addi	sp,sp,-16
 800bb40:	dfc00315 	stw	ra,12(sp)
 800bb44:	2013883a 	mov	r9,r4
 800bb48:	2811883a 	mov	r8,r5
 800bb4c:	11000317 	ldw	r4,12(r2)
 800bb50:	30000c26 	beq	r6,zero,800bb84 <__assert_func+0x54>
 800bb54:	00c200b4 	movhi	r3,2050
 800bb58:	18dc7b04 	addi	r3,r3,29164
 800bb5c:	3005883a 	mov	r2,r6
 800bb60:	014200b4 	movhi	r5,2050
 800bb64:	380d883a 	mov	r6,r7
 800bb68:	295c7f04 	addi	r5,r5,29180
 800bb6c:	480f883a 	mov	r7,r9
 800bb70:	da000015 	stw	r8,0(sp)
 800bb74:	d8c00115 	stw	r3,4(sp)
 800bb78:	d8800215 	stw	r2,8(sp)
 800bb7c:	800bca80 	call	800bca8 <fiprintf>
 800bb80:	8010c000 	call	8010c00 <abort>
 800bb84:	00c200b4 	movhi	r3,2050
 800bb88:	18dc7e04 	addi	r3,r3,29176
 800bb8c:	1805883a 	mov	r2,r3
 800bb90:	003ff306 	br	800bb60 <__alt_data_end+0xfc00bb60>

0800bb94 <__assert>:
 800bb94:	deffff04 	addi	sp,sp,-4
 800bb98:	300f883a 	mov	r7,r6
 800bb9c:	000d883a 	mov	r6,zero
 800bba0:	dfc00015 	stw	ra,0(sp)
 800bba4:	800bb300 	call	800bb30 <__assert_func>

0800bba8 <calloc>:
 800bba8:	00c200f4 	movhi	r3,2051
 800bbac:	18e3ec04 	addi	r3,r3,-28752
 800bbb0:	2005883a 	mov	r2,r4
 800bbb4:	19000017 	ldw	r4,0(r3)
 800bbb8:	280d883a 	mov	r6,r5
 800bbbc:	100b883a 	mov	r5,r2
 800bbc0:	800bbc41 	jmpi	800bbc4 <_calloc_r>

0800bbc4 <_calloc_r>:
 800bbc4:	298b383a 	mul	r5,r5,r6
 800bbc8:	defffe04 	addi	sp,sp,-8
 800bbcc:	dc000015 	stw	r16,0(sp)
 800bbd0:	dfc00115 	stw	ra,4(sp)
 800bbd4:	800bd580 	call	800bd58 <_malloc_r>
 800bbd8:	1021883a 	mov	r16,r2
 800bbdc:	10002826 	beq	r2,zero,800bc80 <_calloc_r+0xbc>
 800bbe0:	11bfff17 	ldw	r6,-4(r2)
 800bbe4:	00bfff04 	movi	r2,-4
 800bbe8:	00c00904 	movi	r3,36
 800bbec:	308c703a 	and	r6,r6,r2
 800bbf0:	308d883a 	add	r6,r6,r2
 800bbf4:	19801436 	bltu	r3,r6,800bc48 <_calloc_r+0x84>
 800bbf8:	008004c4 	movi	r2,19
 800bbfc:	11800936 	bltu	r2,r6,800bc24 <_calloc_r+0x60>
 800bc00:	8005883a 	mov	r2,r16
 800bc04:	10000015 	stw	zero,0(r2)
 800bc08:	10000115 	stw	zero,4(r2)
 800bc0c:	10000215 	stw	zero,8(r2)
 800bc10:	8005883a 	mov	r2,r16
 800bc14:	dfc00117 	ldw	ra,4(sp)
 800bc18:	dc000017 	ldw	r16,0(sp)
 800bc1c:	dec00204 	addi	sp,sp,8
 800bc20:	f800283a 	ret
 800bc24:	80000015 	stw	zero,0(r16)
 800bc28:	80000115 	stw	zero,4(r16)
 800bc2c:	008006c4 	movi	r2,27
 800bc30:	11800d2e 	bgeu	r2,r6,800bc68 <_calloc_r+0xa4>
 800bc34:	80000215 	stw	zero,8(r16)
 800bc38:	80000315 	stw	zero,12(r16)
 800bc3c:	30c00c26 	beq	r6,r3,800bc70 <_calloc_r+0xac>
 800bc40:	80800404 	addi	r2,r16,16
 800bc44:	003fef06 	br	800bc04 <__alt_data_end+0xfc00bc04>
 800bc48:	8009883a 	mov	r4,r16
 800bc4c:	000b883a 	mov	r5,zero
 800bc50:	800c6380 	call	800c638 <memset>
 800bc54:	8005883a 	mov	r2,r16
 800bc58:	dfc00117 	ldw	ra,4(sp)
 800bc5c:	dc000017 	ldw	r16,0(sp)
 800bc60:	dec00204 	addi	sp,sp,8
 800bc64:	f800283a 	ret
 800bc68:	80800204 	addi	r2,r16,8
 800bc6c:	003fe506 	br	800bc04 <__alt_data_end+0xfc00bc04>
 800bc70:	80000415 	stw	zero,16(r16)
 800bc74:	80800604 	addi	r2,r16,24
 800bc78:	80000515 	stw	zero,20(r16)
 800bc7c:	003fe106 	br	800bc04 <__alt_data_end+0xfc00bc04>
 800bc80:	0005883a 	mov	r2,zero
 800bc84:	003fe306 	br	800bc14 <__alt_data_end+0xfc00bc14>

0800bc88 <_fiprintf_r>:
 800bc88:	defffe04 	addi	sp,sp,-8
 800bc8c:	dfc00015 	stw	ra,0(sp)
 800bc90:	d9c00115 	stw	r7,4(sp)
 800bc94:	d9c00104 	addi	r7,sp,4
 800bc98:	800ea940 	call	800ea94 <_vfiprintf_r>
 800bc9c:	dfc00017 	ldw	ra,0(sp)
 800bca0:	dec00204 	addi	sp,sp,8
 800bca4:	f800283a 	ret

0800bca8 <fiprintf>:
 800bca8:	defffd04 	addi	sp,sp,-12
 800bcac:	2005883a 	mov	r2,r4
 800bcb0:	dfc00015 	stw	ra,0(sp)
 800bcb4:	d9800115 	stw	r6,4(sp)
 800bcb8:	d9c00215 	stw	r7,8(sp)
 800bcbc:	00c200f4 	movhi	r3,2051
 800bcc0:	18e3ec04 	addi	r3,r3,-28752
 800bcc4:	19000017 	ldw	r4,0(r3)
 800bcc8:	280d883a 	mov	r6,r5
 800bccc:	d9c00104 	addi	r7,sp,4
 800bcd0:	100b883a 	mov	r5,r2
 800bcd4:	800ea940 	call	800ea94 <_vfiprintf_r>
 800bcd8:	dfc00017 	ldw	ra,0(sp)
 800bcdc:	dec00304 	addi	sp,sp,12
 800bce0:	f800283a 	ret

0800bce4 <_fprintf_r>:
 800bce4:	defffe04 	addi	sp,sp,-8
 800bce8:	2809883a 	mov	r4,r5
 800bcec:	dfc00015 	stw	ra,0(sp)
 800bcf0:	d9c00115 	stw	r7,4(sp)
 800bcf4:	300b883a 	mov	r5,r6
 800bcf8:	d9800104 	addi	r6,sp,4
 800bcfc:	8010aac0 	call	8010aac <__vfprintf_internal>
 800bd00:	dfc00017 	ldw	ra,0(sp)
 800bd04:	dec00204 	addi	sp,sp,8
 800bd08:	f800283a 	ret

0800bd0c <fprintf>:
 800bd0c:	defffd04 	addi	sp,sp,-12
 800bd10:	dfc00015 	stw	ra,0(sp)
 800bd14:	d9800115 	stw	r6,4(sp)
 800bd18:	d9c00215 	stw	r7,8(sp)
 800bd1c:	d9800104 	addi	r6,sp,4
 800bd20:	8010aac0 	call	8010aac <__vfprintf_internal>
 800bd24:	dfc00017 	ldw	ra,0(sp)
 800bd28:	dec00304 	addi	sp,sp,12
 800bd2c:	f800283a 	ret

0800bd30 <malloc>:
 800bd30:	008200f4 	movhi	r2,2051
 800bd34:	10a3ec04 	addi	r2,r2,-28752
 800bd38:	200b883a 	mov	r5,r4
 800bd3c:	11000017 	ldw	r4,0(r2)
 800bd40:	800bd581 	jmpi	800bd58 <_malloc_r>

0800bd44 <free>:
 800bd44:	008200f4 	movhi	r2,2051
 800bd48:	10a3ec04 	addi	r2,r2,-28752
 800bd4c:	200b883a 	mov	r5,r4
 800bd50:	11000017 	ldw	r4,0(r2)
 800bd54:	8012c5c1 	jmpi	8012c5c <_free_r>

0800bd58 <_malloc_r>:
 800bd58:	defff504 	addi	sp,sp,-44
 800bd5c:	dc800315 	stw	r18,12(sp)
 800bd60:	dfc00a15 	stw	ra,40(sp)
 800bd64:	df000915 	stw	fp,36(sp)
 800bd68:	ddc00815 	stw	r23,32(sp)
 800bd6c:	dd800715 	stw	r22,28(sp)
 800bd70:	dd400615 	stw	r21,24(sp)
 800bd74:	dd000515 	stw	r20,20(sp)
 800bd78:	dcc00415 	stw	r19,16(sp)
 800bd7c:	dc400215 	stw	r17,8(sp)
 800bd80:	dc000115 	stw	r16,4(sp)
 800bd84:	288002c4 	addi	r2,r5,11
 800bd88:	00c00584 	movi	r3,22
 800bd8c:	2025883a 	mov	r18,r4
 800bd90:	18802a2e 	bgeu	r3,r2,800be3c <_malloc_r+0xe4>
 800bd94:	047ffe04 	movi	r17,-8
 800bd98:	1462703a 	and	r17,r2,r17
 800bd9c:	88009e16 	blt	r17,zero,800c018 <_malloc_r+0x2c0>
 800bda0:	89409d36 	bltu	r17,r5,800c018 <_malloc_r+0x2c0>
 800bda4:	8019b100 	call	8019b10 <__malloc_lock>
 800bda8:	00807dc4 	movi	r2,503
 800bdac:	14402736 	bltu	r2,r17,800be4c <_malloc_r+0xf4>
 800bdb0:	8806d0fa 	srli	r3,r17,3
 800bdb4:	04c200b4 	movhi	r19,2050
 800bdb8:	9cde2a04 	addi	r19,r19,30888
 800bdbc:	18c5883a 	add	r2,r3,r3
 800bdc0:	1085883a 	add	r2,r2,r2
 800bdc4:	1085883a 	add	r2,r2,r2
 800bdc8:	9885883a 	add	r2,r19,r2
 800bdcc:	14000317 	ldw	r16,12(r2)
 800bdd0:	80814a26 	beq	r16,r2,800c2fc <_malloc_r+0x5a4>
 800bdd4:	80c00117 	ldw	r3,4(r16)
 800bdd8:	81000317 	ldw	r4,12(r16)
 800bddc:	00bfff04 	movi	r2,-4
 800bde0:	1884703a 	and	r2,r3,r2
 800bde4:	81400217 	ldw	r5,8(r16)
 800bde8:	8085883a 	add	r2,r16,r2
 800bdec:	10c00117 	ldw	r3,4(r2)
 800bdf0:	29000315 	stw	r4,12(r5)
 800bdf4:	21400215 	stw	r5,8(r4)
 800bdf8:	18c00054 	ori	r3,r3,1
 800bdfc:	10c00115 	stw	r3,4(r2)
 800be00:	9009883a 	mov	r4,r18
 800be04:	8019b300 	call	8019b30 <__malloc_unlock>
 800be08:	80800204 	addi	r2,r16,8
 800be0c:	dfc00a17 	ldw	ra,40(sp)
 800be10:	df000917 	ldw	fp,36(sp)
 800be14:	ddc00817 	ldw	r23,32(sp)
 800be18:	dd800717 	ldw	r22,28(sp)
 800be1c:	dd400617 	ldw	r21,24(sp)
 800be20:	dd000517 	ldw	r20,20(sp)
 800be24:	dcc00417 	ldw	r19,16(sp)
 800be28:	dc800317 	ldw	r18,12(sp)
 800be2c:	dc400217 	ldw	r17,8(sp)
 800be30:	dc000117 	ldw	r16,4(sp)
 800be34:	dec00b04 	addi	sp,sp,44
 800be38:	f800283a 	ret
 800be3c:	04400404 	movi	r17,16
 800be40:	89407536 	bltu	r17,r5,800c018 <_malloc_r+0x2c0>
 800be44:	8019b100 	call	8019b10 <__malloc_lock>
 800be48:	003fd906 	br	800bdb0 <__alt_data_end+0xfc00bdb0>
 800be4c:	8806d27a 	srli	r3,r17,9
 800be50:	18007526 	beq	r3,zero,800c028 <_malloc_r+0x2d0>
 800be54:	00800104 	movi	r2,4
 800be58:	10c0ef36 	bltu	r2,r3,800c218 <_malloc_r+0x4c0>
 800be5c:	8806d1ba 	srli	r3,r17,6
 800be60:	19c00e04 	addi	r7,r3,56
 800be64:	39cb883a 	add	r5,r7,r7
 800be68:	04c200b4 	movhi	r19,2050
 800be6c:	294b883a 	add	r5,r5,r5
 800be70:	9cde2a04 	addi	r19,r19,30888
 800be74:	294b883a 	add	r5,r5,r5
 800be78:	994b883a 	add	r5,r19,r5
 800be7c:	2c000317 	ldw	r16,12(r5)
 800be80:	2c000e26 	beq	r5,r16,800bebc <_malloc_r+0x164>
 800be84:	80800117 	ldw	r2,4(r16)
 800be88:	01bfff04 	movi	r6,-4
 800be8c:	010003c4 	movi	r4,15
 800be90:	1184703a 	and	r2,r2,r6
 800be94:	1447c83a 	sub	r3,r2,r17
 800be98:	20c00716 	blt	r4,r3,800beb8 <_malloc_r+0x160>
 800be9c:	1800650e 	bge	r3,zero,800c034 <_malloc_r+0x2dc>
 800bea0:	84000317 	ldw	r16,12(r16)
 800bea4:	2c000526 	beq	r5,r16,800bebc <_malloc_r+0x164>
 800bea8:	80800117 	ldw	r2,4(r16)
 800beac:	1184703a 	and	r2,r2,r6
 800beb0:	1447c83a 	sub	r3,r2,r17
 800beb4:	20fff90e 	bge	r4,r3,800be9c <__alt_data_end+0xfc00be9c>
 800beb8:	39ffffc4 	addi	r7,r7,-1
 800bebc:	38c00044 	addi	r3,r7,1
 800bec0:	018200b4 	movhi	r6,2050
 800bec4:	9c000417 	ldw	r16,16(r19)
 800bec8:	319e2a04 	addi	r6,r6,30888
 800becc:	32400204 	addi	r9,r6,8
 800bed0:	82410326 	beq	r16,r9,800c2e0 <_malloc_r+0x588>
 800bed4:	81000117 	ldw	r4,4(r16)
 800bed8:	00bfff04 	movi	r2,-4
 800bedc:	208e703a 	and	r7,r4,r2
 800bee0:	3c45c83a 	sub	r2,r7,r17
 800bee4:	010003c4 	movi	r4,15
 800bee8:	2080ee16 	blt	r4,r2,800c2a4 <_malloc_r+0x54c>
 800beec:	32400515 	stw	r9,20(r6)
 800bef0:	32400415 	stw	r9,16(r6)
 800bef4:	1000510e 	bge	r2,zero,800c03c <_malloc_r+0x2e4>
 800bef8:	00807fc4 	movi	r2,511
 800befc:	11c0ce36 	bltu	r2,r7,800c238 <_malloc_r+0x4e0>
 800bf00:	3808d0fa 	srli	r4,r7,3
 800bf04:	01c00044 	movi	r7,1
 800bf08:	30800117 	ldw	r2,4(r6)
 800bf0c:	210b883a 	add	r5,r4,r4
 800bf10:	294b883a 	add	r5,r5,r5
 800bf14:	2009d0ba 	srai	r4,r4,2
 800bf18:	294b883a 	add	r5,r5,r5
 800bf1c:	298b883a 	add	r5,r5,r6
 800bf20:	2a000217 	ldw	r8,8(r5)
 800bf24:	3908983a 	sll	r4,r7,r4
 800bf28:	81400315 	stw	r5,12(r16)
 800bf2c:	82000215 	stw	r8,8(r16)
 800bf30:	2088b03a 	or	r4,r4,r2
 800bf34:	2c000215 	stw	r16,8(r5)
 800bf38:	31000115 	stw	r4,4(r6)
 800bf3c:	44000315 	stw	r16,12(r8)
 800bf40:	1805d0ba 	srai	r2,r3,2
 800bf44:	01400044 	movi	r5,1
 800bf48:	288a983a 	sll	r5,r5,r2
 800bf4c:	21404336 	bltu	r4,r5,800c05c <_malloc_r+0x304>
 800bf50:	2144703a 	and	r2,r4,r5
 800bf54:	10000a1e 	bne	r2,zero,800bf80 <_malloc_r+0x228>
 800bf58:	00bfff04 	movi	r2,-4
 800bf5c:	294b883a 	add	r5,r5,r5
 800bf60:	1886703a 	and	r3,r3,r2
 800bf64:	2144703a 	and	r2,r4,r5
 800bf68:	18c00104 	addi	r3,r3,4
 800bf6c:	1000041e 	bne	r2,zero,800bf80 <_malloc_r+0x228>
 800bf70:	294b883a 	add	r5,r5,r5
 800bf74:	2144703a 	and	r2,r4,r5
 800bf78:	18c00104 	addi	r3,r3,4
 800bf7c:	103ffc26 	beq	r2,zero,800bf70 <__alt_data_end+0xfc00bf70>
 800bf80:	023fff04 	movi	r8,-4
 800bf84:	01c003c4 	movi	r7,15
 800bf88:	18c5883a 	add	r2,r3,r3
 800bf8c:	1085883a 	add	r2,r2,r2
 800bf90:	1085883a 	add	r2,r2,r2
 800bf94:	9895883a 	add	r10,r19,r2
 800bf98:	52c00304 	addi	r11,r10,12
 800bf9c:	1819883a 	mov	r12,r3
 800bfa0:	5c000017 	ldw	r16,0(r11)
 800bfa4:	59bffd04 	addi	r6,r11,-12
 800bfa8:	8180041e 	bne	r16,r6,800bfbc <_malloc_r+0x264>
 800bfac:	0000ce06 	br	800c2e8 <_malloc_r+0x590>
 800bfb0:	2000d70e 	bge	r4,zero,800c310 <_malloc_r+0x5b8>
 800bfb4:	84000317 	ldw	r16,12(r16)
 800bfb8:	8180cb26 	beq	r16,r6,800c2e8 <_malloc_r+0x590>
 800bfbc:	80800117 	ldw	r2,4(r16)
 800bfc0:	1204703a 	and	r2,r2,r8
 800bfc4:	1449c83a 	sub	r4,r2,r17
 800bfc8:	393ff90e 	bge	r7,r4,800bfb0 <__alt_data_end+0xfc00bfb0>
 800bfcc:	80800317 	ldw	r2,12(r16)
 800bfd0:	80c00217 	ldw	r3,8(r16)
 800bfd4:	89400054 	ori	r5,r17,1
 800bfd8:	81400115 	stw	r5,4(r16)
 800bfdc:	18800315 	stw	r2,12(r3)
 800bfe0:	10c00215 	stw	r3,8(r2)
 800bfe4:	8463883a 	add	r17,r16,r17
 800bfe8:	9c400515 	stw	r17,20(r19)
 800bfec:	9c400415 	stw	r17,16(r19)
 800bff0:	20800054 	ori	r2,r4,1
 800bff4:	88800115 	stw	r2,4(r17)
 800bff8:	8a400315 	stw	r9,12(r17)
 800bffc:	8a400215 	stw	r9,8(r17)
 800c000:	8923883a 	add	r17,r17,r4
 800c004:	89000015 	stw	r4,0(r17)
 800c008:	9009883a 	mov	r4,r18
 800c00c:	8019b300 	call	8019b30 <__malloc_unlock>
 800c010:	80800204 	addi	r2,r16,8
 800c014:	003f7d06 	br	800be0c <__alt_data_end+0xfc00be0c>
 800c018:	00800304 	movi	r2,12
 800c01c:	90800015 	stw	r2,0(r18)
 800c020:	0005883a 	mov	r2,zero
 800c024:	003f7906 	br	800be0c <__alt_data_end+0xfc00be0c>
 800c028:	01401f84 	movi	r5,126
 800c02c:	01c00fc4 	movi	r7,63
 800c030:	003f8d06 	br	800be68 <__alt_data_end+0xfc00be68>
 800c034:	81000317 	ldw	r4,12(r16)
 800c038:	003f6a06 	br	800bde4 <__alt_data_end+0xfc00bde4>
 800c03c:	81c5883a 	add	r2,r16,r7
 800c040:	10c00117 	ldw	r3,4(r2)
 800c044:	9009883a 	mov	r4,r18
 800c048:	18c00054 	ori	r3,r3,1
 800c04c:	10c00115 	stw	r3,4(r2)
 800c050:	8019b300 	call	8019b30 <__malloc_unlock>
 800c054:	80800204 	addi	r2,r16,8
 800c058:	003f6c06 	br	800be0c <__alt_data_end+0xfc00be0c>
 800c05c:	9c000217 	ldw	r16,8(r19)
 800c060:	00bfff04 	movi	r2,-4
 800c064:	85800117 	ldw	r22,4(r16)
 800c068:	b0ac703a 	and	r22,r22,r2
 800c06c:	b4400336 	bltu	r22,r17,800c07c <_malloc_r+0x324>
 800c070:	b445c83a 	sub	r2,r22,r17
 800c074:	00c003c4 	movi	r3,15
 800c078:	18805d16 	blt	r3,r2,800c1f0 <_malloc_r+0x498>
 800c07c:	05c200f4 	movhi	r23,2051
 800c080:	008200f4 	movhi	r2,2051
 800c084:	bde3ed04 	addi	r23,r23,-28748
 800c088:	10aaf904 	addi	r2,r2,-21532
 800c08c:	15400017 	ldw	r21,0(r2)
 800c090:	b9000017 	ldw	r4,0(r23)
 800c094:	00ffffc4 	movi	r3,-1
 800c098:	858d883a 	add	r6,r16,r22
 800c09c:	8d6b883a 	add	r21,r17,r21
 800c0a0:	20c0e426 	beq	r4,r3,800c434 <_malloc_r+0x6dc>
 800c0a4:	ad4403c4 	addi	r21,r21,4111
 800c0a8:	00fc0004 	movi	r3,-4096
 800c0ac:	a8ea703a 	and	r21,r21,r3
 800c0b0:	9009883a 	mov	r4,r18
 800c0b4:	a80b883a 	mov	r5,r21
 800c0b8:	d9800015 	stw	r6,0(sp)
 800c0bc:	800c8b00 	call	800c8b0 <_sbrk_r>
 800c0c0:	00ffffc4 	movi	r3,-1
 800c0c4:	1029883a 	mov	r20,r2
 800c0c8:	d9800017 	ldw	r6,0(sp)
 800c0cc:	10c0a426 	beq	r2,r3,800c360 <_malloc_r+0x608>
 800c0d0:	1180a236 	bltu	r2,r6,800c35c <_malloc_r+0x604>
 800c0d4:	070200f4 	movhi	fp,2051
 800c0d8:	e72b0404 	addi	fp,fp,-21488
 800c0dc:	e0c00017 	ldw	r3,0(fp)
 800c0e0:	a8c7883a 	add	r3,r21,r3
 800c0e4:	e0c00015 	stw	r3,0(fp)
 800c0e8:	3500da26 	beq	r6,r20,800c454 <_malloc_r+0x6fc>
 800c0ec:	b9000017 	ldw	r4,0(r23)
 800c0f0:	00bfffc4 	movi	r2,-1
 800c0f4:	2080e426 	beq	r4,r2,800c488 <_malloc_r+0x730>
 800c0f8:	a185c83a 	sub	r2,r20,r6
 800c0fc:	1885883a 	add	r2,r3,r2
 800c100:	e0800015 	stw	r2,0(fp)
 800c104:	a0c001cc 	andi	r3,r20,7
 800c108:	1800b526 	beq	r3,zero,800c3e0 <_malloc_r+0x688>
 800c10c:	a0e9c83a 	sub	r20,r20,r3
 800c110:	00840204 	movi	r2,4104
 800c114:	a5000204 	addi	r20,r20,8
 800c118:	10c7c83a 	sub	r3,r2,r3
 800c11c:	a545883a 	add	r2,r20,r21
 800c120:	1083ffcc 	andi	r2,r2,4095
 800c124:	18abc83a 	sub	r21,r3,r2
 800c128:	9009883a 	mov	r4,r18
 800c12c:	a80b883a 	mov	r5,r21
 800c130:	800c8b00 	call	800c8b0 <_sbrk_r>
 800c134:	00ffffc4 	movi	r3,-1
 800c138:	10c0d026 	beq	r2,r3,800c47c <_malloc_r+0x724>
 800c13c:	1507c83a 	sub	r3,r2,r20
 800c140:	a8c7883a 	add	r3,r21,r3
 800c144:	18c00054 	ori	r3,r3,1
 800c148:	e0800017 	ldw	r2,0(fp)
 800c14c:	9d000215 	stw	r20,8(r19)
 800c150:	a0c00115 	stw	r3,4(r20)
 800c154:	a887883a 	add	r3,r21,r2
 800c158:	e0c00015 	stw	r3,0(fp)
 800c15c:	84c00e26 	beq	r16,r19,800c198 <_malloc_r+0x440>
 800c160:	018003c4 	movi	r6,15
 800c164:	3580a02e 	bgeu	r6,r22,800c3e8 <_malloc_r+0x690>
 800c168:	81400117 	ldw	r5,4(r16)
 800c16c:	013ffe04 	movi	r4,-8
 800c170:	b0bffd04 	addi	r2,r22,-12
 800c174:	1104703a 	and	r2,r2,r4
 800c178:	2900004c 	andi	r4,r5,1
 800c17c:	1108b03a 	or	r4,r2,r4
 800c180:	81000115 	stw	r4,4(r16)
 800c184:	01400144 	movi	r5,5
 800c188:	8089883a 	add	r4,r16,r2
 800c18c:	21400115 	stw	r5,4(r4)
 800c190:	21400215 	stw	r5,8(r4)
 800c194:	3080c036 	bltu	r6,r2,800c498 <_malloc_r+0x740>
 800c198:	008200f4 	movhi	r2,2051
 800c19c:	10aaf804 	addi	r2,r2,-21536
 800c1a0:	11000017 	ldw	r4,0(r2)
 800c1a4:	20c0012e 	bgeu	r4,r3,800c1ac <_malloc_r+0x454>
 800c1a8:	10c00015 	stw	r3,0(r2)
 800c1ac:	008200f4 	movhi	r2,2051
 800c1b0:	10aaf704 	addi	r2,r2,-21540
 800c1b4:	11000017 	ldw	r4,0(r2)
 800c1b8:	9c000217 	ldw	r16,8(r19)
 800c1bc:	20c0012e 	bgeu	r4,r3,800c1c4 <_malloc_r+0x46c>
 800c1c0:	10c00015 	stw	r3,0(r2)
 800c1c4:	80c00117 	ldw	r3,4(r16)
 800c1c8:	00bfff04 	movi	r2,-4
 800c1cc:	1886703a 	and	r3,r3,r2
 800c1d0:	1c45c83a 	sub	r2,r3,r17
 800c1d4:	1c400236 	bltu	r3,r17,800c1e0 <_malloc_r+0x488>
 800c1d8:	00c003c4 	movi	r3,15
 800c1dc:	18800416 	blt	r3,r2,800c1f0 <_malloc_r+0x498>
 800c1e0:	9009883a 	mov	r4,r18
 800c1e4:	8019b300 	call	8019b30 <__malloc_unlock>
 800c1e8:	0005883a 	mov	r2,zero
 800c1ec:	003f0706 	br	800be0c <__alt_data_end+0xfc00be0c>
 800c1f0:	88c00054 	ori	r3,r17,1
 800c1f4:	80c00115 	stw	r3,4(r16)
 800c1f8:	8463883a 	add	r17,r16,r17
 800c1fc:	10800054 	ori	r2,r2,1
 800c200:	9c400215 	stw	r17,8(r19)
 800c204:	88800115 	stw	r2,4(r17)
 800c208:	9009883a 	mov	r4,r18
 800c20c:	8019b300 	call	8019b30 <__malloc_unlock>
 800c210:	80800204 	addi	r2,r16,8
 800c214:	003efd06 	br	800be0c <__alt_data_end+0xfc00be0c>
 800c218:	00800504 	movi	r2,20
 800c21c:	10c0482e 	bgeu	r2,r3,800c340 <_malloc_r+0x5e8>
 800c220:	00801504 	movi	r2,84
 800c224:	10c06836 	bltu	r2,r3,800c3c8 <_malloc_r+0x670>
 800c228:	8806d33a 	srli	r3,r17,12
 800c22c:	19c01b84 	addi	r7,r3,110
 800c230:	39cb883a 	add	r5,r7,r7
 800c234:	003f0c06 	br	800be68 <__alt_data_end+0xfc00be68>
 800c238:	3804d27a 	srli	r2,r7,9
 800c23c:	01000104 	movi	r4,4
 800c240:	2080422e 	bgeu	r4,r2,800c34c <_malloc_r+0x5f4>
 800c244:	01000504 	movi	r4,20
 800c248:	20807c36 	bltu	r4,r2,800c43c <_malloc_r+0x6e4>
 800c24c:	110016c4 	addi	r4,r2,91
 800c250:	210b883a 	add	r5,r4,r4
 800c254:	294b883a 	add	r5,r5,r5
 800c258:	294b883a 	add	r5,r5,r5
 800c25c:	994b883a 	add	r5,r19,r5
 800c260:	28800217 	ldw	r2,8(r5)
 800c264:	020200b4 	movhi	r8,2050
 800c268:	421e2a04 	addi	r8,r8,30888
 800c26c:	11406326 	beq	r2,r5,800c3fc <_malloc_r+0x6a4>
 800c270:	01bfff04 	movi	r6,-4
 800c274:	11000117 	ldw	r4,4(r2)
 800c278:	2188703a 	and	r4,r4,r6
 800c27c:	3900022e 	bgeu	r7,r4,800c288 <_malloc_r+0x530>
 800c280:	10800217 	ldw	r2,8(r2)
 800c284:	28bffb1e 	bne	r5,r2,800c274 <__alt_data_end+0xfc00c274>
 800c288:	11800317 	ldw	r6,12(r2)
 800c28c:	99000117 	ldw	r4,4(r19)
 800c290:	81800315 	stw	r6,12(r16)
 800c294:	80800215 	stw	r2,8(r16)
 800c298:	34000215 	stw	r16,8(r6)
 800c29c:	14000315 	stw	r16,12(r2)
 800c2a0:	003f2706 	br	800bf40 <__alt_data_end+0xfc00bf40>
 800c2a4:	88c00054 	ori	r3,r17,1
 800c2a8:	80c00115 	stw	r3,4(r16)
 800c2ac:	8463883a 	add	r17,r16,r17
 800c2b0:	34400515 	stw	r17,20(r6)
 800c2b4:	34400415 	stw	r17,16(r6)
 800c2b8:	10c00054 	ori	r3,r2,1
 800c2bc:	8a400315 	stw	r9,12(r17)
 800c2c0:	8a400215 	stw	r9,8(r17)
 800c2c4:	88c00115 	stw	r3,4(r17)
 800c2c8:	88a3883a 	add	r17,r17,r2
 800c2cc:	88800015 	stw	r2,0(r17)
 800c2d0:	9009883a 	mov	r4,r18
 800c2d4:	8019b300 	call	8019b30 <__malloc_unlock>
 800c2d8:	80800204 	addi	r2,r16,8
 800c2dc:	003ecb06 	br	800be0c <__alt_data_end+0xfc00be0c>
 800c2e0:	31000117 	ldw	r4,4(r6)
 800c2e4:	003f1606 	br	800bf40 <__alt_data_end+0xfc00bf40>
 800c2e8:	63000044 	addi	r12,r12,1
 800c2ec:	608000cc 	andi	r2,r12,3
 800c2f0:	5ac00204 	addi	r11,r11,8
 800c2f4:	103f2a1e 	bne	r2,zero,800bfa0 <__alt_data_end+0xfc00bfa0>
 800c2f8:	00002106 	br	800c380 <_malloc_r+0x628>
 800c2fc:	80800204 	addi	r2,r16,8
 800c300:	84000517 	ldw	r16,20(r16)
 800c304:	143eb31e 	bne	r2,r16,800bdd4 <__alt_data_end+0xfc00bdd4>
 800c308:	18c00084 	addi	r3,r3,2
 800c30c:	003eec06 	br	800bec0 <__alt_data_end+0xfc00bec0>
 800c310:	8085883a 	add	r2,r16,r2
 800c314:	10c00117 	ldw	r3,4(r2)
 800c318:	81000317 	ldw	r4,12(r16)
 800c31c:	81400217 	ldw	r5,8(r16)
 800c320:	18c00054 	ori	r3,r3,1
 800c324:	10c00115 	stw	r3,4(r2)
 800c328:	29000315 	stw	r4,12(r5)
 800c32c:	21400215 	stw	r5,8(r4)
 800c330:	9009883a 	mov	r4,r18
 800c334:	8019b300 	call	8019b30 <__malloc_unlock>
 800c338:	80800204 	addi	r2,r16,8
 800c33c:	003eb306 	br	800be0c <__alt_data_end+0xfc00be0c>
 800c340:	19c016c4 	addi	r7,r3,91
 800c344:	39cb883a 	add	r5,r7,r7
 800c348:	003ec706 	br	800be68 <__alt_data_end+0xfc00be68>
 800c34c:	3804d1ba 	srli	r2,r7,6
 800c350:	11000e04 	addi	r4,r2,56
 800c354:	210b883a 	add	r5,r4,r4
 800c358:	003fbe06 	br	800c254 <__alt_data_end+0xfc00c254>
 800c35c:	84ff5d26 	beq	r16,r19,800c0d4 <__alt_data_end+0xfc00c0d4>
 800c360:	9c000217 	ldw	r16,8(r19)
 800c364:	00bfff04 	movi	r2,-4
 800c368:	80c00117 	ldw	r3,4(r16)
 800c36c:	1886703a 	and	r3,r3,r2
 800c370:	003f9706 	br	800c1d0 <__alt_data_end+0xfc00c1d0>
 800c374:	52800017 	ldw	r10,0(r10)
 800c378:	18ffffc4 	addi	r3,r3,-1
 800c37c:	50805c1e 	bne	r10,r2,800c4f0 <_malloc_r+0x798>
 800c380:	190000cc 	andi	r4,r3,3
 800c384:	50bffe04 	addi	r2,r10,-8
 800c388:	203ffa1e 	bne	r4,zero,800c374 <__alt_data_end+0xfc00c374>
 800c38c:	98800117 	ldw	r2,4(r19)
 800c390:	0146303a 	nor	r3,zero,r5
 800c394:	1884703a 	and	r2,r3,r2
 800c398:	98800115 	stw	r2,4(r19)
 800c39c:	294b883a 	add	r5,r5,r5
 800c3a0:	117f2e36 	bltu	r2,r5,800c05c <__alt_data_end+0xfc00c05c>
 800c3a4:	283f2d26 	beq	r5,zero,800c05c <__alt_data_end+0xfc00c05c>
 800c3a8:	1146703a 	and	r3,r2,r5
 800c3ac:	1800521e 	bne	r3,zero,800c4f8 <_malloc_r+0x7a0>
 800c3b0:	6007883a 	mov	r3,r12
 800c3b4:	294b883a 	add	r5,r5,r5
 800c3b8:	1148703a 	and	r4,r2,r5
 800c3bc:	18c00104 	addi	r3,r3,4
 800c3c0:	203ffc26 	beq	r4,zero,800c3b4 <__alt_data_end+0xfc00c3b4>
 800c3c4:	003ef006 	br	800bf88 <__alt_data_end+0xfc00bf88>
 800c3c8:	00805504 	movi	r2,340
 800c3cc:	10c01336 	bltu	r2,r3,800c41c <_malloc_r+0x6c4>
 800c3d0:	8806d3fa 	srli	r3,r17,15
 800c3d4:	19c01dc4 	addi	r7,r3,119
 800c3d8:	39cb883a 	add	r5,r7,r7
 800c3dc:	003ea206 	br	800be68 <__alt_data_end+0xfc00be68>
 800c3e0:	00c40004 	movi	r3,4096
 800c3e4:	003f4d06 	br	800c11c <__alt_data_end+0xfc00c11c>
 800c3e8:	00800044 	movi	r2,1
 800c3ec:	a0800115 	stw	r2,4(r20)
 800c3f0:	a021883a 	mov	r16,r20
 800c3f4:	0007883a 	mov	r3,zero
 800c3f8:	003f7506 	br	800c1d0 <__alt_data_end+0xfc00c1d0>
 800c3fc:	200bd0ba 	srai	r5,r4,2
 800c400:	01800044 	movi	r6,1
 800c404:	41000117 	ldw	r4,4(r8)
 800c408:	314a983a 	sll	r5,r6,r5
 800c40c:	100d883a 	mov	r6,r2
 800c410:	2908b03a 	or	r4,r5,r4
 800c414:	41000115 	stw	r4,4(r8)
 800c418:	003f9d06 	br	800c290 <__alt_data_end+0xfc00c290>
 800c41c:	00815504 	movi	r2,1364
 800c420:	10c01336 	bltu	r2,r3,800c470 <_malloc_r+0x718>
 800c424:	8806d4ba 	srli	r3,r17,18
 800c428:	19c01f04 	addi	r7,r3,124
 800c42c:	39cb883a 	add	r5,r7,r7
 800c430:	003e8d06 	br	800be68 <__alt_data_end+0xfc00be68>
 800c434:	ad400404 	addi	r21,r21,16
 800c438:	003f1d06 	br	800c0b0 <__alt_data_end+0xfc00c0b0>
 800c43c:	01001504 	movi	r4,84
 800c440:	20801c36 	bltu	r4,r2,800c4b4 <_malloc_r+0x75c>
 800c444:	3804d33a 	srli	r2,r7,12
 800c448:	11001b84 	addi	r4,r2,110
 800c44c:	210b883a 	add	r5,r4,r4
 800c450:	003f8006 	br	800c254 <__alt_data_end+0xfc00c254>
 800c454:	3083ffcc 	andi	r2,r6,4095
 800c458:	103f241e 	bne	r2,zero,800c0ec <__alt_data_end+0xfc00c0ec>
 800c45c:	99000217 	ldw	r4,8(r19)
 800c460:	ad85883a 	add	r2,r21,r22
 800c464:	10800054 	ori	r2,r2,1
 800c468:	20800115 	stw	r2,4(r4)
 800c46c:	003f4a06 	br	800c198 <__alt_data_end+0xfc00c198>
 800c470:	01403f04 	movi	r5,252
 800c474:	01c01f84 	movi	r7,126
 800c478:	003e7b06 	br	800be68 <__alt_data_end+0xfc00be68>
 800c47c:	00c00044 	movi	r3,1
 800c480:	002b883a 	mov	r21,zero
 800c484:	003f3006 	br	800c148 <__alt_data_end+0xfc00c148>
 800c488:	008200f4 	movhi	r2,2051
 800c48c:	10a3ed04 	addi	r2,r2,-28748
 800c490:	15000015 	stw	r20,0(r2)
 800c494:	003f1b06 	br	800c104 <__alt_data_end+0xfc00c104>
 800c498:	9009883a 	mov	r4,r18
 800c49c:	81400204 	addi	r5,r16,8
 800c4a0:	8012c5c0 	call	8012c5c <_free_r>
 800c4a4:	008200f4 	movhi	r2,2051
 800c4a8:	10ab0404 	addi	r2,r2,-21488
 800c4ac:	10c00017 	ldw	r3,0(r2)
 800c4b0:	003f3906 	br	800c198 <__alt_data_end+0xfc00c198>
 800c4b4:	01005504 	movi	r4,340
 800c4b8:	20800436 	bltu	r4,r2,800c4cc <_malloc_r+0x774>
 800c4bc:	3804d3fa 	srli	r2,r7,15
 800c4c0:	11001dc4 	addi	r4,r2,119
 800c4c4:	210b883a 	add	r5,r4,r4
 800c4c8:	003f6206 	br	800c254 <__alt_data_end+0xfc00c254>
 800c4cc:	01015504 	movi	r4,1364
 800c4d0:	20800436 	bltu	r4,r2,800c4e4 <_malloc_r+0x78c>
 800c4d4:	3804d4ba 	srli	r2,r7,18
 800c4d8:	11001f04 	addi	r4,r2,124
 800c4dc:	210b883a 	add	r5,r4,r4
 800c4e0:	003f5c06 	br	800c254 <__alt_data_end+0xfc00c254>
 800c4e4:	01403f04 	movi	r5,252
 800c4e8:	01001f84 	movi	r4,126
 800c4ec:	003f5906 	br	800c254 <__alt_data_end+0xfc00c254>
 800c4f0:	98800117 	ldw	r2,4(r19)
 800c4f4:	003fa906 	br	800c39c <__alt_data_end+0xfc00c39c>
 800c4f8:	6007883a 	mov	r3,r12
 800c4fc:	003ea206 	br	800bf88 <__alt_data_end+0xfc00bf88>

0800c500 <memcpy>:
 800c500:	deffff04 	addi	sp,sp,-4
 800c504:	dc000015 	stw	r16,0(sp)
 800c508:	00c003c4 	movi	r3,15
 800c50c:	2005883a 	mov	r2,r4
 800c510:	1980432e 	bgeu	r3,r6,800c620 <memcpy+0x120>
 800c514:	2146b03a 	or	r3,r4,r5
 800c518:	18c000cc 	andi	r3,r3,3
 800c51c:	1800421e 	bne	r3,zero,800c628 <memcpy+0x128>
 800c520:	343ffc04 	addi	r16,r6,-16
 800c524:	8020d13a 	srli	r16,r16,4
 800c528:	28c00104 	addi	r3,r5,4
 800c52c:	23400104 	addi	r13,r4,4
 800c530:	801e913a 	slli	r15,r16,4
 800c534:	2b000204 	addi	r12,r5,8
 800c538:	22c00204 	addi	r11,r4,8
 800c53c:	7bc00504 	addi	r15,r15,20
 800c540:	2a800304 	addi	r10,r5,12
 800c544:	22400304 	addi	r9,r4,12
 800c548:	2bdf883a 	add	r15,r5,r15
 800c54c:	2811883a 	mov	r8,r5
 800c550:	200f883a 	mov	r7,r4
 800c554:	41000017 	ldw	r4,0(r8)
 800c558:	39c00404 	addi	r7,r7,16
 800c55c:	18c00404 	addi	r3,r3,16
 800c560:	393ffc15 	stw	r4,-16(r7)
 800c564:	1bbffc17 	ldw	r14,-16(r3)
 800c568:	6b400404 	addi	r13,r13,16
 800c56c:	5ac00404 	addi	r11,r11,16
 800c570:	6bbffc15 	stw	r14,-16(r13)
 800c574:	63800017 	ldw	r14,0(r12)
 800c578:	4a400404 	addi	r9,r9,16
 800c57c:	42000404 	addi	r8,r8,16
 800c580:	5bbffc15 	stw	r14,-16(r11)
 800c584:	53800017 	ldw	r14,0(r10)
 800c588:	63000404 	addi	r12,r12,16
 800c58c:	52800404 	addi	r10,r10,16
 800c590:	4bbffc15 	stw	r14,-16(r9)
 800c594:	1bffef1e 	bne	r3,r15,800c554 <__alt_data_end+0xfc00c554>
 800c598:	81c00044 	addi	r7,r16,1
 800c59c:	380e913a 	slli	r7,r7,4
 800c5a0:	310003cc 	andi	r4,r6,15
 800c5a4:	02c000c4 	movi	r11,3
 800c5a8:	11c7883a 	add	r3,r2,r7
 800c5ac:	29cb883a 	add	r5,r5,r7
 800c5b0:	59001f2e 	bgeu	r11,r4,800c630 <memcpy+0x130>
 800c5b4:	1813883a 	mov	r9,r3
 800c5b8:	2811883a 	mov	r8,r5
 800c5bc:	200f883a 	mov	r7,r4
 800c5c0:	42800017 	ldw	r10,0(r8)
 800c5c4:	4a400104 	addi	r9,r9,4
 800c5c8:	39ffff04 	addi	r7,r7,-4
 800c5cc:	4abfff15 	stw	r10,-4(r9)
 800c5d0:	42000104 	addi	r8,r8,4
 800c5d4:	59fffa36 	bltu	r11,r7,800c5c0 <__alt_data_end+0xfc00c5c0>
 800c5d8:	213fff04 	addi	r4,r4,-4
 800c5dc:	2008d0ba 	srli	r4,r4,2
 800c5e0:	318000cc 	andi	r6,r6,3
 800c5e4:	21000044 	addi	r4,r4,1
 800c5e8:	2109883a 	add	r4,r4,r4
 800c5ec:	2109883a 	add	r4,r4,r4
 800c5f0:	1907883a 	add	r3,r3,r4
 800c5f4:	290b883a 	add	r5,r5,r4
 800c5f8:	30000626 	beq	r6,zero,800c614 <memcpy+0x114>
 800c5fc:	198d883a 	add	r6,r3,r6
 800c600:	29c00003 	ldbu	r7,0(r5)
 800c604:	18c00044 	addi	r3,r3,1
 800c608:	29400044 	addi	r5,r5,1
 800c60c:	19ffffc5 	stb	r7,-1(r3)
 800c610:	19bffb1e 	bne	r3,r6,800c600 <__alt_data_end+0xfc00c600>
 800c614:	dc000017 	ldw	r16,0(sp)
 800c618:	dec00104 	addi	sp,sp,4
 800c61c:	f800283a 	ret
 800c620:	2007883a 	mov	r3,r4
 800c624:	003ff406 	br	800c5f8 <__alt_data_end+0xfc00c5f8>
 800c628:	2007883a 	mov	r3,r4
 800c62c:	003ff306 	br	800c5fc <__alt_data_end+0xfc00c5fc>
 800c630:	200d883a 	mov	r6,r4
 800c634:	003ff006 	br	800c5f8 <__alt_data_end+0xfc00c5f8>

0800c638 <memset>:
 800c638:	20c000cc 	andi	r3,r4,3
 800c63c:	2005883a 	mov	r2,r4
 800c640:	18004326 	beq	r3,zero,800c750 <memset+0x118>
 800c644:	31ffffc4 	addi	r7,r6,-1
 800c648:	30004026 	beq	r6,zero,800c74c <memset+0x114>
 800c64c:	2813883a 	mov	r9,r5
 800c650:	200d883a 	mov	r6,r4
 800c654:	2007883a 	mov	r3,r4
 800c658:	00000406 	br	800c66c <memset+0x34>
 800c65c:	3a3fffc4 	addi	r8,r7,-1
 800c660:	31800044 	addi	r6,r6,1
 800c664:	38003926 	beq	r7,zero,800c74c <memset+0x114>
 800c668:	400f883a 	mov	r7,r8
 800c66c:	18c00044 	addi	r3,r3,1
 800c670:	32400005 	stb	r9,0(r6)
 800c674:	1a0000cc 	andi	r8,r3,3
 800c678:	403ff81e 	bne	r8,zero,800c65c <__alt_data_end+0xfc00c65c>
 800c67c:	010000c4 	movi	r4,3
 800c680:	21c02d2e 	bgeu	r4,r7,800c738 <memset+0x100>
 800c684:	29803fcc 	andi	r6,r5,255
 800c688:	3008923a 	slli	r4,r6,8
 800c68c:	218cb03a 	or	r6,r4,r6
 800c690:	3008943a 	slli	r4,r6,16
 800c694:	218cb03a 	or	r6,r4,r6
 800c698:	010003c4 	movi	r4,15
 800c69c:	21c0182e 	bgeu	r4,r7,800c700 <memset+0xc8>
 800c6a0:	3b3ffc04 	addi	r12,r7,-16
 800c6a4:	6018d13a 	srli	r12,r12,4
 800c6a8:	1a000104 	addi	r8,r3,4
 800c6ac:	1ac00204 	addi	r11,r3,8
 800c6b0:	6008913a 	slli	r4,r12,4
 800c6b4:	1a800304 	addi	r10,r3,12
 800c6b8:	1813883a 	mov	r9,r3
 800c6bc:	21000504 	addi	r4,r4,20
 800c6c0:	1909883a 	add	r4,r3,r4
 800c6c4:	49800015 	stw	r6,0(r9)
 800c6c8:	41800015 	stw	r6,0(r8)
 800c6cc:	59800015 	stw	r6,0(r11)
 800c6d0:	51800015 	stw	r6,0(r10)
 800c6d4:	42000404 	addi	r8,r8,16
 800c6d8:	4a400404 	addi	r9,r9,16
 800c6dc:	5ac00404 	addi	r11,r11,16
 800c6e0:	52800404 	addi	r10,r10,16
 800c6e4:	413ff71e 	bne	r8,r4,800c6c4 <__alt_data_end+0xfc00c6c4>
 800c6e8:	63000044 	addi	r12,r12,1
 800c6ec:	6018913a 	slli	r12,r12,4
 800c6f0:	39c003cc 	andi	r7,r7,15
 800c6f4:	010000c4 	movi	r4,3
 800c6f8:	1b07883a 	add	r3,r3,r12
 800c6fc:	21c00e2e 	bgeu	r4,r7,800c738 <memset+0x100>
 800c700:	1813883a 	mov	r9,r3
 800c704:	3811883a 	mov	r8,r7
 800c708:	010000c4 	movi	r4,3
 800c70c:	49800015 	stw	r6,0(r9)
 800c710:	423fff04 	addi	r8,r8,-4
 800c714:	4a400104 	addi	r9,r9,4
 800c718:	223ffc36 	bltu	r4,r8,800c70c <__alt_data_end+0xfc00c70c>
 800c71c:	393fff04 	addi	r4,r7,-4
 800c720:	2008d0ba 	srli	r4,r4,2
 800c724:	39c000cc 	andi	r7,r7,3
 800c728:	21000044 	addi	r4,r4,1
 800c72c:	2109883a 	add	r4,r4,r4
 800c730:	2109883a 	add	r4,r4,r4
 800c734:	1907883a 	add	r3,r3,r4
 800c738:	38000426 	beq	r7,zero,800c74c <memset+0x114>
 800c73c:	19cf883a 	add	r7,r3,r7
 800c740:	19400005 	stb	r5,0(r3)
 800c744:	18c00044 	addi	r3,r3,1
 800c748:	19fffd1e 	bne	r3,r7,800c740 <__alt_data_end+0xfc00c740>
 800c74c:	f800283a 	ret
 800c750:	2007883a 	mov	r3,r4
 800c754:	300f883a 	mov	r7,r6
 800c758:	003fc806 	br	800c67c <__alt_data_end+0xfc00c67c>

0800c75c <_printf_r>:
 800c75c:	defffd04 	addi	sp,sp,-12
 800c760:	dfc00015 	stw	ra,0(sp)
 800c764:	d9800115 	stw	r6,4(sp)
 800c768:	d9c00215 	stw	r7,8(sp)
 800c76c:	280d883a 	mov	r6,r5
 800c770:	21400217 	ldw	r5,8(r4)
 800c774:	d9c00104 	addi	r7,sp,4
 800c778:	800eab00 	call	800eab0 <___vfprintf_internal_r>
 800c77c:	dfc00017 	ldw	ra,0(sp)
 800c780:	dec00304 	addi	sp,sp,12
 800c784:	f800283a 	ret

0800c788 <printf>:
 800c788:	defffc04 	addi	sp,sp,-16
 800c78c:	dfc00015 	stw	ra,0(sp)
 800c790:	d9400115 	stw	r5,4(sp)
 800c794:	d9800215 	stw	r6,8(sp)
 800c798:	d9c00315 	stw	r7,12(sp)
 800c79c:	008200f4 	movhi	r2,2051
 800c7a0:	10a3ec04 	addi	r2,r2,-28752
 800c7a4:	10800017 	ldw	r2,0(r2)
 800c7a8:	200b883a 	mov	r5,r4
 800c7ac:	d9800104 	addi	r6,sp,4
 800c7b0:	11000217 	ldw	r4,8(r2)
 800c7b4:	8010aac0 	call	8010aac <__vfprintf_internal>
 800c7b8:	dfc00017 	ldw	ra,0(sp)
 800c7bc:	dec00404 	addi	sp,sp,16
 800c7c0:	f800283a 	ret

0800c7c4 <_putchar_r>:
 800c7c4:	21800217 	ldw	r6,8(r4)
 800c7c8:	80149c81 	jmpi	80149c8 <_putc_r>

0800c7cc <putchar>:
 800c7cc:	008200f4 	movhi	r2,2051
 800c7d0:	10a3ec04 	addi	r2,r2,-28752
 800c7d4:	200b883a 	mov	r5,r4
 800c7d8:	11000017 	ldw	r4,0(r2)
 800c7dc:	21800217 	ldw	r6,8(r4)
 800c7e0:	80149c81 	jmpi	80149c8 <_putc_r>

0800c7e4 <_puts_r>:
 800c7e4:	defff604 	addi	sp,sp,-40
 800c7e8:	dc000715 	stw	r16,28(sp)
 800c7ec:	2021883a 	mov	r16,r4
 800c7f0:	2809883a 	mov	r4,r5
 800c7f4:	dc400815 	stw	r17,32(sp)
 800c7f8:	dfc00915 	stw	ra,36(sp)
 800c7fc:	2823883a 	mov	r17,r5
 800c800:	800ca6c0 	call	800ca6c <strlen>
 800c804:	00c200f4 	movhi	r3,2051
 800c808:	18e3ec04 	addi	r3,r3,-28752
 800c80c:	18c00017 	ldw	r3,0(r3)
 800c810:	11000044 	addi	r4,r2,1
 800c814:	d8800115 	stw	r2,4(sp)
 800c818:	18c00217 	ldw	r3,8(r3)
 800c81c:	014200b4 	movhi	r5,2050
 800c820:	295c8c04 	addi	r5,r5,29232
 800c824:	1880030b 	ldhu	r2,12(r3)
 800c828:	d9400215 	stw	r5,8(sp)
 800c82c:	d9000615 	stw	r4,24(sp)
 800c830:	01400044 	movi	r5,1
 800c834:	01000084 	movi	r4,2
 800c838:	d9000515 	stw	r4,20(sp)
 800c83c:	dc400015 	stw	r17,0(sp)
 800c840:	d9400315 	stw	r5,12(sp)
 800c844:	dec00415 	stw	sp,16(sp)
 800c848:	1108000c 	andi	r4,r2,8192
 800c84c:	2000061e 	bne	r4,zero,800c868 <_puts_r+0x84>
 800c850:	19401917 	ldw	r5,100(r3)
 800c854:	0137ffc4 	movi	r4,-8193
 800c858:	10880014 	ori	r2,r2,8192
 800c85c:	2908703a 	and	r4,r5,r4
 800c860:	1880030d 	sth	r2,12(r3)
 800c864:	19001915 	stw	r4,100(r3)
 800c868:	81400217 	ldw	r5,8(r16)
 800c86c:	8009883a 	mov	r4,r16
 800c870:	d9800404 	addi	r6,sp,16
 800c874:	8012f4c0 	call	8012f4c <__sfvwrite_r>
 800c878:	1000061e 	bne	r2,zero,800c894 <_puts_r+0xb0>
 800c87c:	00800284 	movi	r2,10
 800c880:	dfc00917 	ldw	ra,36(sp)
 800c884:	dc400817 	ldw	r17,32(sp)
 800c888:	dc000717 	ldw	r16,28(sp)
 800c88c:	dec00a04 	addi	sp,sp,40
 800c890:	f800283a 	ret
 800c894:	00bfffc4 	movi	r2,-1
 800c898:	003ff906 	br	800c880 <__alt_data_end+0xfc00c880>

0800c89c <puts>:
 800c89c:	008200f4 	movhi	r2,2051
 800c8a0:	10a3ec04 	addi	r2,r2,-28752
 800c8a4:	200b883a 	mov	r5,r4
 800c8a8:	11000017 	ldw	r4,0(r2)
 800c8ac:	800c7e41 	jmpi	800c7e4 <_puts_r>

0800c8b0 <_sbrk_r>:
 800c8b0:	defffd04 	addi	sp,sp,-12
 800c8b4:	dc000015 	stw	r16,0(sp)
 800c8b8:	040200f4 	movhi	r16,2051
 800c8bc:	dc400115 	stw	r17,4(sp)
 800c8c0:	842afa04 	addi	r16,r16,-21528
 800c8c4:	2023883a 	mov	r17,r4
 800c8c8:	2809883a 	mov	r4,r5
 800c8cc:	dfc00215 	stw	ra,8(sp)
 800c8d0:	80000015 	stw	zero,0(r16)
 800c8d4:	8019cfc0 	call	8019cfc <sbrk>
 800c8d8:	00ffffc4 	movi	r3,-1
 800c8dc:	10c00526 	beq	r2,r3,800c8f4 <_sbrk_r+0x44>
 800c8e0:	dfc00217 	ldw	ra,8(sp)
 800c8e4:	dc400117 	ldw	r17,4(sp)
 800c8e8:	dc000017 	ldw	r16,0(sp)
 800c8ec:	dec00304 	addi	sp,sp,12
 800c8f0:	f800283a 	ret
 800c8f4:	80c00017 	ldw	r3,0(r16)
 800c8f8:	183ff926 	beq	r3,zero,800c8e0 <__alt_data_end+0xfc00c8e0>
 800c8fc:	88c00015 	stw	r3,0(r17)
 800c900:	003ff706 	br	800c8e0 <__alt_data_end+0xfc00c8e0>

0800c904 <_sprintf_r>:
 800c904:	deffe404 	addi	sp,sp,-112
 800c908:	2807883a 	mov	r3,r5
 800c90c:	dfc01a15 	stw	ra,104(sp)
 800c910:	d9c01b15 	stw	r7,108(sp)
 800c914:	00a00034 	movhi	r2,32768
 800c918:	10bfffc4 	addi	r2,r2,-1
 800c91c:	02008204 	movi	r8,520
 800c920:	d8800215 	stw	r2,8(sp)
 800c924:	d8800515 	stw	r2,20(sp)
 800c928:	d80b883a 	mov	r5,sp
 800c92c:	d9c01b04 	addi	r7,sp,108
 800c930:	00bfffc4 	movi	r2,-1
 800c934:	d8c00015 	stw	r3,0(sp)
 800c938:	d8c00415 	stw	r3,16(sp)
 800c93c:	da00030d 	sth	r8,12(sp)
 800c940:	d880038d 	sth	r2,14(sp)
 800c944:	800cb040 	call	800cb04 <___svfprintf_internal_r>
 800c948:	d8c00017 	ldw	r3,0(sp)
 800c94c:	18000005 	stb	zero,0(r3)
 800c950:	dfc01a17 	ldw	ra,104(sp)
 800c954:	dec01c04 	addi	sp,sp,112
 800c958:	f800283a 	ret

0800c95c <sprintf>:
 800c95c:	deffe304 	addi	sp,sp,-116
 800c960:	2007883a 	mov	r3,r4
 800c964:	dfc01a15 	stw	ra,104(sp)
 800c968:	d9801b15 	stw	r6,108(sp)
 800c96c:	d9c01c15 	stw	r7,112(sp)
 800c970:	010200f4 	movhi	r4,2051
 800c974:	2123ec04 	addi	r4,r4,-28752
 800c978:	21000017 	ldw	r4,0(r4)
 800c97c:	00a00034 	movhi	r2,32768
 800c980:	10bfffc4 	addi	r2,r2,-1
 800c984:	280d883a 	mov	r6,r5
 800c988:	02008204 	movi	r8,520
 800c98c:	d8800215 	stw	r2,8(sp)
 800c990:	d8800515 	stw	r2,20(sp)
 800c994:	d80b883a 	mov	r5,sp
 800c998:	d9c01b04 	addi	r7,sp,108
 800c99c:	00bfffc4 	movi	r2,-1
 800c9a0:	d8c00015 	stw	r3,0(sp)
 800c9a4:	d8c00415 	stw	r3,16(sp)
 800c9a8:	da00030d 	sth	r8,12(sp)
 800c9ac:	d880038d 	sth	r2,14(sp)
 800c9b0:	800cb040 	call	800cb04 <___svfprintf_internal_r>
 800c9b4:	d8c00017 	ldw	r3,0(sp)
 800c9b8:	18000005 	stb	zero,0(r3)
 800c9bc:	dfc01a17 	ldw	ra,104(sp)
 800c9c0:	dec01d04 	addi	sp,sp,116
 800c9c4:	f800283a 	ret

0800c9c8 <strcmp>:
 800c9c8:	2144b03a 	or	r2,r4,r5
 800c9cc:	108000cc 	andi	r2,r2,3
 800c9d0:	1000171e 	bne	r2,zero,800ca30 <strcmp+0x68>
 800c9d4:	20800017 	ldw	r2,0(r4)
 800c9d8:	28c00017 	ldw	r3,0(r5)
 800c9dc:	10c0141e 	bne	r2,r3,800ca30 <strcmp+0x68>
 800c9e0:	027fbff4 	movhi	r9,65279
 800c9e4:	4a7fbfc4 	addi	r9,r9,-257
 800c9e8:	0086303a 	nor	r3,zero,r2
 800c9ec:	02202074 	movhi	r8,32897
 800c9f0:	1245883a 	add	r2,r2,r9
 800c9f4:	42202004 	addi	r8,r8,-32640
 800c9f8:	10c4703a 	and	r2,r2,r3
 800c9fc:	1204703a 	and	r2,r2,r8
 800ca00:	10000226 	beq	r2,zero,800ca0c <strcmp+0x44>
 800ca04:	00001706 	br	800ca64 <strcmp+0x9c>
 800ca08:	1000161e 	bne	r2,zero,800ca64 <strcmp+0x9c>
 800ca0c:	21000104 	addi	r4,r4,4
 800ca10:	20c00017 	ldw	r3,0(r4)
 800ca14:	29400104 	addi	r5,r5,4
 800ca18:	29800017 	ldw	r6,0(r5)
 800ca1c:	1a4f883a 	add	r7,r3,r9
 800ca20:	00c4303a 	nor	r2,zero,r3
 800ca24:	3884703a 	and	r2,r7,r2
 800ca28:	1204703a 	and	r2,r2,r8
 800ca2c:	19bff626 	beq	r3,r6,800ca08 <__alt_data_end+0xfc00ca08>
 800ca30:	20800007 	ldb	r2,0(r4)
 800ca34:	1000051e 	bne	r2,zero,800ca4c <strcmp+0x84>
 800ca38:	00000606 	br	800ca54 <strcmp+0x8c>
 800ca3c:	21000044 	addi	r4,r4,1
 800ca40:	20800007 	ldb	r2,0(r4)
 800ca44:	29400044 	addi	r5,r5,1
 800ca48:	10000226 	beq	r2,zero,800ca54 <strcmp+0x8c>
 800ca4c:	28c00007 	ldb	r3,0(r5)
 800ca50:	10fffa26 	beq	r2,r3,800ca3c <__alt_data_end+0xfc00ca3c>
 800ca54:	20800003 	ldbu	r2,0(r4)
 800ca58:	28c00003 	ldbu	r3,0(r5)
 800ca5c:	10c5c83a 	sub	r2,r2,r3
 800ca60:	f800283a 	ret
 800ca64:	0005883a 	mov	r2,zero
 800ca68:	f800283a 	ret

0800ca6c <strlen>:
 800ca6c:	208000cc 	andi	r2,r4,3
 800ca70:	10002026 	beq	r2,zero,800caf4 <strlen+0x88>
 800ca74:	20800007 	ldb	r2,0(r4)
 800ca78:	10002026 	beq	r2,zero,800cafc <strlen+0x90>
 800ca7c:	2005883a 	mov	r2,r4
 800ca80:	00000206 	br	800ca8c <strlen+0x20>
 800ca84:	10c00007 	ldb	r3,0(r2)
 800ca88:	18001826 	beq	r3,zero,800caec <strlen+0x80>
 800ca8c:	10800044 	addi	r2,r2,1
 800ca90:	10c000cc 	andi	r3,r2,3
 800ca94:	183ffb1e 	bne	r3,zero,800ca84 <__alt_data_end+0xfc00ca84>
 800ca98:	10c00017 	ldw	r3,0(r2)
 800ca9c:	01ffbff4 	movhi	r7,65279
 800caa0:	39ffbfc4 	addi	r7,r7,-257
 800caa4:	00ca303a 	nor	r5,zero,r3
 800caa8:	01a02074 	movhi	r6,32897
 800caac:	19c7883a 	add	r3,r3,r7
 800cab0:	31a02004 	addi	r6,r6,-32640
 800cab4:	1946703a 	and	r3,r3,r5
 800cab8:	1986703a 	and	r3,r3,r6
 800cabc:	1800091e 	bne	r3,zero,800cae4 <strlen+0x78>
 800cac0:	10800104 	addi	r2,r2,4
 800cac4:	10c00017 	ldw	r3,0(r2)
 800cac8:	19cb883a 	add	r5,r3,r7
 800cacc:	00c6303a 	nor	r3,zero,r3
 800cad0:	28c6703a 	and	r3,r5,r3
 800cad4:	1986703a 	and	r3,r3,r6
 800cad8:	183ff926 	beq	r3,zero,800cac0 <__alt_data_end+0xfc00cac0>
 800cadc:	00000106 	br	800cae4 <strlen+0x78>
 800cae0:	10800044 	addi	r2,r2,1
 800cae4:	10c00007 	ldb	r3,0(r2)
 800cae8:	183ffd1e 	bne	r3,zero,800cae0 <__alt_data_end+0xfc00cae0>
 800caec:	1105c83a 	sub	r2,r2,r4
 800caf0:	f800283a 	ret
 800caf4:	2005883a 	mov	r2,r4
 800caf8:	003fe706 	br	800ca98 <__alt_data_end+0xfc00ca98>
 800cafc:	0005883a 	mov	r2,zero
 800cb00:	f800283a 	ret

0800cb04 <___svfprintf_internal_r>:
 800cb04:	deffb504 	addi	sp,sp,-300
 800cb08:	dfc04a15 	stw	ra,296(sp)
 800cb0c:	ddc04815 	stw	r23,288(sp)
 800cb10:	d9002f15 	stw	r4,188(sp)
 800cb14:	282f883a 	mov	r23,r5
 800cb18:	d9802915 	stw	r6,164(sp)
 800cb1c:	d9c02d15 	stw	r7,180(sp)
 800cb20:	df004915 	stw	fp,292(sp)
 800cb24:	dd804715 	stw	r22,284(sp)
 800cb28:	dd404615 	stw	r21,280(sp)
 800cb2c:	dd004515 	stw	r20,276(sp)
 800cb30:	dcc04415 	stw	r19,272(sp)
 800cb34:	dc804315 	stw	r18,268(sp)
 800cb38:	dc404215 	stw	r17,264(sp)
 800cb3c:	dc004115 	stw	r16,260(sp)
 800cb40:	801360c0 	call	801360c <_localeconv_r>
 800cb44:	10800017 	ldw	r2,0(r2)
 800cb48:	1009883a 	mov	r4,r2
 800cb4c:	d8803515 	stw	r2,212(sp)
 800cb50:	800ca6c0 	call	800ca6c <strlen>
 800cb54:	d8803915 	stw	r2,228(sp)
 800cb58:	b880030b 	ldhu	r2,12(r23)
 800cb5c:	1080200c 	andi	r2,r2,128
 800cb60:	10000226 	beq	r2,zero,800cb6c <___svfprintf_internal_r+0x68>
 800cb64:	b8800417 	ldw	r2,16(r23)
 800cb68:	10065d26 	beq	r2,zero,800e4e0 <___svfprintf_internal_r+0x19dc>
 800cb6c:	db001dc4 	addi	r12,sp,119
 800cb70:	dd801e04 	addi	r22,sp,120
 800cb74:	d8800404 	addi	r2,sp,16
 800cb78:	050200b4 	movhi	r20,2050
 800cb7c:	b317c83a 	sub	r11,r22,r12
 800cb80:	a51c9d84 	addi	r20,r20,29302
 800cb84:	db002815 	stw	r12,160(sp)
 800cb88:	d8801e15 	stw	r2,120(sp)
 800cb8c:	d8002015 	stw	zero,128(sp)
 800cb90:	d8001f15 	stw	zero,124(sp)
 800cb94:	d8003315 	stw	zero,204(sp)
 800cb98:	d8003715 	stw	zero,220(sp)
 800cb9c:	d8003815 	stw	zero,224(sp)
 800cba0:	d8003b15 	stw	zero,236(sp)
 800cba4:	d8003a15 	stw	zero,232(sp)
 800cba8:	d8003015 	stw	zero,192(sp)
 800cbac:	1011883a 	mov	r8,r2
 800cbb0:	dac03d15 	stw	r11,244(sp)
 800cbb4:	db002917 	ldw	r12,164(sp)
 800cbb8:	60800007 	ldb	r2,0(r12)
 800cbbc:	1000ab26 	beq	r2,zero,800ce6c <___svfprintf_internal_r+0x368>
 800cbc0:	00c00944 	movi	r3,37
 800cbc4:	10c0a926 	beq	r2,r3,800ce6c <___svfprintf_internal_r+0x368>
 800cbc8:	6021883a 	mov	r16,r12
 800cbcc:	00000106 	br	800cbd4 <___svfprintf_internal_r+0xd0>
 800cbd0:	10c08426 	beq	r2,r3,800cde4 <___svfprintf_internal_r+0x2e0>
 800cbd4:	84000044 	addi	r16,r16,1
 800cbd8:	80800007 	ldb	r2,0(r16)
 800cbdc:	103ffc1e 	bne	r2,zero,800cbd0 <__alt_data_end+0xfc00cbd0>
 800cbe0:	dac02917 	ldw	r11,164(sp)
 800cbe4:	82e3c83a 	sub	r17,r16,r11
 800cbe8:	88000f26 	beq	r17,zero,800cc28 <___svfprintf_internal_r+0x124>
 800cbec:	d8c02017 	ldw	r3,128(sp)
 800cbf0:	d8801f17 	ldw	r2,124(sp)
 800cbf4:	dac02917 	ldw	r11,164(sp)
 800cbf8:	1c47883a 	add	r3,r3,r17
 800cbfc:	10800044 	addi	r2,r2,1
 800cc00:	d8c02015 	stw	r3,128(sp)
 800cc04:	42c00015 	stw	r11,0(r8)
 800cc08:	44400115 	stw	r17,4(r8)
 800cc0c:	d8801f15 	stw	r2,124(sp)
 800cc10:	00c001c4 	movi	r3,7
 800cc14:	18807616 	blt	r3,r2,800cdf0 <___svfprintf_internal_r+0x2ec>
 800cc18:	42000204 	addi	r8,r8,8
 800cc1c:	db003017 	ldw	r12,192(sp)
 800cc20:	6459883a 	add	r12,r12,r17
 800cc24:	db003015 	stw	r12,192(sp)
 800cc28:	80800007 	ldb	r2,0(r16)
 800cc2c:	10007726 	beq	r2,zero,800ce0c <___svfprintf_internal_r+0x308>
 800cc30:	80800044 	addi	r2,r16,1
 800cc34:	84000047 	ldb	r16,1(r16)
 800cc38:	d8002785 	stb	zero,158(sp)
 800cc3c:	000d883a 	mov	r6,zero
 800cc40:	027fffc4 	movi	r9,-1
 800cc44:	d8002e15 	stw	zero,184(sp)
 800cc48:	0023883a 	mov	r17,zero
 800cc4c:	01001604 	movi	r4,88
 800cc50:	01400244 	movi	r5,9
 800cc54:	02800a84 	movi	r10,42
 800cc58:	01c01b04 	movi	r7,108
 800cc5c:	10c00044 	addi	r3,r2,1
 800cc60:	80bff804 	addi	r2,r16,-32
 800cc64:	2082e436 	bltu	r4,r2,800d7f8 <___svfprintf_internal_r+0xcf4>
 800cc68:	100490ba 	slli	r2,r2,2
 800cc6c:	02c20074 	movhi	r11,2049
 800cc70:	5af32004 	addi	r11,r11,-13184
 800cc74:	12c5883a 	add	r2,r2,r11
 800cc78:	10800017 	ldw	r2,0(r2)
 800cc7c:	1000683a 	jmp	r2
 800cc80:	0800d5b0 	cmpltui	zero,at,854
 800cc84:	0800d7f8 	rdprs	zero,at,863
 800cc88:	0800d7f8 	rdprs	zero,at,863
 800cc8c:	0800d730 	cmpltui	zero,at,860
 800cc90:	0800d7f8 	rdprs	zero,at,863
 800cc94:	0800d7f8 	rdprs	zero,at,863
 800cc98:	0800d7f8 	rdprs	zero,at,863
 800cc9c:	0800d7f8 	rdprs	zero,at,863
 800cca0:	0800d7f8 	rdprs	zero,at,863
 800cca4:	0800d7f8 	rdprs	zero,at,863
 800cca8:	0800d6f4 	orhi	zero,at,859
 800ccac:	0800d720 	cmpeqi	zero,at,860
 800ccb0:	0800d7f8 	rdprs	zero,at,863
 800ccb4:	0800ce74 	orhi	zero,at,825
 800ccb8:	0800ce84 	addi	zero,at,826
 800ccbc:	0800d7f8 	rdprs	zero,at,863
 800ccc0:	0800cec4 	addi	zero,at,827
 800ccc4:	0800ced4 	ori	zero,at,827
 800ccc8:	0800ced4 	ori	zero,at,827
 800cccc:	0800ced4 	ori	zero,at,827
 800ccd0:	0800ced4 	ori	zero,at,827
 800ccd4:	0800ced4 	ori	zero,at,827
 800ccd8:	0800ced4 	ori	zero,at,827
 800ccdc:	0800ced4 	ori	zero,at,827
 800cce0:	0800ced4 	ori	zero,at,827
 800cce4:	0800ced4 	ori	zero,at,827
 800cce8:	0800d7f8 	rdprs	zero,at,863
 800ccec:	0800d7f8 	rdprs	zero,at,863
 800ccf0:	0800d7f8 	rdprs	zero,at,863
 800ccf4:	0800d7f8 	rdprs	zero,at,863
 800ccf8:	0800d7f8 	rdprs	zero,at,863
 800ccfc:	0800d7f8 	rdprs	zero,at,863
 800cd00:	0800d7f8 	rdprs	zero,at,863
 800cd04:	0800d7f8 	rdprs	zero,at,863
 800cd08:	0800d7f8 	rdprs	zero,at,863
 800cd0c:	0800d7f8 	rdprs	zero,at,863
 800cd10:	0800cf08 	cmpgei	zero,at,828
 800cd14:	0800d3f4 	orhi	zero,at,847
 800cd18:	0800d7f8 	rdprs	zero,at,863
 800cd1c:	0800d3f4 	orhi	zero,at,847
 800cd20:	0800d7f8 	rdprs	zero,at,863
 800cd24:	0800d7f8 	rdprs	zero,at,863
 800cd28:	0800d7f8 	rdprs	zero,at,863
 800cd2c:	0800d7f8 	rdprs	zero,at,863
 800cd30:	0800d4e0 	cmpeqi	zero,at,851
 800cd34:	0800d7f8 	rdprs	zero,at,863
 800cd38:	0800d7f8 	rdprs	zero,at,863
 800cd3c:	0800d388 	cmpgei	zero,at,846
 800cd40:	0800d7f8 	rdprs	zero,at,863
 800cd44:	0800d7f8 	rdprs	zero,at,863
 800cd48:	0800d7f8 	rdprs	zero,at,863
 800cd4c:	0800d7f8 	rdprs	zero,at,863
 800cd50:	0800d7f8 	rdprs	zero,at,863
 800cd54:	0800d3c4 	addi	zero,at,847
 800cd58:	0800d7f8 	rdprs	zero,at,863
 800cd5c:	0800d7f8 	rdprs	zero,at,863
 800cd60:	0800d5d0 	cmplti	zero,at,855
 800cd64:	0800d7f8 	rdprs	zero,at,863
 800cd68:	0800d7f8 	rdprs	zero,at,863
 800cd6c:	0800d7f8 	rdprs	zero,at,863
 800cd70:	0800d7f8 	rdprs	zero,at,863
 800cd74:	0800d7f8 	rdprs	zero,at,863
 800cd78:	0800d7f8 	rdprs	zero,at,863
 800cd7c:	0800d7f8 	rdprs	zero,at,863
 800cd80:	0800d7f8 	rdprs	zero,at,863
 800cd84:	0800d7f8 	rdprs	zero,at,863
 800cd88:	0800d7f8 	rdprs	zero,at,863
 800cd8c:	0800d6b4 	orhi	zero,at,858
 800cd90:	0800d4f0 	cmpltui	zero,at,851
 800cd94:	0800d3f4 	orhi	zero,at,847
 800cd98:	0800d3f4 	orhi	zero,at,847
 800cd9c:	0800d3f4 	orhi	zero,at,847
 800cda0:	0800d558 	cmpnei	zero,at,853
 800cda4:	0800d4f0 	cmpltui	zero,at,851
 800cda8:	0800d7f8 	rdprs	zero,at,863
 800cdac:	0800d7f8 	rdprs	zero,at,863
 800cdb0:	0800d568 	cmpgeui	zero,at,853
 800cdb4:	0800d7f8 	rdprs	zero,at,863
 800cdb8:	0800d57c 	xorhi	zero,at,853
 800cdbc:	0800d7bc 	xorhi	zero,at,862
 800cdc0:	0800d498 	cmpnei	zero,at,850
 800cdc4:	0800d6a4 	muli	zero,at,858
 800cdc8:	0800d7f8 	rdprs	zero,at,863
 800cdcc:	0800d62c 	andhi	zero,at,856
 800cdd0:	0800d7f8 	rdprs	zero,at,863
 800cdd4:	0800d780 	call	800d78 <__reset-0x77ff288>
 800cdd8:	0800d7f8 	rdprs	zero,at,863
 800cddc:	0800d7f8 	rdprs	zero,at,863
 800cde0:	0800d740 	call	800d74 <__reset-0x77ff28c>
 800cde4:	db002917 	ldw	r12,164(sp)
 800cde8:	8323c83a 	sub	r17,r16,r12
 800cdec:	003f7e06 	br	800cbe8 <__alt_data_end+0xfc00cbe8>
 800cdf0:	d9002f17 	ldw	r4,188(sp)
 800cdf4:	b80b883a 	mov	r5,r23
 800cdf8:	b00d883a 	mov	r6,r22
 800cdfc:	80155800 	call	8015580 <__ssprint_r>
 800ce00:	1000081e 	bne	r2,zero,800ce24 <___svfprintf_internal_r+0x320>
 800ce04:	da000404 	addi	r8,sp,16
 800ce08:	003f8406 	br	800cc1c <__alt_data_end+0xfc00cc1c>
 800ce0c:	d8802017 	ldw	r2,128(sp)
 800ce10:	10000426 	beq	r2,zero,800ce24 <___svfprintf_internal_r+0x320>
 800ce14:	d9002f17 	ldw	r4,188(sp)
 800ce18:	b80b883a 	mov	r5,r23
 800ce1c:	d9801e04 	addi	r6,sp,120
 800ce20:	80155800 	call	8015580 <__ssprint_r>
 800ce24:	b880030b 	ldhu	r2,12(r23)
 800ce28:	1080100c 	andi	r2,r2,64
 800ce2c:	10000d1e 	bne	r2,zero,800ce64 <___svfprintf_internal_r+0x360>
 800ce30:	d8803017 	ldw	r2,192(sp)
 800ce34:	dfc04a17 	ldw	ra,296(sp)
 800ce38:	df004917 	ldw	fp,292(sp)
 800ce3c:	ddc04817 	ldw	r23,288(sp)
 800ce40:	dd804717 	ldw	r22,284(sp)
 800ce44:	dd404617 	ldw	r21,280(sp)
 800ce48:	dd004517 	ldw	r20,276(sp)
 800ce4c:	dcc04417 	ldw	r19,272(sp)
 800ce50:	dc804317 	ldw	r18,268(sp)
 800ce54:	dc404217 	ldw	r17,264(sp)
 800ce58:	dc004117 	ldw	r16,260(sp)
 800ce5c:	dec04b04 	addi	sp,sp,300
 800ce60:	f800283a 	ret
 800ce64:	00bfffc4 	movi	r2,-1
 800ce68:	003ff206 	br	800ce34 <__alt_data_end+0xfc00ce34>
 800ce6c:	dc002917 	ldw	r16,164(sp)
 800ce70:	003f6d06 	br	800cc28 <__alt_data_end+0xfc00cc28>
 800ce74:	1805883a 	mov	r2,r3
 800ce78:	8c400114 	ori	r17,r17,4
 800ce7c:	1c000007 	ldb	r16,0(r3)
 800ce80:	003f7606 	br	800cc5c <__alt_data_end+0xfc00cc5c>
 800ce84:	1c000007 	ldb	r16,0(r3)
 800ce88:	18800044 	addi	r2,r3,1
 800ce8c:	8286e726 	beq	r16,r10,800ea2c <___svfprintf_internal_r+0x1f28>
 800ce90:	82fff404 	addi	r11,r16,-48
 800ce94:	1007883a 	mov	r3,r2
 800ce98:	0013883a 	mov	r9,zero
 800ce9c:	2aff7036 	bltu	r5,r11,800cc60 <__alt_data_end+0xfc00cc60>
 800cea0:	1c000007 	ldb	r16,0(r3)
 800cea4:	4a4002a4 	muli	r9,r9,10
 800cea8:	18c00044 	addi	r3,r3,1
 800ceac:	5a53883a 	add	r9,r11,r9
 800ceb0:	82fff404 	addi	r11,r16,-48
 800ceb4:	2afffa2e 	bgeu	r5,r11,800cea0 <__alt_data_end+0xfc00cea0>
 800ceb8:	483f690e 	bge	r9,zero,800cc60 <__alt_data_end+0xfc00cc60>
 800cebc:	027fffc4 	movi	r9,-1
 800cec0:	003f6706 	br	800cc60 <__alt_data_end+0xfc00cc60>
 800cec4:	8c402014 	ori	r17,r17,128
 800cec8:	1805883a 	mov	r2,r3
 800cecc:	1c000007 	ldb	r16,0(r3)
 800ced0:	003f6206 	br	800cc5c <__alt_data_end+0xfc00cc5c>
 800ced4:	1805883a 	mov	r2,r3
 800ced8:	d8002e15 	stw	zero,184(sp)
 800cedc:	82fff404 	addi	r11,r16,-48
 800cee0:	0019883a 	mov	r12,zero
 800cee4:	14000007 	ldb	r16,0(r2)
 800cee8:	630002a4 	muli	r12,r12,10
 800ceec:	18c00044 	addi	r3,r3,1
 800cef0:	1805883a 	mov	r2,r3
 800cef4:	62d9883a 	add	r12,r12,r11
 800cef8:	82fff404 	addi	r11,r16,-48
 800cefc:	2afff92e 	bgeu	r5,r11,800cee4 <__alt_data_end+0xfc00cee4>
 800cf00:	db002e15 	stw	r12,184(sp)
 800cf04:	003f5606 	br	800cc60 <__alt_data_end+0xfc00cc60>
 800cf08:	8c400414 	ori	r17,r17,16
 800cf0c:	d8c02915 	stw	r3,164(sp)
 800cf10:	d9802785 	stb	r6,158(sp)
 800cf14:	8880080c 	andi	r2,r17,32
 800cf18:	d8c02d17 	ldw	r3,180(sp)
 800cf1c:	10017926 	beq	r2,zero,800d504 <___svfprintf_internal_r+0xa00>
 800cf20:	db002d17 	ldw	r12,180(sp)
 800cf24:	18800117 	ldw	r2,4(r3)
 800cf28:	1cc00017 	ldw	r19,0(r3)
 800cf2c:	63000204 	addi	r12,r12,8
 800cf30:	db002d15 	stw	r12,180(sp)
 800cf34:	1039883a 	mov	fp,r2
 800cf38:	10017d16 	blt	r2,zero,800d530 <___svfprintf_internal_r+0xa2c>
 800cf3c:	dd402783 	ldbu	r21,158(sp)
 800cf40:	da403215 	stw	r9,200(sp)
 800cf44:	00800044 	movi	r2,1
 800cf48:	9f06b03a 	or	r3,r19,fp
 800cf4c:	48000216 	blt	r9,zero,800cf58 <___svfprintf_internal_r+0x454>
 800cf50:	013fdfc4 	movi	r4,-129
 800cf54:	8922703a 	and	r17,r17,r4
 800cf58:	1802371e 	bne	r3,zero,800d838 <___svfprintf_internal_r+0xd34>
 800cf5c:	48034526 	beq	r9,zero,800dc74 <___svfprintf_internal_r+0x1170>
 800cf60:	10803fcc 	andi	r2,r2,255
 800cf64:	00c00044 	movi	r3,1
 800cf68:	10c25826 	beq	r2,r3,800d8cc <___svfprintf_internal_r+0xdc8>
 800cf6c:	00c00084 	movi	r3,2
 800cf70:	10c2db26 	beq	r2,r3,800dae0 <___svfprintf_internal_r+0xfdc>
 800cf74:	b007883a 	mov	r3,r22
 800cf78:	9808d0fa 	srli	r4,r19,3
 800cf7c:	e00a977a 	slli	r5,fp,29
 800cf80:	e038d0fa 	srli	fp,fp,3
 800cf84:	9cc001cc 	andi	r19,r19,7
 800cf88:	98800c04 	addi	r2,r19,48
 800cf8c:	18ffffc4 	addi	r3,r3,-1
 800cf90:	2926b03a 	or	r19,r5,r4
 800cf94:	18800005 	stb	r2,0(r3)
 800cf98:	9f08b03a 	or	r4,r19,fp
 800cf9c:	203ff61e 	bne	r4,zero,800cf78 <__alt_data_end+0xfc00cf78>
 800cfa0:	8900004c 	andi	r4,r17,1
 800cfa4:	d8c03115 	stw	r3,196(sp)
 800cfa8:	2002db26 	beq	r4,zero,800db18 <___svfprintf_internal_r+0x1014>
 800cfac:	10803fcc 	andi	r2,r2,255
 800cfb0:	1080201c 	xori	r2,r2,128
 800cfb4:	10bfe004 	addi	r2,r2,-128
 800cfb8:	01000c04 	movi	r4,48
 800cfbc:	11056626 	beq	r2,r4,800e558 <___svfprintf_internal_r+0x1a54>
 800cfc0:	dac03117 	ldw	r11,196(sp)
 800cfc4:	193fffc5 	stb	r4,-1(r3)
 800cfc8:	5affffc4 	addi	r11,r11,-1
 800cfcc:	dac03115 	stw	r11,196(sp)
 800cfd0:	b2e5c83a 	sub	r18,r22,r11
 800cfd4:	9005883a 	mov	r2,r18
 800cfd8:	9240010e 	bge	r18,r9,800cfe0 <___svfprintf_internal_r+0x4dc>
 800cfdc:	4805883a 	mov	r2,r9
 800cfe0:	d8802a15 	stw	r2,168(sp)
 800cfe4:	d8003415 	stw	zero,208(sp)
 800cfe8:	a8803fcc 	andi	r2,r21,255
 800cfec:	1080201c 	xori	r2,r2,128
 800cff0:	10bfe004 	addi	r2,r2,-128
 800cff4:	10000326 	beq	r2,zero,800d004 <___svfprintf_internal_r+0x500>
 800cff8:	d8c02a17 	ldw	r3,168(sp)
 800cffc:	18c00044 	addi	r3,r3,1
 800d000:	d8c02a15 	stw	r3,168(sp)
 800d004:	8ac0008c 	andi	r11,r17,2
 800d008:	dac02b15 	stw	r11,172(sp)
 800d00c:	58000326 	beq	r11,zero,800d01c <___svfprintf_internal_r+0x518>
 800d010:	db002a17 	ldw	r12,168(sp)
 800d014:	63000084 	addi	r12,r12,2
 800d018:	db002a15 	stw	r12,168(sp)
 800d01c:	88c0210c 	andi	r3,r17,132
 800d020:	d8c02c15 	stw	r3,176(sp)
 800d024:	1802021e 	bne	r3,zero,800d830 <___svfprintf_internal_r+0xd2c>
 800d028:	dac02e17 	ldw	r11,184(sp)
 800d02c:	db002a17 	ldw	r12,168(sp)
 800d030:	5b39c83a 	sub	fp,r11,r12
 800d034:	0701fe0e 	bge	zero,fp,800d830 <___svfprintf_internal_r+0xd2c>
 800d038:	02400404 	movi	r9,16
 800d03c:	d8c02017 	ldw	r3,128(sp)
 800d040:	d8801f17 	ldw	r2,124(sp)
 800d044:	4f057d0e 	bge	r9,fp,800e63c <___svfprintf_internal_r+0x1b38>
 800d048:	014200b4 	movhi	r5,2050
 800d04c:	e009883a 	mov	r4,fp
 800d050:	295ca184 	addi	r5,r5,29318
 800d054:	dc003c15 	stw	r16,240(sp)
 800d058:	9039883a 	mov	fp,r18
 800d05c:	d9403615 	stw	r5,216(sp)
 800d060:	8825883a 	mov	r18,r17
 800d064:	482b883a 	mov	r21,r9
 800d068:	04c001c4 	movi	r19,7
 800d06c:	dc002f17 	ldw	r16,188(sp)
 800d070:	2023883a 	mov	r17,r4
 800d074:	00000306 	br	800d084 <___svfprintf_internal_r+0x580>
 800d078:	8c7ffc04 	addi	r17,r17,-16
 800d07c:	42000204 	addi	r8,r8,8
 800d080:	ac40130e 	bge	r21,r17,800d0d0 <___svfprintf_internal_r+0x5cc>
 800d084:	02c200b4 	movhi	r11,2050
 800d088:	18c00404 	addi	r3,r3,16
 800d08c:	10800044 	addi	r2,r2,1
 800d090:	5adca184 	addi	r11,r11,29318
 800d094:	42c00015 	stw	r11,0(r8)
 800d098:	45400115 	stw	r21,4(r8)
 800d09c:	d8c02015 	stw	r3,128(sp)
 800d0a0:	d8801f15 	stw	r2,124(sp)
 800d0a4:	98bff40e 	bge	r19,r2,800d078 <__alt_data_end+0xfc00d078>
 800d0a8:	8009883a 	mov	r4,r16
 800d0ac:	b80b883a 	mov	r5,r23
 800d0b0:	b00d883a 	mov	r6,r22
 800d0b4:	80155800 	call	8015580 <__ssprint_r>
 800d0b8:	103f5a1e 	bne	r2,zero,800ce24 <__alt_data_end+0xfc00ce24>
 800d0bc:	8c7ffc04 	addi	r17,r17,-16
 800d0c0:	d8c02017 	ldw	r3,128(sp)
 800d0c4:	d8801f17 	ldw	r2,124(sp)
 800d0c8:	da000404 	addi	r8,sp,16
 800d0cc:	ac7fed16 	blt	r21,r17,800d084 <__alt_data_end+0xfc00d084>
 800d0d0:	dc003c17 	ldw	r16,240(sp)
 800d0d4:	8809883a 	mov	r4,r17
 800d0d8:	9023883a 	mov	r17,r18
 800d0dc:	e025883a 	mov	r18,fp
 800d0e0:	2039883a 	mov	fp,r4
 800d0e4:	db003617 	ldw	r12,216(sp)
 800d0e8:	e0c7883a 	add	r3,fp,r3
 800d0ec:	10800044 	addi	r2,r2,1
 800d0f0:	43000015 	stw	r12,0(r8)
 800d0f4:	47000115 	stw	fp,4(r8)
 800d0f8:	d8c02015 	stw	r3,128(sp)
 800d0fc:	d8801f15 	stw	r2,124(sp)
 800d100:	010001c4 	movi	r4,7
 800d104:	20833516 	blt	r4,r2,800dddc <___svfprintf_internal_r+0x12d8>
 800d108:	d8802787 	ldb	r2,158(sp)
 800d10c:	42000204 	addi	r8,r8,8
 800d110:	10000c26 	beq	r2,zero,800d144 <___svfprintf_internal_r+0x640>
 800d114:	d8801f17 	ldw	r2,124(sp)
 800d118:	d9002784 	addi	r4,sp,158
 800d11c:	18c00044 	addi	r3,r3,1
 800d120:	10800044 	addi	r2,r2,1
 800d124:	41000015 	stw	r4,0(r8)
 800d128:	01000044 	movi	r4,1
 800d12c:	41000115 	stw	r4,4(r8)
 800d130:	d8c02015 	stw	r3,128(sp)
 800d134:	d8801f15 	stw	r2,124(sp)
 800d138:	010001c4 	movi	r4,7
 800d13c:	2082df16 	blt	r4,r2,800dcbc <___svfprintf_internal_r+0x11b8>
 800d140:	42000204 	addi	r8,r8,8
 800d144:	dac02b17 	ldw	r11,172(sp)
 800d148:	58000c26 	beq	r11,zero,800d17c <___svfprintf_internal_r+0x678>
 800d14c:	d8801f17 	ldw	r2,124(sp)
 800d150:	d9002704 	addi	r4,sp,156
 800d154:	18c00084 	addi	r3,r3,2
 800d158:	10800044 	addi	r2,r2,1
 800d15c:	41000015 	stw	r4,0(r8)
 800d160:	01000084 	movi	r4,2
 800d164:	41000115 	stw	r4,4(r8)
 800d168:	d8c02015 	stw	r3,128(sp)
 800d16c:	d8801f15 	stw	r2,124(sp)
 800d170:	010001c4 	movi	r4,7
 800d174:	2082d916 	blt	r4,r2,800dcdc <___svfprintf_internal_r+0x11d8>
 800d178:	42000204 	addi	r8,r8,8
 800d17c:	db002c17 	ldw	r12,176(sp)
 800d180:	00802004 	movi	r2,128
 800d184:	60822026 	beq	r12,r2,800da08 <___svfprintf_internal_r+0xf04>
 800d188:	db003217 	ldw	r12,200(sp)
 800d18c:	64abc83a 	sub	r21,r12,r18
 800d190:	0540310e 	bge	zero,r21,800d258 <___svfprintf_internal_r+0x754>
 800d194:	07000404 	movi	fp,16
 800d198:	d8801f17 	ldw	r2,124(sp)
 800d19c:	e544180e 	bge	fp,r21,800e200 <___svfprintf_internal_r+0x16fc>
 800d1a0:	014200b4 	movhi	r5,2050
 800d1a4:	a809883a 	mov	r4,r21
 800d1a8:	295c9d84 	addi	r5,r5,29302
 800d1ac:	dc002c15 	stw	r16,176(sp)
 800d1b0:	902b883a 	mov	r21,r18
 800d1b4:	d9402b15 	stw	r5,172(sp)
 800d1b8:	8825883a 	mov	r18,r17
 800d1bc:	04c001c4 	movi	r19,7
 800d1c0:	dc002f17 	ldw	r16,188(sp)
 800d1c4:	2023883a 	mov	r17,r4
 800d1c8:	00000306 	br	800d1d8 <___svfprintf_internal_r+0x6d4>
 800d1cc:	8c7ffc04 	addi	r17,r17,-16
 800d1d0:	42000204 	addi	r8,r8,8
 800d1d4:	e440110e 	bge	fp,r17,800d21c <___svfprintf_internal_r+0x718>
 800d1d8:	18c00404 	addi	r3,r3,16
 800d1dc:	10800044 	addi	r2,r2,1
 800d1e0:	45000015 	stw	r20,0(r8)
 800d1e4:	47000115 	stw	fp,4(r8)
 800d1e8:	d8c02015 	stw	r3,128(sp)
 800d1ec:	d8801f15 	stw	r2,124(sp)
 800d1f0:	98bff60e 	bge	r19,r2,800d1cc <__alt_data_end+0xfc00d1cc>
 800d1f4:	8009883a 	mov	r4,r16
 800d1f8:	b80b883a 	mov	r5,r23
 800d1fc:	b00d883a 	mov	r6,r22
 800d200:	80155800 	call	8015580 <__ssprint_r>
 800d204:	103f071e 	bne	r2,zero,800ce24 <__alt_data_end+0xfc00ce24>
 800d208:	8c7ffc04 	addi	r17,r17,-16
 800d20c:	d8c02017 	ldw	r3,128(sp)
 800d210:	d8801f17 	ldw	r2,124(sp)
 800d214:	da000404 	addi	r8,sp,16
 800d218:	e47fef16 	blt	fp,r17,800d1d8 <__alt_data_end+0xfc00d1d8>
 800d21c:	dc002c17 	ldw	r16,176(sp)
 800d220:	8809883a 	mov	r4,r17
 800d224:	9023883a 	mov	r17,r18
 800d228:	a825883a 	mov	r18,r21
 800d22c:	202b883a 	mov	r21,r4
 800d230:	dac02b17 	ldw	r11,172(sp)
 800d234:	1d47883a 	add	r3,r3,r21
 800d238:	10800044 	addi	r2,r2,1
 800d23c:	42c00015 	stw	r11,0(r8)
 800d240:	45400115 	stw	r21,4(r8)
 800d244:	d8c02015 	stw	r3,128(sp)
 800d248:	d8801f15 	stw	r2,124(sp)
 800d24c:	010001c4 	movi	r4,7
 800d250:	20829216 	blt	r4,r2,800dc9c <___svfprintf_internal_r+0x1198>
 800d254:	42000204 	addi	r8,r8,8
 800d258:	8880400c 	andi	r2,r17,256
 800d25c:	1001a11e 	bne	r2,zero,800d8e4 <___svfprintf_internal_r+0xde0>
 800d260:	d8801f17 	ldw	r2,124(sp)
 800d264:	db003117 	ldw	r12,196(sp)
 800d268:	1c87883a 	add	r3,r3,r18
 800d26c:	10800044 	addi	r2,r2,1
 800d270:	43000015 	stw	r12,0(r8)
 800d274:	44800115 	stw	r18,4(r8)
 800d278:	d8c02015 	stw	r3,128(sp)
 800d27c:	d8801f15 	stw	r2,124(sp)
 800d280:	010001c4 	movi	r4,7
 800d284:	20826d16 	blt	r4,r2,800dc3c <___svfprintf_internal_r+0x1138>
 800d288:	42000204 	addi	r8,r8,8
 800d28c:	8c40010c 	andi	r17,r17,4
 800d290:	88003226 	beq	r17,zero,800d35c <___svfprintf_internal_r+0x858>
 800d294:	db002e17 	ldw	r12,184(sp)
 800d298:	dac02a17 	ldw	r11,168(sp)
 800d29c:	62e1c83a 	sub	r16,r12,r11
 800d2a0:	04002e0e 	bge	zero,r16,800d35c <___svfprintf_internal_r+0x858>
 800d2a4:	04400404 	movi	r17,16
 800d2a8:	d8801f17 	ldw	r2,124(sp)
 800d2ac:	8c05240e 	bge	r17,r16,800e740 <___svfprintf_internal_r+0x1c3c>
 800d2b0:	010200b4 	movhi	r4,2050
 800d2b4:	211ca184 	addi	r4,r4,29318
 800d2b8:	d9003615 	stw	r4,216(sp)
 800d2bc:	048001c4 	movi	r18,7
 800d2c0:	dcc02f17 	ldw	r19,188(sp)
 800d2c4:	00000306 	br	800d2d4 <___svfprintf_internal_r+0x7d0>
 800d2c8:	843ffc04 	addi	r16,r16,-16
 800d2cc:	42000204 	addi	r8,r8,8
 800d2d0:	8c00130e 	bge	r17,r16,800d320 <___svfprintf_internal_r+0x81c>
 800d2d4:	014200b4 	movhi	r5,2050
 800d2d8:	18c00404 	addi	r3,r3,16
 800d2dc:	10800044 	addi	r2,r2,1
 800d2e0:	295ca184 	addi	r5,r5,29318
 800d2e4:	41400015 	stw	r5,0(r8)
 800d2e8:	44400115 	stw	r17,4(r8)
 800d2ec:	d8c02015 	stw	r3,128(sp)
 800d2f0:	d8801f15 	stw	r2,124(sp)
 800d2f4:	90bff40e 	bge	r18,r2,800d2c8 <__alt_data_end+0xfc00d2c8>
 800d2f8:	9809883a 	mov	r4,r19
 800d2fc:	b80b883a 	mov	r5,r23
 800d300:	b00d883a 	mov	r6,r22
 800d304:	80155800 	call	8015580 <__ssprint_r>
 800d308:	103ec61e 	bne	r2,zero,800ce24 <__alt_data_end+0xfc00ce24>
 800d30c:	843ffc04 	addi	r16,r16,-16
 800d310:	d8c02017 	ldw	r3,128(sp)
 800d314:	d8801f17 	ldw	r2,124(sp)
 800d318:	da000404 	addi	r8,sp,16
 800d31c:	8c3fed16 	blt	r17,r16,800d2d4 <__alt_data_end+0xfc00d2d4>
 800d320:	dac03617 	ldw	r11,216(sp)
 800d324:	1c07883a 	add	r3,r3,r16
 800d328:	10800044 	addi	r2,r2,1
 800d32c:	42c00015 	stw	r11,0(r8)
 800d330:	44000115 	stw	r16,4(r8)
 800d334:	d8c02015 	stw	r3,128(sp)
 800d338:	d8801f15 	stw	r2,124(sp)
 800d33c:	010001c4 	movi	r4,7
 800d340:	2080060e 	bge	r4,r2,800d35c <___svfprintf_internal_r+0x858>
 800d344:	d9002f17 	ldw	r4,188(sp)
 800d348:	b80b883a 	mov	r5,r23
 800d34c:	b00d883a 	mov	r6,r22
 800d350:	80155800 	call	8015580 <__ssprint_r>
 800d354:	103eb31e 	bne	r2,zero,800ce24 <__alt_data_end+0xfc00ce24>
 800d358:	d8c02017 	ldw	r3,128(sp)
 800d35c:	d8802a17 	ldw	r2,168(sp)
 800d360:	db002e17 	ldw	r12,184(sp)
 800d364:	1300010e 	bge	r2,r12,800d36c <___svfprintf_internal_r+0x868>
 800d368:	6005883a 	mov	r2,r12
 800d36c:	dac03017 	ldw	r11,192(sp)
 800d370:	5897883a 	add	r11,r11,r2
 800d374:	dac03015 	stw	r11,192(sp)
 800d378:	1802381e 	bne	r3,zero,800dc5c <___svfprintf_internal_r+0x1158>
 800d37c:	d8001f15 	stw	zero,124(sp)
 800d380:	da000404 	addi	r8,sp,16
 800d384:	003e0b06 	br	800cbb4 <__alt_data_end+0xfc00cbb4>
 800d388:	8c400414 	ori	r17,r17,16
 800d38c:	d8c02915 	stw	r3,164(sp)
 800d390:	8880080c 	andi	r2,r17,32
 800d394:	10010c26 	beq	r2,zero,800d7c8 <___svfprintf_internal_r+0xcc4>
 800d398:	db002d17 	ldw	r12,180(sp)
 800d39c:	0005883a 	mov	r2,zero
 800d3a0:	64c00017 	ldw	r19,0(r12)
 800d3a4:	67000117 	ldw	fp,4(r12)
 800d3a8:	63000204 	addi	r12,r12,8
 800d3ac:	db002d15 	stw	r12,180(sp)
 800d3b0:	9f06b03a 	or	r3,r19,fp
 800d3b4:	d8002785 	stb	zero,158(sp)
 800d3b8:	da403215 	stw	r9,200(sp)
 800d3bc:	002b883a 	mov	r21,zero
 800d3c0:	003ee206 	br	800cf4c <__alt_data_end+0xfc00cf4c>
 800d3c4:	8c400414 	ori	r17,r17,16
 800d3c8:	d8c02915 	stw	r3,164(sp)
 800d3cc:	8880080c 	andi	r2,r17,32
 800d3d0:	1000ee26 	beq	r2,zero,800d78c <___svfprintf_internal_r+0xc88>
 800d3d4:	dac02d17 	ldw	r11,180(sp)
 800d3d8:	00800044 	movi	r2,1
 800d3dc:	5cc00017 	ldw	r19,0(r11)
 800d3e0:	5f000117 	ldw	fp,4(r11)
 800d3e4:	5ac00204 	addi	r11,r11,8
 800d3e8:	dac02d15 	stw	r11,180(sp)
 800d3ec:	9f06b03a 	or	r3,r19,fp
 800d3f0:	003ff006 	br	800d3b4 <__alt_data_end+0xfc00d3b4>
 800d3f4:	db002d17 	ldw	r12,180(sp)
 800d3f8:	dac02d17 	ldw	r11,180(sp)
 800d3fc:	d8c02915 	stw	r3,164(sp)
 800d400:	63000017 	ldw	r12,0(r12)
 800d404:	5ac00117 	ldw	r11,4(r11)
 800d408:	d9802785 	stb	r6,158(sp)
 800d40c:	6009883a 	mov	r4,r12
 800d410:	580b883a 	mov	r5,r11
 800d414:	db003715 	stw	r12,220(sp)
 800d418:	da004015 	stw	r8,256(sp)
 800d41c:	da403f15 	stw	r9,252(sp)
 800d420:	dac03815 	stw	r11,224(sp)
 800d424:	80150d00 	call	80150d0 <__fpclassifyd>
 800d428:	db002d17 	ldw	r12,180(sp)
 800d42c:	04800044 	movi	r18,1
 800d430:	da004017 	ldw	r8,256(sp)
 800d434:	64c00204 	addi	r19,r12,8
 800d438:	da403f17 	ldw	r9,252(sp)
 800d43c:	d9003717 	ldw	r4,220(sp)
 800d440:	d9403817 	ldw	r5,224(sp)
 800d444:	14832c1e 	bne	r2,r18,800e0f8 <___svfprintf_internal_r+0x15f4>
 800d448:	000d883a 	mov	r6,zero
 800d44c:	000f883a 	mov	r7,zero
 800d450:	800a4cc0 	call	800a4cc <__ledf2>
 800d454:	da004017 	ldw	r8,256(sp)
 800d458:	1004c416 	blt	r2,zero,800e76c <___svfprintf_internal_r+0x1c68>
 800d45c:	dd402783 	ldbu	r21,158(sp)
 800d460:	008011c4 	movi	r2,71
 800d464:	14041a0e 	bge	r2,r16,800e4d0 <___svfprintf_internal_r+0x19cc>
 800d468:	00c200b4 	movhi	r3,2050
 800d46c:	18dc8e04 	addi	r3,r3,29240
 800d470:	d8c03115 	stw	r3,196(sp)
 800d474:	02c000c4 	movi	r11,3
 800d478:	00bfdfc4 	movi	r2,-129
 800d47c:	dac02a15 	stw	r11,168(sp)
 800d480:	88a2703a 	and	r17,r17,r2
 800d484:	dcc02d15 	stw	r19,180(sp)
 800d488:	5825883a 	mov	r18,r11
 800d48c:	d8003215 	stw	zero,200(sp)
 800d490:	d8003415 	stw	zero,208(sp)
 800d494:	003ed406 	br	800cfe8 <__alt_data_end+0xfc00cfe8>
 800d498:	db002d17 	ldw	r12,180(sp)
 800d49c:	00800c04 	movi	r2,48
 800d4a0:	d8802705 	stb	r2,156(sp)
 800d4a4:	64c00017 	ldw	r19,0(r12)
 800d4a8:	00801e04 	movi	r2,120
 800d4ac:	d8802745 	stb	r2,157(sp)
 800d4b0:	008200b4 	movhi	r2,2050
 800d4b4:	109c9604 	addi	r2,r2,29272
 800d4b8:	63000104 	addi	r12,r12,4
 800d4bc:	d8c02915 	stw	r3,164(sp)
 800d4c0:	d8803b15 	stw	r2,236(sp)
 800d4c4:	0039883a 	mov	fp,zero
 800d4c8:	8c400094 	ori	r17,r17,2
 800d4cc:	db002d15 	stw	r12,180(sp)
 800d4d0:	00800084 	movi	r2,2
 800d4d4:	04001e04 	movi	r16,120
 800d4d8:	9807883a 	mov	r3,r19
 800d4dc:	003fb506 	br	800d3b4 <__alt_data_end+0xfc00d3b4>
 800d4e0:	8c400214 	ori	r17,r17,8
 800d4e4:	1805883a 	mov	r2,r3
 800d4e8:	1c000007 	ldb	r16,0(r3)
 800d4ec:	003ddb06 	br	800cc5c <__alt_data_end+0xfc00cc5c>
 800d4f0:	d8c02915 	stw	r3,164(sp)
 800d4f4:	d9802785 	stb	r6,158(sp)
 800d4f8:	8880080c 	andi	r2,r17,32
 800d4fc:	d8c02d17 	ldw	r3,180(sp)
 800d500:	103e871e 	bne	r2,zero,800cf20 <__alt_data_end+0xfc00cf20>
 800d504:	8880040c 	andi	r2,r17,16
 800d508:	10027a1e 	bne	r2,zero,800def4 <___svfprintf_internal_r+0x13f0>
 800d50c:	8880100c 	andi	r2,r17,64
 800d510:	10027826 	beq	r2,zero,800def4 <___svfprintf_internal_r+0x13f0>
 800d514:	1cc0000f 	ldh	r19,0(r3)
 800d518:	db002d17 	ldw	r12,180(sp)
 800d51c:	9839d7fa 	srai	fp,r19,31
 800d520:	63000104 	addi	r12,r12,4
 800d524:	db002d15 	stw	r12,180(sp)
 800d528:	e005883a 	mov	r2,fp
 800d52c:	103e830e 	bge	r2,zero,800cf3c <__alt_data_end+0xfc00cf3c>
 800d530:	04e7c83a 	sub	r19,zero,r19
 800d534:	9804c03a 	cmpne	r2,r19,zero
 800d538:	0739c83a 	sub	fp,zero,fp
 800d53c:	e0b9c83a 	sub	fp,fp,r2
 800d540:	05400b44 	movi	r21,45
 800d544:	dd402785 	stb	r21,158(sp)
 800d548:	da403215 	stw	r9,200(sp)
 800d54c:	00800044 	movi	r2,1
 800d550:	9f06b03a 	or	r3,r19,fp
 800d554:	003e7d06 	br	800cf4c <__alt_data_end+0xfc00cf4c>
 800d558:	8c401014 	ori	r17,r17,64
 800d55c:	1805883a 	mov	r2,r3
 800d560:	1c000007 	ldb	r16,0(r3)
 800d564:	003dbd06 	br	800cc5c <__alt_data_end+0xfc00cc5c>
 800d568:	1c000007 	ldb	r16,0(r3)
 800d56c:	81c37126 	beq	r16,r7,800e334 <___svfprintf_internal_r+0x1830>
 800d570:	8c400414 	ori	r17,r17,16
 800d574:	1805883a 	mov	r2,r3
 800d578:	003db806 	br	800cc5c <__alt_data_end+0xfc00cc5c>
 800d57c:	d8c02915 	stw	r3,164(sp)
 800d580:	d9802785 	stb	r6,158(sp)
 800d584:	8880080c 	andi	r2,r17,32
 800d588:	1002f026 	beq	r2,zero,800e14c <___svfprintf_internal_r+0x1648>
 800d58c:	db002d17 	ldw	r12,180(sp)
 800d590:	dac03017 	ldw	r11,192(sp)
 800d594:	60800017 	ldw	r2,0(r12)
 800d598:	5807d7fa 	srai	r3,r11,31
 800d59c:	63000104 	addi	r12,r12,4
 800d5a0:	db002d15 	stw	r12,180(sp)
 800d5a4:	12c00015 	stw	r11,0(r2)
 800d5a8:	10c00115 	stw	r3,4(r2)
 800d5ac:	003d8106 	br	800cbb4 <__alt_data_end+0xfc00cbb4>
 800d5b0:	30803fcc 	andi	r2,r6,255
 800d5b4:	1080201c 	xori	r2,r2,128
 800d5b8:	10bfe004 	addi	r2,r2,-128
 800d5bc:	1002fd1e 	bne	r2,zero,800e1b4 <___svfprintf_internal_r+0x16b0>
 800d5c0:	1805883a 	mov	r2,r3
 800d5c4:	01800804 	movi	r6,32
 800d5c8:	1c000007 	ldb	r16,0(r3)
 800d5cc:	003da306 	br	800cc5c <__alt_data_end+0xfc00cc5c>
 800d5d0:	030200b4 	movhi	r12,2050
 800d5d4:	631c9104 	addi	r12,r12,29252
 800d5d8:	d8c02915 	stw	r3,164(sp)
 800d5dc:	d9802785 	stb	r6,158(sp)
 800d5e0:	db003b15 	stw	r12,236(sp)
 800d5e4:	88c0080c 	andi	r3,r17,32
 800d5e8:	d8802d17 	ldw	r2,180(sp)
 800d5ec:	18005c26 	beq	r3,zero,800d760 <___svfprintf_internal_r+0xc5c>
 800d5f0:	dac02d17 	ldw	r11,180(sp)
 800d5f4:	14c00017 	ldw	r19,0(r2)
 800d5f8:	17000117 	ldw	fp,4(r2)
 800d5fc:	5ac00204 	addi	r11,r11,8
 800d600:	dac02d15 	stw	r11,180(sp)
 800d604:	8880004c 	andi	r2,r17,1
 800d608:	10022f26 	beq	r2,zero,800dec8 <___svfprintf_internal_r+0x13c4>
 800d60c:	9f06b03a 	or	r3,r19,fp
 800d610:	1802eb26 	beq	r3,zero,800e1c0 <___svfprintf_internal_r+0x16bc>
 800d614:	00800c04 	movi	r2,48
 800d618:	d8802705 	stb	r2,156(sp)
 800d61c:	dc002745 	stb	r16,157(sp)
 800d620:	8c400094 	ori	r17,r17,2
 800d624:	00800084 	movi	r2,2
 800d628:	003f6206 	br	800d3b4 <__alt_data_end+0xfc00d3b4>
 800d62c:	dac02d17 	ldw	r11,180(sp)
 800d630:	db002d17 	ldw	r12,180(sp)
 800d634:	d8c02915 	stw	r3,164(sp)
 800d638:	5ac00017 	ldw	r11,0(r11)
 800d63c:	d8002785 	stb	zero,158(sp)
 800d640:	64c00104 	addi	r19,r12,4
 800d644:	dac03115 	stw	r11,196(sp)
 800d648:	58042e26 	beq	r11,zero,800e704 <___svfprintf_internal_r+0x1c00>
 800d64c:	d9003117 	ldw	r4,196(sp)
 800d650:	4803c416 	blt	r9,zero,800e564 <___svfprintf_internal_r+0x1a60>
 800d654:	480d883a 	mov	r6,r9
 800d658:	000b883a 	mov	r5,zero
 800d65c:	da004015 	stw	r8,256(sp)
 800d660:	da403f15 	stw	r9,252(sp)
 800d664:	80137f80 	call	80137f8 <memchr>
 800d668:	da004017 	ldw	r8,256(sp)
 800d66c:	da403f17 	ldw	r9,252(sp)
 800d670:	10048a26 	beq	r2,zero,800e89c <___svfprintf_internal_r+0x1d98>
 800d674:	d8c03117 	ldw	r3,196(sp)
 800d678:	10e5c83a 	sub	r18,r2,r3
 800d67c:	4c80010e 	bge	r9,r18,800d684 <___svfprintf_internal_r+0xb80>
 800d680:	4825883a 	mov	r18,r9
 800d684:	9005883a 	mov	r2,r18
 800d688:	9003bb16 	blt	r18,zero,800e578 <___svfprintf_internal_r+0x1a74>
 800d68c:	dd402783 	ldbu	r21,158(sp)
 800d690:	d8802a15 	stw	r2,168(sp)
 800d694:	dcc02d15 	stw	r19,180(sp)
 800d698:	d8003215 	stw	zero,200(sp)
 800d69c:	d8003415 	stw	zero,208(sp)
 800d6a0:	003e5106 	br	800cfe8 <__alt_data_end+0xfc00cfe8>
 800d6a4:	8c400814 	ori	r17,r17,32
 800d6a8:	1805883a 	mov	r2,r3
 800d6ac:	1c000007 	ldb	r16,0(r3)
 800d6b0:	003d6a06 	br	800cc5c <__alt_data_end+0xfc00cc5c>
 800d6b4:	db002d17 	ldw	r12,180(sp)
 800d6b8:	d8c02915 	stw	r3,164(sp)
 800d6bc:	dac01404 	addi	r11,sp,80
 800d6c0:	60800017 	ldw	r2,0(r12)
 800d6c4:	00c00044 	movi	r3,1
 800d6c8:	63000104 	addi	r12,r12,4
 800d6cc:	d8801405 	stb	r2,80(sp)
 800d6d0:	d8c02a15 	stw	r3,168(sp)
 800d6d4:	d8002785 	stb	zero,158(sp)
 800d6d8:	db002d15 	stw	r12,180(sp)
 800d6dc:	1825883a 	mov	r18,r3
 800d6e0:	d8003215 	stw	zero,200(sp)
 800d6e4:	d8003415 	stw	zero,208(sp)
 800d6e8:	dac03115 	stw	r11,196(sp)
 800d6ec:	0005883a 	mov	r2,zero
 800d6f0:	003e4406 	br	800d004 <__alt_data_end+0xfc00d004>
 800d6f4:	dac02d17 	ldw	r11,180(sp)
 800d6f8:	db002d17 	ldw	r12,180(sp)
 800d6fc:	5ac00017 	ldw	r11,0(r11)
 800d700:	dac02e15 	stw	r11,184(sp)
 800d704:	62c00104 	addi	r11,r12,4
 800d708:	db002e17 	ldw	r12,184(sp)
 800d70c:	60030316 	blt	r12,zero,800e31c <___svfprintf_internal_r+0x1818>
 800d710:	dac02d15 	stw	r11,180(sp)
 800d714:	1805883a 	mov	r2,r3
 800d718:	1c000007 	ldb	r16,0(r3)
 800d71c:	003d4f06 	br	800cc5c <__alt_data_end+0xfc00cc5c>
 800d720:	1805883a 	mov	r2,r3
 800d724:	01800ac4 	movi	r6,43
 800d728:	1c000007 	ldb	r16,0(r3)
 800d72c:	003d4b06 	br	800cc5c <__alt_data_end+0xfc00cc5c>
 800d730:	8c400054 	ori	r17,r17,1
 800d734:	1805883a 	mov	r2,r3
 800d738:	1c000007 	ldb	r16,0(r3)
 800d73c:	003d4706 	br	800cc5c <__alt_data_end+0xfc00cc5c>
 800d740:	008200b4 	movhi	r2,2050
 800d744:	109c9604 	addi	r2,r2,29272
 800d748:	d8c02915 	stw	r3,164(sp)
 800d74c:	d8803b15 	stw	r2,236(sp)
 800d750:	d9802785 	stb	r6,158(sp)
 800d754:	88c0080c 	andi	r3,r17,32
 800d758:	d8802d17 	ldw	r2,180(sp)
 800d75c:	183fa41e 	bne	r3,zero,800d5f0 <__alt_data_end+0xfc00d5f0>
 800d760:	88c0040c 	andi	r3,r17,16
 800d764:	18028b26 	beq	r3,zero,800e194 <___svfprintf_internal_r+0x1690>
 800d768:	db002d17 	ldw	r12,180(sp)
 800d76c:	14c00017 	ldw	r19,0(r2)
 800d770:	0039883a 	mov	fp,zero
 800d774:	63000104 	addi	r12,r12,4
 800d778:	db002d15 	stw	r12,180(sp)
 800d77c:	003fa106 	br	800d604 <__alt_data_end+0xfc00d604>
 800d780:	d8c02915 	stw	r3,164(sp)
 800d784:	8880080c 	andi	r2,r17,32
 800d788:	103f121e 	bne	r2,zero,800d3d4 <__alt_data_end+0xfc00d3d4>
 800d78c:	8880040c 	andi	r2,r17,16
 800d790:	1001df1e 	bne	r2,zero,800df10 <___svfprintf_internal_r+0x140c>
 800d794:	8880100c 	andi	r2,r17,64
 800d798:	1001dd26 	beq	r2,zero,800df10 <___svfprintf_internal_r+0x140c>
 800d79c:	dac02d17 	ldw	r11,180(sp)
 800d7a0:	0039883a 	mov	fp,zero
 800d7a4:	00800044 	movi	r2,1
 800d7a8:	5cc0000b 	ldhu	r19,0(r11)
 800d7ac:	5ac00104 	addi	r11,r11,4
 800d7b0:	dac02d15 	stw	r11,180(sp)
 800d7b4:	9807883a 	mov	r3,r19
 800d7b8:	003efe06 	br	800d3b4 <__alt_data_end+0xfc00d3b4>
 800d7bc:	d8c02915 	stw	r3,164(sp)
 800d7c0:	8880080c 	andi	r2,r17,32
 800d7c4:	103ef41e 	bne	r2,zero,800d398 <__alt_data_end+0xfc00d398>
 800d7c8:	8880040c 	andi	r2,r17,16
 800d7cc:	1001c11e 	bne	r2,zero,800ded4 <___svfprintf_internal_r+0x13d0>
 800d7d0:	8880100c 	andi	r2,r17,64
 800d7d4:	1001bf26 	beq	r2,zero,800ded4 <___svfprintf_internal_r+0x13d0>
 800d7d8:	db002d17 	ldw	r12,180(sp)
 800d7dc:	0039883a 	mov	fp,zero
 800d7e0:	0005883a 	mov	r2,zero
 800d7e4:	64c0000b 	ldhu	r19,0(r12)
 800d7e8:	63000104 	addi	r12,r12,4
 800d7ec:	db002d15 	stw	r12,180(sp)
 800d7f0:	9807883a 	mov	r3,r19
 800d7f4:	003eef06 	br	800d3b4 <__alt_data_end+0xfc00d3b4>
 800d7f8:	d8c02915 	stw	r3,164(sp)
 800d7fc:	d9802785 	stb	r6,158(sp)
 800d800:	803d8226 	beq	r16,zero,800ce0c <__alt_data_end+0xfc00ce0c>
 800d804:	02c00044 	movi	r11,1
 800d808:	db001404 	addi	r12,sp,80
 800d80c:	dac02a15 	stw	r11,168(sp)
 800d810:	dc001405 	stb	r16,80(sp)
 800d814:	d8002785 	stb	zero,158(sp)
 800d818:	5825883a 	mov	r18,r11
 800d81c:	d8003215 	stw	zero,200(sp)
 800d820:	d8003415 	stw	zero,208(sp)
 800d824:	db003115 	stw	r12,196(sp)
 800d828:	0005883a 	mov	r2,zero
 800d82c:	003df506 	br	800d004 <__alt_data_end+0xfc00d004>
 800d830:	d8c02017 	ldw	r3,128(sp)
 800d834:	003e3606 	br	800d110 <__alt_data_end+0xfc00d110>
 800d838:	10803fcc 	andi	r2,r2,255
 800d83c:	00c00044 	movi	r3,1
 800d840:	10fdca1e 	bne	r2,r3,800cf6c <__alt_data_end+0xfc00cf6c>
 800d844:	e000021e 	bne	fp,zero,800d850 <___svfprintf_internal_r+0xd4c>
 800d848:	00800244 	movi	r2,9
 800d84c:	14c01f2e 	bgeu	r2,r19,800d8cc <___svfprintf_internal_r+0xdc8>
 800d850:	dc002a15 	stw	r16,168(sp)
 800d854:	dc402b15 	stw	r17,172(sp)
 800d858:	9821883a 	mov	r16,r19
 800d85c:	e023883a 	mov	r17,fp
 800d860:	b025883a 	mov	r18,r22
 800d864:	4027883a 	mov	r19,r8
 800d868:	4839883a 	mov	fp,r9
 800d86c:	8009883a 	mov	r4,r16
 800d870:	880b883a 	mov	r5,r17
 800d874:	01800284 	movi	r6,10
 800d878:	000f883a 	mov	r7,zero
 800d87c:	8018a780 	call	8018a78 <__umoddi3>
 800d880:	10800c04 	addi	r2,r2,48
 800d884:	94bfffc4 	addi	r18,r18,-1
 800d888:	8009883a 	mov	r4,r16
 800d88c:	880b883a 	mov	r5,r17
 800d890:	01800284 	movi	r6,10
 800d894:	000f883a 	mov	r7,zero
 800d898:	90800005 	stb	r2,0(r18)
 800d89c:	80184b80 	call	80184b8 <__udivdi3>
 800d8a0:	1021883a 	mov	r16,r2
 800d8a4:	10c4b03a 	or	r2,r2,r3
 800d8a8:	1823883a 	mov	r17,r3
 800d8ac:	103fef1e 	bne	r2,zero,800d86c <__alt_data_end+0xfc00d86c>
 800d8b0:	dc803115 	stw	r18,196(sp)
 800d8b4:	dc002a17 	ldw	r16,168(sp)
 800d8b8:	9811883a 	mov	r8,r19
 800d8bc:	dc402b17 	ldw	r17,172(sp)
 800d8c0:	e013883a 	mov	r9,fp
 800d8c4:	b4a5c83a 	sub	r18,r22,r18
 800d8c8:	003dc206 	br	800cfd4 <__alt_data_end+0xfc00cfd4>
 800d8cc:	9cc00c04 	addi	r19,r19,48
 800d8d0:	db001dc4 	addi	r12,sp,119
 800d8d4:	dcc01dc5 	stb	r19,119(sp)
 800d8d8:	dc803d17 	ldw	r18,244(sp)
 800d8dc:	db003115 	stw	r12,196(sp)
 800d8e0:	003dbc06 	br	800cfd4 <__alt_data_end+0xfc00cfd4>
 800d8e4:	00801944 	movi	r2,101
 800d8e8:	14008d0e 	bge	r2,r16,800db20 <___svfprintf_internal_r+0x101c>
 800d8ec:	d9003717 	ldw	r4,220(sp)
 800d8f0:	d9403817 	ldw	r5,224(sp)
 800d8f4:	000d883a 	mov	r6,zero
 800d8f8:	000f883a 	mov	r7,zero
 800d8fc:	d8c03e15 	stw	r3,248(sp)
 800d900:	da004015 	stw	r8,256(sp)
 800d904:	800a3680 	call	800a368 <__eqdf2>
 800d908:	d8c03e17 	ldw	r3,248(sp)
 800d90c:	da004017 	ldw	r8,256(sp)
 800d910:	1000fd1e 	bne	r2,zero,800dd08 <___svfprintf_internal_r+0x1204>
 800d914:	d8801f17 	ldw	r2,124(sp)
 800d918:	010200b4 	movhi	r4,2050
 800d91c:	211c9d04 	addi	r4,r4,29300
 800d920:	18c00044 	addi	r3,r3,1
 800d924:	10800044 	addi	r2,r2,1
 800d928:	41000015 	stw	r4,0(r8)
 800d92c:	01000044 	movi	r4,1
 800d930:	41000115 	stw	r4,4(r8)
 800d934:	d8c02015 	stw	r3,128(sp)
 800d938:	d8801f15 	stw	r2,124(sp)
 800d93c:	010001c4 	movi	r4,7
 800d940:	20823316 	blt	r4,r2,800e210 <___svfprintf_internal_r+0x170c>
 800d944:	42000204 	addi	r8,r8,8
 800d948:	d8802617 	ldw	r2,152(sp)
 800d94c:	dac03317 	ldw	r11,204(sp)
 800d950:	12c00216 	blt	r2,r11,800d95c <___svfprintf_internal_r+0xe58>
 800d954:	8880004c 	andi	r2,r17,1
 800d958:	103e4c26 	beq	r2,zero,800d28c <__alt_data_end+0xfc00d28c>
 800d95c:	db003917 	ldw	r12,228(sp)
 800d960:	d8801f17 	ldw	r2,124(sp)
 800d964:	dac03517 	ldw	r11,212(sp)
 800d968:	1b07883a 	add	r3,r3,r12
 800d96c:	10800044 	addi	r2,r2,1
 800d970:	42c00015 	stw	r11,0(r8)
 800d974:	43000115 	stw	r12,4(r8)
 800d978:	d8c02015 	stw	r3,128(sp)
 800d97c:	d8801f15 	stw	r2,124(sp)
 800d980:	010001c4 	movi	r4,7
 800d984:	20826f16 	blt	r4,r2,800e344 <___svfprintf_internal_r+0x1840>
 800d988:	42000204 	addi	r8,r8,8
 800d98c:	db003317 	ldw	r12,204(sp)
 800d990:	643fffc4 	addi	r16,r12,-1
 800d994:	043e3d0e 	bge	zero,r16,800d28c <__alt_data_end+0xfc00d28c>
 800d998:	04800404 	movi	r18,16
 800d99c:	d8801f17 	ldw	r2,124(sp)
 800d9a0:	94009a0e 	bge	r18,r16,800dc0c <___svfprintf_internal_r+0x1108>
 800d9a4:	014200b4 	movhi	r5,2050
 800d9a8:	295c9d84 	addi	r5,r5,29302
 800d9ac:	d9402b15 	stw	r5,172(sp)
 800d9b0:	054001c4 	movi	r21,7
 800d9b4:	dcc02f17 	ldw	r19,188(sp)
 800d9b8:	00000306 	br	800d9c8 <___svfprintf_internal_r+0xec4>
 800d9bc:	42000204 	addi	r8,r8,8
 800d9c0:	843ffc04 	addi	r16,r16,-16
 800d9c4:	9400940e 	bge	r18,r16,800dc18 <___svfprintf_internal_r+0x1114>
 800d9c8:	18c00404 	addi	r3,r3,16
 800d9cc:	10800044 	addi	r2,r2,1
 800d9d0:	45000015 	stw	r20,0(r8)
 800d9d4:	44800115 	stw	r18,4(r8)
 800d9d8:	d8c02015 	stw	r3,128(sp)
 800d9dc:	d8801f15 	stw	r2,124(sp)
 800d9e0:	a8bff60e 	bge	r21,r2,800d9bc <__alt_data_end+0xfc00d9bc>
 800d9e4:	9809883a 	mov	r4,r19
 800d9e8:	b80b883a 	mov	r5,r23
 800d9ec:	b00d883a 	mov	r6,r22
 800d9f0:	80155800 	call	8015580 <__ssprint_r>
 800d9f4:	103d0b1e 	bne	r2,zero,800ce24 <__alt_data_end+0xfc00ce24>
 800d9f8:	d8c02017 	ldw	r3,128(sp)
 800d9fc:	d8801f17 	ldw	r2,124(sp)
 800da00:	da000404 	addi	r8,sp,16
 800da04:	003fee06 	br	800d9c0 <__alt_data_end+0xfc00d9c0>
 800da08:	dac02e17 	ldw	r11,184(sp)
 800da0c:	db002a17 	ldw	r12,168(sp)
 800da10:	5b2bc83a 	sub	r21,r11,r12
 800da14:	057ddc0e 	bge	zero,r21,800d188 <__alt_data_end+0xfc00d188>
 800da18:	07000404 	movi	fp,16
 800da1c:	d8801f17 	ldw	r2,124(sp)
 800da20:	e5435d0e 	bge	fp,r21,800e798 <___svfprintf_internal_r+0x1c94>
 800da24:	014200b4 	movhi	r5,2050
 800da28:	a809883a 	mov	r4,r21
 800da2c:	295c9d84 	addi	r5,r5,29302
 800da30:	dc002c15 	stw	r16,176(sp)
 800da34:	902b883a 	mov	r21,r18
 800da38:	d9402b15 	stw	r5,172(sp)
 800da3c:	8825883a 	mov	r18,r17
 800da40:	04c001c4 	movi	r19,7
 800da44:	dc002f17 	ldw	r16,188(sp)
 800da48:	2023883a 	mov	r17,r4
 800da4c:	00000306 	br	800da5c <___svfprintf_internal_r+0xf58>
 800da50:	8c7ffc04 	addi	r17,r17,-16
 800da54:	42000204 	addi	r8,r8,8
 800da58:	e440110e 	bge	fp,r17,800daa0 <___svfprintf_internal_r+0xf9c>
 800da5c:	18c00404 	addi	r3,r3,16
 800da60:	10800044 	addi	r2,r2,1
 800da64:	45000015 	stw	r20,0(r8)
 800da68:	47000115 	stw	fp,4(r8)
 800da6c:	d8c02015 	stw	r3,128(sp)
 800da70:	d8801f15 	stw	r2,124(sp)
 800da74:	98bff60e 	bge	r19,r2,800da50 <__alt_data_end+0xfc00da50>
 800da78:	8009883a 	mov	r4,r16
 800da7c:	b80b883a 	mov	r5,r23
 800da80:	b00d883a 	mov	r6,r22
 800da84:	80155800 	call	8015580 <__ssprint_r>
 800da88:	103ce61e 	bne	r2,zero,800ce24 <__alt_data_end+0xfc00ce24>
 800da8c:	8c7ffc04 	addi	r17,r17,-16
 800da90:	d8c02017 	ldw	r3,128(sp)
 800da94:	d8801f17 	ldw	r2,124(sp)
 800da98:	da000404 	addi	r8,sp,16
 800da9c:	e47fef16 	blt	fp,r17,800da5c <__alt_data_end+0xfc00da5c>
 800daa0:	dc002c17 	ldw	r16,176(sp)
 800daa4:	8809883a 	mov	r4,r17
 800daa8:	9023883a 	mov	r17,r18
 800daac:	a825883a 	mov	r18,r21
 800dab0:	202b883a 	mov	r21,r4
 800dab4:	dac02b17 	ldw	r11,172(sp)
 800dab8:	1d47883a 	add	r3,r3,r21
 800dabc:	10800044 	addi	r2,r2,1
 800dac0:	42c00015 	stw	r11,0(r8)
 800dac4:	45400115 	stw	r21,4(r8)
 800dac8:	d8c02015 	stw	r3,128(sp)
 800dacc:	d8801f15 	stw	r2,124(sp)
 800dad0:	010001c4 	movi	r4,7
 800dad4:	20818016 	blt	r4,r2,800e0d8 <___svfprintf_internal_r+0x15d4>
 800dad8:	42000204 	addi	r8,r8,8
 800dadc:	003daa06 	br	800d188 <__alt_data_end+0xfc00d188>
 800dae0:	d9403b17 	ldw	r5,236(sp)
 800dae4:	b007883a 	mov	r3,r22
 800dae8:	988003cc 	andi	r2,r19,15
 800daec:	e008973a 	slli	r4,fp,28
 800daf0:	2885883a 	add	r2,r5,r2
 800daf4:	9826d13a 	srli	r19,r19,4
 800daf8:	10800003 	ldbu	r2,0(r2)
 800dafc:	e038d13a 	srli	fp,fp,4
 800db00:	18ffffc4 	addi	r3,r3,-1
 800db04:	24e6b03a 	or	r19,r4,r19
 800db08:	18800005 	stb	r2,0(r3)
 800db0c:	9f04b03a 	or	r2,r19,fp
 800db10:	103ff51e 	bne	r2,zero,800dae8 <__alt_data_end+0xfc00dae8>
 800db14:	d8c03115 	stw	r3,196(sp)
 800db18:	b0e5c83a 	sub	r18,r22,r3
 800db1c:	003d2d06 	br	800cfd4 <__alt_data_end+0xfc00cfd4>
 800db20:	db003317 	ldw	r12,204(sp)
 800db24:	00800044 	movi	r2,1
 800db28:	18c00044 	addi	r3,r3,1
 800db2c:	13014b0e 	bge	r2,r12,800e05c <___svfprintf_internal_r+0x1558>
 800db30:	dc001f17 	ldw	r16,124(sp)
 800db34:	dac03117 	ldw	r11,196(sp)
 800db38:	00800044 	movi	r2,1
 800db3c:	84000044 	addi	r16,r16,1
 800db40:	40800115 	stw	r2,4(r8)
 800db44:	42c00015 	stw	r11,0(r8)
 800db48:	d8c02015 	stw	r3,128(sp)
 800db4c:	dc001f15 	stw	r16,124(sp)
 800db50:	008001c4 	movi	r2,7
 800db54:	14014e16 	blt	r2,r16,800e090 <___svfprintf_internal_r+0x158c>
 800db58:	42000204 	addi	r8,r8,8
 800db5c:	db003917 	ldw	r12,228(sp)
 800db60:	dac03517 	ldw	r11,212(sp)
 800db64:	84000044 	addi	r16,r16,1
 800db68:	1b07883a 	add	r3,r3,r12
 800db6c:	42c00015 	stw	r11,0(r8)
 800db70:	43000115 	stw	r12,4(r8)
 800db74:	d8c02015 	stw	r3,128(sp)
 800db78:	dc001f15 	stw	r16,124(sp)
 800db7c:	008001c4 	movi	r2,7
 800db80:	14014c16 	blt	r2,r16,800e0b4 <___svfprintf_internal_r+0x15b0>
 800db84:	44800204 	addi	r18,r8,8
 800db88:	d9003717 	ldw	r4,220(sp)
 800db8c:	d9403817 	ldw	r5,224(sp)
 800db90:	000d883a 	mov	r6,zero
 800db94:	000f883a 	mov	r7,zero
 800db98:	d8c03e15 	stw	r3,248(sp)
 800db9c:	800a3680 	call	800a368 <__eqdf2>
 800dba0:	d8c03e17 	ldw	r3,248(sp)
 800dba4:	db003317 	ldw	r12,204(sp)
 800dba8:	10009526 	beq	r2,zero,800de00 <___svfprintf_internal_r+0x12fc>
 800dbac:	dac03117 	ldw	r11,196(sp)
 800dbb0:	60bfffc4 	addi	r2,r12,-1
 800dbb4:	1887883a 	add	r3,r3,r2
 800dbb8:	59000044 	addi	r4,r11,1
 800dbbc:	84000044 	addi	r16,r16,1
 800dbc0:	90800115 	stw	r2,4(r18)
 800dbc4:	91000015 	stw	r4,0(r18)
 800dbc8:	d8c02015 	stw	r3,128(sp)
 800dbcc:	dc001f15 	stw	r16,124(sp)
 800dbd0:	008001c4 	movi	r2,7
 800dbd4:	1400b316 	blt	r2,r16,800dea4 <___svfprintf_internal_r+0x13a0>
 800dbd8:	94800204 	addi	r18,r18,8
 800dbdc:	dac03a17 	ldw	r11,232(sp)
 800dbe0:	dd4022c4 	addi	r21,sp,139
 800dbe4:	84000044 	addi	r16,r16,1
 800dbe8:	58c7883a 	add	r3,r11,r3
 800dbec:	95400015 	stw	r21,0(r18)
 800dbf0:	92c00115 	stw	r11,4(r18)
 800dbf4:	d8c02015 	stw	r3,128(sp)
 800dbf8:	dc001f15 	stw	r16,124(sp)
 800dbfc:	008001c4 	movi	r2,7
 800dc00:	14000e16 	blt	r2,r16,800dc3c <___svfprintf_internal_r+0x1138>
 800dc04:	92000204 	addi	r8,r18,8
 800dc08:	003da006 	br	800d28c <__alt_data_end+0xfc00d28c>
 800dc0c:	010200b4 	movhi	r4,2050
 800dc10:	211c9d84 	addi	r4,r4,29302
 800dc14:	d9002b15 	stw	r4,172(sp)
 800dc18:	dac02b17 	ldw	r11,172(sp)
 800dc1c:	1c07883a 	add	r3,r3,r16
 800dc20:	44000115 	stw	r16,4(r8)
 800dc24:	42c00015 	stw	r11,0(r8)
 800dc28:	10800044 	addi	r2,r2,1
 800dc2c:	d8c02015 	stw	r3,128(sp)
 800dc30:	d8801f15 	stw	r2,124(sp)
 800dc34:	010001c4 	movi	r4,7
 800dc38:	20bd930e 	bge	r4,r2,800d288 <__alt_data_end+0xfc00d288>
 800dc3c:	d9002f17 	ldw	r4,188(sp)
 800dc40:	b80b883a 	mov	r5,r23
 800dc44:	b00d883a 	mov	r6,r22
 800dc48:	80155800 	call	8015580 <__ssprint_r>
 800dc4c:	103c751e 	bne	r2,zero,800ce24 <__alt_data_end+0xfc00ce24>
 800dc50:	d8c02017 	ldw	r3,128(sp)
 800dc54:	da000404 	addi	r8,sp,16
 800dc58:	003d8c06 	br	800d28c <__alt_data_end+0xfc00d28c>
 800dc5c:	d9002f17 	ldw	r4,188(sp)
 800dc60:	b80b883a 	mov	r5,r23
 800dc64:	b00d883a 	mov	r6,r22
 800dc68:	80155800 	call	8015580 <__ssprint_r>
 800dc6c:	103dc326 	beq	r2,zero,800d37c <__alt_data_end+0xfc00d37c>
 800dc70:	003c6c06 	br	800ce24 <__alt_data_end+0xfc00ce24>
 800dc74:	10803fcc 	andi	r2,r2,255
 800dc78:	1000201e 	bne	r2,zero,800dcfc <___svfprintf_internal_r+0x11f8>
 800dc7c:	8880004c 	andi	r2,r17,1
 800dc80:	10001e26 	beq	r2,zero,800dcfc <___svfprintf_internal_r+0x11f8>
 800dc84:	00800c04 	movi	r2,48
 800dc88:	d8c01dc4 	addi	r3,sp,119
 800dc8c:	d8801dc5 	stb	r2,119(sp)
 800dc90:	dc803d17 	ldw	r18,244(sp)
 800dc94:	d8c03115 	stw	r3,196(sp)
 800dc98:	003cce06 	br	800cfd4 <__alt_data_end+0xfc00cfd4>
 800dc9c:	d9002f17 	ldw	r4,188(sp)
 800dca0:	b80b883a 	mov	r5,r23
 800dca4:	b00d883a 	mov	r6,r22
 800dca8:	80155800 	call	8015580 <__ssprint_r>
 800dcac:	103c5d1e 	bne	r2,zero,800ce24 <__alt_data_end+0xfc00ce24>
 800dcb0:	d8c02017 	ldw	r3,128(sp)
 800dcb4:	da000404 	addi	r8,sp,16
 800dcb8:	003d6706 	br	800d258 <__alt_data_end+0xfc00d258>
 800dcbc:	d9002f17 	ldw	r4,188(sp)
 800dcc0:	b80b883a 	mov	r5,r23
 800dcc4:	b00d883a 	mov	r6,r22
 800dcc8:	80155800 	call	8015580 <__ssprint_r>
 800dccc:	103c551e 	bne	r2,zero,800ce24 <__alt_data_end+0xfc00ce24>
 800dcd0:	d8c02017 	ldw	r3,128(sp)
 800dcd4:	da000404 	addi	r8,sp,16
 800dcd8:	003d1a06 	br	800d144 <__alt_data_end+0xfc00d144>
 800dcdc:	d9002f17 	ldw	r4,188(sp)
 800dce0:	b80b883a 	mov	r5,r23
 800dce4:	b00d883a 	mov	r6,r22
 800dce8:	80155800 	call	8015580 <__ssprint_r>
 800dcec:	103c4d1e 	bne	r2,zero,800ce24 <__alt_data_end+0xfc00ce24>
 800dcf0:	d8c02017 	ldw	r3,128(sp)
 800dcf4:	da000404 	addi	r8,sp,16
 800dcf8:	003d2006 	br	800d17c <__alt_data_end+0xfc00d17c>
 800dcfc:	0025883a 	mov	r18,zero
 800dd00:	dd803115 	stw	r22,196(sp)
 800dd04:	003cb306 	br	800cfd4 <__alt_data_end+0xfc00cfd4>
 800dd08:	dc002617 	ldw	r16,152(sp)
 800dd0c:	0401480e 	bge	zero,r16,800e230 <___svfprintf_internal_r+0x172c>
 800dd10:	db003117 	ldw	r12,196(sp)
 800dd14:	dac03317 	ldw	r11,204(sp)
 800dd18:	62e1883a 	add	r16,r12,r11
 800dd1c:	db003417 	ldw	r12,208(sp)
 800dd20:	5825883a 	mov	r18,r11
 800dd24:	62c0010e 	bge	r12,r11,800dd2c <___svfprintf_internal_r+0x1228>
 800dd28:	6025883a 	mov	r18,r12
 800dd2c:	04800b0e 	bge	zero,r18,800dd5c <___svfprintf_internal_r+0x1258>
 800dd30:	d8801f17 	ldw	r2,124(sp)
 800dd34:	dac03117 	ldw	r11,196(sp)
 800dd38:	1c87883a 	add	r3,r3,r18
 800dd3c:	10800044 	addi	r2,r2,1
 800dd40:	42c00015 	stw	r11,0(r8)
 800dd44:	44800115 	stw	r18,4(r8)
 800dd48:	d8c02015 	stw	r3,128(sp)
 800dd4c:	d8801f15 	stw	r2,124(sp)
 800dd50:	010001c4 	movi	r4,7
 800dd54:	20823f16 	blt	r4,r2,800e654 <___svfprintf_internal_r+0x1b50>
 800dd58:	42000204 	addi	r8,r8,8
 800dd5c:	90023b16 	blt	r18,zero,800e64c <___svfprintf_internal_r+0x1b48>
 800dd60:	db003417 	ldw	r12,208(sp)
 800dd64:	64a5c83a 	sub	r18,r12,r18
 800dd68:	0480780e 	bge	zero,r18,800df4c <___svfprintf_internal_r+0x1448>
 800dd6c:	05400404 	movi	r21,16
 800dd70:	d8801f17 	ldw	r2,124(sp)
 800dd74:	ac81140e 	bge	r21,r18,800e1c8 <___svfprintf_internal_r+0x16c4>
 800dd78:	014200b4 	movhi	r5,2050
 800dd7c:	295c9d84 	addi	r5,r5,29302
 800dd80:	d9402b15 	stw	r5,172(sp)
 800dd84:	070001c4 	movi	fp,7
 800dd88:	dcc02f17 	ldw	r19,188(sp)
 800dd8c:	00000306 	br	800dd9c <___svfprintf_internal_r+0x1298>
 800dd90:	42000204 	addi	r8,r8,8
 800dd94:	94bffc04 	addi	r18,r18,-16
 800dd98:	ac810e0e 	bge	r21,r18,800e1d4 <___svfprintf_internal_r+0x16d0>
 800dd9c:	18c00404 	addi	r3,r3,16
 800dda0:	10800044 	addi	r2,r2,1
 800dda4:	45000015 	stw	r20,0(r8)
 800dda8:	45400115 	stw	r21,4(r8)
 800ddac:	d8c02015 	stw	r3,128(sp)
 800ddb0:	d8801f15 	stw	r2,124(sp)
 800ddb4:	e0bff60e 	bge	fp,r2,800dd90 <__alt_data_end+0xfc00dd90>
 800ddb8:	9809883a 	mov	r4,r19
 800ddbc:	b80b883a 	mov	r5,r23
 800ddc0:	b00d883a 	mov	r6,r22
 800ddc4:	80155800 	call	8015580 <__ssprint_r>
 800ddc8:	103c161e 	bne	r2,zero,800ce24 <__alt_data_end+0xfc00ce24>
 800ddcc:	d8c02017 	ldw	r3,128(sp)
 800ddd0:	d8801f17 	ldw	r2,124(sp)
 800ddd4:	da000404 	addi	r8,sp,16
 800ddd8:	003fee06 	br	800dd94 <__alt_data_end+0xfc00dd94>
 800dddc:	d9002f17 	ldw	r4,188(sp)
 800dde0:	b80b883a 	mov	r5,r23
 800dde4:	b00d883a 	mov	r6,r22
 800dde8:	80155800 	call	8015580 <__ssprint_r>
 800ddec:	103c0d1e 	bne	r2,zero,800ce24 <__alt_data_end+0xfc00ce24>
 800ddf0:	d8c02017 	ldw	r3,128(sp)
 800ddf4:	d8802787 	ldb	r2,158(sp)
 800ddf8:	da000404 	addi	r8,sp,16
 800ddfc:	003cc406 	br	800d110 <__alt_data_end+0xfc00d110>
 800de00:	657fffc4 	addi	r21,r12,-1
 800de04:	057f750e 	bge	zero,r21,800dbdc <__alt_data_end+0xfc00dbdc>
 800de08:	07000404 	movi	fp,16
 800de0c:	e542ef0e 	bge	fp,r21,800e9cc <___svfprintf_internal_r+0x1ec8>
 800de10:	010200b4 	movhi	r4,2050
 800de14:	211c9d84 	addi	r4,r4,29302
 800de18:	d9002b15 	stw	r4,172(sp)
 800de1c:	01c001c4 	movi	r7,7
 800de20:	dcc02f17 	ldw	r19,188(sp)
 800de24:	00000306 	br	800de34 <___svfprintf_internal_r+0x1330>
 800de28:	ad7ffc04 	addi	r21,r21,-16
 800de2c:	94800204 	addi	r18,r18,8
 800de30:	e540130e 	bge	fp,r21,800de80 <___svfprintf_internal_r+0x137c>
 800de34:	18c00404 	addi	r3,r3,16
 800de38:	84000044 	addi	r16,r16,1
 800de3c:	95000015 	stw	r20,0(r18)
 800de40:	97000115 	stw	fp,4(r18)
 800de44:	d8c02015 	stw	r3,128(sp)
 800de48:	dc001f15 	stw	r16,124(sp)
 800de4c:	3c3ff60e 	bge	r7,r16,800de28 <__alt_data_end+0xfc00de28>
 800de50:	9809883a 	mov	r4,r19
 800de54:	b80b883a 	mov	r5,r23
 800de58:	b00d883a 	mov	r6,r22
 800de5c:	d9c03e15 	stw	r7,248(sp)
 800de60:	80155800 	call	8015580 <__ssprint_r>
 800de64:	d9c03e17 	ldw	r7,248(sp)
 800de68:	103bee1e 	bne	r2,zero,800ce24 <__alt_data_end+0xfc00ce24>
 800de6c:	ad7ffc04 	addi	r21,r21,-16
 800de70:	d8c02017 	ldw	r3,128(sp)
 800de74:	dc001f17 	ldw	r16,124(sp)
 800de78:	dc800404 	addi	r18,sp,16
 800de7c:	e57fed16 	blt	fp,r21,800de34 <__alt_data_end+0xfc00de34>
 800de80:	dac02b17 	ldw	r11,172(sp)
 800de84:	1d47883a 	add	r3,r3,r21
 800de88:	84000044 	addi	r16,r16,1
 800de8c:	92c00015 	stw	r11,0(r18)
 800de90:	95400115 	stw	r21,4(r18)
 800de94:	d8c02015 	stw	r3,128(sp)
 800de98:	dc001f15 	stw	r16,124(sp)
 800de9c:	008001c4 	movi	r2,7
 800dea0:	143f4d0e 	bge	r2,r16,800dbd8 <__alt_data_end+0xfc00dbd8>
 800dea4:	d9002f17 	ldw	r4,188(sp)
 800dea8:	b80b883a 	mov	r5,r23
 800deac:	b00d883a 	mov	r6,r22
 800deb0:	80155800 	call	8015580 <__ssprint_r>
 800deb4:	103bdb1e 	bne	r2,zero,800ce24 <__alt_data_end+0xfc00ce24>
 800deb8:	d8c02017 	ldw	r3,128(sp)
 800debc:	dc001f17 	ldw	r16,124(sp)
 800dec0:	dc800404 	addi	r18,sp,16
 800dec4:	003f4506 	br	800dbdc <__alt_data_end+0xfc00dbdc>
 800dec8:	00800084 	movi	r2,2
 800decc:	9f06b03a 	or	r3,r19,fp
 800ded0:	003d3806 	br	800d3b4 <__alt_data_end+0xfc00d3b4>
 800ded4:	dac02d17 	ldw	r11,180(sp)
 800ded8:	0039883a 	mov	fp,zero
 800dedc:	0005883a 	mov	r2,zero
 800dee0:	5cc00017 	ldw	r19,0(r11)
 800dee4:	5ac00104 	addi	r11,r11,4
 800dee8:	dac02d15 	stw	r11,180(sp)
 800deec:	9807883a 	mov	r3,r19
 800def0:	003d3006 	br	800d3b4 <__alt_data_end+0xfc00d3b4>
 800def4:	1cc00017 	ldw	r19,0(r3)
 800def8:	dac02d17 	ldw	r11,180(sp)
 800defc:	9839d7fa 	srai	fp,r19,31
 800df00:	5ac00104 	addi	r11,r11,4
 800df04:	dac02d15 	stw	r11,180(sp)
 800df08:	e005883a 	mov	r2,fp
 800df0c:	003c0a06 	br	800cf38 <__alt_data_end+0xfc00cf38>
 800df10:	db002d17 	ldw	r12,180(sp)
 800df14:	0039883a 	mov	fp,zero
 800df18:	00800044 	movi	r2,1
 800df1c:	64c00017 	ldw	r19,0(r12)
 800df20:	63000104 	addi	r12,r12,4
 800df24:	db002d15 	stw	r12,180(sp)
 800df28:	9807883a 	mov	r3,r19
 800df2c:	003d2106 	br	800d3b4 <__alt_data_end+0xfc00d3b4>
 800df30:	d9002f17 	ldw	r4,188(sp)
 800df34:	b80b883a 	mov	r5,r23
 800df38:	b00d883a 	mov	r6,r22
 800df3c:	80155800 	call	8015580 <__ssprint_r>
 800df40:	103bb81e 	bne	r2,zero,800ce24 <__alt_data_end+0xfc00ce24>
 800df44:	d8c02017 	ldw	r3,128(sp)
 800df48:	da000404 	addi	r8,sp,16
 800df4c:	db003117 	ldw	r12,196(sp)
 800df50:	dac03417 	ldw	r11,208(sp)
 800df54:	d8802617 	ldw	r2,152(sp)
 800df58:	62e5883a 	add	r18,r12,r11
 800df5c:	db003317 	ldw	r12,204(sp)
 800df60:	13000216 	blt	r2,r12,800df6c <___svfprintf_internal_r+0x1468>
 800df64:	8900004c 	andi	r4,r17,1
 800df68:	20000c26 	beq	r4,zero,800df9c <___svfprintf_internal_r+0x1498>
 800df6c:	dac03917 	ldw	r11,228(sp)
 800df70:	d9001f17 	ldw	r4,124(sp)
 800df74:	db003517 	ldw	r12,212(sp)
 800df78:	1ac7883a 	add	r3,r3,r11
 800df7c:	21000044 	addi	r4,r4,1
 800df80:	43000015 	stw	r12,0(r8)
 800df84:	42c00115 	stw	r11,4(r8)
 800df88:	d8c02015 	stw	r3,128(sp)
 800df8c:	d9001f15 	stw	r4,124(sp)
 800df90:	014001c4 	movi	r5,7
 800df94:	2901b716 	blt	r5,r4,800e674 <___svfprintf_internal_r+0x1b70>
 800df98:	42000204 	addi	r8,r8,8
 800df9c:	dac03317 	ldw	r11,204(sp)
 800dfa0:	8489c83a 	sub	r4,r16,r18
 800dfa4:	5885c83a 	sub	r2,r11,r2
 800dfa8:	1021883a 	mov	r16,r2
 800dfac:	2080010e 	bge	r4,r2,800dfb4 <___svfprintf_internal_r+0x14b0>
 800dfb0:	2021883a 	mov	r16,r4
 800dfb4:	04000a0e 	bge	zero,r16,800dfe0 <___svfprintf_internal_r+0x14dc>
 800dfb8:	d9001f17 	ldw	r4,124(sp)
 800dfbc:	1c07883a 	add	r3,r3,r16
 800dfc0:	44800015 	stw	r18,0(r8)
 800dfc4:	21000044 	addi	r4,r4,1
 800dfc8:	44000115 	stw	r16,4(r8)
 800dfcc:	d8c02015 	stw	r3,128(sp)
 800dfd0:	d9001f15 	stw	r4,124(sp)
 800dfd4:	014001c4 	movi	r5,7
 800dfd8:	2901bf16 	blt	r5,r4,800e6d8 <___svfprintf_internal_r+0x1bd4>
 800dfdc:	42000204 	addi	r8,r8,8
 800dfe0:	8001bb16 	blt	r16,zero,800e6d0 <___svfprintf_internal_r+0x1bcc>
 800dfe4:	1421c83a 	sub	r16,r2,r16
 800dfe8:	043ca80e 	bge	zero,r16,800d28c <__alt_data_end+0xfc00d28c>
 800dfec:	04800404 	movi	r18,16
 800dff0:	d8801f17 	ldw	r2,124(sp)
 800dff4:	943f050e 	bge	r18,r16,800dc0c <__alt_data_end+0xfc00dc0c>
 800dff8:	014200b4 	movhi	r5,2050
 800dffc:	295c9d84 	addi	r5,r5,29302
 800e000:	d9402b15 	stw	r5,172(sp)
 800e004:	054001c4 	movi	r21,7
 800e008:	dcc02f17 	ldw	r19,188(sp)
 800e00c:	00000306 	br	800e01c <___svfprintf_internal_r+0x1518>
 800e010:	42000204 	addi	r8,r8,8
 800e014:	843ffc04 	addi	r16,r16,-16
 800e018:	943eff0e 	bge	r18,r16,800dc18 <__alt_data_end+0xfc00dc18>
 800e01c:	18c00404 	addi	r3,r3,16
 800e020:	10800044 	addi	r2,r2,1
 800e024:	45000015 	stw	r20,0(r8)
 800e028:	44800115 	stw	r18,4(r8)
 800e02c:	d8c02015 	stw	r3,128(sp)
 800e030:	d8801f15 	stw	r2,124(sp)
 800e034:	a8bff60e 	bge	r21,r2,800e010 <__alt_data_end+0xfc00e010>
 800e038:	9809883a 	mov	r4,r19
 800e03c:	b80b883a 	mov	r5,r23
 800e040:	b00d883a 	mov	r6,r22
 800e044:	80155800 	call	8015580 <__ssprint_r>
 800e048:	103b761e 	bne	r2,zero,800ce24 <__alt_data_end+0xfc00ce24>
 800e04c:	d8c02017 	ldw	r3,128(sp)
 800e050:	d8801f17 	ldw	r2,124(sp)
 800e054:	da000404 	addi	r8,sp,16
 800e058:	003fee06 	br	800e014 <__alt_data_end+0xfc00e014>
 800e05c:	8888703a 	and	r4,r17,r2
 800e060:	203eb31e 	bne	r4,zero,800db30 <__alt_data_end+0xfc00db30>
 800e064:	dc001f17 	ldw	r16,124(sp)
 800e068:	db003117 	ldw	r12,196(sp)
 800e06c:	40800115 	stw	r2,4(r8)
 800e070:	84000044 	addi	r16,r16,1
 800e074:	43000015 	stw	r12,0(r8)
 800e078:	d8c02015 	stw	r3,128(sp)
 800e07c:	dc001f15 	stw	r16,124(sp)
 800e080:	008001c4 	movi	r2,7
 800e084:	143f8716 	blt	r2,r16,800dea4 <__alt_data_end+0xfc00dea4>
 800e088:	44800204 	addi	r18,r8,8
 800e08c:	003ed306 	br	800dbdc <__alt_data_end+0xfc00dbdc>
 800e090:	d9002f17 	ldw	r4,188(sp)
 800e094:	b80b883a 	mov	r5,r23
 800e098:	b00d883a 	mov	r6,r22
 800e09c:	80155800 	call	8015580 <__ssprint_r>
 800e0a0:	103b601e 	bne	r2,zero,800ce24 <__alt_data_end+0xfc00ce24>
 800e0a4:	d8c02017 	ldw	r3,128(sp)
 800e0a8:	dc001f17 	ldw	r16,124(sp)
 800e0ac:	da000404 	addi	r8,sp,16
 800e0b0:	003eaa06 	br	800db5c <__alt_data_end+0xfc00db5c>
 800e0b4:	d9002f17 	ldw	r4,188(sp)
 800e0b8:	b80b883a 	mov	r5,r23
 800e0bc:	b00d883a 	mov	r6,r22
 800e0c0:	80155800 	call	8015580 <__ssprint_r>
 800e0c4:	103b571e 	bne	r2,zero,800ce24 <__alt_data_end+0xfc00ce24>
 800e0c8:	d8c02017 	ldw	r3,128(sp)
 800e0cc:	dc001f17 	ldw	r16,124(sp)
 800e0d0:	dc800404 	addi	r18,sp,16
 800e0d4:	003eac06 	br	800db88 <__alt_data_end+0xfc00db88>
 800e0d8:	d9002f17 	ldw	r4,188(sp)
 800e0dc:	b80b883a 	mov	r5,r23
 800e0e0:	b00d883a 	mov	r6,r22
 800e0e4:	80155800 	call	8015580 <__ssprint_r>
 800e0e8:	103b4e1e 	bne	r2,zero,800ce24 <__alt_data_end+0xfc00ce24>
 800e0ec:	d8c02017 	ldw	r3,128(sp)
 800e0f0:	da000404 	addi	r8,sp,16
 800e0f4:	003c2406 	br	800d188 <__alt_data_end+0xfc00d188>
 800e0f8:	da004015 	stw	r8,256(sp)
 800e0fc:	da403f15 	stw	r9,252(sp)
 800e100:	80150d00 	call	80150d0 <__fpclassifyd>
 800e104:	da004017 	ldw	r8,256(sp)
 800e108:	da403f17 	ldw	r9,252(sp)
 800e10c:	1000951e 	bne	r2,zero,800e364 <___svfprintf_internal_r+0x1860>
 800e110:	008011c4 	movi	r2,71
 800e114:	1400fb16 	blt	r2,r16,800e504 <___svfprintf_internal_r+0x1a00>
 800e118:	030200b4 	movhi	r12,2050
 800e11c:	631c8f04 	addi	r12,r12,29244
 800e120:	db003115 	stw	r12,196(sp)
 800e124:	00c000c4 	movi	r3,3
 800e128:	00bfdfc4 	movi	r2,-129
 800e12c:	d8c02a15 	stw	r3,168(sp)
 800e130:	88a2703a 	and	r17,r17,r2
 800e134:	dd402783 	ldbu	r21,158(sp)
 800e138:	dcc02d15 	stw	r19,180(sp)
 800e13c:	1825883a 	mov	r18,r3
 800e140:	d8003215 	stw	zero,200(sp)
 800e144:	d8003415 	stw	zero,208(sp)
 800e148:	003ba706 	br	800cfe8 <__alt_data_end+0xfc00cfe8>
 800e14c:	8880040c 	andi	r2,r17,16
 800e150:	1000091e 	bne	r2,zero,800e178 <___svfprintf_internal_r+0x1674>
 800e154:	8c40100c 	andi	r17,r17,64
 800e158:	88000726 	beq	r17,zero,800e178 <___svfprintf_internal_r+0x1674>
 800e15c:	db002d17 	ldw	r12,180(sp)
 800e160:	dac03017 	ldw	r11,192(sp)
 800e164:	60800017 	ldw	r2,0(r12)
 800e168:	63000104 	addi	r12,r12,4
 800e16c:	db002d15 	stw	r12,180(sp)
 800e170:	12c0000d 	sth	r11,0(r2)
 800e174:	003a8f06 	br	800cbb4 <__alt_data_end+0xfc00cbb4>
 800e178:	db002d17 	ldw	r12,180(sp)
 800e17c:	dac03017 	ldw	r11,192(sp)
 800e180:	60800017 	ldw	r2,0(r12)
 800e184:	63000104 	addi	r12,r12,4
 800e188:	db002d15 	stw	r12,180(sp)
 800e18c:	12c00015 	stw	r11,0(r2)
 800e190:	003a8806 	br	800cbb4 <__alt_data_end+0xfc00cbb4>
 800e194:	88c0100c 	andi	r3,r17,64
 800e198:	1800e926 	beq	r3,zero,800e540 <___svfprintf_internal_r+0x1a3c>
 800e19c:	dac02d17 	ldw	r11,180(sp)
 800e1a0:	14c0000b 	ldhu	r19,0(r2)
 800e1a4:	0039883a 	mov	fp,zero
 800e1a8:	5ac00104 	addi	r11,r11,4
 800e1ac:	dac02d15 	stw	r11,180(sp)
 800e1b0:	003d1406 	br	800d604 <__alt_data_end+0xfc00d604>
 800e1b4:	1c000007 	ldb	r16,0(r3)
 800e1b8:	1805883a 	mov	r2,r3
 800e1bc:	003aa706 	br	800cc5c <__alt_data_end+0xfc00cc5c>
 800e1c0:	00800084 	movi	r2,2
 800e1c4:	003c7b06 	br	800d3b4 <__alt_data_end+0xfc00d3b4>
 800e1c8:	010200b4 	movhi	r4,2050
 800e1cc:	211c9d84 	addi	r4,r4,29302
 800e1d0:	d9002b15 	stw	r4,172(sp)
 800e1d4:	dac02b17 	ldw	r11,172(sp)
 800e1d8:	1c87883a 	add	r3,r3,r18
 800e1dc:	10800044 	addi	r2,r2,1
 800e1e0:	42c00015 	stw	r11,0(r8)
 800e1e4:	44800115 	stw	r18,4(r8)
 800e1e8:	d8c02015 	stw	r3,128(sp)
 800e1ec:	d8801f15 	stw	r2,124(sp)
 800e1f0:	010001c4 	movi	r4,7
 800e1f4:	20bf4e16 	blt	r4,r2,800df30 <__alt_data_end+0xfc00df30>
 800e1f8:	42000204 	addi	r8,r8,8
 800e1fc:	003f5306 	br	800df4c <__alt_data_end+0xfc00df4c>
 800e200:	010200b4 	movhi	r4,2050
 800e204:	211c9d84 	addi	r4,r4,29302
 800e208:	d9002b15 	stw	r4,172(sp)
 800e20c:	003c0806 	br	800d230 <__alt_data_end+0xfc00d230>
 800e210:	d9002f17 	ldw	r4,188(sp)
 800e214:	b80b883a 	mov	r5,r23
 800e218:	b00d883a 	mov	r6,r22
 800e21c:	80155800 	call	8015580 <__ssprint_r>
 800e220:	103b001e 	bne	r2,zero,800ce24 <__alt_data_end+0xfc00ce24>
 800e224:	d8c02017 	ldw	r3,128(sp)
 800e228:	da000404 	addi	r8,sp,16
 800e22c:	003dc606 	br	800d948 <__alt_data_end+0xfc00d948>
 800e230:	d8801f17 	ldw	r2,124(sp)
 800e234:	030200b4 	movhi	r12,2050
 800e238:	01000044 	movi	r4,1
 800e23c:	18c00044 	addi	r3,r3,1
 800e240:	10800044 	addi	r2,r2,1
 800e244:	631c9d04 	addi	r12,r12,29300
 800e248:	41000115 	stw	r4,4(r8)
 800e24c:	43000015 	stw	r12,0(r8)
 800e250:	d8c02015 	stw	r3,128(sp)
 800e254:	d8801f15 	stw	r2,124(sp)
 800e258:	010001c4 	movi	r4,7
 800e25c:	2080ad16 	blt	r4,r2,800e514 <___svfprintf_internal_r+0x1a10>
 800e260:	42000204 	addi	r8,r8,8
 800e264:	8000041e 	bne	r16,zero,800e278 <___svfprintf_internal_r+0x1774>
 800e268:	dac03317 	ldw	r11,204(sp)
 800e26c:	5800021e 	bne	r11,zero,800e278 <___svfprintf_internal_r+0x1774>
 800e270:	8880004c 	andi	r2,r17,1
 800e274:	103c0526 	beq	r2,zero,800d28c <__alt_data_end+0xfc00d28c>
 800e278:	db003917 	ldw	r12,228(sp)
 800e27c:	d8801f17 	ldw	r2,124(sp)
 800e280:	dac03517 	ldw	r11,212(sp)
 800e284:	1b07883a 	add	r3,r3,r12
 800e288:	10800044 	addi	r2,r2,1
 800e28c:	42c00015 	stw	r11,0(r8)
 800e290:	43000115 	stw	r12,4(r8)
 800e294:	d8c02015 	stw	r3,128(sp)
 800e298:	d8801f15 	stw	r2,124(sp)
 800e29c:	010001c4 	movi	r4,7
 800e2a0:	20818816 	blt	r4,r2,800e8c4 <___svfprintf_internal_r+0x1dc0>
 800e2a4:	42000204 	addi	r8,r8,8
 800e2a8:	0421c83a 	sub	r16,zero,r16
 800e2ac:	0400bc0e 	bge	zero,r16,800e5a0 <___svfprintf_internal_r+0x1a9c>
 800e2b0:	04800404 	movi	r18,16
 800e2b4:	9400f80e 	bge	r18,r16,800e698 <___svfprintf_internal_r+0x1b94>
 800e2b8:	010200b4 	movhi	r4,2050
 800e2bc:	211c9d84 	addi	r4,r4,29302
 800e2c0:	d9002b15 	stw	r4,172(sp)
 800e2c4:	054001c4 	movi	r21,7
 800e2c8:	dcc02f17 	ldw	r19,188(sp)
 800e2cc:	00000306 	br	800e2dc <___svfprintf_internal_r+0x17d8>
 800e2d0:	42000204 	addi	r8,r8,8
 800e2d4:	843ffc04 	addi	r16,r16,-16
 800e2d8:	9400f20e 	bge	r18,r16,800e6a4 <___svfprintf_internal_r+0x1ba0>
 800e2dc:	18c00404 	addi	r3,r3,16
 800e2e0:	10800044 	addi	r2,r2,1
 800e2e4:	45000015 	stw	r20,0(r8)
 800e2e8:	44800115 	stw	r18,4(r8)
 800e2ec:	d8c02015 	stw	r3,128(sp)
 800e2f0:	d8801f15 	stw	r2,124(sp)
 800e2f4:	a8bff60e 	bge	r21,r2,800e2d0 <__alt_data_end+0xfc00e2d0>
 800e2f8:	9809883a 	mov	r4,r19
 800e2fc:	b80b883a 	mov	r5,r23
 800e300:	b00d883a 	mov	r6,r22
 800e304:	80155800 	call	8015580 <__ssprint_r>
 800e308:	103ac61e 	bne	r2,zero,800ce24 <__alt_data_end+0xfc00ce24>
 800e30c:	d8c02017 	ldw	r3,128(sp)
 800e310:	d8801f17 	ldw	r2,124(sp)
 800e314:	da000404 	addi	r8,sp,16
 800e318:	003fee06 	br	800e2d4 <__alt_data_end+0xfc00e2d4>
 800e31c:	db002e17 	ldw	r12,184(sp)
 800e320:	1805883a 	mov	r2,r3
 800e324:	dac02d15 	stw	r11,180(sp)
 800e328:	0319c83a 	sub	r12,zero,r12
 800e32c:	db002e15 	stw	r12,184(sp)
 800e330:	003ad106 	br	800ce78 <__alt_data_end+0xfc00ce78>
 800e334:	18800044 	addi	r2,r3,1
 800e338:	8c400814 	ori	r17,r17,32
 800e33c:	1c000047 	ldb	r16,1(r3)
 800e340:	003a4606 	br	800cc5c <__alt_data_end+0xfc00cc5c>
 800e344:	d9002f17 	ldw	r4,188(sp)
 800e348:	b80b883a 	mov	r5,r23
 800e34c:	b00d883a 	mov	r6,r22
 800e350:	80155800 	call	8015580 <__ssprint_r>
 800e354:	103ab31e 	bne	r2,zero,800ce24 <__alt_data_end+0xfc00ce24>
 800e358:	d8c02017 	ldw	r3,128(sp)
 800e35c:	da000404 	addi	r8,sp,16
 800e360:	003d8a06 	br	800d98c <__alt_data_end+0xfc00d98c>
 800e364:	057ff7c4 	movi	r21,-33
 800e368:	00bfffc4 	movi	r2,-1
 800e36c:	856a703a 	and	r21,r16,r21
 800e370:	48807126 	beq	r9,r2,800e538 <___svfprintf_internal_r+0x1a34>
 800e374:	008011c4 	movi	r2,71
 800e378:	a8814f26 	beq	r21,r2,800e8b8 <___svfprintf_internal_r+0x1db4>
 800e37c:	db003817 	ldw	r12,224(sp)
 800e380:	8ac04014 	ori	r11,r17,256
 800e384:	dac02d15 	stw	r11,180(sp)
 800e388:	60015816 	blt	r12,zero,800e8ec <___svfprintf_internal_r+0x1de8>
 800e38c:	dc803817 	ldw	r18,224(sp)
 800e390:	d8002a05 	stb	zero,168(sp)
 800e394:	00801984 	movi	r2,102
 800e398:	80808c26 	beq	r16,r2,800e5cc <___svfprintf_internal_r+0x1ac8>
 800e39c:	00801184 	movi	r2,70
 800e3a0:	80808a26 	beq	r16,r2,800e5cc <___svfprintf_internal_r+0x1ac8>
 800e3a4:	00801144 	movi	r2,69
 800e3a8:	a8815426 	beq	r21,r2,800e8fc <___svfprintf_internal_r+0x1df8>
 800e3ac:	4839883a 	mov	fp,r9
 800e3b0:	d8802604 	addi	r2,sp,152
 800e3b4:	d8800115 	stw	r2,4(sp)
 800e3b8:	d9002f17 	ldw	r4,188(sp)
 800e3bc:	d8802504 	addi	r2,sp,148
 800e3c0:	d9403717 	ldw	r5,220(sp)
 800e3c4:	d8800215 	stw	r2,8(sp)
 800e3c8:	d8802104 	addi	r2,sp,132
 800e3cc:	df000015 	stw	fp,0(sp)
 800e3d0:	d8800315 	stw	r2,12(sp)
 800e3d4:	900d883a 	mov	r6,r18
 800e3d8:	01c00084 	movi	r7,2
 800e3dc:	da004015 	stw	r8,256(sp)
 800e3e0:	da403f15 	stw	r9,252(sp)
 800e3e4:	8010e180 	call	8010e18 <_dtoa_r>
 800e3e8:	d8803115 	stw	r2,196(sp)
 800e3ec:	008019c4 	movi	r2,103
 800e3f0:	da004017 	ldw	r8,256(sp)
 800e3f4:	da403f17 	ldw	r9,252(sp)
 800e3f8:	80800226 	beq	r16,r2,800e404 <___svfprintf_internal_r+0x1900>
 800e3fc:	008011c4 	movi	r2,71
 800e400:	8080841e 	bne	r16,r2,800e614 <___svfprintf_internal_r+0x1b10>
 800e404:	8880004c 	andi	r2,r17,1
 800e408:	10015126 	beq	r2,zero,800e950 <___svfprintf_internal_r+0x1e4c>
 800e40c:	db003117 	ldw	r12,196(sp)
 800e410:	6715883a 	add	r10,r12,fp
 800e414:	d9003717 	ldw	r4,220(sp)
 800e418:	900b883a 	mov	r5,r18
 800e41c:	000d883a 	mov	r6,zero
 800e420:	000f883a 	mov	r7,zero
 800e424:	da004015 	stw	r8,256(sp)
 800e428:	da403f15 	stw	r9,252(sp)
 800e42c:	da803e15 	stw	r10,248(sp)
 800e430:	800a3680 	call	800a368 <__eqdf2>
 800e434:	da004017 	ldw	r8,256(sp)
 800e438:	da403f17 	ldw	r9,252(sp)
 800e43c:	da803e17 	ldw	r10,248(sp)
 800e440:	1000d926 	beq	r2,zero,800e7a8 <___svfprintf_internal_r+0x1ca4>
 800e444:	d8802117 	ldw	r2,132(sp)
 800e448:	1280062e 	bgeu	r2,r10,800e464 <___svfprintf_internal_r+0x1960>
 800e44c:	01000c04 	movi	r4,48
 800e450:	10c00044 	addi	r3,r2,1
 800e454:	d8c02115 	stw	r3,132(sp)
 800e458:	11000005 	stb	r4,0(r2)
 800e45c:	d8802117 	ldw	r2,132(sp)
 800e460:	12bffb36 	bltu	r2,r10,800e450 <__alt_data_end+0xfc00e450>
 800e464:	db003117 	ldw	r12,196(sp)
 800e468:	1305c83a 	sub	r2,r2,r12
 800e46c:	d8803315 	stw	r2,204(sp)
 800e470:	008011c4 	movi	r2,71
 800e474:	a880b626 	beq	r21,r2,800e750 <___svfprintf_internal_r+0x1c4c>
 800e478:	00801944 	movi	r2,101
 800e47c:	14017e0e 	bge	r2,r16,800ea78 <___svfprintf_internal_r+0x1f74>
 800e480:	00801984 	movi	r2,102
 800e484:	80812826 	beq	r16,r2,800e928 <___svfprintf_internal_r+0x1e24>
 800e488:	db002617 	ldw	r12,152(sp)
 800e48c:	db003415 	stw	r12,208(sp)
 800e490:	db003417 	ldw	r12,208(sp)
 800e494:	dac03317 	ldw	r11,204(sp)
 800e498:	62c11a16 	blt	r12,r11,800e904 <___svfprintf_internal_r+0x1e00>
 800e49c:	8c40004c 	andi	r17,r17,1
 800e4a0:	88013d1e 	bne	r17,zero,800e998 <___svfprintf_internal_r+0x1e94>
 800e4a4:	6005883a 	mov	r2,r12
 800e4a8:	60012716 	blt	r12,zero,800e948 <___svfprintf_internal_r+0x1e44>
 800e4ac:	dc803417 	ldw	r18,208(sp)
 800e4b0:	df002a07 	ldb	fp,168(sp)
 800e4b4:	e000b01e 	bne	fp,zero,800e778 <___svfprintf_internal_r+0x1c74>
 800e4b8:	dc402d17 	ldw	r17,180(sp)
 800e4bc:	dd402783 	ldbu	r21,158(sp)
 800e4c0:	d8802a15 	stw	r2,168(sp)
 800e4c4:	dcc02d15 	stw	r19,180(sp)
 800e4c8:	d8003215 	stw	zero,200(sp)
 800e4cc:	003ac606 	br	800cfe8 <__alt_data_end+0xfc00cfe8>
 800e4d0:	008200b4 	movhi	r2,2050
 800e4d4:	109c8d04 	addi	r2,r2,29236
 800e4d8:	d8803115 	stw	r2,196(sp)
 800e4dc:	003be506 	br	800d474 <__alt_data_end+0xfc00d474>
 800e4e0:	d9002f17 	ldw	r4,188(sp)
 800e4e4:	04001004 	movi	r16,64
 800e4e8:	800b883a 	mov	r5,r16
 800e4ec:	800bd580 	call	800bd58 <_malloc_r>
 800e4f0:	b8800015 	stw	r2,0(r23)
 800e4f4:	b8800415 	stw	r2,16(r23)
 800e4f8:	10016126 	beq	r2,zero,800ea80 <___svfprintf_internal_r+0x1f7c>
 800e4fc:	bc000515 	stw	r16,20(r23)
 800e500:	00399a06 	br	800cb6c <__alt_data_end+0xfc00cb6c>
 800e504:	008200b4 	movhi	r2,2050
 800e508:	109c9004 	addi	r2,r2,29248
 800e50c:	d8803115 	stw	r2,196(sp)
 800e510:	003f0406 	br	800e124 <__alt_data_end+0xfc00e124>
 800e514:	d9002f17 	ldw	r4,188(sp)
 800e518:	b80b883a 	mov	r5,r23
 800e51c:	b00d883a 	mov	r6,r22
 800e520:	80155800 	call	8015580 <__ssprint_r>
 800e524:	103a3f1e 	bne	r2,zero,800ce24 <__alt_data_end+0xfc00ce24>
 800e528:	dc002617 	ldw	r16,152(sp)
 800e52c:	d8c02017 	ldw	r3,128(sp)
 800e530:	da000404 	addi	r8,sp,16
 800e534:	003f4b06 	br	800e264 <__alt_data_end+0xfc00e264>
 800e538:	02400184 	movi	r9,6
 800e53c:	003f8f06 	br	800e37c <__alt_data_end+0xfc00e37c>
 800e540:	db002d17 	ldw	r12,180(sp)
 800e544:	14c00017 	ldw	r19,0(r2)
 800e548:	0039883a 	mov	fp,zero
 800e54c:	63000104 	addi	r12,r12,4
 800e550:	db002d15 	stw	r12,180(sp)
 800e554:	003c2b06 	br	800d604 <__alt_data_end+0xfc00d604>
 800e558:	d8c03117 	ldw	r3,196(sp)
 800e55c:	b0e5c83a 	sub	r18,r22,r3
 800e560:	003a9c06 	br	800cfd4 <__alt_data_end+0xfc00cfd4>
 800e564:	da004015 	stw	r8,256(sp)
 800e568:	800ca6c0 	call	800ca6c <strlen>
 800e56c:	1025883a 	mov	r18,r2
 800e570:	da004017 	ldw	r8,256(sp)
 800e574:	903c450e 	bge	r18,zero,800d68c <__alt_data_end+0xfc00d68c>
 800e578:	0005883a 	mov	r2,zero
 800e57c:	003c4306 	br	800d68c <__alt_data_end+0xfc00d68c>
 800e580:	d9002f17 	ldw	r4,188(sp)
 800e584:	b80b883a 	mov	r5,r23
 800e588:	b00d883a 	mov	r6,r22
 800e58c:	80155800 	call	8015580 <__ssprint_r>
 800e590:	103a241e 	bne	r2,zero,800ce24 <__alt_data_end+0xfc00ce24>
 800e594:	d8c02017 	ldw	r3,128(sp)
 800e598:	d8801f17 	ldw	r2,124(sp)
 800e59c:	da000404 	addi	r8,sp,16
 800e5a0:	db003317 	ldw	r12,204(sp)
 800e5a4:	dac03117 	ldw	r11,196(sp)
 800e5a8:	10800044 	addi	r2,r2,1
 800e5ac:	60c7883a 	add	r3,r12,r3
 800e5b0:	42c00015 	stw	r11,0(r8)
 800e5b4:	43000115 	stw	r12,4(r8)
 800e5b8:	d8c02015 	stw	r3,128(sp)
 800e5bc:	d8801f15 	stw	r2,124(sp)
 800e5c0:	010001c4 	movi	r4,7
 800e5c4:	20bb300e 	bge	r4,r2,800d288 <__alt_data_end+0xfc00d288>
 800e5c8:	003d9c06 	br	800dc3c <__alt_data_end+0xfc00dc3c>
 800e5cc:	d8802604 	addi	r2,sp,152
 800e5d0:	d8800115 	stw	r2,4(sp)
 800e5d4:	d9002f17 	ldw	r4,188(sp)
 800e5d8:	d8802504 	addi	r2,sp,148
 800e5dc:	d9403717 	ldw	r5,220(sp)
 800e5e0:	d8800215 	stw	r2,8(sp)
 800e5e4:	d8802104 	addi	r2,sp,132
 800e5e8:	da400015 	stw	r9,0(sp)
 800e5ec:	d8800315 	stw	r2,12(sp)
 800e5f0:	900d883a 	mov	r6,r18
 800e5f4:	01c000c4 	movi	r7,3
 800e5f8:	da004015 	stw	r8,256(sp)
 800e5fc:	da403f15 	stw	r9,252(sp)
 800e600:	8010e180 	call	8010e18 <_dtoa_r>
 800e604:	da403f17 	ldw	r9,252(sp)
 800e608:	da004017 	ldw	r8,256(sp)
 800e60c:	d8803115 	stw	r2,196(sp)
 800e610:	4839883a 	mov	fp,r9
 800e614:	dac03117 	ldw	r11,196(sp)
 800e618:	00801184 	movi	r2,70
 800e61c:	5f15883a 	add	r10,r11,fp
 800e620:	a8bf7c1e 	bne	r21,r2,800e414 <__alt_data_end+0xfc00e414>
 800e624:	59000007 	ldb	r4,0(r11)
 800e628:	00800c04 	movi	r2,48
 800e62c:	2080ca26 	beq	r4,r2,800e958 <___svfprintf_internal_r+0x1e54>
 800e630:	d8c02617 	ldw	r3,152(sp)
 800e634:	50d5883a 	add	r10,r10,r3
 800e638:	003f7606 	br	800e414 <__alt_data_end+0xfc00e414>
 800e63c:	010200b4 	movhi	r4,2050
 800e640:	211ca184 	addi	r4,r4,29318
 800e644:	d9003615 	stw	r4,216(sp)
 800e648:	003aa606 	br	800d0e4 <__alt_data_end+0xfc00d0e4>
 800e64c:	0025883a 	mov	r18,zero
 800e650:	003dc306 	br	800dd60 <__alt_data_end+0xfc00dd60>
 800e654:	d9002f17 	ldw	r4,188(sp)
 800e658:	b80b883a 	mov	r5,r23
 800e65c:	b00d883a 	mov	r6,r22
 800e660:	80155800 	call	8015580 <__ssprint_r>
 800e664:	1039ef1e 	bne	r2,zero,800ce24 <__alt_data_end+0xfc00ce24>
 800e668:	d8c02017 	ldw	r3,128(sp)
 800e66c:	da000404 	addi	r8,sp,16
 800e670:	003dba06 	br	800dd5c <__alt_data_end+0xfc00dd5c>
 800e674:	d9002f17 	ldw	r4,188(sp)
 800e678:	b80b883a 	mov	r5,r23
 800e67c:	b00d883a 	mov	r6,r22
 800e680:	80155800 	call	8015580 <__ssprint_r>
 800e684:	1039e71e 	bne	r2,zero,800ce24 <__alt_data_end+0xfc00ce24>
 800e688:	d8802617 	ldw	r2,152(sp)
 800e68c:	d8c02017 	ldw	r3,128(sp)
 800e690:	da000404 	addi	r8,sp,16
 800e694:	003e4106 	br	800df9c <__alt_data_end+0xfc00df9c>
 800e698:	030200b4 	movhi	r12,2050
 800e69c:	631c9d84 	addi	r12,r12,29302
 800e6a0:	db002b15 	stw	r12,172(sp)
 800e6a4:	dac02b17 	ldw	r11,172(sp)
 800e6a8:	1c07883a 	add	r3,r3,r16
 800e6ac:	10800044 	addi	r2,r2,1
 800e6b0:	42c00015 	stw	r11,0(r8)
 800e6b4:	44000115 	stw	r16,4(r8)
 800e6b8:	d8c02015 	stw	r3,128(sp)
 800e6bc:	d8801f15 	stw	r2,124(sp)
 800e6c0:	010001c4 	movi	r4,7
 800e6c4:	20bfae16 	blt	r4,r2,800e580 <__alt_data_end+0xfc00e580>
 800e6c8:	42000204 	addi	r8,r8,8
 800e6cc:	003fb406 	br	800e5a0 <__alt_data_end+0xfc00e5a0>
 800e6d0:	0021883a 	mov	r16,zero
 800e6d4:	003e4306 	br	800dfe4 <__alt_data_end+0xfc00dfe4>
 800e6d8:	d9002f17 	ldw	r4,188(sp)
 800e6dc:	b80b883a 	mov	r5,r23
 800e6e0:	b00d883a 	mov	r6,r22
 800e6e4:	80155800 	call	8015580 <__ssprint_r>
 800e6e8:	1039ce1e 	bne	r2,zero,800ce24 <__alt_data_end+0xfc00ce24>
 800e6ec:	d8802617 	ldw	r2,152(sp)
 800e6f0:	db003317 	ldw	r12,204(sp)
 800e6f4:	d8c02017 	ldw	r3,128(sp)
 800e6f8:	da000404 	addi	r8,sp,16
 800e6fc:	6085c83a 	sub	r2,r12,r2
 800e700:	003e3706 	br	800dfe0 <__alt_data_end+0xfc00dfe0>
 800e704:	00800184 	movi	r2,6
 800e708:	1240012e 	bgeu	r2,r9,800e710 <___svfprintf_internal_r+0x1c0c>
 800e70c:	1013883a 	mov	r9,r2
 800e710:	4825883a 	mov	r18,r9
 800e714:	4805883a 	mov	r2,r9
 800e718:	4800a416 	blt	r9,zero,800e9ac <___svfprintf_internal_r+0x1ea8>
 800e71c:	d8802a15 	stw	r2,168(sp)
 800e720:	008200b4 	movhi	r2,2050
 800e724:	109c9b04 	addi	r2,r2,29292
 800e728:	d8803115 	stw	r2,196(sp)
 800e72c:	dcc02d15 	stw	r19,180(sp)
 800e730:	d8003215 	stw	zero,200(sp)
 800e734:	d8003415 	stw	zero,208(sp)
 800e738:	0005883a 	mov	r2,zero
 800e73c:	003a3106 	br	800d004 <__alt_data_end+0xfc00d004>
 800e740:	030200b4 	movhi	r12,2050
 800e744:	631ca184 	addi	r12,r12,29318
 800e748:	db003615 	stw	r12,216(sp)
 800e74c:	003af406 	br	800d320 <__alt_data_end+0xfc00d320>
 800e750:	d8c02617 	ldw	r3,152(sp)
 800e754:	00bfff44 	movi	r2,-3
 800e758:	18801516 	blt	r3,r2,800e7b0 <___svfprintf_internal_r+0x1cac>
 800e75c:	48c01416 	blt	r9,r3,800e7b0 <___svfprintf_internal_r+0x1cac>
 800e760:	d8c03415 	stw	r3,208(sp)
 800e764:	040019c4 	movi	r16,103
 800e768:	003f4906 	br	800e490 <__alt_data_end+0xfc00e490>
 800e76c:	05400b44 	movi	r21,45
 800e770:	dd402785 	stb	r21,158(sp)
 800e774:	003b3a06 	br	800d460 <__alt_data_end+0xfc00d460>
 800e778:	00c00b44 	movi	r3,45
 800e77c:	d8802a15 	stw	r2,168(sp)
 800e780:	dc402d17 	ldw	r17,180(sp)
 800e784:	d8c02785 	stb	r3,158(sp)
 800e788:	dcc02d15 	stw	r19,180(sp)
 800e78c:	d8003215 	stw	zero,200(sp)
 800e790:	00800b44 	movi	r2,45
 800e794:	003a1806 	br	800cff8 <__alt_data_end+0xfc00cff8>
 800e798:	010200b4 	movhi	r4,2050
 800e79c:	211c9d84 	addi	r4,r4,29302
 800e7a0:	d9002b15 	stw	r4,172(sp)
 800e7a4:	003cc306 	br	800dab4 <__alt_data_end+0xfc00dab4>
 800e7a8:	5005883a 	mov	r2,r10
 800e7ac:	003f2d06 	br	800e464 <__alt_data_end+0xfc00e464>
 800e7b0:	843fff84 	addi	r16,r16,-2
 800e7b4:	1f3fffc4 	addi	fp,r3,-1
 800e7b8:	df002615 	stw	fp,152(sp)
 800e7bc:	dc0022c5 	stb	r16,139(sp)
 800e7c0:	e000a216 	blt	fp,zero,800ea4c <___svfprintf_internal_r+0x1f48>
 800e7c4:	00800ac4 	movi	r2,43
 800e7c8:	d8802305 	stb	r2,140(sp)
 800e7cc:	00800244 	movi	r2,9
 800e7d0:	1700820e 	bge	r2,fp,800e9dc <___svfprintf_internal_r+0x1ed8>
 800e7d4:	dd4022c4 	addi	r21,sp,139
 800e7d8:	dc002b15 	stw	r16,172(sp)
 800e7dc:	8825883a 	mov	r18,r17
 800e7e0:	a821883a 	mov	r16,r21
 800e7e4:	4023883a 	mov	r17,r8
 800e7e8:	e009883a 	mov	r4,fp
 800e7ec:	01400284 	movi	r5,10
 800e7f0:	800bac40 	call	800bac4 <__modsi3>
 800e7f4:	10800c04 	addi	r2,r2,48
 800e7f8:	843fffc4 	addi	r16,r16,-1
 800e7fc:	e009883a 	mov	r4,fp
 800e800:	01400284 	movi	r5,10
 800e804:	80800005 	stb	r2,0(r16)
 800e808:	800ba700 	call	800ba70 <__divsi3>
 800e80c:	1039883a 	mov	fp,r2
 800e810:	00800244 	movi	r2,9
 800e814:	173ff416 	blt	r2,fp,800e7e8 <__alt_data_end+0xfc00e7e8>
 800e818:	8811883a 	mov	r8,r17
 800e81c:	e0800c04 	addi	r2,fp,48
 800e820:	9023883a 	mov	r17,r18
 800e824:	8025883a 	mov	r18,r16
 800e828:	913fffc4 	addi	r4,r18,-1
 800e82c:	90bfffc5 	stb	r2,-1(r18)
 800e830:	dc002b17 	ldw	r16,172(sp)
 800e834:	25408e2e 	bgeu	r4,r21,800ea70 <___svfprintf_internal_r+0x1f6c>
 800e838:	d9402384 	addi	r5,sp,142
 800e83c:	2c8bc83a 	sub	r5,r5,r18
 800e840:	d8c02344 	addi	r3,sp,141
 800e844:	a94b883a 	add	r5,r21,r5
 800e848:	00000106 	br	800e850 <___svfprintf_internal_r+0x1d4c>
 800e84c:	20800003 	ldbu	r2,0(r4)
 800e850:	18800005 	stb	r2,0(r3)
 800e854:	18c00044 	addi	r3,r3,1
 800e858:	21000044 	addi	r4,r4,1
 800e85c:	197ffb1e 	bne	r3,r5,800e84c <__alt_data_end+0xfc00e84c>
 800e860:	d8802304 	addi	r2,sp,140
 800e864:	1485c83a 	sub	r2,r2,r18
 800e868:	d8c02344 	addi	r3,sp,141
 800e86c:	1885883a 	add	r2,r3,r2
 800e870:	dac03317 	ldw	r11,204(sp)
 800e874:	156bc83a 	sub	r21,r2,r21
 800e878:	dd403a15 	stw	r21,232(sp)
 800e87c:	00800044 	movi	r2,1
 800e880:	5d65883a 	add	r18,r11,r21
 800e884:	12c0770e 	bge	r2,r11,800ea64 <___svfprintf_internal_r+0x1f60>
 800e888:	94800044 	addi	r18,r18,1
 800e88c:	9005883a 	mov	r2,r18
 800e890:	90007216 	blt	r18,zero,800ea5c <___svfprintf_internal_r+0x1f58>
 800e894:	d8003415 	stw	zero,208(sp)
 800e898:	003f0506 	br	800e4b0 <__alt_data_end+0xfc00e4b0>
 800e89c:	da402a15 	stw	r9,168(sp)
 800e8a0:	dd402783 	ldbu	r21,158(sp)
 800e8a4:	4825883a 	mov	r18,r9
 800e8a8:	dcc02d15 	stw	r19,180(sp)
 800e8ac:	d8003215 	stw	zero,200(sp)
 800e8b0:	d8003415 	stw	zero,208(sp)
 800e8b4:	0039cc06 	br	800cfe8 <__alt_data_end+0xfc00cfe8>
 800e8b8:	483eb01e 	bne	r9,zero,800e37c <__alt_data_end+0xfc00e37c>
 800e8bc:	9013883a 	mov	r9,r18
 800e8c0:	003eae06 	br	800e37c <__alt_data_end+0xfc00e37c>
 800e8c4:	d9002f17 	ldw	r4,188(sp)
 800e8c8:	b80b883a 	mov	r5,r23
 800e8cc:	b00d883a 	mov	r6,r22
 800e8d0:	80155800 	call	8015580 <__ssprint_r>
 800e8d4:	1039531e 	bne	r2,zero,800ce24 <__alt_data_end+0xfc00ce24>
 800e8d8:	dc002617 	ldw	r16,152(sp)
 800e8dc:	d8c02017 	ldw	r3,128(sp)
 800e8e0:	d8801f17 	ldw	r2,124(sp)
 800e8e4:	da000404 	addi	r8,sp,16
 800e8e8:	003e6f06 	br	800e2a8 <__alt_data_end+0xfc00e2a8>
 800e8ec:	00c00b44 	movi	r3,45
 800e8f0:	64a0003c 	xorhi	r18,r12,32768
 800e8f4:	d8c02a05 	stb	r3,168(sp)
 800e8f8:	003ea606 	br	800e394 <__alt_data_end+0xfc00e394>
 800e8fc:	4f000044 	addi	fp,r9,1
 800e900:	003eab06 	br	800e3b0 <__alt_data_end+0xfc00e3b0>
 800e904:	d8c03417 	ldw	r3,208(sp)
 800e908:	00c0410e 	bge	zero,r3,800ea10 <___svfprintf_internal_r+0x1f0c>
 800e90c:	04800044 	movi	r18,1
 800e910:	dac03317 	ldw	r11,204(sp)
 800e914:	92e5883a 	add	r18,r18,r11
 800e918:	9005883a 	mov	r2,r18
 800e91c:	903ee40e 	bge	r18,zero,800e4b0 <__alt_data_end+0xfc00e4b0>
 800e920:	0005883a 	mov	r2,zero
 800e924:	003ee206 	br	800e4b0 <__alt_data_end+0xfc00e4b0>
 800e928:	d8c02617 	ldw	r3,152(sp)
 800e92c:	d8c03415 	stw	r3,208(sp)
 800e930:	00c0310e 	bge	zero,r3,800e9f8 <___svfprintf_internal_r+0x1ef4>
 800e934:	48001f1e 	bne	r9,zero,800e9b4 <___svfprintf_internal_r+0x1eb0>
 800e938:	8c40004c 	andi	r17,r17,1
 800e93c:	88001d1e 	bne	r17,zero,800e9b4 <___svfprintf_internal_r+0x1eb0>
 800e940:	1805883a 	mov	r2,r3
 800e944:	183ed90e 	bge	r3,zero,800e4ac <__alt_data_end+0xfc00e4ac>
 800e948:	0005883a 	mov	r2,zero
 800e94c:	003ed706 	br	800e4ac <__alt_data_end+0xfc00e4ac>
 800e950:	d8802117 	ldw	r2,132(sp)
 800e954:	003ec306 	br	800e464 <__alt_data_end+0xfc00e464>
 800e958:	d9003717 	ldw	r4,220(sp)
 800e95c:	900b883a 	mov	r5,r18
 800e960:	000d883a 	mov	r6,zero
 800e964:	000f883a 	mov	r7,zero
 800e968:	da004015 	stw	r8,256(sp)
 800e96c:	da403f15 	stw	r9,252(sp)
 800e970:	da803e15 	stw	r10,248(sp)
 800e974:	800a3680 	call	800a368 <__eqdf2>
 800e978:	da004017 	ldw	r8,256(sp)
 800e97c:	da403f17 	ldw	r9,252(sp)
 800e980:	da803e17 	ldw	r10,248(sp)
 800e984:	103f2a26 	beq	r2,zero,800e630 <__alt_data_end+0xfc00e630>
 800e988:	00800044 	movi	r2,1
 800e98c:	1707c83a 	sub	r3,r2,fp
 800e990:	d8c02615 	stw	r3,152(sp)
 800e994:	003f2706 	br	800e634 <__alt_data_end+0xfc00e634>
 800e998:	db003417 	ldw	r12,208(sp)
 800e99c:	64800044 	addi	r18,r12,1
 800e9a0:	9005883a 	mov	r2,r18
 800e9a4:	903ec20e 	bge	r18,zero,800e4b0 <__alt_data_end+0xfc00e4b0>
 800e9a8:	003fdd06 	br	800e920 <__alt_data_end+0xfc00e920>
 800e9ac:	0005883a 	mov	r2,zero
 800e9b0:	003f5a06 	br	800e71c <__alt_data_end+0xfc00e71c>
 800e9b4:	dac03417 	ldw	r11,208(sp)
 800e9b8:	4a400044 	addi	r9,r9,1
 800e9bc:	5a65883a 	add	r18,r11,r9
 800e9c0:	9005883a 	mov	r2,r18
 800e9c4:	903eba0e 	bge	r18,zero,800e4b0 <__alt_data_end+0xfc00e4b0>
 800e9c8:	003fd506 	br	800e920 <__alt_data_end+0xfc00e920>
 800e9cc:	008200b4 	movhi	r2,2050
 800e9d0:	109c9d84 	addi	r2,r2,29302
 800e9d4:	d8802b15 	stw	r2,172(sp)
 800e9d8:	003d2906 	br	800de80 <__alt_data_end+0xfc00de80>
 800e9dc:	00800c04 	movi	r2,48
 800e9e0:	e0c00c04 	addi	r3,fp,48
 800e9e4:	d8802345 	stb	r2,141(sp)
 800e9e8:	d8c02385 	stb	r3,142(sp)
 800e9ec:	d88023c4 	addi	r2,sp,143
 800e9f0:	dd4022c4 	addi	r21,sp,139
 800e9f4:	003f9e06 	br	800e870 <__alt_data_end+0xfc00e870>
 800e9f8:	4800081e 	bne	r9,zero,800ea1c <___svfprintf_internal_r+0x1f18>
 800e9fc:	8c40004c 	andi	r17,r17,1
 800ea00:	8800061e 	bne	r17,zero,800ea1c <___svfprintf_internal_r+0x1f18>
 800ea04:	00800044 	movi	r2,1
 800ea08:	1025883a 	mov	r18,r2
 800ea0c:	003ea806 	br	800e4b0 <__alt_data_end+0xfc00e4b0>
 800ea10:	04800084 	movi	r18,2
 800ea14:	90e5c83a 	sub	r18,r18,r3
 800ea18:	003fbd06 	br	800e910 <__alt_data_end+0xfc00e910>
 800ea1c:	4c800084 	addi	r18,r9,2
 800ea20:	9005883a 	mov	r2,r18
 800ea24:	903ea20e 	bge	r18,zero,800e4b0 <__alt_data_end+0xfc00e4b0>
 800ea28:	003fbd06 	br	800e920 <__alt_data_end+0xfc00e920>
 800ea2c:	dac02d17 	ldw	r11,180(sp)
 800ea30:	5a400017 	ldw	r9,0(r11)
 800ea34:	5ac00104 	addi	r11,r11,4
 800ea38:	dac02d15 	stw	r11,180(sp)
 800ea3c:	483e3f0e 	bge	r9,zero,800e33c <__alt_data_end+0xfc00e33c>
 800ea40:	027fffc4 	movi	r9,-1
 800ea44:	1c000047 	ldb	r16,1(r3)
 800ea48:	00388406 	br	800cc5c <__alt_data_end+0xfc00cc5c>
 800ea4c:	00800b44 	movi	r2,45
 800ea50:	0739c83a 	sub	fp,zero,fp
 800ea54:	d8802305 	stb	r2,140(sp)
 800ea58:	003f5c06 	br	800e7cc <__alt_data_end+0xfc00e7cc>
 800ea5c:	0005883a 	mov	r2,zero
 800ea60:	003f8c06 	br	800e894 <__alt_data_end+0xfc00e894>
 800ea64:	88a2703a 	and	r17,r17,r2
 800ea68:	883f8826 	beq	r17,zero,800e88c <__alt_data_end+0xfc00e88c>
 800ea6c:	003f8606 	br	800e888 <__alt_data_end+0xfc00e888>
 800ea70:	d8802344 	addi	r2,sp,141
 800ea74:	003f7e06 	br	800e870 <__alt_data_end+0xfc00e870>
 800ea78:	d8c02617 	ldw	r3,152(sp)
 800ea7c:	003f4d06 	br	800e7b4 <__alt_data_end+0xfc00e7b4>
 800ea80:	dac02f17 	ldw	r11,188(sp)
 800ea84:	00800304 	movi	r2,12
 800ea88:	58800015 	stw	r2,0(r11)
 800ea8c:	00bfffc4 	movi	r2,-1
 800ea90:	0038e806 	br	800ce34 <__alt_data_end+0xfc00ce34>

0800ea94 <_vfiprintf_r>:
 800ea94:	defffe04 	addi	sp,sp,-8
 800ea98:	dfc00115 	stw	ra,4(sp)
 800ea9c:	d9c00015 	stw	r7,0(sp)
 800eaa0:	80168c40 	call	80168c4 <___vfiprintf_internal_r>
 800eaa4:	dfc00117 	ldw	ra,4(sp)
 800eaa8:	dec00204 	addi	sp,sp,8
 800eaac:	f800283a 	ret

0800eab0 <___vfprintf_internal_r>:
 800eab0:	defeb604 	addi	sp,sp,-1320
 800eab4:	dfc14915 	stw	ra,1316(sp)
 800eab8:	ddc14715 	stw	r23,1308(sp)
 800eabc:	dd814615 	stw	r22,1304(sp)
 800eac0:	282f883a 	mov	r23,r5
 800eac4:	202d883a 	mov	r22,r4
 800eac8:	d9812a15 	stw	r6,1192(sp)
 800eacc:	d9c12d15 	stw	r7,1204(sp)
 800ead0:	df014815 	stw	fp,1312(sp)
 800ead4:	dd414515 	stw	r21,1300(sp)
 800ead8:	dd014415 	stw	r20,1296(sp)
 800eadc:	dcc14315 	stw	r19,1292(sp)
 800eae0:	dc814215 	stw	r18,1288(sp)
 800eae4:	dc414115 	stw	r17,1284(sp)
 800eae8:	dc014015 	stw	r16,1280(sp)
 800eaec:	801360c0 	call	801360c <_localeconv_r>
 800eaf0:	10800017 	ldw	r2,0(r2)
 800eaf4:	1009883a 	mov	r4,r2
 800eaf8:	d8813515 	stw	r2,1236(sp)
 800eafc:	800ca6c0 	call	800ca6c <strlen>
 800eb00:	d8813815 	stw	r2,1248(sp)
 800eb04:	b0000226 	beq	r22,zero,800eb10 <___vfprintf_internal_r+0x60>
 800eb08:	b0800e17 	ldw	r2,56(r22)
 800eb0c:	10010426 	beq	r2,zero,800ef20 <___vfprintf_internal_r+0x470>
 800eb10:	b8c0030b 	ldhu	r3,12(r23)
 800eb14:	1908000c 	andi	r4,r3,8192
 800eb18:	1805883a 	mov	r2,r3
 800eb1c:	2000071e 	bne	r4,zero,800eb3c <___vfprintf_internal_r+0x8c>
 800eb20:	b9001917 	ldw	r4,100(r23)
 800eb24:	18880014 	ori	r2,r3,8192
 800eb28:	00f7ffc4 	movi	r3,-8193
 800eb2c:	20c8703a 	and	r4,r4,r3
 800eb30:	b880030d 	sth	r2,12(r23)
 800eb34:	1007883a 	mov	r3,r2
 800eb38:	b9001915 	stw	r4,100(r23)
 800eb3c:	1100020c 	andi	r4,r2,8
 800eb40:	2000a726 	beq	r4,zero,800ede0 <___vfprintf_internal_r+0x330>
 800eb44:	b9000417 	ldw	r4,16(r23)
 800eb48:	2000a526 	beq	r4,zero,800ede0 <___vfprintf_internal_r+0x330>
 800eb4c:	1080068c 	andi	r2,r2,26
 800eb50:	01000284 	movi	r4,10
 800eb54:	1100ab26 	beq	r2,r4,800ee04 <___vfprintf_internal_r+0x354>
 800eb58:	dac10e04 	addi	r11,sp,1080
 800eb5c:	db010dc4 	addi	r12,sp,1079
 800eb60:	d8800404 	addi	r2,sp,16
 800eb64:	050200b4 	movhi	r20,2050
 800eb68:	dac12815 	stw	r11,1184(sp)
 800eb6c:	5b17c83a 	sub	r11,r11,r12
 800eb70:	a51ca584 	addi	r20,r20,29334
 800eb74:	db012915 	stw	r12,1188(sp)
 800eb78:	d8811e15 	stw	r2,1144(sp)
 800eb7c:	d8012015 	stw	zero,1152(sp)
 800eb80:	d8011f15 	stw	zero,1148(sp)
 800eb84:	d8013315 	stw	zero,1228(sp)
 800eb88:	d8013715 	stw	zero,1244(sp)
 800eb8c:	d8013915 	stw	zero,1252(sp)
 800eb90:	d8013b15 	stw	zero,1260(sp)
 800eb94:	d8013a15 	stw	zero,1256(sp)
 800eb98:	d8012f15 	stw	zero,1212(sp)
 800eb9c:	1011883a 	mov	r8,r2
 800eba0:	dac13c15 	stw	r11,1264(sp)
 800eba4:	db012a17 	ldw	r12,1192(sp)
 800eba8:	60800007 	ldb	r2,0(r12)
 800ebac:	1000df26 	beq	r2,zero,800ef2c <___vfprintf_internal_r+0x47c>
 800ebb0:	00c00944 	movi	r3,37
 800ebb4:	10c0dd26 	beq	r2,r3,800ef2c <___vfprintf_internal_r+0x47c>
 800ebb8:	6021883a 	mov	r16,r12
 800ebbc:	00000106 	br	800ebc4 <___vfprintf_internal_r+0x114>
 800ebc0:	10c08426 	beq	r2,r3,800edd4 <___vfprintf_internal_r+0x324>
 800ebc4:	84000044 	addi	r16,r16,1
 800ebc8:	80800007 	ldb	r2,0(r16)
 800ebcc:	103ffc1e 	bne	r2,zero,800ebc0 <__alt_data_end+0xfc00ebc0>
 800ebd0:	dac12a17 	ldw	r11,1192(sp)
 800ebd4:	82e3c83a 	sub	r17,r16,r11
 800ebd8:	88000f26 	beq	r17,zero,800ec18 <___vfprintf_internal_r+0x168>
 800ebdc:	d8c12017 	ldw	r3,1152(sp)
 800ebe0:	d8811f17 	ldw	r2,1148(sp)
 800ebe4:	dac12a17 	ldw	r11,1192(sp)
 800ebe8:	1c47883a 	add	r3,r3,r17
 800ebec:	10800044 	addi	r2,r2,1
 800ebf0:	d8c12015 	stw	r3,1152(sp)
 800ebf4:	42c00015 	stw	r11,0(r8)
 800ebf8:	44400115 	stw	r17,4(r8)
 800ebfc:	d8811f15 	stw	r2,1148(sp)
 800ec00:	00c001c4 	movi	r3,7
 800ec04:	1880b416 	blt	r3,r2,800eed8 <___vfprintf_internal_r+0x428>
 800ec08:	42000204 	addi	r8,r8,8
 800ec0c:	db012f17 	ldw	r12,1212(sp)
 800ec10:	6459883a 	add	r12,r12,r17
 800ec14:	db012f15 	stw	r12,1212(sp)
 800ec18:	80800007 	ldb	r2,0(r16)
 800ec1c:	1000b526 	beq	r2,zero,800eef4 <___vfprintf_internal_r+0x444>
 800ec20:	80800044 	addi	r2,r16,1
 800ec24:	84000047 	ldb	r16,1(r16)
 800ec28:	d8012785 	stb	zero,1182(sp)
 800ec2c:	000d883a 	mov	r6,zero
 800ec30:	027fffc4 	movi	r9,-1
 800ec34:	d8012e15 	stw	zero,1208(sp)
 800ec38:	0023883a 	mov	r17,zero
 800ec3c:	01001604 	movi	r4,88
 800ec40:	01400244 	movi	r5,9
 800ec44:	02800a84 	movi	r10,42
 800ec48:	01c01b04 	movi	r7,108
 800ec4c:	10c00044 	addi	r3,r2,1
 800ec50:	80bff804 	addi	r2,r16,-32
 800ec54:	2082f236 	bltu	r4,r2,800f820 <___vfprintf_internal_r+0xd70>
 800ec58:	100490ba 	slli	r2,r2,2
 800ec5c:	02c20074 	movhi	r11,2049
 800ec60:	5afb1c04 	addi	r11,r11,-5008
 800ec64:	12c5883a 	add	r2,r2,r11
 800ec68:	10800017 	ldw	r2,0(r2)
 800ec6c:	1000683a 	jmp	r2
 800ec70:	0800f668 	cmpgeui	zero,at,985
 800ec74:	0800f820 	cmpeqi	zero,at,992
 800ec78:	0800f820 	cmpeqi	zero,at,992
 800ec7c:	0800f688 	cmpgei	zero,at,986
 800ec80:	0800f820 	cmpeqi	zero,at,992
 800ec84:	0800f820 	cmpeqi	zero,at,992
 800ec88:	0800f820 	cmpeqi	zero,at,992
 800ec8c:	0800f820 	cmpeqi	zero,at,992
 800ec90:	0800f820 	cmpeqi	zero,at,992
 800ec94:	0800f820 	cmpeqi	zero,at,992
 800ec98:	0800f7e4 	muli	zero,at,991
 800ec9c:	0800f810 	cmplti	zero,at,992
 800eca0:	0800f820 	cmpeqi	zero,at,992
 800eca4:	0800ef34 	orhi	zero,at,956
 800eca8:	0800ef44 	addi	zero,at,957
 800ecac:	0800f820 	cmpeqi	zero,at,992
 800ecb0:	0800ef84 	addi	zero,at,958
 800ecb4:	0800f478 	rdprs	zero,at,977
 800ecb8:	0800f478 	rdprs	zero,at,977
 800ecbc:	0800f478 	rdprs	zero,at,977
 800ecc0:	0800f478 	rdprs	zero,at,977
 800ecc4:	0800f478 	rdprs	zero,at,977
 800ecc8:	0800f478 	rdprs	zero,at,977
 800eccc:	0800f478 	rdprs	zero,at,977
 800ecd0:	0800f478 	rdprs	zero,at,977
 800ecd4:	0800f478 	rdprs	zero,at,977
 800ecd8:	0800f820 	cmpeqi	zero,at,992
 800ecdc:	0800f820 	cmpeqi	zero,at,992
 800ece0:	0800f820 	cmpeqi	zero,at,992
 800ece4:	0800f820 	cmpeqi	zero,at,992
 800ece8:	0800f820 	cmpeqi	zero,at,992
 800ecec:	0800f820 	cmpeqi	zero,at,992
 800ecf0:	0800f820 	cmpeqi	zero,at,992
 800ecf4:	0800f820 	cmpeqi	zero,at,992
 800ecf8:	0800f820 	cmpeqi	zero,at,992
 800ecfc:	0800f820 	cmpeqi	zero,at,992
 800ed00:	0800f4ac 	andhi	zero,at,978
 800ed04:	0800ef94 	ori	zero,at,958
 800ed08:	0800f820 	cmpeqi	zero,at,992
 800ed0c:	0800ef94 	ori	zero,at,958
 800ed10:	0800f820 	cmpeqi	zero,at,992
 800ed14:	0800f820 	cmpeqi	zero,at,992
 800ed18:	0800f820 	cmpeqi	zero,at,992
 800ed1c:	0800f820 	cmpeqi	zero,at,992
 800ed20:	0800f038 	rdprs	zero,at,960
 800ed24:	0800f820 	cmpeqi	zero,at,992
 800ed28:	0800f820 	cmpeqi	zero,at,992
 800ed2c:	0800f048 	cmpgei	zero,at,961
 800ed30:	0800f820 	cmpeqi	zero,at,992
 800ed34:	0800f820 	cmpeqi	zero,at,992
 800ed38:	0800f820 	cmpeqi	zero,at,992
 800ed3c:	0800f820 	cmpeqi	zero,at,992
 800ed40:	0800f820 	cmpeqi	zero,at,992
 800ed44:	0800f444 	addi	zero,at,977
 800ed48:	0800f820 	cmpeqi	zero,at,992
 800ed4c:	0800f820 	cmpeqi	zero,at,992
 800ed50:	0800f4f4 	orhi	zero,at,979
 800ed54:	0800f820 	cmpeqi	zero,at,992
 800ed58:	0800f820 	cmpeqi	zero,at,992
 800ed5c:	0800f820 	cmpeqi	zero,at,992
 800ed60:	0800f820 	cmpeqi	zero,at,992
 800ed64:	0800f820 	cmpeqi	zero,at,992
 800ed68:	0800f820 	cmpeqi	zero,at,992
 800ed6c:	0800f820 	cmpeqi	zero,at,992
 800ed70:	0800f820 	cmpeqi	zero,at,992
 800ed74:	0800f820 	cmpeqi	zero,at,992
 800ed78:	0800f820 	cmpeqi	zero,at,992
 800ed7c:	0800f6e8 	cmpgeui	zero,at,987
 800ed80:	0800f698 	cmpnei	zero,at,986
 800ed84:	0800ef94 	ori	zero,at,958
 800ed88:	0800ef94 	ori	zero,at,958
 800ed8c:	0800ef94 	ori	zero,at,958
 800ed90:	0800f6d8 	cmpnei	zero,at,987
 800ed94:	0800f698 	cmpnei	zero,at,986
 800ed98:	0800f820 	cmpeqi	zero,at,992
 800ed9c:	0800f820 	cmpeqi	zero,at,992
 800eda0:	0800f5e0 	cmpeqi	zero,at,983
 800eda4:	0800f820 	cmpeqi	zero,at,992
 800eda8:	0800f5f4 	orhi	zero,at,983
 800edac:	0800f628 	cmpgeui	zero,at,984
 800edb0:	0800f728 	cmpgeui	zero,at,988
 800edb4:	0800f550 	cmplti	zero,at,981
 800edb8:	0800f820 	cmpeqi	zero,at,992
 800edbc:	0800f770 	cmpltui	zero,at,989
 800edc0:	0800f820 	cmpeqi	zero,at,992
 800edc4:	0800f560 	cmpeqi	zero,at,981
 800edc8:	0800f820 	cmpeqi	zero,at,992
 800edcc:	0800f820 	cmpeqi	zero,at,992
 800edd0:	0800f5a0 	cmpeqi	zero,at,982
 800edd4:	db012a17 	ldw	r12,1192(sp)
 800edd8:	8323c83a 	sub	r17,r16,r12
 800eddc:	003f7e06 	br	800ebd8 <__alt_data_end+0xfc00ebd8>
 800ede0:	b009883a 	mov	r4,r22
 800ede4:	b80b883a 	mov	r5,r23
 800ede8:	8010ad00 	call	8010ad0 <__swsetup_r>
 800edec:	10002d1e 	bne	r2,zero,800eea4 <___vfprintf_internal_r+0x3f4>
 800edf0:	b8c0030b 	ldhu	r3,12(r23)
 800edf4:	01000284 	movi	r4,10
 800edf8:	1805883a 	mov	r2,r3
 800edfc:	1080068c 	andi	r2,r2,26
 800ee00:	113f551e 	bne	r2,r4,800eb58 <__alt_data_end+0xfc00eb58>
 800ee04:	b880038b 	ldhu	r2,14(r23)
 800ee08:	113fffcc 	andi	r4,r2,65535
 800ee0c:	2120001c 	xori	r4,r4,32768
 800ee10:	21200004 	addi	r4,r4,-32768
 800ee14:	203f5016 	blt	r4,zero,800eb58 <__alt_data_end+0xfc00eb58>
 800ee18:	bac01917 	ldw	r11,100(r23)
 800ee1c:	ba800717 	ldw	r10,28(r23)
 800ee20:	ba400917 	ldw	r9,36(r23)
 800ee24:	d9812a17 	ldw	r6,1192(sp)
 800ee28:	d9c12d17 	ldw	r7,1204(sp)
 800ee2c:	02010004 	movi	r8,1024
 800ee30:	18ffff4c 	andi	r3,r3,65533
 800ee34:	d881078d 	sth	r2,1054(sp)
 800ee38:	b009883a 	mov	r4,r22
 800ee3c:	d8800404 	addi	r2,sp,16
 800ee40:	d9410404 	addi	r5,sp,1040
 800ee44:	d8c1070d 	sth	r3,1052(sp)
 800ee48:	dac11d15 	stw	r11,1140(sp)
 800ee4c:	da810b15 	stw	r10,1068(sp)
 800ee50:	da410d15 	stw	r9,1076(sp)
 800ee54:	d8810415 	stw	r2,1040(sp)
 800ee58:	d8810815 	stw	r2,1056(sp)
 800ee5c:	da010615 	stw	r8,1048(sp)
 800ee60:	da010915 	stw	r8,1060(sp)
 800ee64:	d8010a15 	stw	zero,1064(sp)
 800ee68:	800eab00 	call	800eab0 <___vfprintf_internal_r>
 800ee6c:	1021883a 	mov	r16,r2
 800ee70:	10000416 	blt	r2,zero,800ee84 <___vfprintf_internal_r+0x3d4>
 800ee74:	b009883a 	mov	r4,r22
 800ee78:	d9410404 	addi	r5,sp,1040
 800ee7c:	80125400 	call	8012540 <_fflush_r>
 800ee80:	1006ee1e 	bne	r2,zero,8010a3c <___vfprintf_internal_r+0x1f8c>
 800ee84:	d881070b 	ldhu	r2,1052(sp)
 800ee88:	1080100c 	andi	r2,r2,64
 800ee8c:	10000326 	beq	r2,zero,800ee9c <___vfprintf_internal_r+0x3ec>
 800ee90:	b880030b 	ldhu	r2,12(r23)
 800ee94:	10801014 	ori	r2,r2,64
 800ee98:	b880030d 	sth	r2,12(r23)
 800ee9c:	8005883a 	mov	r2,r16
 800eea0:	00000106 	br	800eea8 <___vfprintf_internal_r+0x3f8>
 800eea4:	00bfffc4 	movi	r2,-1
 800eea8:	dfc14917 	ldw	ra,1316(sp)
 800eeac:	df014817 	ldw	fp,1312(sp)
 800eeb0:	ddc14717 	ldw	r23,1308(sp)
 800eeb4:	dd814617 	ldw	r22,1304(sp)
 800eeb8:	dd414517 	ldw	r21,1300(sp)
 800eebc:	dd014417 	ldw	r20,1296(sp)
 800eec0:	dcc14317 	ldw	r19,1292(sp)
 800eec4:	dc814217 	ldw	r18,1288(sp)
 800eec8:	dc414117 	ldw	r17,1284(sp)
 800eecc:	dc014017 	ldw	r16,1280(sp)
 800eed0:	dec14a04 	addi	sp,sp,1320
 800eed4:	f800283a 	ret
 800eed8:	b009883a 	mov	r4,r22
 800eedc:	b80b883a 	mov	r5,r23
 800eee0:	d9811e04 	addi	r6,sp,1144
 800eee4:	80168ac0 	call	80168ac <__sprint_r>
 800eee8:	1000081e 	bne	r2,zero,800ef0c <___vfprintf_internal_r+0x45c>
 800eeec:	da000404 	addi	r8,sp,16
 800eef0:	003f4606 	br	800ec0c <__alt_data_end+0xfc00ec0c>
 800eef4:	d8812017 	ldw	r2,1152(sp)
 800eef8:	10000426 	beq	r2,zero,800ef0c <___vfprintf_internal_r+0x45c>
 800eefc:	b009883a 	mov	r4,r22
 800ef00:	b80b883a 	mov	r5,r23
 800ef04:	d9811e04 	addi	r6,sp,1144
 800ef08:	80168ac0 	call	80168ac <__sprint_r>
 800ef0c:	b880030b 	ldhu	r2,12(r23)
 800ef10:	1080100c 	andi	r2,r2,64
 800ef14:	103fe31e 	bne	r2,zero,800eea4 <__alt_data_end+0xfc00eea4>
 800ef18:	d8812f17 	ldw	r2,1212(sp)
 800ef1c:	003fe206 	br	800eea8 <__alt_data_end+0xfc00eea8>
 800ef20:	b009883a 	mov	r4,r22
 800ef24:	8012ae80 	call	8012ae8 <__sinit>
 800ef28:	003ef906 	br	800eb10 <__alt_data_end+0xfc00eb10>
 800ef2c:	dc012a17 	ldw	r16,1192(sp)
 800ef30:	003f3906 	br	800ec18 <__alt_data_end+0xfc00ec18>
 800ef34:	1805883a 	mov	r2,r3
 800ef38:	8c400114 	ori	r17,r17,4
 800ef3c:	1c000007 	ldb	r16,0(r3)
 800ef40:	003f4206 	br	800ec4c <__alt_data_end+0xfc00ec4c>
 800ef44:	1c000007 	ldb	r16,0(r3)
 800ef48:	18800044 	addi	r2,r3,1
 800ef4c:	8286b326 	beq	r16,r10,8010a1c <___vfprintf_internal_r+0x1f6c>
 800ef50:	82fff404 	addi	r11,r16,-48
 800ef54:	1007883a 	mov	r3,r2
 800ef58:	0013883a 	mov	r9,zero
 800ef5c:	2aff3c36 	bltu	r5,r11,800ec50 <__alt_data_end+0xfc00ec50>
 800ef60:	1c000007 	ldb	r16,0(r3)
 800ef64:	4a4002a4 	muli	r9,r9,10
 800ef68:	18c00044 	addi	r3,r3,1
 800ef6c:	5a53883a 	add	r9,r11,r9
 800ef70:	82fff404 	addi	r11,r16,-48
 800ef74:	2afffa2e 	bgeu	r5,r11,800ef60 <__alt_data_end+0xfc00ef60>
 800ef78:	483f350e 	bge	r9,zero,800ec50 <__alt_data_end+0xfc00ec50>
 800ef7c:	027fffc4 	movi	r9,-1
 800ef80:	003f3306 	br	800ec50 <__alt_data_end+0xfc00ec50>
 800ef84:	8c402014 	ori	r17,r17,128
 800ef88:	1805883a 	mov	r2,r3
 800ef8c:	1c000007 	ldb	r16,0(r3)
 800ef90:	003f2e06 	br	800ec4c <__alt_data_end+0xfc00ec4c>
 800ef94:	db012d17 	ldw	r12,1204(sp)
 800ef98:	dac12d17 	ldw	r11,1204(sp)
 800ef9c:	d8c12a15 	stw	r3,1192(sp)
 800efa0:	63000017 	ldw	r12,0(r12)
 800efa4:	5ac00117 	ldw	r11,4(r11)
 800efa8:	d9812785 	stb	r6,1182(sp)
 800efac:	6009883a 	mov	r4,r12
 800efb0:	580b883a 	mov	r5,r11
 800efb4:	db013715 	stw	r12,1244(sp)
 800efb8:	da013f15 	stw	r8,1276(sp)
 800efbc:	da413e15 	stw	r9,1272(sp)
 800efc0:	dac13915 	stw	r11,1252(sp)
 800efc4:	80150d00 	call	80150d0 <__fpclassifyd>
 800efc8:	db012d17 	ldw	r12,1204(sp)
 800efcc:	04800044 	movi	r18,1
 800efd0:	da013f17 	ldw	r8,1276(sp)
 800efd4:	64c00204 	addi	r19,r12,8
 800efd8:	da413e17 	ldw	r9,1272(sp)
 800efdc:	d9013717 	ldw	r4,1244(sp)
 800efe0:	d9413917 	ldw	r5,1252(sp)
 800efe4:	1484581e 	bne	r2,r18,8010148 <___vfprintf_internal_r+0x1698>
 800efe8:	000d883a 	mov	r6,zero
 800efec:	000f883a 	mov	r7,zero
 800eff0:	800a4cc0 	call	800a4cc <__ledf2>
 800eff4:	da013f17 	ldw	r8,1276(sp)
 800eff8:	1005ef16 	blt	r2,zero,80107b8 <___vfprintf_internal_r+0x1d08>
 800effc:	dd412783 	ldbu	r21,1182(sp)
 800f000:	008011c4 	movi	r2,71
 800f004:	14053b0e 	bge	r2,r16,80104f4 <___vfprintf_internal_r+0x1a44>
 800f008:	00c200b4 	movhi	r3,2050
 800f00c:	18dc8e04 	addi	r3,r3,29240
 800f010:	d8c13115 	stw	r3,1220(sp)
 800f014:	02c000c4 	movi	r11,3
 800f018:	00bfdfc4 	movi	r2,-129
 800f01c:	dac12b15 	stw	r11,1196(sp)
 800f020:	88a2703a 	and	r17,r17,r2
 800f024:	dcc12d15 	stw	r19,1204(sp)
 800f028:	5825883a 	mov	r18,r11
 800f02c:	d8013215 	stw	zero,1224(sp)
 800f030:	d8013415 	stw	zero,1232(sp)
 800f034:	00003206 	br	800f100 <___vfprintf_internal_r+0x650>
 800f038:	8c400214 	ori	r17,r17,8
 800f03c:	1805883a 	mov	r2,r3
 800f040:	1c000007 	ldb	r16,0(r3)
 800f044:	003f0106 	br	800ec4c <__alt_data_end+0xfc00ec4c>
 800f048:	8c400414 	ori	r17,r17,16
 800f04c:	d8c12a15 	stw	r3,1192(sp)
 800f050:	88c0080c 	andi	r3,r17,32
 800f054:	d8812d17 	ldw	r2,1204(sp)
 800f058:	18017726 	beq	r3,zero,800f638 <___vfprintf_internal_r+0xb88>
 800f05c:	db012d17 	ldw	r12,1204(sp)
 800f060:	14c00017 	ldw	r19,0(r2)
 800f064:	17000117 	ldw	fp,4(r2)
 800f068:	63000204 	addi	r12,r12,8
 800f06c:	db012d15 	stw	r12,1204(sp)
 800f070:	0005883a 	mov	r2,zero
 800f074:	9f06b03a 	or	r3,r19,fp
 800f078:	d8012785 	stb	zero,1182(sp)
 800f07c:	da413215 	stw	r9,1224(sp)
 800f080:	002b883a 	mov	r21,zero
 800f084:	48000216 	blt	r9,zero,800f090 <___vfprintf_internal_r+0x5e0>
 800f088:	013fdfc4 	movi	r4,-129
 800f08c:	8922703a 	and	r17,r17,r4
 800f090:	1801ed1e 	bne	r3,zero,800f848 <___vfprintf_internal_r+0xd98>
 800f094:	4802e026 	beq	r9,zero,800fc18 <___vfprintf_internal_r+0x1168>
 800f098:	10803fcc 	andi	r2,r2,255
 800f09c:	00c00044 	movi	r3,1
 800f0a0:	10c20f26 	beq	r2,r3,800f8e0 <___vfprintf_internal_r+0xe30>
 800f0a4:	00c00084 	movi	r3,2
 800f0a8:	10c2fd26 	beq	r2,r3,800fca0 <___vfprintf_internal_r+0x11f0>
 800f0ac:	d8c10e04 	addi	r3,sp,1080
 800f0b0:	9808d0fa 	srli	r4,r19,3
 800f0b4:	e00a977a 	slli	r5,fp,29
 800f0b8:	e038d0fa 	srli	fp,fp,3
 800f0bc:	9cc001cc 	andi	r19,r19,7
 800f0c0:	98800c04 	addi	r2,r19,48
 800f0c4:	18ffffc4 	addi	r3,r3,-1
 800f0c8:	2926b03a 	or	r19,r5,r4
 800f0cc:	18800005 	stb	r2,0(r3)
 800f0d0:	9f08b03a 	or	r4,r19,fp
 800f0d4:	203ff61e 	bne	r4,zero,800f0b0 <__alt_data_end+0xfc00f0b0>
 800f0d8:	8900004c 	andi	r4,r17,1
 800f0dc:	d8c13115 	stw	r3,1220(sp)
 800f0e0:	2003791e 	bne	r4,zero,800fec8 <___vfprintf_internal_r+0x1418>
 800f0e4:	dac12817 	ldw	r11,1184(sp)
 800f0e8:	58e5c83a 	sub	r18,r11,r3
 800f0ec:	9005883a 	mov	r2,r18
 800f0f0:	9240010e 	bge	r18,r9,800f0f8 <___vfprintf_internal_r+0x648>
 800f0f4:	4805883a 	mov	r2,r9
 800f0f8:	d8812b15 	stw	r2,1196(sp)
 800f0fc:	d8013415 	stw	zero,1232(sp)
 800f100:	a8803fcc 	andi	r2,r21,255
 800f104:	1080201c 	xori	r2,r2,128
 800f108:	10bfe004 	addi	r2,r2,-128
 800f10c:	10000326 	beq	r2,zero,800f11c <___vfprintf_internal_r+0x66c>
 800f110:	db012b17 	ldw	r12,1196(sp)
 800f114:	63000044 	addi	r12,r12,1
 800f118:	db012b15 	stw	r12,1196(sp)
 800f11c:	88c0008c 	andi	r3,r17,2
 800f120:	d8c12c15 	stw	r3,1200(sp)
 800f124:	18000326 	beq	r3,zero,800f134 <___vfprintf_internal_r+0x684>
 800f128:	dac12b17 	ldw	r11,1196(sp)
 800f12c:	5ac00084 	addi	r11,r11,2
 800f130:	dac12b15 	stw	r11,1196(sp)
 800f134:	8b00210c 	andi	r12,r17,132
 800f138:	db013015 	stw	r12,1216(sp)
 800f13c:	6001c01e 	bne	r12,zero,800f840 <___vfprintf_internal_r+0xd90>
 800f140:	dac12e17 	ldw	r11,1208(sp)
 800f144:	db012b17 	ldw	r12,1196(sp)
 800f148:	5b39c83a 	sub	fp,r11,r12
 800f14c:	0701bc0e 	bge	zero,fp,800f840 <___vfprintf_internal_r+0xd90>
 800f150:	02400404 	movi	r9,16
 800f154:	d8c12017 	ldw	r3,1152(sp)
 800f158:	d8811f17 	ldw	r2,1148(sp)
 800f15c:	4f05220e 	bge	r9,fp,80105e8 <___vfprintf_internal_r+0x1b38>
 800f160:	014200b4 	movhi	r5,2050
 800f164:	295ca984 	addi	r5,r5,29350
 800f168:	d9413615 	stw	r5,1240(sp)
 800f16c:	482b883a 	mov	r21,r9
 800f170:	04c001c4 	movi	r19,7
 800f174:	00000306 	br	800f184 <___vfprintf_internal_r+0x6d4>
 800f178:	e73ffc04 	addi	fp,fp,-16
 800f17c:	42000204 	addi	r8,r8,8
 800f180:	af00130e 	bge	r21,fp,800f1d0 <___vfprintf_internal_r+0x720>
 800f184:	02c200b4 	movhi	r11,2050
 800f188:	18c00404 	addi	r3,r3,16
 800f18c:	10800044 	addi	r2,r2,1
 800f190:	5adca984 	addi	r11,r11,29350
 800f194:	42c00015 	stw	r11,0(r8)
 800f198:	45400115 	stw	r21,4(r8)
 800f19c:	d8c12015 	stw	r3,1152(sp)
 800f1a0:	d8811f15 	stw	r2,1148(sp)
 800f1a4:	98bff40e 	bge	r19,r2,800f178 <__alt_data_end+0xfc00f178>
 800f1a8:	b009883a 	mov	r4,r22
 800f1ac:	b80b883a 	mov	r5,r23
 800f1b0:	d9811e04 	addi	r6,sp,1144
 800f1b4:	80168ac0 	call	80168ac <__sprint_r>
 800f1b8:	103f541e 	bne	r2,zero,800ef0c <__alt_data_end+0xfc00ef0c>
 800f1bc:	e73ffc04 	addi	fp,fp,-16
 800f1c0:	d8c12017 	ldw	r3,1152(sp)
 800f1c4:	d8811f17 	ldw	r2,1148(sp)
 800f1c8:	da000404 	addi	r8,sp,16
 800f1cc:	af3fed16 	blt	r21,fp,800f184 <__alt_data_end+0xfc00f184>
 800f1d0:	db013617 	ldw	r12,1240(sp)
 800f1d4:	e0c7883a 	add	r3,fp,r3
 800f1d8:	10800044 	addi	r2,r2,1
 800f1dc:	43000015 	stw	r12,0(r8)
 800f1e0:	47000115 	stw	fp,4(r8)
 800f1e4:	d8c12015 	stw	r3,1152(sp)
 800f1e8:	d8811f15 	stw	r2,1148(sp)
 800f1ec:	010001c4 	movi	r4,7
 800f1f0:	2082f416 	blt	r4,r2,800fdc4 <___vfprintf_internal_r+0x1314>
 800f1f4:	d8812787 	ldb	r2,1182(sp)
 800f1f8:	42000204 	addi	r8,r8,8
 800f1fc:	10000c26 	beq	r2,zero,800f230 <___vfprintf_internal_r+0x780>
 800f200:	d8811f17 	ldw	r2,1148(sp)
 800f204:	d9012784 	addi	r4,sp,1182
 800f208:	18c00044 	addi	r3,r3,1
 800f20c:	10800044 	addi	r2,r2,1
 800f210:	41000015 	stw	r4,0(r8)
 800f214:	01000044 	movi	r4,1
 800f218:	41000115 	stw	r4,4(r8)
 800f21c:	d8c12015 	stw	r3,1152(sp)
 800f220:	d8811f15 	stw	r2,1148(sp)
 800f224:	010001c4 	movi	r4,7
 800f228:	20828d16 	blt	r4,r2,800fc60 <___vfprintf_internal_r+0x11b0>
 800f22c:	42000204 	addi	r8,r8,8
 800f230:	dac12c17 	ldw	r11,1200(sp)
 800f234:	58000c26 	beq	r11,zero,800f268 <___vfprintf_internal_r+0x7b8>
 800f238:	d8811f17 	ldw	r2,1148(sp)
 800f23c:	d9012704 	addi	r4,sp,1180
 800f240:	18c00084 	addi	r3,r3,2
 800f244:	10800044 	addi	r2,r2,1
 800f248:	41000015 	stw	r4,0(r8)
 800f24c:	01000084 	movi	r4,2
 800f250:	41000115 	stw	r4,4(r8)
 800f254:	d8c12015 	stw	r3,1152(sp)
 800f258:	d8811f15 	stw	r2,1148(sp)
 800f25c:	010001c4 	movi	r4,7
 800f260:	20828716 	blt	r4,r2,800fc80 <___vfprintf_internal_r+0x11d0>
 800f264:	42000204 	addi	r8,r8,8
 800f268:	db013017 	ldw	r12,1216(sp)
 800f26c:	00802004 	movi	r2,128
 800f270:	6081e926 	beq	r12,r2,800fa18 <___vfprintf_internal_r+0xf68>
 800f274:	db013217 	ldw	r12,1224(sp)
 800f278:	64abc83a 	sub	r21,r12,r18
 800f27c:	0540260e 	bge	zero,r21,800f318 <___vfprintf_internal_r+0x868>
 800f280:	07000404 	movi	fp,16
 800f284:	d8811f17 	ldw	r2,1148(sp)
 800f288:	e5443d0e 	bge	fp,r21,8010380 <___vfprintf_internal_r+0x18d0>
 800f28c:	014200b4 	movhi	r5,2050
 800f290:	295ca584 	addi	r5,r5,29334
 800f294:	d9412c15 	stw	r5,1200(sp)
 800f298:	04c001c4 	movi	r19,7
 800f29c:	00000306 	br	800f2ac <___vfprintf_internal_r+0x7fc>
 800f2a0:	ad7ffc04 	addi	r21,r21,-16
 800f2a4:	42000204 	addi	r8,r8,8
 800f2a8:	e540110e 	bge	fp,r21,800f2f0 <___vfprintf_internal_r+0x840>
 800f2ac:	18c00404 	addi	r3,r3,16
 800f2b0:	10800044 	addi	r2,r2,1
 800f2b4:	45000015 	stw	r20,0(r8)
 800f2b8:	47000115 	stw	fp,4(r8)
 800f2bc:	d8c12015 	stw	r3,1152(sp)
 800f2c0:	d8811f15 	stw	r2,1148(sp)
 800f2c4:	98bff60e 	bge	r19,r2,800f2a0 <__alt_data_end+0xfc00f2a0>
 800f2c8:	b009883a 	mov	r4,r22
 800f2cc:	b80b883a 	mov	r5,r23
 800f2d0:	d9811e04 	addi	r6,sp,1144
 800f2d4:	80168ac0 	call	80168ac <__sprint_r>
 800f2d8:	103f0c1e 	bne	r2,zero,800ef0c <__alt_data_end+0xfc00ef0c>
 800f2dc:	ad7ffc04 	addi	r21,r21,-16
 800f2e0:	d8c12017 	ldw	r3,1152(sp)
 800f2e4:	d8811f17 	ldw	r2,1148(sp)
 800f2e8:	da000404 	addi	r8,sp,16
 800f2ec:	e57fef16 	blt	fp,r21,800f2ac <__alt_data_end+0xfc00f2ac>
 800f2f0:	dac12c17 	ldw	r11,1200(sp)
 800f2f4:	1d47883a 	add	r3,r3,r21
 800f2f8:	10800044 	addi	r2,r2,1
 800f2fc:	42c00015 	stw	r11,0(r8)
 800f300:	45400115 	stw	r21,4(r8)
 800f304:	d8c12015 	stw	r3,1152(sp)
 800f308:	d8811f15 	stw	r2,1148(sp)
 800f30c:	010001c4 	movi	r4,7
 800f310:	20824b16 	blt	r4,r2,800fc40 <___vfprintf_internal_r+0x1190>
 800f314:	42000204 	addi	r8,r8,8
 800f318:	8880400c 	andi	r2,r17,256
 800f31c:	1001761e 	bne	r2,zero,800f8f8 <___vfprintf_internal_r+0xe48>
 800f320:	d8811f17 	ldw	r2,1148(sp)
 800f324:	db013117 	ldw	r12,1220(sp)
 800f328:	1c87883a 	add	r3,r3,r18
 800f32c:	10800044 	addi	r2,r2,1
 800f330:	43000015 	stw	r12,0(r8)
 800f334:	44800115 	stw	r18,4(r8)
 800f338:	d8c12015 	stw	r3,1152(sp)
 800f33c:	d8811f15 	stw	r2,1148(sp)
 800f340:	010001c4 	movi	r4,7
 800f344:	20822616 	blt	r4,r2,800fbe0 <___vfprintf_internal_r+0x1130>
 800f348:	42000204 	addi	r8,r8,8
 800f34c:	8c40010c 	andi	r17,r17,4
 800f350:	88003126 	beq	r17,zero,800f418 <___vfprintf_internal_r+0x968>
 800f354:	db012e17 	ldw	r12,1208(sp)
 800f358:	dac12b17 	ldw	r11,1196(sp)
 800f35c:	62e1c83a 	sub	r16,r12,r11
 800f360:	04002d0e 	bge	zero,r16,800f418 <___vfprintf_internal_r+0x968>
 800f364:	04400404 	movi	r17,16
 800f368:	d8811f17 	ldw	r2,1148(sp)
 800f36c:	8c04df0e 	bge	r17,r16,80106ec <___vfprintf_internal_r+0x1c3c>
 800f370:	010200b4 	movhi	r4,2050
 800f374:	211ca984 	addi	r4,r4,29350
 800f378:	d9013615 	stw	r4,1240(sp)
 800f37c:	048001c4 	movi	r18,7
 800f380:	00000306 	br	800f390 <___vfprintf_internal_r+0x8e0>
 800f384:	843ffc04 	addi	r16,r16,-16
 800f388:	42000204 	addi	r8,r8,8
 800f38c:	8c00130e 	bge	r17,r16,800f3dc <___vfprintf_internal_r+0x92c>
 800f390:	014200b4 	movhi	r5,2050
 800f394:	18c00404 	addi	r3,r3,16
 800f398:	10800044 	addi	r2,r2,1
 800f39c:	295ca984 	addi	r5,r5,29350
 800f3a0:	41400015 	stw	r5,0(r8)
 800f3a4:	44400115 	stw	r17,4(r8)
 800f3a8:	d8c12015 	stw	r3,1152(sp)
 800f3ac:	d8811f15 	stw	r2,1148(sp)
 800f3b0:	90bff40e 	bge	r18,r2,800f384 <__alt_data_end+0xfc00f384>
 800f3b4:	b009883a 	mov	r4,r22
 800f3b8:	b80b883a 	mov	r5,r23
 800f3bc:	d9811e04 	addi	r6,sp,1144
 800f3c0:	80168ac0 	call	80168ac <__sprint_r>
 800f3c4:	103ed11e 	bne	r2,zero,800ef0c <__alt_data_end+0xfc00ef0c>
 800f3c8:	843ffc04 	addi	r16,r16,-16
 800f3cc:	d8c12017 	ldw	r3,1152(sp)
 800f3d0:	d8811f17 	ldw	r2,1148(sp)
 800f3d4:	da000404 	addi	r8,sp,16
 800f3d8:	8c3fed16 	blt	r17,r16,800f390 <__alt_data_end+0xfc00f390>
 800f3dc:	dac13617 	ldw	r11,1240(sp)
 800f3e0:	1c07883a 	add	r3,r3,r16
 800f3e4:	10800044 	addi	r2,r2,1
 800f3e8:	42c00015 	stw	r11,0(r8)
 800f3ec:	44000115 	stw	r16,4(r8)
 800f3f0:	d8c12015 	stw	r3,1152(sp)
 800f3f4:	d8811f15 	stw	r2,1148(sp)
 800f3f8:	010001c4 	movi	r4,7
 800f3fc:	2080060e 	bge	r4,r2,800f418 <___vfprintf_internal_r+0x968>
 800f400:	b009883a 	mov	r4,r22
 800f404:	b80b883a 	mov	r5,r23
 800f408:	d9811e04 	addi	r6,sp,1144
 800f40c:	80168ac0 	call	80168ac <__sprint_r>
 800f410:	103ebe1e 	bne	r2,zero,800ef0c <__alt_data_end+0xfc00ef0c>
 800f414:	d8c12017 	ldw	r3,1152(sp)
 800f418:	d8812b17 	ldw	r2,1196(sp)
 800f41c:	db012e17 	ldw	r12,1208(sp)
 800f420:	1300010e 	bge	r2,r12,800f428 <___vfprintf_internal_r+0x978>
 800f424:	6005883a 	mov	r2,r12
 800f428:	dac12f17 	ldw	r11,1212(sp)
 800f42c:	5897883a 	add	r11,r11,r2
 800f430:	dac12f15 	stw	r11,1212(sp)
 800f434:	1801f21e 	bne	r3,zero,800fc00 <___vfprintf_internal_r+0x1150>
 800f438:	d8011f15 	stw	zero,1148(sp)
 800f43c:	da000404 	addi	r8,sp,16
 800f440:	003dd806 	br	800eba4 <__alt_data_end+0xfc00eba4>
 800f444:	8c400414 	ori	r17,r17,16
 800f448:	d8c12a15 	stw	r3,1192(sp)
 800f44c:	88c0080c 	andi	r3,r17,32
 800f450:	d8812d17 	ldw	r2,1204(sp)
 800f454:	18004626 	beq	r3,zero,800f570 <___vfprintf_internal_r+0xac0>
 800f458:	dac12d17 	ldw	r11,1204(sp)
 800f45c:	14c00017 	ldw	r19,0(r2)
 800f460:	17000117 	ldw	fp,4(r2)
 800f464:	5ac00204 	addi	r11,r11,8
 800f468:	dac12d15 	stw	r11,1204(sp)
 800f46c:	00800044 	movi	r2,1
 800f470:	9f06b03a 	or	r3,r19,fp
 800f474:	003f0006 	br	800f078 <__alt_data_end+0xfc00f078>
 800f478:	1805883a 	mov	r2,r3
 800f47c:	d8012e15 	stw	zero,1208(sp)
 800f480:	82fff404 	addi	r11,r16,-48
 800f484:	0019883a 	mov	r12,zero
 800f488:	14000007 	ldb	r16,0(r2)
 800f48c:	630002a4 	muli	r12,r12,10
 800f490:	18c00044 	addi	r3,r3,1
 800f494:	1805883a 	mov	r2,r3
 800f498:	62d9883a 	add	r12,r12,r11
 800f49c:	82fff404 	addi	r11,r16,-48
 800f4a0:	2afff92e 	bgeu	r5,r11,800f488 <__alt_data_end+0xfc00f488>
 800f4a4:	db012e15 	stw	r12,1208(sp)
 800f4a8:	003de906 	br	800ec50 <__alt_data_end+0xfc00ec50>
 800f4ac:	8c400414 	ori	r17,r17,16
 800f4b0:	d8c12a15 	stw	r3,1192(sp)
 800f4b4:	d9812785 	stb	r6,1182(sp)
 800f4b8:	8880080c 	andi	r2,r17,32
 800f4bc:	d8c12d17 	ldw	r3,1204(sp)
 800f4c0:	10007a26 	beq	r2,zero,800f6ac <___vfprintf_internal_r+0xbfc>
 800f4c4:	db012d17 	ldw	r12,1204(sp)
 800f4c8:	18800117 	ldw	r2,4(r3)
 800f4cc:	1cc00017 	ldw	r19,0(r3)
 800f4d0:	63000204 	addi	r12,r12,8
 800f4d4:	db012d15 	stw	r12,1204(sp)
 800f4d8:	1039883a 	mov	fp,r2
 800f4dc:	10031016 	blt	r2,zero,8010120 <___vfprintf_internal_r+0x1670>
 800f4e0:	dd412783 	ldbu	r21,1182(sp)
 800f4e4:	da413215 	stw	r9,1224(sp)
 800f4e8:	00800044 	movi	r2,1
 800f4ec:	9f06b03a 	or	r3,r19,fp
 800f4f0:	003ee406 	br	800f084 <__alt_data_end+0xfc00f084>
 800f4f4:	030200b4 	movhi	r12,2050
 800f4f8:	631c9104 	addi	r12,r12,29252
 800f4fc:	d8c12a15 	stw	r3,1192(sp)
 800f500:	d9812785 	stb	r6,1182(sp)
 800f504:	db013b15 	stw	r12,1260(sp)
 800f508:	88c0080c 	andi	r3,r17,32
 800f50c:	d8812d17 	ldw	r2,1204(sp)
 800f510:	18002b26 	beq	r3,zero,800f5c0 <___vfprintf_internal_r+0xb10>
 800f514:	dac12d17 	ldw	r11,1204(sp)
 800f518:	14c00017 	ldw	r19,0(r2)
 800f51c:	17000117 	ldw	fp,4(r2)
 800f520:	5ac00204 	addi	r11,r11,8
 800f524:	dac12d15 	stw	r11,1204(sp)
 800f528:	8880004c 	andi	r2,r17,1
 800f52c:	10025b26 	beq	r2,zero,800fe9c <___vfprintf_internal_r+0x13ec>
 800f530:	9f06b03a 	or	r3,r19,fp
 800f534:	18037026 	beq	r3,zero,80102f8 <___vfprintf_internal_r+0x1848>
 800f538:	00800c04 	movi	r2,48
 800f53c:	d8812705 	stb	r2,1180(sp)
 800f540:	dc012745 	stb	r16,1181(sp)
 800f544:	8c400094 	ori	r17,r17,2
 800f548:	00800084 	movi	r2,2
 800f54c:	003eca06 	br	800f078 <__alt_data_end+0xfc00f078>
 800f550:	8c400814 	ori	r17,r17,32
 800f554:	1805883a 	mov	r2,r3
 800f558:	1c000007 	ldb	r16,0(r3)
 800f55c:	003dbb06 	br	800ec4c <__alt_data_end+0xfc00ec4c>
 800f560:	d8c12a15 	stw	r3,1192(sp)
 800f564:	88c0080c 	andi	r3,r17,32
 800f568:	d8812d17 	ldw	r2,1204(sp)
 800f56c:	183fba1e 	bne	r3,zero,800f458 <__alt_data_end+0xfc00f458>
 800f570:	88c0040c 	andi	r3,r17,16
 800f574:	18024c1e 	bne	r3,zero,800fea8 <___vfprintf_internal_r+0x13f8>
 800f578:	88c0100c 	andi	r3,r17,64
 800f57c:	18024a26 	beq	r3,zero,800fea8 <___vfprintf_internal_r+0x13f8>
 800f580:	dac12d17 	ldw	r11,1204(sp)
 800f584:	14c0000b 	ldhu	r19,0(r2)
 800f588:	0039883a 	mov	fp,zero
 800f58c:	5ac00104 	addi	r11,r11,4
 800f590:	dac12d15 	stw	r11,1204(sp)
 800f594:	00800044 	movi	r2,1
 800f598:	9807883a 	mov	r3,r19
 800f59c:	003eb606 	br	800f078 <__alt_data_end+0xfc00f078>
 800f5a0:	008200b4 	movhi	r2,2050
 800f5a4:	109c9604 	addi	r2,r2,29272
 800f5a8:	d8c12a15 	stw	r3,1192(sp)
 800f5ac:	d8813b15 	stw	r2,1260(sp)
 800f5b0:	d9812785 	stb	r6,1182(sp)
 800f5b4:	88c0080c 	andi	r3,r17,32
 800f5b8:	d8812d17 	ldw	r2,1204(sp)
 800f5bc:	183fd51e 	bne	r3,zero,800f514 <__alt_data_end+0xfc00f514>
 800f5c0:	88c0040c 	andi	r3,r17,16
 800f5c4:	18034126 	beq	r3,zero,80102cc <___vfprintf_internal_r+0x181c>
 800f5c8:	db012d17 	ldw	r12,1204(sp)
 800f5cc:	14c00017 	ldw	r19,0(r2)
 800f5d0:	0039883a 	mov	fp,zero
 800f5d4:	63000104 	addi	r12,r12,4
 800f5d8:	db012d15 	stw	r12,1204(sp)
 800f5dc:	003fd206 	br	800f528 <__alt_data_end+0xfc00f528>
 800f5e0:	1c000007 	ldb	r16,0(r3)
 800f5e4:	81c3d626 	beq	r16,r7,8010540 <___vfprintf_internal_r+0x1a90>
 800f5e8:	8c400414 	ori	r17,r17,16
 800f5ec:	1805883a 	mov	r2,r3
 800f5f0:	003d9606 	br	800ec4c <__alt_data_end+0xfc00ec4c>
 800f5f4:	d8c12a15 	stw	r3,1192(sp)
 800f5f8:	d9812785 	stb	r6,1182(sp)
 800f5fc:	8880080c 	andi	r2,r17,32
 800f600:	10033f26 	beq	r2,zero,8010300 <___vfprintf_internal_r+0x1850>
 800f604:	db012d17 	ldw	r12,1204(sp)
 800f608:	dac12f17 	ldw	r11,1212(sp)
 800f60c:	60800017 	ldw	r2,0(r12)
 800f610:	5807d7fa 	srai	r3,r11,31
 800f614:	63000104 	addi	r12,r12,4
 800f618:	db012d15 	stw	r12,1204(sp)
 800f61c:	12c00015 	stw	r11,0(r2)
 800f620:	10c00115 	stw	r3,4(r2)
 800f624:	003d5f06 	br	800eba4 <__alt_data_end+0xfc00eba4>
 800f628:	d8c12a15 	stw	r3,1192(sp)
 800f62c:	88c0080c 	andi	r3,r17,32
 800f630:	d8812d17 	ldw	r2,1204(sp)
 800f634:	183e891e 	bne	r3,zero,800f05c <__alt_data_end+0xfc00f05c>
 800f638:	88c0040c 	andi	r3,r17,16
 800f63c:	1801ea1e 	bne	r3,zero,800fde8 <___vfprintf_internal_r+0x1338>
 800f640:	88c0100c 	andi	r3,r17,64
 800f644:	1801e826 	beq	r3,zero,800fde8 <___vfprintf_internal_r+0x1338>
 800f648:	db012d17 	ldw	r12,1204(sp)
 800f64c:	14c0000b 	ldhu	r19,0(r2)
 800f650:	0039883a 	mov	fp,zero
 800f654:	63000104 	addi	r12,r12,4
 800f658:	db012d15 	stw	r12,1204(sp)
 800f65c:	0005883a 	mov	r2,zero
 800f660:	9807883a 	mov	r3,r19
 800f664:	003e8406 	br	800f078 <__alt_data_end+0xfc00f078>
 800f668:	30803fcc 	andi	r2,r6,255
 800f66c:	1080201c 	xori	r2,r2,128
 800f670:	10bfe004 	addi	r2,r2,-128
 800f674:	10031d1e 	bne	r2,zero,80102ec <___vfprintf_internal_r+0x183c>
 800f678:	1805883a 	mov	r2,r3
 800f67c:	01800804 	movi	r6,32
 800f680:	1c000007 	ldb	r16,0(r3)
 800f684:	003d7106 	br	800ec4c <__alt_data_end+0xfc00ec4c>
 800f688:	8c400054 	ori	r17,r17,1
 800f68c:	1805883a 	mov	r2,r3
 800f690:	1c000007 	ldb	r16,0(r3)
 800f694:	003d6d06 	br	800ec4c <__alt_data_end+0xfc00ec4c>
 800f698:	d8c12a15 	stw	r3,1192(sp)
 800f69c:	d9812785 	stb	r6,1182(sp)
 800f6a0:	8880080c 	andi	r2,r17,32
 800f6a4:	d8c12d17 	ldw	r3,1204(sp)
 800f6a8:	103f861e 	bne	r2,zero,800f4c4 <__alt_data_end+0xfc00f4c4>
 800f6ac:	8880040c 	andi	r2,r17,16
 800f6b0:	1001f31e 	bne	r2,zero,800fe80 <___vfprintf_internal_r+0x13d0>
 800f6b4:	8880100c 	andi	r2,r17,64
 800f6b8:	1001f126 	beq	r2,zero,800fe80 <___vfprintf_internal_r+0x13d0>
 800f6bc:	1cc0000f 	ldh	r19,0(r3)
 800f6c0:	db012d17 	ldw	r12,1204(sp)
 800f6c4:	9839d7fa 	srai	fp,r19,31
 800f6c8:	63000104 	addi	r12,r12,4
 800f6cc:	db012d15 	stw	r12,1204(sp)
 800f6d0:	e005883a 	mov	r2,fp
 800f6d4:	003f8106 	br	800f4dc <__alt_data_end+0xfc00f4dc>
 800f6d8:	8c401014 	ori	r17,r17,64
 800f6dc:	1805883a 	mov	r2,r3
 800f6e0:	1c000007 	ldb	r16,0(r3)
 800f6e4:	003d5906 	br	800ec4c <__alt_data_end+0xfc00ec4c>
 800f6e8:	db012d17 	ldw	r12,1204(sp)
 800f6ec:	d8c12a15 	stw	r3,1192(sp)
 800f6f0:	00c00044 	movi	r3,1
 800f6f4:	60800017 	ldw	r2,0(r12)
 800f6f8:	63000104 	addi	r12,r12,4
 800f6fc:	d8c12b15 	stw	r3,1196(sp)
 800f700:	d8012785 	stb	zero,1182(sp)
 800f704:	d8810405 	stb	r2,1040(sp)
 800f708:	db012d15 	stw	r12,1204(sp)
 800f70c:	dac10404 	addi	r11,sp,1040
 800f710:	1825883a 	mov	r18,r3
 800f714:	d8013215 	stw	zero,1224(sp)
 800f718:	d8013415 	stw	zero,1232(sp)
 800f71c:	dac13115 	stw	r11,1220(sp)
 800f720:	0005883a 	mov	r2,zero
 800f724:	003e7d06 	br	800f11c <__alt_data_end+0xfc00f11c>
 800f728:	db012d17 	ldw	r12,1204(sp)
 800f72c:	00800c04 	movi	r2,48
 800f730:	d8812705 	stb	r2,1180(sp)
 800f734:	64c00017 	ldw	r19,0(r12)
 800f738:	00801e04 	movi	r2,120
 800f73c:	d8812745 	stb	r2,1181(sp)
 800f740:	008200b4 	movhi	r2,2050
 800f744:	109c9604 	addi	r2,r2,29272
 800f748:	63000104 	addi	r12,r12,4
 800f74c:	d8c12a15 	stw	r3,1192(sp)
 800f750:	d8813b15 	stw	r2,1260(sp)
 800f754:	0039883a 	mov	fp,zero
 800f758:	8c400094 	ori	r17,r17,2
 800f75c:	db012d15 	stw	r12,1204(sp)
 800f760:	00800084 	movi	r2,2
 800f764:	04001e04 	movi	r16,120
 800f768:	9807883a 	mov	r3,r19
 800f76c:	003e4206 	br	800f078 <__alt_data_end+0xfc00f078>
 800f770:	dac12d17 	ldw	r11,1204(sp)
 800f774:	db012d17 	ldw	r12,1204(sp)
 800f778:	d8c12a15 	stw	r3,1192(sp)
 800f77c:	5ac00017 	ldw	r11,0(r11)
 800f780:	d8012785 	stb	zero,1182(sp)
 800f784:	64c00104 	addi	r19,r12,4
 800f788:	dac13115 	stw	r11,1220(sp)
 800f78c:	5803e826 	beq	r11,zero,8010730 <___vfprintf_internal_r+0x1c80>
 800f790:	d9013117 	ldw	r4,1220(sp)
 800f794:	48037a16 	blt	r9,zero,8010580 <___vfprintf_internal_r+0x1ad0>
 800f798:	480d883a 	mov	r6,r9
 800f79c:	000b883a 	mov	r5,zero
 800f7a0:	da013f15 	stw	r8,1276(sp)
 800f7a4:	da413e15 	stw	r9,1272(sp)
 800f7a8:	80137f80 	call	80137f8 <memchr>
 800f7ac:	da013f17 	ldw	r8,1276(sp)
 800f7b0:	da413e17 	ldw	r9,1272(sp)
 800f7b4:	10044426 	beq	r2,zero,80108c8 <___vfprintf_internal_r+0x1e18>
 800f7b8:	d8c13117 	ldw	r3,1220(sp)
 800f7bc:	10e5c83a 	sub	r18,r2,r3
 800f7c0:	4c834416 	blt	r9,r18,80104d4 <___vfprintf_internal_r+0x1a24>
 800f7c4:	9005883a 	mov	r2,r18
 800f7c8:	90037216 	blt	r18,zero,8010594 <___vfprintf_internal_r+0x1ae4>
 800f7cc:	dd412783 	ldbu	r21,1182(sp)
 800f7d0:	d8812b15 	stw	r2,1196(sp)
 800f7d4:	dcc12d15 	stw	r19,1204(sp)
 800f7d8:	d8013215 	stw	zero,1224(sp)
 800f7dc:	d8013415 	stw	zero,1232(sp)
 800f7e0:	003e4706 	br	800f100 <__alt_data_end+0xfc00f100>
 800f7e4:	dac12d17 	ldw	r11,1204(sp)
 800f7e8:	db012d17 	ldw	r12,1204(sp)
 800f7ec:	5ac00017 	ldw	r11,0(r11)
 800f7f0:	dac12e15 	stw	r11,1208(sp)
 800f7f4:	62c00104 	addi	r11,r12,4
 800f7f8:	db012e17 	ldw	r12,1208(sp)
 800f7fc:	60034a16 	blt	r12,zero,8010528 <___vfprintf_internal_r+0x1a78>
 800f800:	dac12d15 	stw	r11,1204(sp)
 800f804:	1805883a 	mov	r2,r3
 800f808:	1c000007 	ldb	r16,0(r3)
 800f80c:	003d0f06 	br	800ec4c <__alt_data_end+0xfc00ec4c>
 800f810:	1805883a 	mov	r2,r3
 800f814:	01800ac4 	movi	r6,43
 800f818:	1c000007 	ldb	r16,0(r3)
 800f81c:	003d0b06 	br	800ec4c <__alt_data_end+0xfc00ec4c>
 800f820:	d8c12a15 	stw	r3,1192(sp)
 800f824:	d9812785 	stb	r6,1182(sp)
 800f828:	803db226 	beq	r16,zero,800eef4 <__alt_data_end+0xfc00eef4>
 800f82c:	00c00044 	movi	r3,1
 800f830:	d8c12b15 	stw	r3,1196(sp)
 800f834:	dc010405 	stb	r16,1040(sp)
 800f838:	d8012785 	stb	zero,1182(sp)
 800f83c:	003fb306 	br	800f70c <__alt_data_end+0xfc00f70c>
 800f840:	d8c12017 	ldw	r3,1152(sp)
 800f844:	003e6d06 	br	800f1fc <__alt_data_end+0xfc00f1fc>
 800f848:	10803fcc 	andi	r2,r2,255
 800f84c:	00c00044 	movi	r3,1
 800f850:	10fe141e 	bne	r2,r3,800f0a4 <__alt_data_end+0xfc00f0a4>
 800f854:	e000021e 	bne	fp,zero,800f860 <___vfprintf_internal_r+0xdb0>
 800f858:	00800244 	movi	r2,9
 800f85c:	14c0202e 	bgeu	r2,r19,800f8e0 <___vfprintf_internal_r+0xe30>
 800f860:	dc012b15 	stw	r16,1196(sp)
 800f864:	dc412c15 	stw	r17,1200(sp)
 800f868:	9821883a 	mov	r16,r19
 800f86c:	e023883a 	mov	r17,fp
 800f870:	dc810e04 	addi	r18,sp,1080
 800f874:	4027883a 	mov	r19,r8
 800f878:	4839883a 	mov	fp,r9
 800f87c:	8009883a 	mov	r4,r16
 800f880:	880b883a 	mov	r5,r17
 800f884:	01800284 	movi	r6,10
 800f888:	000f883a 	mov	r7,zero
 800f88c:	8018a780 	call	8018a78 <__umoddi3>
 800f890:	10800c04 	addi	r2,r2,48
 800f894:	94bfffc4 	addi	r18,r18,-1
 800f898:	8009883a 	mov	r4,r16
 800f89c:	880b883a 	mov	r5,r17
 800f8a0:	01800284 	movi	r6,10
 800f8a4:	000f883a 	mov	r7,zero
 800f8a8:	90800005 	stb	r2,0(r18)
 800f8ac:	80184b80 	call	80184b8 <__udivdi3>
 800f8b0:	1021883a 	mov	r16,r2
 800f8b4:	10c4b03a 	or	r2,r2,r3
 800f8b8:	1823883a 	mov	r17,r3
 800f8bc:	103fef1e 	bne	r2,zero,800f87c <__alt_data_end+0xfc00f87c>
 800f8c0:	dac12817 	ldw	r11,1184(sp)
 800f8c4:	dc813115 	stw	r18,1220(sp)
 800f8c8:	dc012b17 	ldw	r16,1196(sp)
 800f8cc:	9811883a 	mov	r8,r19
 800f8d0:	dc412c17 	ldw	r17,1200(sp)
 800f8d4:	e013883a 	mov	r9,fp
 800f8d8:	5ca5c83a 	sub	r18,r11,r18
 800f8dc:	003e0306 	br	800f0ec <__alt_data_end+0xfc00f0ec>
 800f8e0:	9cc00c04 	addi	r19,r19,48
 800f8e4:	d8c10dc4 	addi	r3,sp,1079
 800f8e8:	dcc10dc5 	stb	r19,1079(sp)
 800f8ec:	dc813c17 	ldw	r18,1264(sp)
 800f8f0:	d8c13115 	stw	r3,1220(sp)
 800f8f4:	003dfd06 	br	800f0ec <__alt_data_end+0xfc00f0ec>
 800f8f8:	00801944 	movi	r2,101
 800f8fc:	1400710e 	bge	r2,r16,800fac4 <___vfprintf_internal_r+0x1014>
 800f900:	d9013717 	ldw	r4,1244(sp)
 800f904:	d9413917 	ldw	r5,1252(sp)
 800f908:	000d883a 	mov	r6,zero
 800f90c:	000f883a 	mov	r7,zero
 800f910:	d8c13d15 	stw	r3,1268(sp)
 800f914:	da013f15 	stw	r8,1276(sp)
 800f918:	800a3680 	call	800a368 <__eqdf2>
 800f91c:	d8c13d17 	ldw	r3,1268(sp)
 800f920:	da013f17 	ldw	r8,1276(sp)
 800f924:	1000ef1e 	bne	r2,zero,800fce4 <___vfprintf_internal_r+0x1234>
 800f928:	d8811f17 	ldw	r2,1148(sp)
 800f92c:	010200b4 	movhi	r4,2050
 800f930:	211c9d04 	addi	r4,r4,29300
 800f934:	18c00044 	addi	r3,r3,1
 800f938:	10800044 	addi	r2,r2,1
 800f93c:	41000015 	stw	r4,0(r8)
 800f940:	01000044 	movi	r4,1
 800f944:	41000115 	stw	r4,4(r8)
 800f948:	d8c12015 	stw	r3,1152(sp)
 800f94c:	d8811f15 	stw	r2,1148(sp)
 800f950:	010001c4 	movi	r4,7
 800f954:	20828e16 	blt	r4,r2,8010390 <___vfprintf_internal_r+0x18e0>
 800f958:	42000204 	addi	r8,r8,8
 800f95c:	d8812617 	ldw	r2,1176(sp)
 800f960:	dac13317 	ldw	r11,1228(sp)
 800f964:	12c00216 	blt	r2,r11,800f970 <___vfprintf_internal_r+0xec0>
 800f968:	8880004c 	andi	r2,r17,1
 800f96c:	103e7726 	beq	r2,zero,800f34c <__alt_data_end+0xfc00f34c>
 800f970:	db013817 	ldw	r12,1248(sp)
 800f974:	d8811f17 	ldw	r2,1148(sp)
 800f978:	dac13517 	ldw	r11,1236(sp)
 800f97c:	1b07883a 	add	r3,r3,r12
 800f980:	10800044 	addi	r2,r2,1
 800f984:	42c00015 	stw	r11,0(r8)
 800f988:	43000115 	stw	r12,4(r8)
 800f98c:	d8c12015 	stw	r3,1152(sp)
 800f990:	d8811f15 	stw	r2,1148(sp)
 800f994:	010001c4 	movi	r4,7
 800f998:	2082ed16 	blt	r4,r2,8010550 <___vfprintf_internal_r+0x1aa0>
 800f99c:	42000204 	addi	r8,r8,8
 800f9a0:	db013317 	ldw	r12,1228(sp)
 800f9a4:	643fffc4 	addi	r16,r12,-1
 800f9a8:	043e680e 	bge	zero,r16,800f34c <__alt_data_end+0xfc00f34c>
 800f9ac:	04800404 	movi	r18,16
 800f9b0:	d8811f17 	ldw	r2,1148(sp)
 800f9b4:	94007e0e 	bge	r18,r16,800fbb0 <___vfprintf_internal_r+0x1100>
 800f9b8:	014200b4 	movhi	r5,2050
 800f9bc:	295ca584 	addi	r5,r5,29334
 800f9c0:	d9412c15 	stw	r5,1200(sp)
 800f9c4:	054001c4 	movi	r21,7
 800f9c8:	00000306 	br	800f9d8 <___vfprintf_internal_r+0xf28>
 800f9cc:	42000204 	addi	r8,r8,8
 800f9d0:	843ffc04 	addi	r16,r16,-16
 800f9d4:	9400790e 	bge	r18,r16,800fbbc <___vfprintf_internal_r+0x110c>
 800f9d8:	18c00404 	addi	r3,r3,16
 800f9dc:	10800044 	addi	r2,r2,1
 800f9e0:	45000015 	stw	r20,0(r8)
 800f9e4:	44800115 	stw	r18,4(r8)
 800f9e8:	d8c12015 	stw	r3,1152(sp)
 800f9ec:	d8811f15 	stw	r2,1148(sp)
 800f9f0:	a8bff60e 	bge	r21,r2,800f9cc <__alt_data_end+0xfc00f9cc>
 800f9f4:	b009883a 	mov	r4,r22
 800f9f8:	b80b883a 	mov	r5,r23
 800f9fc:	d9811e04 	addi	r6,sp,1144
 800fa00:	80168ac0 	call	80168ac <__sprint_r>
 800fa04:	103d411e 	bne	r2,zero,800ef0c <__alt_data_end+0xfc00ef0c>
 800fa08:	d8c12017 	ldw	r3,1152(sp)
 800fa0c:	d8811f17 	ldw	r2,1148(sp)
 800fa10:	da000404 	addi	r8,sp,16
 800fa14:	003fee06 	br	800f9d0 <__alt_data_end+0xfc00f9d0>
 800fa18:	dac12e17 	ldw	r11,1208(sp)
 800fa1c:	db012b17 	ldw	r12,1196(sp)
 800fa20:	5b2bc83a 	sub	r21,r11,r12
 800fa24:	057e130e 	bge	zero,r21,800f274 <__alt_data_end+0xfc00f274>
 800fa28:	07000404 	movi	fp,16
 800fa2c:	d8811f17 	ldw	r2,1148(sp)
 800fa30:	e543640e 	bge	fp,r21,80107c4 <___vfprintf_internal_r+0x1d14>
 800fa34:	014200b4 	movhi	r5,2050
 800fa38:	295ca584 	addi	r5,r5,29334
 800fa3c:	d9412c15 	stw	r5,1200(sp)
 800fa40:	04c001c4 	movi	r19,7
 800fa44:	00000306 	br	800fa54 <___vfprintf_internal_r+0xfa4>
 800fa48:	ad7ffc04 	addi	r21,r21,-16
 800fa4c:	42000204 	addi	r8,r8,8
 800fa50:	e540110e 	bge	fp,r21,800fa98 <___vfprintf_internal_r+0xfe8>
 800fa54:	18c00404 	addi	r3,r3,16
 800fa58:	10800044 	addi	r2,r2,1
 800fa5c:	45000015 	stw	r20,0(r8)
 800fa60:	47000115 	stw	fp,4(r8)
 800fa64:	d8c12015 	stw	r3,1152(sp)
 800fa68:	d8811f15 	stw	r2,1148(sp)
 800fa6c:	98bff60e 	bge	r19,r2,800fa48 <__alt_data_end+0xfc00fa48>
 800fa70:	b009883a 	mov	r4,r22
 800fa74:	b80b883a 	mov	r5,r23
 800fa78:	d9811e04 	addi	r6,sp,1144
 800fa7c:	80168ac0 	call	80168ac <__sprint_r>
 800fa80:	103d221e 	bne	r2,zero,800ef0c <__alt_data_end+0xfc00ef0c>
 800fa84:	ad7ffc04 	addi	r21,r21,-16
 800fa88:	d8c12017 	ldw	r3,1152(sp)
 800fa8c:	d8811f17 	ldw	r2,1148(sp)
 800fa90:	da000404 	addi	r8,sp,16
 800fa94:	e57fef16 	blt	fp,r21,800fa54 <__alt_data_end+0xfc00fa54>
 800fa98:	dac12c17 	ldw	r11,1200(sp)
 800fa9c:	1d47883a 	add	r3,r3,r21
 800faa0:	10800044 	addi	r2,r2,1
 800faa4:	42c00015 	stw	r11,0(r8)
 800faa8:	45400115 	stw	r21,4(r8)
 800faac:	d8c12015 	stw	r3,1152(sp)
 800fab0:	d8811f15 	stw	r2,1148(sp)
 800fab4:	010001c4 	movi	r4,7
 800fab8:	20819116 	blt	r4,r2,8010100 <___vfprintf_internal_r+0x1650>
 800fabc:	42000204 	addi	r8,r8,8
 800fac0:	003dec06 	br	800f274 <__alt_data_end+0xfc00f274>
 800fac4:	db013317 	ldw	r12,1228(sp)
 800fac8:	00800044 	movi	r2,1
 800facc:	18c00044 	addi	r3,r3,1
 800fad0:	1301530e 	bge	r2,r12,8010020 <___vfprintf_internal_r+0x1570>
 800fad4:	dc011f17 	ldw	r16,1148(sp)
 800fad8:	dac13117 	ldw	r11,1220(sp)
 800fadc:	00800044 	movi	r2,1
 800fae0:	84000044 	addi	r16,r16,1
 800fae4:	40800115 	stw	r2,4(r8)
 800fae8:	42c00015 	stw	r11,0(r8)
 800faec:	d8c12015 	stw	r3,1152(sp)
 800faf0:	dc011f15 	stw	r16,1148(sp)
 800faf4:	008001c4 	movi	r2,7
 800faf8:	14016b16 	blt	r2,r16,80100a8 <___vfprintf_internal_r+0x15f8>
 800fafc:	42000204 	addi	r8,r8,8
 800fb00:	db013817 	ldw	r12,1248(sp)
 800fb04:	dac13517 	ldw	r11,1236(sp)
 800fb08:	84000044 	addi	r16,r16,1
 800fb0c:	1b07883a 	add	r3,r3,r12
 800fb10:	42c00015 	stw	r11,0(r8)
 800fb14:	43000115 	stw	r12,4(r8)
 800fb18:	d8c12015 	stw	r3,1152(sp)
 800fb1c:	dc011f15 	stw	r16,1148(sp)
 800fb20:	008001c4 	movi	r2,7
 800fb24:	14016916 	blt	r2,r16,80100cc <___vfprintf_internal_r+0x161c>
 800fb28:	44800204 	addi	r18,r8,8
 800fb2c:	d9013717 	ldw	r4,1244(sp)
 800fb30:	d9413917 	ldw	r5,1252(sp)
 800fb34:	000d883a 	mov	r6,zero
 800fb38:	000f883a 	mov	r7,zero
 800fb3c:	d8c13d15 	stw	r3,1268(sp)
 800fb40:	800a3680 	call	800a368 <__eqdf2>
 800fb44:	d8c13d17 	ldw	r3,1268(sp)
 800fb48:	db013317 	ldw	r12,1228(sp)
 800fb4c:	1000ae26 	beq	r2,zero,800fe08 <___vfprintf_internal_r+0x1358>
 800fb50:	dac13117 	ldw	r11,1220(sp)
 800fb54:	60bfffc4 	addi	r2,r12,-1
 800fb58:	1887883a 	add	r3,r3,r2
 800fb5c:	59000044 	addi	r4,r11,1
 800fb60:	84000044 	addi	r16,r16,1
 800fb64:	90800115 	stw	r2,4(r18)
 800fb68:	91000015 	stw	r4,0(r18)
 800fb6c:	d8c12015 	stw	r3,1152(sp)
 800fb70:	dc011f15 	stw	r16,1148(sp)
 800fb74:	008001c4 	movi	r2,7
 800fb78:	14014216 	blt	r2,r16,8010084 <___vfprintf_internal_r+0x15d4>
 800fb7c:	94800204 	addi	r18,r18,8
 800fb80:	dac13a17 	ldw	r11,1256(sp)
 800fb84:	dd4122c4 	addi	r21,sp,1163
 800fb88:	84000044 	addi	r16,r16,1
 800fb8c:	58c7883a 	add	r3,r11,r3
 800fb90:	95400015 	stw	r21,0(r18)
 800fb94:	92c00115 	stw	r11,4(r18)
 800fb98:	d8c12015 	stw	r3,1152(sp)
 800fb9c:	dc011f15 	stw	r16,1148(sp)
 800fba0:	008001c4 	movi	r2,7
 800fba4:	14000e16 	blt	r2,r16,800fbe0 <___vfprintf_internal_r+0x1130>
 800fba8:	92000204 	addi	r8,r18,8
 800fbac:	003de706 	br	800f34c <__alt_data_end+0xfc00f34c>
 800fbb0:	010200b4 	movhi	r4,2050
 800fbb4:	211ca584 	addi	r4,r4,29334
 800fbb8:	d9012c15 	stw	r4,1200(sp)
 800fbbc:	dac12c17 	ldw	r11,1200(sp)
 800fbc0:	1c07883a 	add	r3,r3,r16
 800fbc4:	44000115 	stw	r16,4(r8)
 800fbc8:	42c00015 	stw	r11,0(r8)
 800fbcc:	10800044 	addi	r2,r2,1
 800fbd0:	d8c12015 	stw	r3,1152(sp)
 800fbd4:	d8811f15 	stw	r2,1148(sp)
 800fbd8:	010001c4 	movi	r4,7
 800fbdc:	20bdda0e 	bge	r4,r2,800f348 <__alt_data_end+0xfc00f348>
 800fbe0:	b009883a 	mov	r4,r22
 800fbe4:	b80b883a 	mov	r5,r23
 800fbe8:	d9811e04 	addi	r6,sp,1144
 800fbec:	80168ac0 	call	80168ac <__sprint_r>
 800fbf0:	103cc61e 	bne	r2,zero,800ef0c <__alt_data_end+0xfc00ef0c>
 800fbf4:	d8c12017 	ldw	r3,1152(sp)
 800fbf8:	da000404 	addi	r8,sp,16
 800fbfc:	003dd306 	br	800f34c <__alt_data_end+0xfc00f34c>
 800fc00:	b009883a 	mov	r4,r22
 800fc04:	b80b883a 	mov	r5,r23
 800fc08:	d9811e04 	addi	r6,sp,1144
 800fc0c:	80168ac0 	call	80168ac <__sprint_r>
 800fc10:	103e0926 	beq	r2,zero,800f438 <__alt_data_end+0xfc00f438>
 800fc14:	003cbd06 	br	800ef0c <__alt_data_end+0xfc00ef0c>
 800fc18:	10803fcc 	andi	r2,r2,255
 800fc1c:	1000651e 	bne	r2,zero,800fdb4 <___vfprintf_internal_r+0x1304>
 800fc20:	8880004c 	andi	r2,r17,1
 800fc24:	10013226 	beq	r2,zero,80100f0 <___vfprintf_internal_r+0x1640>
 800fc28:	00800c04 	movi	r2,48
 800fc2c:	d8c10dc4 	addi	r3,sp,1079
 800fc30:	d8810dc5 	stb	r2,1079(sp)
 800fc34:	dc813c17 	ldw	r18,1264(sp)
 800fc38:	d8c13115 	stw	r3,1220(sp)
 800fc3c:	003d2b06 	br	800f0ec <__alt_data_end+0xfc00f0ec>
 800fc40:	b009883a 	mov	r4,r22
 800fc44:	b80b883a 	mov	r5,r23
 800fc48:	d9811e04 	addi	r6,sp,1144
 800fc4c:	80168ac0 	call	80168ac <__sprint_r>
 800fc50:	103cae1e 	bne	r2,zero,800ef0c <__alt_data_end+0xfc00ef0c>
 800fc54:	d8c12017 	ldw	r3,1152(sp)
 800fc58:	da000404 	addi	r8,sp,16
 800fc5c:	003dae06 	br	800f318 <__alt_data_end+0xfc00f318>
 800fc60:	b009883a 	mov	r4,r22
 800fc64:	b80b883a 	mov	r5,r23
 800fc68:	d9811e04 	addi	r6,sp,1144
 800fc6c:	80168ac0 	call	80168ac <__sprint_r>
 800fc70:	103ca61e 	bne	r2,zero,800ef0c <__alt_data_end+0xfc00ef0c>
 800fc74:	d8c12017 	ldw	r3,1152(sp)
 800fc78:	da000404 	addi	r8,sp,16
 800fc7c:	003d6c06 	br	800f230 <__alt_data_end+0xfc00f230>
 800fc80:	b009883a 	mov	r4,r22
 800fc84:	b80b883a 	mov	r5,r23
 800fc88:	d9811e04 	addi	r6,sp,1144
 800fc8c:	80168ac0 	call	80168ac <__sprint_r>
 800fc90:	103c9e1e 	bne	r2,zero,800ef0c <__alt_data_end+0xfc00ef0c>
 800fc94:	d8c12017 	ldw	r3,1152(sp)
 800fc98:	da000404 	addi	r8,sp,16
 800fc9c:	003d7206 	br	800f268 <__alt_data_end+0xfc00f268>
 800fca0:	d9413b17 	ldw	r5,1260(sp)
 800fca4:	d8c10e04 	addi	r3,sp,1080
 800fca8:	988003cc 	andi	r2,r19,15
 800fcac:	e008973a 	slli	r4,fp,28
 800fcb0:	2885883a 	add	r2,r5,r2
 800fcb4:	9826d13a 	srli	r19,r19,4
 800fcb8:	10800003 	ldbu	r2,0(r2)
 800fcbc:	e038d13a 	srli	fp,fp,4
 800fcc0:	18ffffc4 	addi	r3,r3,-1
 800fcc4:	24e6b03a 	or	r19,r4,r19
 800fcc8:	18800005 	stb	r2,0(r3)
 800fccc:	9f04b03a 	or	r2,r19,fp
 800fcd0:	103ff51e 	bne	r2,zero,800fca8 <__alt_data_end+0xfc00fca8>
 800fcd4:	db012817 	ldw	r12,1184(sp)
 800fcd8:	d8c13115 	stw	r3,1220(sp)
 800fcdc:	60e5c83a 	sub	r18,r12,r3
 800fce0:	003d0206 	br	800f0ec <__alt_data_end+0xfc00f0ec>
 800fce4:	dc012617 	ldw	r16,1176(sp)
 800fce8:	0401b10e 	bge	zero,r16,80103b0 <___vfprintf_internal_r+0x1900>
 800fcec:	db013117 	ldw	r12,1220(sp)
 800fcf0:	dac13317 	ldw	r11,1228(sp)
 800fcf4:	62e1883a 	add	r16,r12,r11
 800fcf8:	db013417 	ldw	r12,1232(sp)
 800fcfc:	5825883a 	mov	r18,r11
 800fd00:	62c0010e 	bge	r12,r11,800fd08 <___vfprintf_internal_r+0x1258>
 800fd04:	6025883a 	mov	r18,r12
 800fd08:	04800b0e 	bge	zero,r18,800fd38 <___vfprintf_internal_r+0x1288>
 800fd0c:	d8811f17 	ldw	r2,1148(sp)
 800fd10:	dac13117 	ldw	r11,1220(sp)
 800fd14:	1c87883a 	add	r3,r3,r18
 800fd18:	10800044 	addi	r2,r2,1
 800fd1c:	42c00015 	stw	r11,0(r8)
 800fd20:	44800115 	stw	r18,4(r8)
 800fd24:	d8c12015 	stw	r3,1152(sp)
 800fd28:	d8811f15 	stw	r2,1148(sp)
 800fd2c:	010001c4 	movi	r4,7
 800fd30:	20824f16 	blt	r4,r2,8010670 <___vfprintf_internal_r+0x1bc0>
 800fd34:	42000204 	addi	r8,r8,8
 800fd38:	90024b16 	blt	r18,zero,8010668 <___vfprintf_internal_r+0x1bb8>
 800fd3c:	db013417 	ldw	r12,1232(sp)
 800fd40:	64a5c83a 	sub	r18,r12,r18
 800fd44:	0480730e 	bge	zero,r18,800ff14 <___vfprintf_internal_r+0x1464>
 800fd48:	05400404 	movi	r21,16
 800fd4c:	d8811f17 	ldw	r2,1148(sp)
 800fd50:	ac817d0e 	bge	r21,r18,8010348 <___vfprintf_internal_r+0x1898>
 800fd54:	014200b4 	movhi	r5,2050
 800fd58:	295ca584 	addi	r5,r5,29334
 800fd5c:	d9412c15 	stw	r5,1200(sp)
 800fd60:	070001c4 	movi	fp,7
 800fd64:	00000306 	br	800fd74 <___vfprintf_internal_r+0x12c4>
 800fd68:	42000204 	addi	r8,r8,8
 800fd6c:	94bffc04 	addi	r18,r18,-16
 800fd70:	ac81780e 	bge	r21,r18,8010354 <___vfprintf_internal_r+0x18a4>
 800fd74:	18c00404 	addi	r3,r3,16
 800fd78:	10800044 	addi	r2,r2,1
 800fd7c:	45000015 	stw	r20,0(r8)
 800fd80:	45400115 	stw	r21,4(r8)
 800fd84:	d8c12015 	stw	r3,1152(sp)
 800fd88:	d8811f15 	stw	r2,1148(sp)
 800fd8c:	e0bff60e 	bge	fp,r2,800fd68 <__alt_data_end+0xfc00fd68>
 800fd90:	b009883a 	mov	r4,r22
 800fd94:	b80b883a 	mov	r5,r23
 800fd98:	d9811e04 	addi	r6,sp,1144
 800fd9c:	80168ac0 	call	80168ac <__sprint_r>
 800fda0:	103c5a1e 	bne	r2,zero,800ef0c <__alt_data_end+0xfc00ef0c>
 800fda4:	d8c12017 	ldw	r3,1152(sp)
 800fda8:	d8811f17 	ldw	r2,1148(sp)
 800fdac:	da000404 	addi	r8,sp,16
 800fdb0:	003fee06 	br	800fd6c <__alt_data_end+0xfc00fd6c>
 800fdb4:	dac10e04 	addi	r11,sp,1080
 800fdb8:	0025883a 	mov	r18,zero
 800fdbc:	dac13115 	stw	r11,1220(sp)
 800fdc0:	003cca06 	br	800f0ec <__alt_data_end+0xfc00f0ec>
 800fdc4:	b009883a 	mov	r4,r22
 800fdc8:	b80b883a 	mov	r5,r23
 800fdcc:	d9811e04 	addi	r6,sp,1144
 800fdd0:	80168ac0 	call	80168ac <__sprint_r>
 800fdd4:	103c4d1e 	bne	r2,zero,800ef0c <__alt_data_end+0xfc00ef0c>
 800fdd8:	d8c12017 	ldw	r3,1152(sp)
 800fddc:	d8812787 	ldb	r2,1182(sp)
 800fde0:	da000404 	addi	r8,sp,16
 800fde4:	003d0506 	br	800f1fc <__alt_data_end+0xfc00f1fc>
 800fde8:	dac12d17 	ldw	r11,1204(sp)
 800fdec:	14c00017 	ldw	r19,0(r2)
 800fdf0:	0039883a 	mov	fp,zero
 800fdf4:	5ac00104 	addi	r11,r11,4
 800fdf8:	dac12d15 	stw	r11,1204(sp)
 800fdfc:	0005883a 	mov	r2,zero
 800fe00:	9807883a 	mov	r3,r19
 800fe04:	003c9c06 	br	800f078 <__alt_data_end+0xfc00f078>
 800fe08:	657fffc4 	addi	r21,r12,-1
 800fe0c:	057f5c0e 	bge	zero,r21,800fb80 <__alt_data_end+0xfc00fb80>
 800fe10:	07000404 	movi	fp,16
 800fe14:	e5408f0e 	bge	fp,r21,8010054 <___vfprintf_internal_r+0x15a4>
 800fe18:	010200b4 	movhi	r4,2050
 800fe1c:	211ca584 	addi	r4,r4,29334
 800fe20:	d9012c15 	stw	r4,1200(sp)
 800fe24:	01c001c4 	movi	r7,7
 800fe28:	00000306 	br	800fe38 <___vfprintf_internal_r+0x1388>
 800fe2c:	94800204 	addi	r18,r18,8
 800fe30:	ad7ffc04 	addi	r21,r21,-16
 800fe34:	e5408a0e 	bge	fp,r21,8010060 <___vfprintf_internal_r+0x15b0>
 800fe38:	18c00404 	addi	r3,r3,16
 800fe3c:	84000044 	addi	r16,r16,1
 800fe40:	95000015 	stw	r20,0(r18)
 800fe44:	97000115 	stw	fp,4(r18)
 800fe48:	d8c12015 	stw	r3,1152(sp)
 800fe4c:	dc011f15 	stw	r16,1148(sp)
 800fe50:	3c3ff60e 	bge	r7,r16,800fe2c <__alt_data_end+0xfc00fe2c>
 800fe54:	b009883a 	mov	r4,r22
 800fe58:	b80b883a 	mov	r5,r23
 800fe5c:	d9811e04 	addi	r6,sp,1144
 800fe60:	d9c13d15 	stw	r7,1268(sp)
 800fe64:	80168ac0 	call	80168ac <__sprint_r>
 800fe68:	d9c13d17 	ldw	r7,1268(sp)
 800fe6c:	103c271e 	bne	r2,zero,800ef0c <__alt_data_end+0xfc00ef0c>
 800fe70:	d8c12017 	ldw	r3,1152(sp)
 800fe74:	dc011f17 	ldw	r16,1148(sp)
 800fe78:	dc800404 	addi	r18,sp,16
 800fe7c:	003fec06 	br	800fe30 <__alt_data_end+0xfc00fe30>
 800fe80:	1cc00017 	ldw	r19,0(r3)
 800fe84:	dac12d17 	ldw	r11,1204(sp)
 800fe88:	9839d7fa 	srai	fp,r19,31
 800fe8c:	5ac00104 	addi	r11,r11,4
 800fe90:	dac12d15 	stw	r11,1204(sp)
 800fe94:	e005883a 	mov	r2,fp
 800fe98:	003d9006 	br	800f4dc <__alt_data_end+0xfc00f4dc>
 800fe9c:	00800084 	movi	r2,2
 800fea0:	9f06b03a 	or	r3,r19,fp
 800fea4:	003c7406 	br	800f078 <__alt_data_end+0xfc00f078>
 800fea8:	db012d17 	ldw	r12,1204(sp)
 800feac:	14c00017 	ldw	r19,0(r2)
 800feb0:	0039883a 	mov	fp,zero
 800feb4:	63000104 	addi	r12,r12,4
 800feb8:	db012d15 	stw	r12,1204(sp)
 800febc:	00800044 	movi	r2,1
 800fec0:	9807883a 	mov	r3,r19
 800fec4:	003c6c06 	br	800f078 <__alt_data_end+0xfc00f078>
 800fec8:	10803fcc 	andi	r2,r2,255
 800fecc:	1080201c 	xori	r2,r2,128
 800fed0:	10bfe004 	addi	r2,r2,-128
 800fed4:	01000c04 	movi	r4,48
 800fed8:	1101a526 	beq	r2,r4,8010570 <___vfprintf_internal_r+0x1ac0>
 800fedc:	dac13117 	ldw	r11,1220(sp)
 800fee0:	db012817 	ldw	r12,1184(sp)
 800fee4:	193fffc5 	stb	r4,-1(r3)
 800fee8:	5affffc4 	addi	r11,r11,-1
 800feec:	dac13115 	stw	r11,1220(sp)
 800fef0:	62e5c83a 	sub	r18,r12,r11
 800fef4:	003c7d06 	br	800f0ec <__alt_data_end+0xfc00f0ec>
 800fef8:	b009883a 	mov	r4,r22
 800fefc:	b80b883a 	mov	r5,r23
 800ff00:	d9811e04 	addi	r6,sp,1144
 800ff04:	80168ac0 	call	80168ac <__sprint_r>
 800ff08:	103c001e 	bne	r2,zero,800ef0c <__alt_data_end+0xfc00ef0c>
 800ff0c:	d8c12017 	ldw	r3,1152(sp)
 800ff10:	da000404 	addi	r8,sp,16
 800ff14:	db013117 	ldw	r12,1220(sp)
 800ff18:	dac13417 	ldw	r11,1232(sp)
 800ff1c:	d8812617 	ldw	r2,1176(sp)
 800ff20:	62e5883a 	add	r18,r12,r11
 800ff24:	db013317 	ldw	r12,1228(sp)
 800ff28:	13000216 	blt	r2,r12,800ff34 <___vfprintf_internal_r+0x1484>
 800ff2c:	8900004c 	andi	r4,r17,1
 800ff30:	20000c26 	beq	r4,zero,800ff64 <___vfprintf_internal_r+0x14b4>
 800ff34:	dac13817 	ldw	r11,1248(sp)
 800ff38:	d9011f17 	ldw	r4,1148(sp)
 800ff3c:	db013517 	ldw	r12,1236(sp)
 800ff40:	1ac7883a 	add	r3,r3,r11
 800ff44:	21000044 	addi	r4,r4,1
 800ff48:	43000015 	stw	r12,0(r8)
 800ff4c:	42c00115 	stw	r11,4(r8)
 800ff50:	d8c12015 	stw	r3,1152(sp)
 800ff54:	d9011f15 	stw	r4,1148(sp)
 800ff58:	014001c4 	movi	r5,7
 800ff5c:	2901cc16 	blt	r5,r4,8010690 <___vfprintf_internal_r+0x1be0>
 800ff60:	42000204 	addi	r8,r8,8
 800ff64:	dac13317 	ldw	r11,1228(sp)
 800ff68:	8489c83a 	sub	r4,r16,r18
 800ff6c:	5885c83a 	sub	r2,r11,r2
 800ff70:	1021883a 	mov	r16,r2
 800ff74:	2080010e 	bge	r4,r2,800ff7c <___vfprintf_internal_r+0x14cc>
 800ff78:	2021883a 	mov	r16,r4
 800ff7c:	04000a0e 	bge	zero,r16,800ffa8 <___vfprintf_internal_r+0x14f8>
 800ff80:	d9011f17 	ldw	r4,1148(sp)
 800ff84:	1c07883a 	add	r3,r3,r16
 800ff88:	44800015 	stw	r18,0(r8)
 800ff8c:	21000044 	addi	r4,r4,1
 800ff90:	44000115 	stw	r16,4(r8)
 800ff94:	d8c12015 	stw	r3,1152(sp)
 800ff98:	d9011f15 	stw	r4,1148(sp)
 800ff9c:	014001c4 	movi	r5,7
 800ffa0:	2901d616 	blt	r5,r4,80106fc <___vfprintf_internal_r+0x1c4c>
 800ffa4:	42000204 	addi	r8,r8,8
 800ffa8:	8001df16 	blt	r16,zero,8010728 <___vfprintf_internal_r+0x1c78>
 800ffac:	1421c83a 	sub	r16,r2,r16
 800ffb0:	043ce60e 	bge	zero,r16,800f34c <__alt_data_end+0xfc00f34c>
 800ffb4:	04800404 	movi	r18,16
 800ffb8:	d8811f17 	ldw	r2,1148(sp)
 800ffbc:	943efc0e 	bge	r18,r16,800fbb0 <__alt_data_end+0xfc00fbb0>
 800ffc0:	014200b4 	movhi	r5,2050
 800ffc4:	295ca584 	addi	r5,r5,29334
 800ffc8:	d9412c15 	stw	r5,1200(sp)
 800ffcc:	054001c4 	movi	r21,7
 800ffd0:	00000306 	br	800ffe0 <___vfprintf_internal_r+0x1530>
 800ffd4:	42000204 	addi	r8,r8,8
 800ffd8:	843ffc04 	addi	r16,r16,-16
 800ffdc:	943ef70e 	bge	r18,r16,800fbbc <__alt_data_end+0xfc00fbbc>
 800ffe0:	18c00404 	addi	r3,r3,16
 800ffe4:	10800044 	addi	r2,r2,1
 800ffe8:	45000015 	stw	r20,0(r8)
 800ffec:	44800115 	stw	r18,4(r8)
 800fff0:	d8c12015 	stw	r3,1152(sp)
 800fff4:	d8811f15 	stw	r2,1148(sp)
 800fff8:	a8bff60e 	bge	r21,r2,800ffd4 <__alt_data_end+0xfc00ffd4>
 800fffc:	b009883a 	mov	r4,r22
 8010000:	b80b883a 	mov	r5,r23
 8010004:	d9811e04 	addi	r6,sp,1144
 8010008:	80168ac0 	call	80168ac <__sprint_r>
 801000c:	103bbf1e 	bne	r2,zero,800ef0c <__alt_data_end+0xfc00ef0c>
 8010010:	d8c12017 	ldw	r3,1152(sp)
 8010014:	d8811f17 	ldw	r2,1148(sp)
 8010018:	da000404 	addi	r8,sp,16
 801001c:	003fee06 	br	800ffd8 <__alt_data_end+0xfc00ffd8>
 8010020:	8888703a 	and	r4,r17,r2
 8010024:	203eab1e 	bne	r4,zero,800fad4 <__alt_data_end+0xfc00fad4>
 8010028:	dc011f17 	ldw	r16,1148(sp)
 801002c:	db013117 	ldw	r12,1220(sp)
 8010030:	40800115 	stw	r2,4(r8)
 8010034:	84000044 	addi	r16,r16,1
 8010038:	43000015 	stw	r12,0(r8)
 801003c:	d8c12015 	stw	r3,1152(sp)
 8010040:	dc011f15 	stw	r16,1148(sp)
 8010044:	008001c4 	movi	r2,7
 8010048:	14000e16 	blt	r2,r16,8010084 <___vfprintf_internal_r+0x15d4>
 801004c:	44800204 	addi	r18,r8,8
 8010050:	003ecb06 	br	800fb80 <__alt_data_end+0xfc00fb80>
 8010054:	008200b4 	movhi	r2,2050
 8010058:	109ca584 	addi	r2,r2,29334
 801005c:	d8812c15 	stw	r2,1200(sp)
 8010060:	dac12c17 	ldw	r11,1200(sp)
 8010064:	1d47883a 	add	r3,r3,r21
 8010068:	84000044 	addi	r16,r16,1
 801006c:	92c00015 	stw	r11,0(r18)
 8010070:	95400115 	stw	r21,4(r18)
 8010074:	d8c12015 	stw	r3,1152(sp)
 8010078:	dc011f15 	stw	r16,1148(sp)
 801007c:	008001c4 	movi	r2,7
 8010080:	143ebe0e 	bge	r2,r16,800fb7c <__alt_data_end+0xfc00fb7c>
 8010084:	b009883a 	mov	r4,r22
 8010088:	b80b883a 	mov	r5,r23
 801008c:	d9811e04 	addi	r6,sp,1144
 8010090:	80168ac0 	call	80168ac <__sprint_r>
 8010094:	103b9d1e 	bne	r2,zero,800ef0c <__alt_data_end+0xfc00ef0c>
 8010098:	d8c12017 	ldw	r3,1152(sp)
 801009c:	dc011f17 	ldw	r16,1148(sp)
 80100a0:	dc800404 	addi	r18,sp,16
 80100a4:	003eb606 	br	800fb80 <__alt_data_end+0xfc00fb80>
 80100a8:	b009883a 	mov	r4,r22
 80100ac:	b80b883a 	mov	r5,r23
 80100b0:	d9811e04 	addi	r6,sp,1144
 80100b4:	80168ac0 	call	80168ac <__sprint_r>
 80100b8:	103b941e 	bne	r2,zero,800ef0c <__alt_data_end+0xfc00ef0c>
 80100bc:	d8c12017 	ldw	r3,1152(sp)
 80100c0:	dc011f17 	ldw	r16,1148(sp)
 80100c4:	da000404 	addi	r8,sp,16
 80100c8:	003e8d06 	br	800fb00 <__alt_data_end+0xfc00fb00>
 80100cc:	b009883a 	mov	r4,r22
 80100d0:	b80b883a 	mov	r5,r23
 80100d4:	d9811e04 	addi	r6,sp,1144
 80100d8:	80168ac0 	call	80168ac <__sprint_r>
 80100dc:	103b8b1e 	bne	r2,zero,800ef0c <__alt_data_end+0xfc00ef0c>
 80100e0:	d8c12017 	ldw	r3,1152(sp)
 80100e4:	dc011f17 	ldw	r16,1148(sp)
 80100e8:	dc800404 	addi	r18,sp,16
 80100ec:	003e8f06 	br	800fb2c <__alt_data_end+0xfc00fb2c>
 80100f0:	db010e04 	addi	r12,sp,1080
 80100f4:	0025883a 	mov	r18,zero
 80100f8:	db013115 	stw	r12,1220(sp)
 80100fc:	003bfb06 	br	800f0ec <__alt_data_end+0xfc00f0ec>
 8010100:	b009883a 	mov	r4,r22
 8010104:	b80b883a 	mov	r5,r23
 8010108:	d9811e04 	addi	r6,sp,1144
 801010c:	80168ac0 	call	80168ac <__sprint_r>
 8010110:	103b7e1e 	bne	r2,zero,800ef0c <__alt_data_end+0xfc00ef0c>
 8010114:	d8c12017 	ldw	r3,1152(sp)
 8010118:	da000404 	addi	r8,sp,16
 801011c:	003c5506 	br	800f274 <__alt_data_end+0xfc00f274>
 8010120:	04e7c83a 	sub	r19,zero,r19
 8010124:	9804c03a 	cmpne	r2,r19,zero
 8010128:	0739c83a 	sub	fp,zero,fp
 801012c:	e0b9c83a 	sub	fp,fp,r2
 8010130:	05400b44 	movi	r21,45
 8010134:	dd412785 	stb	r21,1182(sp)
 8010138:	da413215 	stw	r9,1224(sp)
 801013c:	00800044 	movi	r2,1
 8010140:	9f06b03a 	or	r3,r19,fp
 8010144:	003bcf06 	br	800f084 <__alt_data_end+0xfc00f084>
 8010148:	da013f15 	stw	r8,1276(sp)
 801014c:	da413e15 	stw	r9,1272(sp)
 8010150:	80150d00 	call	80150d0 <__fpclassifyd>
 8010154:	da013f17 	ldw	r8,1276(sp)
 8010158:	da413e17 	ldw	r9,1272(sp)
 801015c:	1000ce26 	beq	r2,zero,8010498 <___vfprintf_internal_r+0x19e8>
 8010160:	057ff7c4 	movi	r21,-33
 8010164:	00bfffc4 	movi	r2,-1
 8010168:	856a703a 	and	r21,r16,r21
 801016c:	4881f026 	beq	r9,r2,8010930 <___vfprintf_internal_r+0x1e80>
 8010170:	008011c4 	movi	r2,71
 8010174:	a881e526 	beq	r21,r2,801090c <___vfprintf_internal_r+0x1e5c>
 8010178:	db013917 	ldw	r12,1252(sp)
 801017c:	8ac04014 	ori	r11,r17,256
 8010180:	dac12d15 	stw	r11,1204(sp)
 8010184:	6001e416 	blt	r12,zero,8010918 <___vfprintf_internal_r+0x1e68>
 8010188:	dc813917 	ldw	r18,1252(sp)
 801018c:	d8012b05 	stb	zero,1196(sp)
 8010190:	00801984 	movi	r2,102
 8010194:	80811826 	beq	r16,r2,80105f8 <___vfprintf_internal_r+0x1b48>
 8010198:	00801184 	movi	r2,70
 801019c:	80811626 	beq	r16,r2,80105f8 <___vfprintf_internal_r+0x1b48>
 80101a0:	00801144 	movi	r2,69
 80101a4:	a881e026 	beq	r21,r2,8010928 <___vfprintf_internal_r+0x1e78>
 80101a8:	4839883a 	mov	fp,r9
 80101ac:	d8812604 	addi	r2,sp,1176
 80101b0:	d8800115 	stw	r2,4(sp)
 80101b4:	d9413717 	ldw	r5,1244(sp)
 80101b8:	d8812504 	addi	r2,sp,1172
 80101bc:	d8800215 	stw	r2,8(sp)
 80101c0:	d8812104 	addi	r2,sp,1156
 80101c4:	df000015 	stw	fp,0(sp)
 80101c8:	d8800315 	stw	r2,12(sp)
 80101cc:	b009883a 	mov	r4,r22
 80101d0:	900d883a 	mov	r6,r18
 80101d4:	01c00084 	movi	r7,2
 80101d8:	da013f15 	stw	r8,1276(sp)
 80101dc:	da413e15 	stw	r9,1272(sp)
 80101e0:	8010e180 	call	8010e18 <_dtoa_r>
 80101e4:	d8813115 	stw	r2,1220(sp)
 80101e8:	008019c4 	movi	r2,103
 80101ec:	da013f17 	ldw	r8,1276(sp)
 80101f0:	da413e17 	ldw	r9,1272(sp)
 80101f4:	80800226 	beq	r16,r2,8010200 <___vfprintf_internal_r+0x1750>
 80101f8:	008011c4 	movi	r2,71
 80101fc:	8081101e 	bne	r16,r2,8010640 <___vfprintf_internal_r+0x1b90>
 8010200:	8880004c 	andi	r2,r17,1
 8010204:	1001df26 	beq	r2,zero,8010984 <___vfprintf_internal_r+0x1ed4>
 8010208:	db013117 	ldw	r12,1220(sp)
 801020c:	6715883a 	add	r10,r12,fp
 8010210:	d9013717 	ldw	r4,1244(sp)
 8010214:	900b883a 	mov	r5,r18
 8010218:	000d883a 	mov	r6,zero
 801021c:	000f883a 	mov	r7,zero
 8010220:	da013f15 	stw	r8,1276(sp)
 8010224:	da413e15 	stw	r9,1272(sp)
 8010228:	da813d15 	stw	r10,1268(sp)
 801022c:	800a3680 	call	800a368 <__eqdf2>
 8010230:	da013f17 	ldw	r8,1276(sp)
 8010234:	da413e17 	ldw	r9,1272(sp)
 8010238:	da813d17 	ldw	r10,1268(sp)
 801023c:	10016526 	beq	r2,zero,80107d4 <___vfprintf_internal_r+0x1d24>
 8010240:	d8812117 	ldw	r2,1156(sp)
 8010244:	1280062e 	bgeu	r2,r10,8010260 <___vfprintf_internal_r+0x17b0>
 8010248:	01000c04 	movi	r4,48
 801024c:	10c00044 	addi	r3,r2,1
 8010250:	d8c12115 	stw	r3,1156(sp)
 8010254:	11000005 	stb	r4,0(r2)
 8010258:	d8812117 	ldw	r2,1156(sp)
 801025c:	12bffb36 	bltu	r2,r10,801024c <__alt_data_end+0xfc01024c>
 8010260:	db013117 	ldw	r12,1220(sp)
 8010264:	1305c83a 	sub	r2,r2,r12
 8010268:	d8813315 	stw	r2,1228(sp)
 801026c:	008011c4 	movi	r2,71
 8010270:	a8814a26 	beq	r21,r2,801079c <___vfprintf_internal_r+0x1cec>
 8010274:	00801944 	movi	r2,101
 8010278:	14020a0e 	bge	r2,r16,8010aa4 <___vfprintf_internal_r+0x1ff4>
 801027c:	00801984 	movi	r2,102
 8010280:	8081b626 	beq	r16,r2,801095c <___vfprintf_internal_r+0x1eac>
 8010284:	db012617 	ldw	r12,1176(sp)
 8010288:	db013415 	stw	r12,1232(sp)
 801028c:	db013417 	ldw	r12,1232(sp)
 8010290:	dac13317 	ldw	r11,1228(sp)
 8010294:	62c1a816 	blt	r12,r11,8010938 <___vfprintf_internal_r+0x1e88>
 8010298:	8c40004c 	andi	r17,r17,1
 801029c:	8801ca1e 	bne	r17,zero,80109c8 <___vfprintf_internal_r+0x1f18>
 80102a0:	6005883a 	mov	r2,r12
 80102a4:	6001b516 	blt	r12,zero,801097c <___vfprintf_internal_r+0x1ecc>
 80102a8:	dc813417 	ldw	r18,1232(sp)
 80102ac:	df012b07 	ldb	fp,1196(sp)
 80102b0:	e001321e 	bne	fp,zero,801077c <___vfprintf_internal_r+0x1ccc>
 80102b4:	dc412d17 	ldw	r17,1204(sp)
 80102b8:	dd412783 	ldbu	r21,1182(sp)
 80102bc:	d8812b15 	stw	r2,1196(sp)
 80102c0:	dcc12d15 	stw	r19,1204(sp)
 80102c4:	d8013215 	stw	zero,1224(sp)
 80102c8:	003b8d06 	br	800f100 <__alt_data_end+0xfc00f100>
 80102cc:	88c0100c 	andi	r3,r17,64
 80102d0:	18008226 	beq	r3,zero,80104dc <___vfprintf_internal_r+0x1a2c>
 80102d4:	dac12d17 	ldw	r11,1204(sp)
 80102d8:	14c0000b 	ldhu	r19,0(r2)
 80102dc:	0039883a 	mov	fp,zero
 80102e0:	5ac00104 	addi	r11,r11,4
 80102e4:	dac12d15 	stw	r11,1204(sp)
 80102e8:	003c8f06 	br	800f528 <__alt_data_end+0xfc00f528>
 80102ec:	1c000007 	ldb	r16,0(r3)
 80102f0:	1805883a 	mov	r2,r3
 80102f4:	003a5506 	br	800ec4c <__alt_data_end+0xfc00ec4c>
 80102f8:	00800084 	movi	r2,2
 80102fc:	003b5e06 	br	800f078 <__alt_data_end+0xfc00f078>
 8010300:	8880040c 	andi	r2,r17,16
 8010304:	1000091e 	bne	r2,zero,801032c <___vfprintf_internal_r+0x187c>
 8010308:	8c40100c 	andi	r17,r17,64
 801030c:	88000726 	beq	r17,zero,801032c <___vfprintf_internal_r+0x187c>
 8010310:	db012d17 	ldw	r12,1204(sp)
 8010314:	dac12f17 	ldw	r11,1212(sp)
 8010318:	60800017 	ldw	r2,0(r12)
 801031c:	63000104 	addi	r12,r12,4
 8010320:	db012d15 	stw	r12,1204(sp)
 8010324:	12c0000d 	sth	r11,0(r2)
 8010328:	003a1e06 	br	800eba4 <__alt_data_end+0xfc00eba4>
 801032c:	db012d17 	ldw	r12,1204(sp)
 8010330:	dac12f17 	ldw	r11,1212(sp)
 8010334:	60800017 	ldw	r2,0(r12)
 8010338:	63000104 	addi	r12,r12,4
 801033c:	db012d15 	stw	r12,1204(sp)
 8010340:	12c00015 	stw	r11,0(r2)
 8010344:	003a1706 	br	800eba4 <__alt_data_end+0xfc00eba4>
 8010348:	010200b4 	movhi	r4,2050
 801034c:	211ca584 	addi	r4,r4,29334
 8010350:	d9012c15 	stw	r4,1200(sp)
 8010354:	dac12c17 	ldw	r11,1200(sp)
 8010358:	1c87883a 	add	r3,r3,r18
 801035c:	10800044 	addi	r2,r2,1
 8010360:	42c00015 	stw	r11,0(r8)
 8010364:	44800115 	stw	r18,4(r8)
 8010368:	d8c12015 	stw	r3,1152(sp)
 801036c:	d8811f15 	stw	r2,1148(sp)
 8010370:	010001c4 	movi	r4,7
 8010374:	20bee016 	blt	r4,r2,800fef8 <__alt_data_end+0xfc00fef8>
 8010378:	42000204 	addi	r8,r8,8
 801037c:	003ee506 	br	800ff14 <__alt_data_end+0xfc00ff14>
 8010380:	010200b4 	movhi	r4,2050
 8010384:	211ca584 	addi	r4,r4,29334
 8010388:	d9012c15 	stw	r4,1200(sp)
 801038c:	003bd806 	br	800f2f0 <__alt_data_end+0xfc00f2f0>
 8010390:	b009883a 	mov	r4,r22
 8010394:	b80b883a 	mov	r5,r23
 8010398:	d9811e04 	addi	r6,sp,1144
 801039c:	80168ac0 	call	80168ac <__sprint_r>
 80103a0:	103ada1e 	bne	r2,zero,800ef0c <__alt_data_end+0xfc00ef0c>
 80103a4:	d8c12017 	ldw	r3,1152(sp)
 80103a8:	da000404 	addi	r8,sp,16
 80103ac:	003d6b06 	br	800f95c <__alt_data_end+0xfc00f95c>
 80103b0:	d8811f17 	ldw	r2,1148(sp)
 80103b4:	030200b4 	movhi	r12,2050
 80103b8:	01000044 	movi	r4,1
 80103bc:	18c00044 	addi	r3,r3,1
 80103c0:	10800044 	addi	r2,r2,1
 80103c4:	631c9d04 	addi	r12,r12,29300
 80103c8:	41000115 	stw	r4,4(r8)
 80103cc:	43000015 	stw	r12,0(r8)
 80103d0:	d8c12015 	stw	r3,1152(sp)
 80103d4:	d8811f15 	stw	r2,1148(sp)
 80103d8:	010001c4 	movi	r4,7
 80103dc:	20804916 	blt	r4,r2,8010504 <___vfprintf_internal_r+0x1a54>
 80103e0:	42000204 	addi	r8,r8,8
 80103e4:	8000041e 	bne	r16,zero,80103f8 <___vfprintf_internal_r+0x1948>
 80103e8:	dac13317 	ldw	r11,1228(sp)
 80103ec:	5800021e 	bne	r11,zero,80103f8 <___vfprintf_internal_r+0x1948>
 80103f0:	8880004c 	andi	r2,r17,1
 80103f4:	103bd526 	beq	r2,zero,800f34c <__alt_data_end+0xfc00f34c>
 80103f8:	db013817 	ldw	r12,1248(sp)
 80103fc:	d8811f17 	ldw	r2,1148(sp)
 8010400:	dac13517 	ldw	r11,1236(sp)
 8010404:	1b07883a 	add	r3,r3,r12
 8010408:	10800044 	addi	r2,r2,1
 801040c:	42c00015 	stw	r11,0(r8)
 8010410:	43000115 	stw	r12,4(r8)
 8010414:	d8c12015 	stw	r3,1152(sp)
 8010418:	d8811f15 	stw	r2,1148(sp)
 801041c:	010001c4 	movi	r4,7
 8010420:	20813016 	blt	r4,r2,80108e4 <___vfprintf_internal_r+0x1e34>
 8010424:	42000204 	addi	r8,r8,8
 8010428:	0421c83a 	sub	r16,zero,r16
 801042c:	0400630e 	bge	zero,r16,80105bc <___vfprintf_internal_r+0x1b0c>
 8010430:	04800404 	movi	r18,16
 8010434:	94009f0e 	bge	r18,r16,80106b4 <___vfprintf_internal_r+0x1c04>
 8010438:	010200b4 	movhi	r4,2050
 801043c:	211ca584 	addi	r4,r4,29334
 8010440:	d9012c15 	stw	r4,1200(sp)
 8010444:	054001c4 	movi	r21,7
 8010448:	00000306 	br	8010458 <___vfprintf_internal_r+0x19a8>
 801044c:	42000204 	addi	r8,r8,8
 8010450:	843ffc04 	addi	r16,r16,-16
 8010454:	94009a0e 	bge	r18,r16,80106c0 <___vfprintf_internal_r+0x1c10>
 8010458:	18c00404 	addi	r3,r3,16
 801045c:	10800044 	addi	r2,r2,1
 8010460:	45000015 	stw	r20,0(r8)
 8010464:	44800115 	stw	r18,4(r8)
 8010468:	d8c12015 	stw	r3,1152(sp)
 801046c:	d8811f15 	stw	r2,1148(sp)
 8010470:	a8bff60e 	bge	r21,r2,801044c <__alt_data_end+0xfc01044c>
 8010474:	b009883a 	mov	r4,r22
 8010478:	b80b883a 	mov	r5,r23
 801047c:	d9811e04 	addi	r6,sp,1144
 8010480:	80168ac0 	call	80168ac <__sprint_r>
 8010484:	103aa11e 	bne	r2,zero,800ef0c <__alt_data_end+0xfc00ef0c>
 8010488:	d8c12017 	ldw	r3,1152(sp)
 801048c:	d8811f17 	ldw	r2,1148(sp)
 8010490:	da000404 	addi	r8,sp,16
 8010494:	003fee06 	br	8010450 <__alt_data_end+0xfc010450>
 8010498:	008011c4 	movi	r2,71
 801049c:	1400b316 	blt	r2,r16,801076c <___vfprintf_internal_r+0x1cbc>
 80104a0:	030200b4 	movhi	r12,2050
 80104a4:	631c8f04 	addi	r12,r12,29244
 80104a8:	db013115 	stw	r12,1220(sp)
 80104ac:	00c000c4 	movi	r3,3
 80104b0:	00bfdfc4 	movi	r2,-129
 80104b4:	d8c12b15 	stw	r3,1196(sp)
 80104b8:	88a2703a 	and	r17,r17,r2
 80104bc:	dd412783 	ldbu	r21,1182(sp)
 80104c0:	dcc12d15 	stw	r19,1204(sp)
 80104c4:	1825883a 	mov	r18,r3
 80104c8:	d8013215 	stw	zero,1224(sp)
 80104cc:	d8013415 	stw	zero,1232(sp)
 80104d0:	003b0b06 	br	800f100 <__alt_data_end+0xfc00f100>
 80104d4:	4825883a 	mov	r18,r9
 80104d8:	003cba06 	br	800f7c4 <__alt_data_end+0xfc00f7c4>
 80104dc:	db012d17 	ldw	r12,1204(sp)
 80104e0:	14c00017 	ldw	r19,0(r2)
 80104e4:	0039883a 	mov	fp,zero
 80104e8:	63000104 	addi	r12,r12,4
 80104ec:	db012d15 	stw	r12,1204(sp)
 80104f0:	003c0d06 	br	800f528 <__alt_data_end+0xfc00f528>
 80104f4:	008200b4 	movhi	r2,2050
 80104f8:	109c8d04 	addi	r2,r2,29236
 80104fc:	d8813115 	stw	r2,1220(sp)
 8010500:	003ac406 	br	800f014 <__alt_data_end+0xfc00f014>
 8010504:	b009883a 	mov	r4,r22
 8010508:	b80b883a 	mov	r5,r23
 801050c:	d9811e04 	addi	r6,sp,1144
 8010510:	80168ac0 	call	80168ac <__sprint_r>
 8010514:	103a7d1e 	bne	r2,zero,800ef0c <__alt_data_end+0xfc00ef0c>
 8010518:	dc012617 	ldw	r16,1176(sp)
 801051c:	d8c12017 	ldw	r3,1152(sp)
 8010520:	da000404 	addi	r8,sp,16
 8010524:	003faf06 	br	80103e4 <__alt_data_end+0xfc0103e4>
 8010528:	db012e17 	ldw	r12,1208(sp)
 801052c:	1805883a 	mov	r2,r3
 8010530:	dac12d15 	stw	r11,1204(sp)
 8010534:	0319c83a 	sub	r12,zero,r12
 8010538:	db012e15 	stw	r12,1208(sp)
 801053c:	003a7e06 	br	800ef38 <__alt_data_end+0xfc00ef38>
 8010540:	18800044 	addi	r2,r3,1
 8010544:	8c400814 	ori	r17,r17,32
 8010548:	1c000047 	ldb	r16,1(r3)
 801054c:	0039bf06 	br	800ec4c <__alt_data_end+0xfc00ec4c>
 8010550:	b009883a 	mov	r4,r22
 8010554:	b80b883a 	mov	r5,r23
 8010558:	d9811e04 	addi	r6,sp,1144
 801055c:	80168ac0 	call	80168ac <__sprint_r>
 8010560:	103a6a1e 	bne	r2,zero,800ef0c <__alt_data_end+0xfc00ef0c>
 8010564:	d8c12017 	ldw	r3,1152(sp)
 8010568:	da000404 	addi	r8,sp,16
 801056c:	003d0c06 	br	800f9a0 <__alt_data_end+0xfc00f9a0>
 8010570:	db012817 	ldw	r12,1184(sp)
 8010574:	d8c13117 	ldw	r3,1220(sp)
 8010578:	60e5c83a 	sub	r18,r12,r3
 801057c:	003adb06 	br	800f0ec <__alt_data_end+0xfc00f0ec>
 8010580:	da013f15 	stw	r8,1276(sp)
 8010584:	800ca6c0 	call	800ca6c <strlen>
 8010588:	1025883a 	mov	r18,r2
 801058c:	da013f17 	ldw	r8,1276(sp)
 8010590:	903c8e0e 	bge	r18,zero,800f7cc <__alt_data_end+0xfc00f7cc>
 8010594:	0005883a 	mov	r2,zero
 8010598:	003c8c06 	br	800f7cc <__alt_data_end+0xfc00f7cc>
 801059c:	b009883a 	mov	r4,r22
 80105a0:	b80b883a 	mov	r5,r23
 80105a4:	d9811e04 	addi	r6,sp,1144
 80105a8:	80168ac0 	call	80168ac <__sprint_r>
 80105ac:	103a571e 	bne	r2,zero,800ef0c <__alt_data_end+0xfc00ef0c>
 80105b0:	d8c12017 	ldw	r3,1152(sp)
 80105b4:	d8811f17 	ldw	r2,1148(sp)
 80105b8:	da000404 	addi	r8,sp,16
 80105bc:	db013317 	ldw	r12,1228(sp)
 80105c0:	dac13117 	ldw	r11,1220(sp)
 80105c4:	10800044 	addi	r2,r2,1
 80105c8:	60c7883a 	add	r3,r12,r3
 80105cc:	42c00015 	stw	r11,0(r8)
 80105d0:	43000115 	stw	r12,4(r8)
 80105d4:	d8c12015 	stw	r3,1152(sp)
 80105d8:	d8811f15 	stw	r2,1148(sp)
 80105dc:	010001c4 	movi	r4,7
 80105e0:	20bb590e 	bge	r4,r2,800f348 <__alt_data_end+0xfc00f348>
 80105e4:	003d7e06 	br	800fbe0 <__alt_data_end+0xfc00fbe0>
 80105e8:	010200b4 	movhi	r4,2050
 80105ec:	211ca984 	addi	r4,r4,29350
 80105f0:	d9013615 	stw	r4,1240(sp)
 80105f4:	003af606 	br	800f1d0 <__alt_data_end+0xfc00f1d0>
 80105f8:	d8812604 	addi	r2,sp,1176
 80105fc:	d8800115 	stw	r2,4(sp)
 8010600:	d9413717 	ldw	r5,1244(sp)
 8010604:	d8812504 	addi	r2,sp,1172
 8010608:	d8800215 	stw	r2,8(sp)
 801060c:	d8812104 	addi	r2,sp,1156
 8010610:	da400015 	stw	r9,0(sp)
 8010614:	d8800315 	stw	r2,12(sp)
 8010618:	b009883a 	mov	r4,r22
 801061c:	900d883a 	mov	r6,r18
 8010620:	01c000c4 	movi	r7,3
 8010624:	da013f15 	stw	r8,1276(sp)
 8010628:	da413e15 	stw	r9,1272(sp)
 801062c:	8010e180 	call	8010e18 <_dtoa_r>
 8010630:	da413e17 	ldw	r9,1272(sp)
 8010634:	da013f17 	ldw	r8,1276(sp)
 8010638:	d8813115 	stw	r2,1220(sp)
 801063c:	4839883a 	mov	fp,r9
 8010640:	dac13117 	ldw	r11,1220(sp)
 8010644:	00801184 	movi	r2,70
 8010648:	5f15883a 	add	r10,r11,fp
 801064c:	a8bef01e 	bne	r21,r2,8010210 <__alt_data_end+0xfc010210>
 8010650:	59000007 	ldb	r4,0(r11)
 8010654:	00800c04 	movi	r2,48
 8010658:	2080e026 	beq	r4,r2,80109dc <___vfprintf_internal_r+0x1f2c>
 801065c:	d8c12617 	ldw	r3,1176(sp)
 8010660:	50d5883a 	add	r10,r10,r3
 8010664:	003eea06 	br	8010210 <__alt_data_end+0xfc010210>
 8010668:	0025883a 	mov	r18,zero
 801066c:	003db306 	br	800fd3c <__alt_data_end+0xfc00fd3c>
 8010670:	b009883a 	mov	r4,r22
 8010674:	b80b883a 	mov	r5,r23
 8010678:	d9811e04 	addi	r6,sp,1144
 801067c:	80168ac0 	call	80168ac <__sprint_r>
 8010680:	103a221e 	bne	r2,zero,800ef0c <__alt_data_end+0xfc00ef0c>
 8010684:	d8c12017 	ldw	r3,1152(sp)
 8010688:	da000404 	addi	r8,sp,16
 801068c:	003daa06 	br	800fd38 <__alt_data_end+0xfc00fd38>
 8010690:	b009883a 	mov	r4,r22
 8010694:	b80b883a 	mov	r5,r23
 8010698:	d9811e04 	addi	r6,sp,1144
 801069c:	80168ac0 	call	80168ac <__sprint_r>
 80106a0:	103a1a1e 	bne	r2,zero,800ef0c <__alt_data_end+0xfc00ef0c>
 80106a4:	d8812617 	ldw	r2,1176(sp)
 80106a8:	d8c12017 	ldw	r3,1152(sp)
 80106ac:	da000404 	addi	r8,sp,16
 80106b0:	003e2c06 	br	800ff64 <__alt_data_end+0xfc00ff64>
 80106b4:	030200b4 	movhi	r12,2050
 80106b8:	631ca584 	addi	r12,r12,29334
 80106bc:	db012c15 	stw	r12,1200(sp)
 80106c0:	dac12c17 	ldw	r11,1200(sp)
 80106c4:	1c07883a 	add	r3,r3,r16
 80106c8:	10800044 	addi	r2,r2,1
 80106cc:	42c00015 	stw	r11,0(r8)
 80106d0:	44000115 	stw	r16,4(r8)
 80106d4:	d8c12015 	stw	r3,1152(sp)
 80106d8:	d8811f15 	stw	r2,1148(sp)
 80106dc:	010001c4 	movi	r4,7
 80106e0:	20bfae16 	blt	r4,r2,801059c <__alt_data_end+0xfc01059c>
 80106e4:	42000204 	addi	r8,r8,8
 80106e8:	003fb406 	br	80105bc <__alt_data_end+0xfc0105bc>
 80106ec:	030200b4 	movhi	r12,2050
 80106f0:	631ca984 	addi	r12,r12,29350
 80106f4:	db013615 	stw	r12,1240(sp)
 80106f8:	003b3806 	br	800f3dc <__alt_data_end+0xfc00f3dc>
 80106fc:	b009883a 	mov	r4,r22
 8010700:	b80b883a 	mov	r5,r23
 8010704:	d9811e04 	addi	r6,sp,1144
 8010708:	80168ac0 	call	80168ac <__sprint_r>
 801070c:	1039ff1e 	bne	r2,zero,800ef0c <__alt_data_end+0xfc00ef0c>
 8010710:	d8812617 	ldw	r2,1176(sp)
 8010714:	db013317 	ldw	r12,1228(sp)
 8010718:	d8c12017 	ldw	r3,1152(sp)
 801071c:	da000404 	addi	r8,sp,16
 8010720:	6085c83a 	sub	r2,r12,r2
 8010724:	003e2006 	br	800ffa8 <__alt_data_end+0xfc00ffa8>
 8010728:	0021883a 	mov	r16,zero
 801072c:	003e1f06 	br	800ffac <__alt_data_end+0xfc00ffac>
 8010730:	00800184 	movi	r2,6
 8010734:	1240012e 	bgeu	r2,r9,801073c <___vfprintf_internal_r+0x1c8c>
 8010738:	1013883a 	mov	r9,r2
 801073c:	4825883a 	mov	r18,r9
 8010740:	4805883a 	mov	r2,r9
 8010744:	48009e16 	blt	r9,zero,80109c0 <___vfprintf_internal_r+0x1f10>
 8010748:	d8812b15 	stw	r2,1196(sp)
 801074c:	008200b4 	movhi	r2,2050
 8010750:	109c9b04 	addi	r2,r2,29292
 8010754:	d8813115 	stw	r2,1220(sp)
 8010758:	dcc12d15 	stw	r19,1204(sp)
 801075c:	d8013215 	stw	zero,1224(sp)
 8010760:	d8013415 	stw	zero,1232(sp)
 8010764:	0005883a 	mov	r2,zero
 8010768:	003a6c06 	br	800f11c <__alt_data_end+0xfc00f11c>
 801076c:	008200b4 	movhi	r2,2050
 8010770:	109c9004 	addi	r2,r2,29248
 8010774:	d8813115 	stw	r2,1220(sp)
 8010778:	003f4c06 	br	80104ac <__alt_data_end+0xfc0104ac>
 801077c:	00c00b44 	movi	r3,45
 8010780:	d8812b15 	stw	r2,1196(sp)
 8010784:	dc412d17 	ldw	r17,1204(sp)
 8010788:	d8c12785 	stb	r3,1182(sp)
 801078c:	dcc12d15 	stw	r19,1204(sp)
 8010790:	d8013215 	stw	zero,1224(sp)
 8010794:	00800b44 	movi	r2,45
 8010798:	003a5d06 	br	800f110 <__alt_data_end+0xfc00f110>
 801079c:	d8c12617 	ldw	r3,1176(sp)
 80107a0:	00bfff44 	movi	r2,-3
 80107a4:	18800d16 	blt	r3,r2,80107dc <___vfprintf_internal_r+0x1d2c>
 80107a8:	48c00c16 	blt	r9,r3,80107dc <___vfprintf_internal_r+0x1d2c>
 80107ac:	d8c13415 	stw	r3,1232(sp)
 80107b0:	040019c4 	movi	r16,103
 80107b4:	003eb506 	br	801028c <__alt_data_end+0xfc01028c>
 80107b8:	05400b44 	movi	r21,45
 80107bc:	dd412785 	stb	r21,1182(sp)
 80107c0:	003a0f06 	br	800f000 <__alt_data_end+0xfc00f000>
 80107c4:	010200b4 	movhi	r4,2050
 80107c8:	211ca584 	addi	r4,r4,29334
 80107cc:	d9012c15 	stw	r4,1200(sp)
 80107d0:	003cb106 	br	800fa98 <__alt_data_end+0xfc00fa98>
 80107d4:	5005883a 	mov	r2,r10
 80107d8:	003ea106 	br	8010260 <__alt_data_end+0xfc010260>
 80107dc:	843fff84 	addi	r16,r16,-2
 80107e0:	1f3fffc4 	addi	fp,r3,-1
 80107e4:	df012615 	stw	fp,1176(sp)
 80107e8:	dc0122c5 	stb	r16,1163(sp)
 80107ec:	e0009516 	blt	fp,zero,8010a44 <___vfprintf_internal_r+0x1f94>
 80107f0:	00800ac4 	movi	r2,43
 80107f4:	d8812305 	stb	r2,1164(sp)
 80107f8:	00800244 	movi	r2,9
 80107fc:	1700690e 	bge	r2,fp,80109a4 <___vfprintf_internal_r+0x1ef4>
 8010800:	dd4122c4 	addi	r21,sp,1163
 8010804:	dc012c15 	stw	r16,1200(sp)
 8010808:	8825883a 	mov	r18,r17
 801080c:	a821883a 	mov	r16,r21
 8010810:	4023883a 	mov	r17,r8
 8010814:	e009883a 	mov	r4,fp
 8010818:	01400284 	movi	r5,10
 801081c:	800bac40 	call	800bac4 <__modsi3>
 8010820:	10800c04 	addi	r2,r2,48
 8010824:	843fffc4 	addi	r16,r16,-1
 8010828:	e009883a 	mov	r4,fp
 801082c:	01400284 	movi	r5,10
 8010830:	80800005 	stb	r2,0(r16)
 8010834:	800ba700 	call	800ba70 <__divsi3>
 8010838:	1039883a 	mov	fp,r2
 801083c:	00800244 	movi	r2,9
 8010840:	173ff416 	blt	r2,fp,8010814 <__alt_data_end+0xfc010814>
 8010844:	8811883a 	mov	r8,r17
 8010848:	e0800c04 	addi	r2,fp,48
 801084c:	9023883a 	mov	r17,r18
 8010850:	8025883a 	mov	r18,r16
 8010854:	913fffc4 	addi	r4,r18,-1
 8010858:	90bfffc5 	stb	r2,-1(r18)
 801085c:	dc012c17 	ldw	r16,1200(sp)
 8010860:	25408e2e 	bgeu	r4,r21,8010a9c <___vfprintf_internal_r+0x1fec>
 8010864:	d9412384 	addi	r5,sp,1166
 8010868:	2c8bc83a 	sub	r5,r5,r18
 801086c:	d8c12344 	addi	r3,sp,1165
 8010870:	a94b883a 	add	r5,r21,r5
 8010874:	00000106 	br	801087c <___vfprintf_internal_r+0x1dcc>
 8010878:	20800003 	ldbu	r2,0(r4)
 801087c:	18800005 	stb	r2,0(r3)
 8010880:	18c00044 	addi	r3,r3,1
 8010884:	21000044 	addi	r4,r4,1
 8010888:	197ffb1e 	bne	r3,r5,8010878 <__alt_data_end+0xfc010878>
 801088c:	d8812304 	addi	r2,sp,1164
 8010890:	1485c83a 	sub	r2,r2,r18
 8010894:	d8c12344 	addi	r3,sp,1165
 8010898:	1885883a 	add	r2,r3,r2
 801089c:	dac13317 	ldw	r11,1228(sp)
 80108a0:	156bc83a 	sub	r21,r2,r21
 80108a4:	dd413a15 	stw	r21,1256(sp)
 80108a8:	00800044 	movi	r2,1
 80108ac:	5d65883a 	add	r18,r11,r21
 80108b0:	12c0770e 	bge	r2,r11,8010a90 <___vfprintf_internal_r+0x1fe0>
 80108b4:	94800044 	addi	r18,r18,1
 80108b8:	9005883a 	mov	r2,r18
 80108bc:	90007216 	blt	r18,zero,8010a88 <___vfprintf_internal_r+0x1fd8>
 80108c0:	d8013415 	stw	zero,1232(sp)
 80108c4:	003e7906 	br	80102ac <__alt_data_end+0xfc0102ac>
 80108c8:	da412b15 	stw	r9,1196(sp)
 80108cc:	dd412783 	ldbu	r21,1182(sp)
 80108d0:	4825883a 	mov	r18,r9
 80108d4:	dcc12d15 	stw	r19,1204(sp)
 80108d8:	d8013215 	stw	zero,1224(sp)
 80108dc:	d8013415 	stw	zero,1232(sp)
 80108e0:	003a0706 	br	800f100 <__alt_data_end+0xfc00f100>
 80108e4:	b009883a 	mov	r4,r22
 80108e8:	b80b883a 	mov	r5,r23
 80108ec:	d9811e04 	addi	r6,sp,1144
 80108f0:	80168ac0 	call	80168ac <__sprint_r>
 80108f4:	1039851e 	bne	r2,zero,800ef0c <__alt_data_end+0xfc00ef0c>
 80108f8:	dc012617 	ldw	r16,1176(sp)
 80108fc:	d8c12017 	ldw	r3,1152(sp)
 8010900:	d8811f17 	ldw	r2,1148(sp)
 8010904:	da000404 	addi	r8,sp,16
 8010908:	003ec706 	br	8010428 <__alt_data_end+0xfc010428>
 801090c:	483e1a1e 	bne	r9,zero,8010178 <__alt_data_end+0xfc010178>
 8010910:	9013883a 	mov	r9,r18
 8010914:	003e1806 	br	8010178 <__alt_data_end+0xfc010178>
 8010918:	00c00b44 	movi	r3,45
 801091c:	64a0003c 	xorhi	r18,r12,32768
 8010920:	d8c12b05 	stb	r3,1196(sp)
 8010924:	003e1a06 	br	8010190 <__alt_data_end+0xfc010190>
 8010928:	4f000044 	addi	fp,r9,1
 801092c:	003e1f06 	br	80101ac <__alt_data_end+0xfc0101ac>
 8010930:	02400184 	movi	r9,6
 8010934:	003e1006 	br	8010178 <__alt_data_end+0xfc010178>
 8010938:	d8c13417 	ldw	r3,1232(sp)
 801093c:	00c04b0e 	bge	zero,r3,8010a6c <___vfprintf_internal_r+0x1fbc>
 8010940:	04800044 	movi	r18,1
 8010944:	dac13317 	ldw	r11,1228(sp)
 8010948:	92e5883a 	add	r18,r18,r11
 801094c:	9005883a 	mov	r2,r18
 8010950:	903e560e 	bge	r18,zero,80102ac <__alt_data_end+0xfc0102ac>
 8010954:	0005883a 	mov	r2,zero
 8010958:	003e5406 	br	80102ac <__alt_data_end+0xfc0102ac>
 801095c:	d8c12617 	ldw	r3,1176(sp)
 8010960:	d8c13415 	stw	r3,1232(sp)
 8010964:	00c03b0e 	bge	zero,r3,8010a54 <___vfprintf_internal_r+0x1fa4>
 8010968:	4800081e 	bne	r9,zero,801098c <___vfprintf_internal_r+0x1edc>
 801096c:	8c40004c 	andi	r17,r17,1
 8010970:	8800061e 	bne	r17,zero,801098c <___vfprintf_internal_r+0x1edc>
 8010974:	1805883a 	mov	r2,r3
 8010978:	183e4b0e 	bge	r3,zero,80102a8 <__alt_data_end+0xfc0102a8>
 801097c:	0005883a 	mov	r2,zero
 8010980:	003e4906 	br	80102a8 <__alt_data_end+0xfc0102a8>
 8010984:	d8812117 	ldw	r2,1156(sp)
 8010988:	003e3506 	br	8010260 <__alt_data_end+0xfc010260>
 801098c:	dac13417 	ldw	r11,1232(sp)
 8010990:	4a400044 	addi	r9,r9,1
 8010994:	5a65883a 	add	r18,r11,r9
 8010998:	9005883a 	mov	r2,r18
 801099c:	903e430e 	bge	r18,zero,80102ac <__alt_data_end+0xfc0102ac>
 80109a0:	003fec06 	br	8010954 <__alt_data_end+0xfc010954>
 80109a4:	00800c04 	movi	r2,48
 80109a8:	e0c00c04 	addi	r3,fp,48
 80109ac:	d8812345 	stb	r2,1165(sp)
 80109b0:	d8c12385 	stb	r3,1166(sp)
 80109b4:	d88123c4 	addi	r2,sp,1167
 80109b8:	dd4122c4 	addi	r21,sp,1163
 80109bc:	003fb706 	br	801089c <__alt_data_end+0xfc01089c>
 80109c0:	0005883a 	mov	r2,zero
 80109c4:	003f6006 	br	8010748 <__alt_data_end+0xfc010748>
 80109c8:	db013417 	ldw	r12,1232(sp)
 80109cc:	64800044 	addi	r18,r12,1
 80109d0:	9005883a 	mov	r2,r18
 80109d4:	903e350e 	bge	r18,zero,80102ac <__alt_data_end+0xfc0102ac>
 80109d8:	003fde06 	br	8010954 <__alt_data_end+0xfc010954>
 80109dc:	d9013717 	ldw	r4,1244(sp)
 80109e0:	900b883a 	mov	r5,r18
 80109e4:	000d883a 	mov	r6,zero
 80109e8:	000f883a 	mov	r7,zero
 80109ec:	da013f15 	stw	r8,1276(sp)
 80109f0:	da413e15 	stw	r9,1272(sp)
 80109f4:	da813d15 	stw	r10,1268(sp)
 80109f8:	800a3680 	call	800a368 <__eqdf2>
 80109fc:	da013f17 	ldw	r8,1276(sp)
 8010a00:	da413e17 	ldw	r9,1272(sp)
 8010a04:	da813d17 	ldw	r10,1268(sp)
 8010a08:	103f1426 	beq	r2,zero,801065c <__alt_data_end+0xfc01065c>
 8010a0c:	00800044 	movi	r2,1
 8010a10:	1707c83a 	sub	r3,r2,fp
 8010a14:	d8c12615 	stw	r3,1176(sp)
 8010a18:	003f1106 	br	8010660 <__alt_data_end+0xfc010660>
 8010a1c:	dac12d17 	ldw	r11,1204(sp)
 8010a20:	5a400017 	ldw	r9,0(r11)
 8010a24:	5ac00104 	addi	r11,r11,4
 8010a28:	dac12d15 	stw	r11,1204(sp)
 8010a2c:	483ec60e 	bge	r9,zero,8010548 <__alt_data_end+0xfc010548>
 8010a30:	027fffc4 	movi	r9,-1
 8010a34:	1c000047 	ldb	r16,1(r3)
 8010a38:	00388406 	br	800ec4c <__alt_data_end+0xfc00ec4c>
 8010a3c:	043fffc4 	movi	r16,-1
 8010a40:	00391006 	br	800ee84 <__alt_data_end+0xfc00ee84>
 8010a44:	00800b44 	movi	r2,45
 8010a48:	0739c83a 	sub	fp,zero,fp
 8010a4c:	d8812305 	stb	r2,1164(sp)
 8010a50:	003f6906 	br	80107f8 <__alt_data_end+0xfc0107f8>
 8010a54:	4800081e 	bne	r9,zero,8010a78 <___vfprintf_internal_r+0x1fc8>
 8010a58:	8c40004c 	andi	r17,r17,1
 8010a5c:	8800061e 	bne	r17,zero,8010a78 <___vfprintf_internal_r+0x1fc8>
 8010a60:	00800044 	movi	r2,1
 8010a64:	1025883a 	mov	r18,r2
 8010a68:	003e1006 	br	80102ac <__alt_data_end+0xfc0102ac>
 8010a6c:	04800084 	movi	r18,2
 8010a70:	90e5c83a 	sub	r18,r18,r3
 8010a74:	003fb306 	br	8010944 <__alt_data_end+0xfc010944>
 8010a78:	4c800084 	addi	r18,r9,2
 8010a7c:	9005883a 	mov	r2,r18
 8010a80:	903e0a0e 	bge	r18,zero,80102ac <__alt_data_end+0xfc0102ac>
 8010a84:	003fb306 	br	8010954 <__alt_data_end+0xfc010954>
 8010a88:	0005883a 	mov	r2,zero
 8010a8c:	003f8c06 	br	80108c0 <__alt_data_end+0xfc0108c0>
 8010a90:	88a2703a 	and	r17,r17,r2
 8010a94:	883f8826 	beq	r17,zero,80108b8 <__alt_data_end+0xfc0108b8>
 8010a98:	003f8606 	br	80108b4 <__alt_data_end+0xfc0108b4>
 8010a9c:	d8812344 	addi	r2,sp,1165
 8010aa0:	003f7e06 	br	801089c <__alt_data_end+0xfc01089c>
 8010aa4:	d8c12617 	ldw	r3,1176(sp)
 8010aa8:	003f4d06 	br	80107e0 <__alt_data_end+0xfc0107e0>

08010aac <__vfprintf_internal>:
 8010aac:	2007883a 	mov	r3,r4
 8010ab0:	010200f4 	movhi	r4,2051
 8010ab4:	2123ec04 	addi	r4,r4,-28752
 8010ab8:	21000017 	ldw	r4,0(r4)
 8010abc:	2805883a 	mov	r2,r5
 8010ac0:	300f883a 	mov	r7,r6
 8010ac4:	180b883a 	mov	r5,r3
 8010ac8:	100d883a 	mov	r6,r2
 8010acc:	800eab01 	jmpi	800eab0 <___vfprintf_internal_r>

08010ad0 <__swsetup_r>:
 8010ad0:	008200f4 	movhi	r2,2051
 8010ad4:	defffd04 	addi	sp,sp,-12
 8010ad8:	10a3ec04 	addi	r2,r2,-28752
 8010adc:	dc400115 	stw	r17,4(sp)
 8010ae0:	2023883a 	mov	r17,r4
 8010ae4:	11000017 	ldw	r4,0(r2)
 8010ae8:	dc000015 	stw	r16,0(sp)
 8010aec:	dfc00215 	stw	ra,8(sp)
 8010af0:	2821883a 	mov	r16,r5
 8010af4:	20000226 	beq	r4,zero,8010b00 <__swsetup_r+0x30>
 8010af8:	20c00e17 	ldw	r3,56(r4)
 8010afc:	18002e26 	beq	r3,zero,8010bb8 <__swsetup_r+0xe8>
 8010b00:	8080030b 	ldhu	r2,12(r16)
 8010b04:	10c0020c 	andi	r3,r2,8
 8010b08:	100d883a 	mov	r6,r2
 8010b0c:	18000f26 	beq	r3,zero,8010b4c <__swsetup_r+0x7c>
 8010b10:	80c00417 	ldw	r3,16(r16)
 8010b14:	18001526 	beq	r3,zero,8010b6c <__swsetup_r+0x9c>
 8010b18:	1100004c 	andi	r4,r2,1
 8010b1c:	20001c1e 	bne	r4,zero,8010b90 <__swsetup_r+0xc0>
 8010b20:	1080008c 	andi	r2,r2,2
 8010b24:	1000261e 	bne	r2,zero,8010bc0 <__swsetup_r+0xf0>
 8010b28:	80800517 	ldw	r2,20(r16)
 8010b2c:	80800215 	stw	r2,8(r16)
 8010b30:	18001c26 	beq	r3,zero,8010ba4 <__swsetup_r+0xd4>
 8010b34:	0005883a 	mov	r2,zero
 8010b38:	dfc00217 	ldw	ra,8(sp)
 8010b3c:	dc400117 	ldw	r17,4(sp)
 8010b40:	dc000017 	ldw	r16,0(sp)
 8010b44:	dec00304 	addi	sp,sp,12
 8010b48:	f800283a 	ret
 8010b4c:	3080040c 	andi	r2,r6,16
 8010b50:	10001726 	beq	r2,zero,8010bb0 <__swsetup_r+0xe0>
 8010b54:	3080010c 	andi	r2,r6,4
 8010b58:	10001b1e 	bne	r2,zero,8010bc8 <__swsetup_r+0xf8>
 8010b5c:	80c00417 	ldw	r3,16(r16)
 8010b60:	30800214 	ori	r2,r6,8
 8010b64:	8080030d 	sth	r2,12(r16)
 8010b68:	183feb1e 	bne	r3,zero,8010b18 <__alt_data_end+0xfc010b18>
 8010b6c:	1140a00c 	andi	r5,r2,640
 8010b70:	01008004 	movi	r4,512
 8010b74:	293fe826 	beq	r5,r4,8010b18 <__alt_data_end+0xfc010b18>
 8010b78:	8809883a 	mov	r4,r17
 8010b7c:	800b883a 	mov	r5,r16
 8010b80:	80136400 	call	8013640 <__smakebuf_r>
 8010b84:	8080030b 	ldhu	r2,12(r16)
 8010b88:	80c00417 	ldw	r3,16(r16)
 8010b8c:	003fe206 	br	8010b18 <__alt_data_end+0xfc010b18>
 8010b90:	80800517 	ldw	r2,20(r16)
 8010b94:	80000215 	stw	zero,8(r16)
 8010b98:	0085c83a 	sub	r2,zero,r2
 8010b9c:	80800615 	stw	r2,24(r16)
 8010ba0:	183fe41e 	bne	r3,zero,8010b34 <__alt_data_end+0xfc010b34>
 8010ba4:	8080030b 	ldhu	r2,12(r16)
 8010ba8:	1080200c 	andi	r2,r2,128
 8010bac:	103fe226 	beq	r2,zero,8010b38 <__alt_data_end+0xfc010b38>
 8010bb0:	00bfffc4 	movi	r2,-1
 8010bb4:	003fe006 	br	8010b38 <__alt_data_end+0xfc010b38>
 8010bb8:	8012ae80 	call	8012ae8 <__sinit>
 8010bbc:	003fd006 	br	8010b00 <__alt_data_end+0xfc010b00>
 8010bc0:	0005883a 	mov	r2,zero
 8010bc4:	003fd906 	br	8010b2c <__alt_data_end+0xfc010b2c>
 8010bc8:	81400c17 	ldw	r5,48(r16)
 8010bcc:	28000626 	beq	r5,zero,8010be8 <__swsetup_r+0x118>
 8010bd0:	80801004 	addi	r2,r16,64
 8010bd4:	28800326 	beq	r5,r2,8010be4 <__swsetup_r+0x114>
 8010bd8:	8809883a 	mov	r4,r17
 8010bdc:	8012c5c0 	call	8012c5c <_free_r>
 8010be0:	8180030b 	ldhu	r6,12(r16)
 8010be4:	80000c15 	stw	zero,48(r16)
 8010be8:	80c00417 	ldw	r3,16(r16)
 8010bec:	00bff6c4 	movi	r2,-37
 8010bf0:	118c703a 	and	r6,r2,r6
 8010bf4:	80000115 	stw	zero,4(r16)
 8010bf8:	80c00015 	stw	r3,0(r16)
 8010bfc:	003fd806 	br	8010b60 <__alt_data_end+0xfc010b60>

08010c00 <abort>:
 8010c00:	deffff04 	addi	sp,sp,-4
 8010c04:	01000184 	movi	r4,6
 8010c08:	dfc00015 	stw	ra,0(sp)
 8010c0c:	80153940 	call	8015394 <raise>
 8010c10:	01000044 	movi	r4,1
 8010c14:	80191f80 	call	80191f8 <_exit>

08010c18 <quorem>:
 8010c18:	defff704 	addi	sp,sp,-36
 8010c1c:	dc800215 	stw	r18,8(sp)
 8010c20:	20800417 	ldw	r2,16(r4)
 8010c24:	2c800417 	ldw	r18,16(r5)
 8010c28:	dfc00815 	stw	ra,32(sp)
 8010c2c:	ddc00715 	stw	r23,28(sp)
 8010c30:	dd800615 	stw	r22,24(sp)
 8010c34:	dd400515 	stw	r21,20(sp)
 8010c38:	dd000415 	stw	r20,16(sp)
 8010c3c:	dcc00315 	stw	r19,12(sp)
 8010c40:	dc400115 	stw	r17,4(sp)
 8010c44:	dc000015 	stw	r16,0(sp)
 8010c48:	14807116 	blt	r2,r18,8010e10 <quorem+0x1f8>
 8010c4c:	94bfffc4 	addi	r18,r18,-1
 8010c50:	94ad883a 	add	r22,r18,r18
 8010c54:	b5ad883a 	add	r22,r22,r22
 8010c58:	2c400504 	addi	r17,r5,20
 8010c5c:	8da9883a 	add	r20,r17,r22
 8010c60:	25400504 	addi	r21,r4,20
 8010c64:	282f883a 	mov	r23,r5
 8010c68:	adad883a 	add	r22,r21,r22
 8010c6c:	a1400017 	ldw	r5,0(r20)
 8010c70:	2021883a 	mov	r16,r4
 8010c74:	b1000017 	ldw	r4,0(r22)
 8010c78:	29400044 	addi	r5,r5,1
 8010c7c:	800bb200 	call	800bb20 <__udivsi3>
 8010c80:	1027883a 	mov	r19,r2
 8010c84:	10002c26 	beq	r2,zero,8010d38 <quorem+0x120>
 8010c88:	a813883a 	mov	r9,r21
 8010c8c:	8811883a 	mov	r8,r17
 8010c90:	0009883a 	mov	r4,zero
 8010c94:	000d883a 	mov	r6,zero
 8010c98:	41c00017 	ldw	r7,0(r8)
 8010c9c:	49400017 	ldw	r5,0(r9)
 8010ca0:	42000104 	addi	r8,r8,4
 8010ca4:	38bfffcc 	andi	r2,r7,65535
 8010ca8:	14c5383a 	mul	r2,r2,r19
 8010cac:	380ed43a 	srli	r7,r7,16
 8010cb0:	28ffffcc 	andi	r3,r5,65535
 8010cb4:	2085883a 	add	r2,r4,r2
 8010cb8:	1008d43a 	srli	r4,r2,16
 8010cbc:	3ccf383a 	mul	r7,r7,r19
 8010cc0:	198d883a 	add	r6,r3,r6
 8010cc4:	10ffffcc 	andi	r3,r2,65535
 8010cc8:	30c7c83a 	sub	r3,r6,r3
 8010ccc:	280ad43a 	srli	r5,r5,16
 8010cd0:	21c9883a 	add	r4,r4,r7
 8010cd4:	180dd43a 	srai	r6,r3,16
 8010cd8:	20bfffcc 	andi	r2,r4,65535
 8010cdc:	288bc83a 	sub	r5,r5,r2
 8010ce0:	298b883a 	add	r5,r5,r6
 8010ce4:	280e943a 	slli	r7,r5,16
 8010ce8:	18ffffcc 	andi	r3,r3,65535
 8010cec:	2008d43a 	srli	r4,r4,16
 8010cf0:	38ceb03a 	or	r7,r7,r3
 8010cf4:	49c00015 	stw	r7,0(r9)
 8010cf8:	280dd43a 	srai	r6,r5,16
 8010cfc:	4a400104 	addi	r9,r9,4
 8010d00:	a23fe52e 	bgeu	r20,r8,8010c98 <__alt_data_end+0xfc010c98>
 8010d04:	b0800017 	ldw	r2,0(r22)
 8010d08:	10000b1e 	bne	r2,zero,8010d38 <quorem+0x120>
 8010d0c:	b0bfff04 	addi	r2,r22,-4
 8010d10:	a880082e 	bgeu	r21,r2,8010d34 <quorem+0x11c>
 8010d14:	b0ffff17 	ldw	r3,-4(r22)
 8010d18:	18000326 	beq	r3,zero,8010d28 <quorem+0x110>
 8010d1c:	00000506 	br	8010d34 <quorem+0x11c>
 8010d20:	10c00017 	ldw	r3,0(r2)
 8010d24:	1800031e 	bne	r3,zero,8010d34 <quorem+0x11c>
 8010d28:	10bfff04 	addi	r2,r2,-4
 8010d2c:	94bfffc4 	addi	r18,r18,-1
 8010d30:	a8bffb36 	bltu	r21,r2,8010d20 <__alt_data_end+0xfc010d20>
 8010d34:	84800415 	stw	r18,16(r16)
 8010d38:	8009883a 	mov	r4,r16
 8010d3c:	b80b883a 	mov	r5,r23
 8010d40:	80142fc0 	call	80142fc <__mcmp>
 8010d44:	10002616 	blt	r2,zero,8010de0 <quorem+0x1c8>
 8010d48:	9cc00044 	addi	r19,r19,1
 8010d4c:	a80d883a 	mov	r6,r21
 8010d50:	000b883a 	mov	r5,zero
 8010d54:	31000017 	ldw	r4,0(r6)
 8010d58:	88800017 	ldw	r2,0(r17)
 8010d5c:	31800104 	addi	r6,r6,4
 8010d60:	20ffffcc 	andi	r3,r4,65535
 8010d64:	194b883a 	add	r5,r3,r5
 8010d68:	10ffffcc 	andi	r3,r2,65535
 8010d6c:	28c7c83a 	sub	r3,r5,r3
 8010d70:	1004d43a 	srli	r2,r2,16
 8010d74:	2008d43a 	srli	r4,r4,16
 8010d78:	180bd43a 	srai	r5,r3,16
 8010d7c:	18ffffcc 	andi	r3,r3,65535
 8010d80:	2089c83a 	sub	r4,r4,r2
 8010d84:	2149883a 	add	r4,r4,r5
 8010d88:	2004943a 	slli	r2,r4,16
 8010d8c:	8c400104 	addi	r17,r17,4
 8010d90:	200bd43a 	srai	r5,r4,16
 8010d94:	10c6b03a 	or	r3,r2,r3
 8010d98:	30ffff15 	stw	r3,-4(r6)
 8010d9c:	a47fed2e 	bgeu	r20,r17,8010d54 <__alt_data_end+0xfc010d54>
 8010da0:	9485883a 	add	r2,r18,r18
 8010da4:	1085883a 	add	r2,r2,r2
 8010da8:	a887883a 	add	r3,r21,r2
 8010dac:	18800017 	ldw	r2,0(r3)
 8010db0:	10000b1e 	bne	r2,zero,8010de0 <quorem+0x1c8>
 8010db4:	18bfff04 	addi	r2,r3,-4
 8010db8:	a880082e 	bgeu	r21,r2,8010ddc <quorem+0x1c4>
 8010dbc:	18ffff17 	ldw	r3,-4(r3)
 8010dc0:	18000326 	beq	r3,zero,8010dd0 <quorem+0x1b8>
 8010dc4:	00000506 	br	8010ddc <quorem+0x1c4>
 8010dc8:	10c00017 	ldw	r3,0(r2)
 8010dcc:	1800031e 	bne	r3,zero,8010ddc <quorem+0x1c4>
 8010dd0:	10bfff04 	addi	r2,r2,-4
 8010dd4:	94bfffc4 	addi	r18,r18,-1
 8010dd8:	a8bffb36 	bltu	r21,r2,8010dc8 <__alt_data_end+0xfc010dc8>
 8010ddc:	84800415 	stw	r18,16(r16)
 8010de0:	9805883a 	mov	r2,r19
 8010de4:	dfc00817 	ldw	ra,32(sp)
 8010de8:	ddc00717 	ldw	r23,28(sp)
 8010dec:	dd800617 	ldw	r22,24(sp)
 8010df0:	dd400517 	ldw	r21,20(sp)
 8010df4:	dd000417 	ldw	r20,16(sp)
 8010df8:	dcc00317 	ldw	r19,12(sp)
 8010dfc:	dc800217 	ldw	r18,8(sp)
 8010e00:	dc400117 	ldw	r17,4(sp)
 8010e04:	dc000017 	ldw	r16,0(sp)
 8010e08:	dec00904 	addi	sp,sp,36
 8010e0c:	f800283a 	ret
 8010e10:	0005883a 	mov	r2,zero
 8010e14:	003ff306 	br	8010de4 <__alt_data_end+0xfc010de4>

08010e18 <_dtoa_r>:
 8010e18:	20801017 	ldw	r2,64(r4)
 8010e1c:	deffde04 	addi	sp,sp,-136
 8010e20:	dd401d15 	stw	r21,116(sp)
 8010e24:	dcc01b15 	stw	r19,108(sp)
 8010e28:	dc801a15 	stw	r18,104(sp)
 8010e2c:	dc401915 	stw	r17,100(sp)
 8010e30:	dc001815 	stw	r16,96(sp)
 8010e34:	dfc02115 	stw	ra,132(sp)
 8010e38:	df002015 	stw	fp,128(sp)
 8010e3c:	ddc01f15 	stw	r23,124(sp)
 8010e40:	dd801e15 	stw	r22,120(sp)
 8010e44:	dd001c15 	stw	r20,112(sp)
 8010e48:	d9c00315 	stw	r7,12(sp)
 8010e4c:	2021883a 	mov	r16,r4
 8010e50:	302b883a 	mov	r21,r6
 8010e54:	2825883a 	mov	r18,r5
 8010e58:	dc402417 	ldw	r17,144(sp)
 8010e5c:	3027883a 	mov	r19,r6
 8010e60:	10000826 	beq	r2,zero,8010e84 <_dtoa_r+0x6c>
 8010e64:	21801117 	ldw	r6,68(r4)
 8010e68:	00c00044 	movi	r3,1
 8010e6c:	100b883a 	mov	r5,r2
 8010e70:	1986983a 	sll	r3,r3,r6
 8010e74:	11800115 	stw	r6,4(r2)
 8010e78:	10c00215 	stw	r3,8(r2)
 8010e7c:	8013ae40 	call	8013ae4 <_Bfree>
 8010e80:	80001015 	stw	zero,64(r16)
 8010e84:	a8002d16 	blt	r21,zero,8010f3c <_dtoa_r+0x124>
 8010e88:	88000015 	stw	zero,0(r17)
 8010e8c:	a8dffc2c 	andhi	r3,r21,32752
 8010e90:	009ffc34 	movhi	r2,32752
 8010e94:	18801b26 	beq	r3,r2,8010f04 <_dtoa_r+0xec>
 8010e98:	9009883a 	mov	r4,r18
 8010e9c:	980b883a 	mov	r5,r19
 8010ea0:	000d883a 	mov	r6,zero
 8010ea4:	000f883a 	mov	r7,zero
 8010ea8:	800a3680 	call	800a368 <__eqdf2>
 8010eac:	10002a1e 	bne	r2,zero,8010f58 <_dtoa_r+0x140>
 8010eb0:	d8c02317 	ldw	r3,140(sp)
 8010eb4:	d9002517 	ldw	r4,148(sp)
 8010eb8:	00800044 	movi	r2,1
 8010ebc:	18800015 	stw	r2,0(r3)
 8010ec0:	2001a226 	beq	r4,zero,801154c <_dtoa_r+0x734>
 8010ec4:	008200b4 	movhi	r2,2050
 8010ec8:	109c9d44 	addi	r2,r2,29301
 8010ecc:	20800015 	stw	r2,0(r4)
 8010ed0:	10bfffc4 	addi	r2,r2,-1
 8010ed4:	dfc02117 	ldw	ra,132(sp)
 8010ed8:	df002017 	ldw	fp,128(sp)
 8010edc:	ddc01f17 	ldw	r23,124(sp)
 8010ee0:	dd801e17 	ldw	r22,120(sp)
 8010ee4:	dd401d17 	ldw	r21,116(sp)
 8010ee8:	dd001c17 	ldw	r20,112(sp)
 8010eec:	dcc01b17 	ldw	r19,108(sp)
 8010ef0:	dc801a17 	ldw	r18,104(sp)
 8010ef4:	dc401917 	ldw	r17,100(sp)
 8010ef8:	dc001817 	ldw	r16,96(sp)
 8010efc:	dec02204 	addi	sp,sp,136
 8010f00:	f800283a 	ret
 8010f04:	d8c02317 	ldw	r3,140(sp)
 8010f08:	0089c3c4 	movi	r2,9999
 8010f0c:	18800015 	stw	r2,0(r3)
 8010f10:	90017c26 	beq	r18,zero,8011504 <_dtoa_r+0x6ec>
 8010f14:	008200b4 	movhi	r2,2050
 8010f18:	109cb104 	addi	r2,r2,29380
 8010f1c:	d9002517 	ldw	r4,148(sp)
 8010f20:	203fec26 	beq	r4,zero,8010ed4 <__alt_data_end+0xfc010ed4>
 8010f24:	10c000c7 	ldb	r3,3(r2)
 8010f28:	18017d1e 	bne	r3,zero,8011520 <_dtoa_r+0x708>
 8010f2c:	10c000c4 	addi	r3,r2,3
 8010f30:	d9802517 	ldw	r6,148(sp)
 8010f34:	30c00015 	stw	r3,0(r6)
 8010f38:	003fe606 	br	8010ed4 <__alt_data_end+0xfc010ed4>
 8010f3c:	04e00034 	movhi	r19,32768
 8010f40:	9cffffc4 	addi	r19,r19,-1
 8010f44:	00800044 	movi	r2,1
 8010f48:	ace6703a 	and	r19,r21,r19
 8010f4c:	88800015 	stw	r2,0(r17)
 8010f50:	982b883a 	mov	r21,r19
 8010f54:	003fcd06 	br	8010e8c <__alt_data_end+0xfc010e8c>
 8010f58:	d8800204 	addi	r2,sp,8
 8010f5c:	a822d53a 	srli	r17,r21,20
 8010f60:	d8800015 	stw	r2,0(sp)
 8010f64:	8009883a 	mov	r4,r16
 8010f68:	900b883a 	mov	r5,r18
 8010f6c:	980d883a 	mov	r6,r19
 8010f70:	d9c00104 	addi	r7,sp,4
 8010f74:	80146700 	call	8014670 <__d2b>
 8010f78:	1039883a 	mov	fp,r2
 8010f7c:	88016a1e 	bne	r17,zero,8011528 <_dtoa_r+0x710>
 8010f80:	dd000217 	ldw	r20,8(sp)
 8010f84:	dc400117 	ldw	r17,4(sp)
 8010f88:	00befbc4 	movi	r2,-1041
 8010f8c:	a463883a 	add	r17,r20,r17
 8010f90:	8882ea16 	blt	r17,r2,8011b3c <_dtoa_r+0xd24>
 8010f94:	00bf0384 	movi	r2,-1010
 8010f98:	1445c83a 	sub	r2,r2,r17
 8010f9c:	89010484 	addi	r4,r17,1042
 8010fa0:	a8aa983a 	sll	r21,r21,r2
 8010fa4:	9108d83a 	srl	r4,r18,r4
 8010fa8:	a908b03a 	or	r4,r21,r4
 8010fac:	80190080 	call	8019008 <__floatunsidf>
 8010fb0:	017f8434 	movhi	r5,65040
 8010fb4:	01800044 	movi	r6,1
 8010fb8:	1009883a 	mov	r4,r2
 8010fbc:	194b883a 	add	r5,r3,r5
 8010fc0:	8c7fffc4 	addi	r17,r17,-1
 8010fc4:	d9800f15 	stw	r6,60(sp)
 8010fc8:	000d883a 	mov	r6,zero
 8010fcc:	01cffe34 	movhi	r7,16376
 8010fd0:	800acd00 	call	800acd0 <__subdf3>
 8010fd4:	0198dbf4 	movhi	r6,25455
 8010fd8:	01cff4f4 	movhi	r7,16339
 8010fdc:	1009883a 	mov	r4,r2
 8010fe0:	180b883a 	mov	r5,r3
 8010fe4:	3190d844 	addi	r6,r6,17249
 8010fe8:	39e1e9c4 	addi	r7,r7,-30809
 8010fec:	800a5ac0 	call	800a5ac <__muldf3>
 8010ff0:	01a2d874 	movhi	r6,35681
 8010ff4:	01cff1f4 	movhi	r7,16327
 8010ff8:	180b883a 	mov	r5,r3
 8010ffc:	31b22cc4 	addi	r6,r6,-14157
 8011000:	39e28a04 	addi	r7,r7,-30168
 8011004:	1009883a 	mov	r4,r2
 8011008:	80092000 	call	8009200 <__adddf3>
 801100c:	8809883a 	mov	r4,r17
 8011010:	102d883a 	mov	r22,r2
 8011014:	182b883a 	mov	r21,r3
 8011018:	800b6280 	call	800b628 <__floatsidf>
 801101c:	019427f4 	movhi	r6,20639
 8011020:	01cff4f4 	movhi	r7,16339
 8011024:	1009883a 	mov	r4,r2
 8011028:	180b883a 	mov	r5,r3
 801102c:	319e7ec4 	addi	r6,r6,31227
 8011030:	39d104c4 	addi	r7,r7,17427
 8011034:	800a5ac0 	call	800a5ac <__muldf3>
 8011038:	b009883a 	mov	r4,r22
 801103c:	a80b883a 	mov	r5,r21
 8011040:	100d883a 	mov	r6,r2
 8011044:	180f883a 	mov	r7,r3
 8011048:	80092000 	call	8009200 <__adddf3>
 801104c:	1009883a 	mov	r4,r2
 8011050:	180b883a 	mov	r5,r3
 8011054:	102d883a 	mov	r22,r2
 8011058:	182b883a 	mov	r21,r3
 801105c:	800b5a00 	call	800b5a0 <__fixdfsi>
 8011060:	b009883a 	mov	r4,r22
 8011064:	a80b883a 	mov	r5,r21
 8011068:	000d883a 	mov	r6,zero
 801106c:	000f883a 	mov	r7,zero
 8011070:	d8800515 	stw	r2,20(sp)
 8011074:	800a4cc0 	call	800a4cc <__ledf2>
 8011078:	10023116 	blt	r2,zero,8011940 <_dtoa_r+0xb28>
 801107c:	d8c00517 	ldw	r3,20(sp)
 8011080:	00800584 	movi	r2,22
 8011084:	10c21f36 	bltu	r2,r3,8011904 <_dtoa_r+0xaec>
 8011088:	180490fa 	slli	r2,r3,3
 801108c:	00c200b4 	movhi	r3,2050
 8011090:	18dccc04 	addi	r3,r3,29488
 8011094:	1885883a 	add	r2,r3,r2
 8011098:	11000017 	ldw	r4,0(r2)
 801109c:	11400117 	ldw	r5,4(r2)
 80110a0:	900d883a 	mov	r6,r18
 80110a4:	980f883a 	mov	r7,r19
 80110a8:	800a3ec0 	call	800a3ec <__gedf2>
 80110ac:	0082a70e 	bge	zero,r2,8011b4c <_dtoa_r+0xd34>
 80110b0:	d9000517 	ldw	r4,20(sp)
 80110b4:	d8000c15 	stw	zero,48(sp)
 80110b8:	213fffc4 	addi	r4,r4,-1
 80110bc:	d9000515 	stw	r4,20(sp)
 80110c0:	a463c83a 	sub	r17,r20,r17
 80110c4:	8dbfffc4 	addi	r22,r17,-1
 80110c8:	b0021916 	blt	r22,zero,8011930 <_dtoa_r+0xb18>
 80110cc:	d8000815 	stw	zero,32(sp)
 80110d0:	d8800517 	ldw	r2,20(sp)
 80110d4:	10020e16 	blt	r2,zero,8011910 <_dtoa_r+0xaf8>
 80110d8:	b0ad883a 	add	r22,r22,r2
 80110dc:	d8800a15 	stw	r2,40(sp)
 80110e0:	d8000915 	stw	zero,36(sp)
 80110e4:	d8c00317 	ldw	r3,12(sp)
 80110e8:	00800244 	movi	r2,9
 80110ec:	10c11a36 	bltu	r2,r3,8011558 <_dtoa_r+0x740>
 80110f0:	00800144 	movi	r2,5
 80110f4:	10c4fc0e 	bge	r2,r3,80124e8 <_dtoa_r+0x16d0>
 80110f8:	18ffff04 	addi	r3,r3,-4
 80110fc:	d8c00315 	stw	r3,12(sp)
 8011100:	0029883a 	mov	r20,zero
 8011104:	d9800317 	ldw	r6,12(sp)
 8011108:	008000c4 	movi	r2,3
 801110c:	3083bd26 	beq	r6,r2,8012004 <_dtoa_r+0x11ec>
 8011110:	1183670e 	bge	r2,r6,8011eb0 <_dtoa_r+0x1098>
 8011114:	d8c00317 	ldw	r3,12(sp)
 8011118:	00800104 	movi	r2,4
 801111c:	1882e726 	beq	r3,r2,8011cbc <_dtoa_r+0xea4>
 8011120:	00800144 	movi	r2,5
 8011124:	1884f21e 	bne	r3,r2,80124f0 <_dtoa_r+0x16d8>
 8011128:	00800044 	movi	r2,1
 801112c:	d8800b15 	stw	r2,44(sp)
 8011130:	d8c02217 	ldw	r3,136(sp)
 8011134:	d9000517 	ldw	r4,20(sp)
 8011138:	1907883a 	add	r3,r3,r4
 801113c:	19800044 	addi	r6,r3,1
 8011140:	d8c00d15 	stw	r3,52(sp)
 8011144:	d9800615 	stw	r6,24(sp)
 8011148:	0183c30e 	bge	zero,r6,8012058 <_dtoa_r+0x1240>
 801114c:	d9800617 	ldw	r6,24(sp)
 8011150:	3023883a 	mov	r17,r6
 8011154:	80001115 	stw	zero,68(r16)
 8011158:	008005c4 	movi	r2,23
 801115c:	1184f62e 	bgeu	r2,r6,8012538 <_dtoa_r+0x1720>
 8011160:	00c00044 	movi	r3,1
 8011164:	00800104 	movi	r2,4
 8011168:	1085883a 	add	r2,r2,r2
 801116c:	11000504 	addi	r4,r2,20
 8011170:	180b883a 	mov	r5,r3
 8011174:	18c00044 	addi	r3,r3,1
 8011178:	313ffb2e 	bgeu	r6,r4,8011168 <__alt_data_end+0xfc011168>
 801117c:	81401115 	stw	r5,68(r16)
 8011180:	8009883a 	mov	r4,r16
 8011184:	8013a3c0 	call	8013a3c <_Balloc>
 8011188:	d8800715 	stw	r2,28(sp)
 801118c:	80801015 	stw	r2,64(r16)
 8011190:	00800384 	movi	r2,14
 8011194:	1440fd36 	bltu	r2,r17,801158c <_dtoa_r+0x774>
 8011198:	a000fc26 	beq	r20,zero,801158c <_dtoa_r+0x774>
 801119c:	d8800517 	ldw	r2,20(sp)
 80111a0:	0083b90e 	bge	zero,r2,8012088 <_dtoa_r+0x1270>
 80111a4:	d8c00517 	ldw	r3,20(sp)
 80111a8:	108003cc 	andi	r2,r2,15
 80111ac:	100490fa 	slli	r2,r2,3
 80111b0:	182fd13a 	srai	r23,r3,4
 80111b4:	00c200b4 	movhi	r3,2050
 80111b8:	18dccc04 	addi	r3,r3,29488
 80111bc:	1885883a 	add	r2,r3,r2
 80111c0:	b8c0040c 	andi	r3,r23,16
 80111c4:	12c00017 	ldw	r11,0(r2)
 80111c8:	12800117 	ldw	r10,4(r2)
 80111cc:	18039726 	beq	r3,zero,801202c <_dtoa_r+0x1214>
 80111d0:	008200b4 	movhi	r2,2050
 80111d4:	109cc204 	addi	r2,r2,29448
 80111d8:	11800817 	ldw	r6,32(r2)
 80111dc:	11c00917 	ldw	r7,36(r2)
 80111e0:	9009883a 	mov	r4,r18
 80111e4:	980b883a 	mov	r5,r19
 80111e8:	da801615 	stw	r10,88(sp)
 80111ec:	dac01515 	stw	r11,84(sp)
 80111f0:	8009a9c0 	call	8009a9c <__divdf3>
 80111f4:	da801617 	ldw	r10,88(sp)
 80111f8:	dac01517 	ldw	r11,84(sp)
 80111fc:	bdc003cc 	andi	r23,r23,15
 8011200:	044000c4 	movi	r17,3
 8011204:	d8800e15 	stw	r2,56(sp)
 8011208:	182b883a 	mov	r21,r3
 801120c:	b8001126 	beq	r23,zero,8011254 <_dtoa_r+0x43c>
 8011210:	050200b4 	movhi	r20,2050
 8011214:	a51cc204 	addi	r20,r20,29448
 8011218:	5805883a 	mov	r2,r11
 801121c:	5007883a 	mov	r3,r10
 8011220:	b980004c 	andi	r6,r23,1
 8011224:	1009883a 	mov	r4,r2
 8011228:	b82fd07a 	srai	r23,r23,1
 801122c:	180b883a 	mov	r5,r3
 8011230:	30000426 	beq	r6,zero,8011244 <_dtoa_r+0x42c>
 8011234:	a1800017 	ldw	r6,0(r20)
 8011238:	a1c00117 	ldw	r7,4(r20)
 801123c:	8c400044 	addi	r17,r17,1
 8011240:	800a5ac0 	call	800a5ac <__muldf3>
 8011244:	a5000204 	addi	r20,r20,8
 8011248:	b83ff51e 	bne	r23,zero,8011220 <__alt_data_end+0xfc011220>
 801124c:	1017883a 	mov	r11,r2
 8011250:	1815883a 	mov	r10,r3
 8011254:	d9000e17 	ldw	r4,56(sp)
 8011258:	a80b883a 	mov	r5,r21
 801125c:	580d883a 	mov	r6,r11
 8011260:	500f883a 	mov	r7,r10
 8011264:	8009a9c0 	call	8009a9c <__divdf3>
 8011268:	1029883a 	mov	r20,r2
 801126c:	182b883a 	mov	r21,r3
 8011270:	d9800c17 	ldw	r6,48(sp)
 8011274:	30000626 	beq	r6,zero,8011290 <_dtoa_r+0x478>
 8011278:	a009883a 	mov	r4,r20
 801127c:	a80b883a 	mov	r5,r21
 8011280:	000d883a 	mov	r6,zero
 8011284:	01cffc34 	movhi	r7,16368
 8011288:	800a4cc0 	call	800a4cc <__ledf2>
 801128c:	10043216 	blt	r2,zero,8012358 <_dtoa_r+0x1540>
 8011290:	8809883a 	mov	r4,r17
 8011294:	800b6280 	call	800b628 <__floatsidf>
 8011298:	1009883a 	mov	r4,r2
 801129c:	180b883a 	mov	r5,r3
 80112a0:	a00d883a 	mov	r6,r20
 80112a4:	a80f883a 	mov	r7,r21
 80112a8:	800a5ac0 	call	800a5ac <__muldf3>
 80112ac:	000d883a 	mov	r6,zero
 80112b0:	1009883a 	mov	r4,r2
 80112b4:	180b883a 	mov	r5,r3
 80112b8:	01d00734 	movhi	r7,16412
 80112bc:	80092000 	call	8009200 <__adddf3>
 80112c0:	1023883a 	mov	r17,r2
 80112c4:	d9800617 	ldw	r6,24(sp)
 80112c8:	00bf3034 	movhi	r2,64704
 80112cc:	1885883a 	add	r2,r3,r2
 80112d0:	d8800e15 	stw	r2,56(sp)
 80112d4:	30032e26 	beq	r6,zero,8011f90 <_dtoa_r+0x1178>
 80112d8:	d8c00517 	ldw	r3,20(sp)
 80112dc:	da800617 	ldw	r10,24(sp)
 80112e0:	d8c01215 	stw	r3,72(sp)
 80112e4:	d9000b17 	ldw	r4,44(sp)
 80112e8:	2003b026 	beq	r4,zero,80121ac <_dtoa_r+0x1394>
 80112ec:	50bfffc4 	addi	r2,r10,-1
 80112f0:	100490fa 	slli	r2,r2,3
 80112f4:	00c200b4 	movhi	r3,2050
 80112f8:	18dccc04 	addi	r3,r3,29488
 80112fc:	1885883a 	add	r2,r3,r2
 8011300:	11800017 	ldw	r6,0(r2)
 8011304:	11c00117 	ldw	r7,4(r2)
 8011308:	d8800717 	ldw	r2,28(sp)
 801130c:	0009883a 	mov	r4,zero
 8011310:	014ff834 	movhi	r5,16352
 8011314:	da801615 	stw	r10,88(sp)
 8011318:	15c00044 	addi	r23,r2,1
 801131c:	8009a9c0 	call	8009a9c <__divdf3>
 8011320:	d9c00e17 	ldw	r7,56(sp)
 8011324:	880d883a 	mov	r6,r17
 8011328:	1009883a 	mov	r4,r2
 801132c:	180b883a 	mov	r5,r3
 8011330:	800acd00 	call	800acd0 <__subdf3>
 8011334:	a80b883a 	mov	r5,r21
 8011338:	a009883a 	mov	r4,r20
 801133c:	d8c01015 	stw	r3,64(sp)
 8011340:	d8800e15 	stw	r2,56(sp)
 8011344:	800b5a00 	call	800b5a0 <__fixdfsi>
 8011348:	1009883a 	mov	r4,r2
 801134c:	d8801715 	stw	r2,92(sp)
 8011350:	800b6280 	call	800b628 <__floatsidf>
 8011354:	a009883a 	mov	r4,r20
 8011358:	a80b883a 	mov	r5,r21
 801135c:	100d883a 	mov	r6,r2
 8011360:	180f883a 	mov	r7,r3
 8011364:	800acd00 	call	800acd0 <__subdf3>
 8011368:	da001717 	ldw	r8,92(sp)
 801136c:	1829883a 	mov	r20,r3
 8011370:	d8c00717 	ldw	r3,28(sp)
 8011374:	d9000e17 	ldw	r4,56(sp)
 8011378:	d9401017 	ldw	r5,64(sp)
 801137c:	42000c04 	addi	r8,r8,48
 8011380:	1023883a 	mov	r17,r2
 8011384:	1a000005 	stb	r8,0(r3)
 8011388:	880d883a 	mov	r6,r17
 801138c:	a00f883a 	mov	r7,r20
 8011390:	402b883a 	mov	r21,r8
 8011394:	800a3ec0 	call	800a3ec <__gedf2>
 8011398:	00844516 	blt	zero,r2,80124b0 <_dtoa_r+0x1698>
 801139c:	0009883a 	mov	r4,zero
 80113a0:	014ffc34 	movhi	r5,16368
 80113a4:	880d883a 	mov	r6,r17
 80113a8:	a00f883a 	mov	r7,r20
 80113ac:	800acd00 	call	800acd0 <__subdf3>
 80113b0:	d9000e17 	ldw	r4,56(sp)
 80113b4:	d9401017 	ldw	r5,64(sp)
 80113b8:	100d883a 	mov	r6,r2
 80113bc:	180f883a 	mov	r7,r3
 80113c0:	800a3ec0 	call	800a3ec <__gedf2>
 80113c4:	da801617 	ldw	r10,88(sp)
 80113c8:	00843616 	blt	zero,r2,80124a4 <_dtoa_r+0x168c>
 80113cc:	00800044 	movi	r2,1
 80113d0:	12806e0e 	bge	r2,r10,801158c <_dtoa_r+0x774>
 80113d4:	d9000717 	ldw	r4,28(sp)
 80113d8:	dd801315 	stw	r22,76(sp)
 80113dc:	dc001115 	stw	r16,68(sp)
 80113e0:	2295883a 	add	r10,r4,r10
 80113e4:	dcc01415 	stw	r19,80(sp)
 80113e8:	502d883a 	mov	r22,r10
 80113ec:	dcc01017 	ldw	r19,64(sp)
 80113f0:	b821883a 	mov	r16,r23
 80113f4:	dc801015 	stw	r18,64(sp)
 80113f8:	dc800e17 	ldw	r18,56(sp)
 80113fc:	00000906 	br	8011424 <_dtoa_r+0x60c>
 8011400:	800acd00 	call	800acd0 <__subdf3>
 8011404:	1009883a 	mov	r4,r2
 8011408:	180b883a 	mov	r5,r3
 801140c:	900d883a 	mov	r6,r18
 8011410:	980f883a 	mov	r7,r19
 8011414:	800a4cc0 	call	800a4cc <__ledf2>
 8011418:	10040e16 	blt	r2,zero,8012454 <_dtoa_r+0x163c>
 801141c:	b821883a 	mov	r16,r23
 8011420:	bd841026 	beq	r23,r22,8012464 <_dtoa_r+0x164c>
 8011424:	9009883a 	mov	r4,r18
 8011428:	980b883a 	mov	r5,r19
 801142c:	000d883a 	mov	r6,zero
 8011430:	01d00934 	movhi	r7,16420
 8011434:	800a5ac0 	call	800a5ac <__muldf3>
 8011438:	000d883a 	mov	r6,zero
 801143c:	01d00934 	movhi	r7,16420
 8011440:	8809883a 	mov	r4,r17
 8011444:	a00b883a 	mov	r5,r20
 8011448:	1025883a 	mov	r18,r2
 801144c:	1827883a 	mov	r19,r3
 8011450:	800a5ac0 	call	800a5ac <__muldf3>
 8011454:	180b883a 	mov	r5,r3
 8011458:	1009883a 	mov	r4,r2
 801145c:	1823883a 	mov	r17,r3
 8011460:	1029883a 	mov	r20,r2
 8011464:	800b5a00 	call	800b5a0 <__fixdfsi>
 8011468:	1009883a 	mov	r4,r2
 801146c:	102b883a 	mov	r21,r2
 8011470:	800b6280 	call	800b628 <__floatsidf>
 8011474:	a009883a 	mov	r4,r20
 8011478:	880b883a 	mov	r5,r17
 801147c:	100d883a 	mov	r6,r2
 8011480:	180f883a 	mov	r7,r3
 8011484:	800acd00 	call	800acd0 <__subdf3>
 8011488:	ad400c04 	addi	r21,r21,48
 801148c:	1009883a 	mov	r4,r2
 8011490:	180b883a 	mov	r5,r3
 8011494:	900d883a 	mov	r6,r18
 8011498:	980f883a 	mov	r7,r19
 801149c:	85400005 	stb	r21,0(r16)
 80114a0:	1023883a 	mov	r17,r2
 80114a4:	1829883a 	mov	r20,r3
 80114a8:	800a4cc0 	call	800a4cc <__ledf2>
 80114ac:	bdc00044 	addi	r23,r23,1
 80114b0:	0009883a 	mov	r4,zero
 80114b4:	014ffc34 	movhi	r5,16368
 80114b8:	880d883a 	mov	r6,r17
 80114bc:	a00f883a 	mov	r7,r20
 80114c0:	103fcf0e 	bge	r2,zero,8011400 <__alt_data_end+0xfc011400>
 80114c4:	d9801217 	ldw	r6,72(sp)
 80114c8:	dc001117 	ldw	r16,68(sp)
 80114cc:	d9800515 	stw	r6,20(sp)
 80114d0:	8009883a 	mov	r4,r16
 80114d4:	e00b883a 	mov	r5,fp
 80114d8:	8013ae40 	call	8013ae4 <_Bfree>
 80114dc:	d8c00517 	ldw	r3,20(sp)
 80114e0:	d9002317 	ldw	r4,140(sp)
 80114e4:	d9802517 	ldw	r6,148(sp)
 80114e8:	b8000005 	stb	zero,0(r23)
 80114ec:	18800044 	addi	r2,r3,1
 80114f0:	20800015 	stw	r2,0(r4)
 80114f4:	30027226 	beq	r6,zero,8011ec0 <_dtoa_r+0x10a8>
 80114f8:	35c00015 	stw	r23,0(r6)
 80114fc:	d8800717 	ldw	r2,28(sp)
 8011500:	003e7406 	br	8010ed4 <__alt_data_end+0xfc010ed4>
 8011504:	00800434 	movhi	r2,16
 8011508:	10bfffc4 	addi	r2,r2,-1
 801150c:	a8aa703a 	and	r21,r21,r2
 8011510:	a83e801e 	bne	r21,zero,8010f14 <__alt_data_end+0xfc010f14>
 8011514:	008200b4 	movhi	r2,2050
 8011518:	109cae04 	addi	r2,r2,29368
 801151c:	003e7f06 	br	8010f1c <__alt_data_end+0xfc010f1c>
 8011520:	10c00204 	addi	r3,r2,8
 8011524:	003e8206 	br	8010f30 <__alt_data_end+0xfc010f30>
 8011528:	01400434 	movhi	r5,16
 801152c:	297fffc4 	addi	r5,r5,-1
 8011530:	994a703a 	and	r5,r19,r5
 8011534:	9009883a 	mov	r4,r18
 8011538:	8c7f0044 	addi	r17,r17,-1023
 801153c:	294ffc34 	orhi	r5,r5,16368
 8011540:	dd000217 	ldw	r20,8(sp)
 8011544:	d8000f15 	stw	zero,60(sp)
 8011548:	003e9f06 	br	8010fc8 <__alt_data_end+0xfc010fc8>
 801154c:	008200b4 	movhi	r2,2050
 8011550:	109c9d04 	addi	r2,r2,29300
 8011554:	003e5f06 	br	8010ed4 <__alt_data_end+0xfc010ed4>
 8011558:	80001115 	stw	zero,68(r16)
 801155c:	8009883a 	mov	r4,r16
 8011560:	000b883a 	mov	r5,zero
 8011564:	8013a3c0 	call	8013a3c <_Balloc>
 8011568:	01bfffc4 	movi	r6,-1
 801156c:	d8800715 	stw	r2,28(sp)
 8011570:	80801015 	stw	r2,64(r16)
 8011574:	00800044 	movi	r2,1
 8011578:	d9800615 	stw	r6,24(sp)
 801157c:	d8800b15 	stw	r2,44(sp)
 8011580:	d8002215 	stw	zero,136(sp)
 8011584:	d9800d15 	stw	r6,52(sp)
 8011588:	d8000315 	stw	zero,12(sp)
 801158c:	d8800117 	ldw	r2,4(sp)
 8011590:	10008e16 	blt	r2,zero,80117cc <_dtoa_r+0x9b4>
 8011594:	d9000517 	ldw	r4,20(sp)
 8011598:	00c00384 	movi	r3,14
 801159c:	19008b16 	blt	r3,r4,80117cc <_dtoa_r+0x9b4>
 80115a0:	200490fa 	slli	r2,r4,3
 80115a4:	00c200b4 	movhi	r3,2050
 80115a8:	d9802217 	ldw	r6,136(sp)
 80115ac:	18dccc04 	addi	r3,r3,29488
 80115b0:	1885883a 	add	r2,r3,r2
 80115b4:	14400017 	ldw	r17,0(r2)
 80115b8:	15000117 	ldw	r20,4(r2)
 80115bc:	3001c716 	blt	r6,zero,8011cdc <_dtoa_r+0xec4>
 80115c0:	880d883a 	mov	r6,r17
 80115c4:	a00f883a 	mov	r7,r20
 80115c8:	9009883a 	mov	r4,r18
 80115cc:	980b883a 	mov	r5,r19
 80115d0:	8009a9c0 	call	8009a9c <__divdf3>
 80115d4:	180b883a 	mov	r5,r3
 80115d8:	1009883a 	mov	r4,r2
 80115dc:	800b5a00 	call	800b5a0 <__fixdfsi>
 80115e0:	1009883a 	mov	r4,r2
 80115e4:	102d883a 	mov	r22,r2
 80115e8:	800b6280 	call	800b628 <__floatsidf>
 80115ec:	1009883a 	mov	r4,r2
 80115f0:	180b883a 	mov	r5,r3
 80115f4:	880d883a 	mov	r6,r17
 80115f8:	a00f883a 	mov	r7,r20
 80115fc:	800a5ac0 	call	800a5ac <__muldf3>
 8011600:	9009883a 	mov	r4,r18
 8011604:	980b883a 	mov	r5,r19
 8011608:	100d883a 	mov	r6,r2
 801160c:	180f883a 	mov	r7,r3
 8011610:	800acd00 	call	800acd0 <__subdf3>
 8011614:	d9000717 	ldw	r4,28(sp)
 8011618:	d9800617 	ldw	r6,24(sp)
 801161c:	180b883a 	mov	r5,r3
 8011620:	b0c00c04 	addi	r3,r22,48
 8011624:	20c00005 	stb	r3,0(r4)
 8011628:	25c00044 	addi	r23,r4,1
 801162c:	01000044 	movi	r4,1
 8011630:	1011883a 	mov	r8,r2
 8011634:	2807883a 	mov	r3,r5
 8011638:	31003d26 	beq	r6,r4,8011730 <_dtoa_r+0x918>
 801163c:	000d883a 	mov	r6,zero
 8011640:	01d00934 	movhi	r7,16420
 8011644:	1009883a 	mov	r4,r2
 8011648:	800a5ac0 	call	800a5ac <__muldf3>
 801164c:	1009883a 	mov	r4,r2
 8011650:	180b883a 	mov	r5,r3
 8011654:	000d883a 	mov	r6,zero
 8011658:	000f883a 	mov	r7,zero
 801165c:	1027883a 	mov	r19,r2
 8011660:	182b883a 	mov	r21,r3
 8011664:	800a3680 	call	800a368 <__eqdf2>
 8011668:	103f9926 	beq	r2,zero,80114d0 <__alt_data_end+0xfc0114d0>
 801166c:	d8c00617 	ldw	r3,24(sp)
 8011670:	d9000717 	ldw	r4,28(sp)
 8011674:	b825883a 	mov	r18,r23
 8011678:	18bfffc4 	addi	r2,r3,-1
 801167c:	20ad883a 	add	r22,r4,r2
 8011680:	dc000315 	stw	r16,12(sp)
 8011684:	00000a06 	br	80116b0 <_dtoa_r+0x898>
 8011688:	800a5ac0 	call	800a5ac <__muldf3>
 801168c:	1009883a 	mov	r4,r2
 8011690:	180b883a 	mov	r5,r3
 8011694:	000d883a 	mov	r6,zero
 8011698:	000f883a 	mov	r7,zero
 801169c:	1027883a 	mov	r19,r2
 80116a0:	182b883a 	mov	r21,r3
 80116a4:	b825883a 	mov	r18,r23
 80116a8:	800a3680 	call	800a368 <__eqdf2>
 80116ac:	10022626 	beq	r2,zero,8011f48 <_dtoa_r+0x1130>
 80116b0:	880d883a 	mov	r6,r17
 80116b4:	a00f883a 	mov	r7,r20
 80116b8:	9809883a 	mov	r4,r19
 80116bc:	a80b883a 	mov	r5,r21
 80116c0:	8009a9c0 	call	8009a9c <__divdf3>
 80116c4:	180b883a 	mov	r5,r3
 80116c8:	1009883a 	mov	r4,r2
 80116cc:	800b5a00 	call	800b5a0 <__fixdfsi>
 80116d0:	1009883a 	mov	r4,r2
 80116d4:	1021883a 	mov	r16,r2
 80116d8:	800b6280 	call	800b628 <__floatsidf>
 80116dc:	1009883a 	mov	r4,r2
 80116e0:	180b883a 	mov	r5,r3
 80116e4:	880d883a 	mov	r6,r17
 80116e8:	a00f883a 	mov	r7,r20
 80116ec:	800a5ac0 	call	800a5ac <__muldf3>
 80116f0:	9809883a 	mov	r4,r19
 80116f4:	a80b883a 	mov	r5,r21
 80116f8:	100d883a 	mov	r6,r2
 80116fc:	180f883a 	mov	r7,r3
 8011700:	800acd00 	call	800acd0 <__subdf3>
 8011704:	82000c04 	addi	r8,r16,48
 8011708:	92000005 	stb	r8,0(r18)
 801170c:	1009883a 	mov	r4,r2
 8011710:	180b883a 	mov	r5,r3
 8011714:	000d883a 	mov	r6,zero
 8011718:	01d00934 	movhi	r7,16420
 801171c:	1011883a 	mov	r8,r2
 8011720:	bdc00044 	addi	r23,r23,1
 8011724:	95bfd81e 	bne	r18,r22,8011688 <__alt_data_end+0xfc011688>
 8011728:	802d883a 	mov	r22,r16
 801172c:	dc000317 	ldw	r16,12(sp)
 8011730:	4009883a 	mov	r4,r8
 8011734:	180b883a 	mov	r5,r3
 8011738:	400d883a 	mov	r6,r8
 801173c:	180f883a 	mov	r7,r3
 8011740:	80092000 	call	8009200 <__adddf3>
 8011744:	8809883a 	mov	r4,r17
 8011748:	a00b883a 	mov	r5,r20
 801174c:	100d883a 	mov	r6,r2
 8011750:	180f883a 	mov	r7,r3
 8011754:	1027883a 	mov	r19,r2
 8011758:	1825883a 	mov	r18,r3
 801175c:	800a4cc0 	call	800a4cc <__ledf2>
 8011760:	10000816 	blt	r2,zero,8011784 <_dtoa_r+0x96c>
 8011764:	8809883a 	mov	r4,r17
 8011768:	a00b883a 	mov	r5,r20
 801176c:	980d883a 	mov	r6,r19
 8011770:	900f883a 	mov	r7,r18
 8011774:	800a3680 	call	800a368 <__eqdf2>
 8011778:	103f551e 	bne	r2,zero,80114d0 <__alt_data_end+0xfc0114d0>
 801177c:	b580004c 	andi	r22,r22,1
 8011780:	b03f5326 	beq	r22,zero,80114d0 <__alt_data_end+0xfc0114d0>
 8011784:	bd7fffc3 	ldbu	r21,-1(r23)
 8011788:	b8bfffc4 	addi	r2,r23,-1
 801178c:	1007883a 	mov	r3,r2
 8011790:	01400e44 	movi	r5,57
 8011794:	d9800717 	ldw	r6,28(sp)
 8011798:	00000506 	br	80117b0 <_dtoa_r+0x998>
 801179c:	18ffffc4 	addi	r3,r3,-1
 80117a0:	30825e26 	beq	r6,r2,801211c <_dtoa_r+0x1304>
 80117a4:	1d400003 	ldbu	r21,0(r3)
 80117a8:	102f883a 	mov	r23,r2
 80117ac:	10bfffc4 	addi	r2,r2,-1
 80117b0:	a9003fcc 	andi	r4,r21,255
 80117b4:	2100201c 	xori	r4,r4,128
 80117b8:	213fe004 	addi	r4,r4,-128
 80117bc:	217ff726 	beq	r4,r5,801179c <__alt_data_end+0xfc01179c>
 80117c0:	aa000044 	addi	r8,r21,1
 80117c4:	12000005 	stb	r8,0(r2)
 80117c8:	003f4106 	br	80114d0 <__alt_data_end+0xfc0114d0>
 80117cc:	d8c00b17 	ldw	r3,44(sp)
 80117d0:	18006726 	beq	r3,zero,8011970 <_dtoa_r+0xb58>
 80117d4:	d9000317 	ldw	r4,12(sp)
 80117d8:	00c00044 	movi	r3,1
 80117dc:	19016a0e 	bge	r3,r4,8011d88 <_dtoa_r+0xf70>
 80117e0:	d8800617 	ldw	r2,24(sp)
 80117e4:	d8c00917 	ldw	r3,36(sp)
 80117e8:	157fffc4 	addi	r21,r2,-1
 80117ec:	1d420716 	blt	r3,r21,801200c <_dtoa_r+0x11f4>
 80117f0:	1d6bc83a 	sub	r21,r3,r21
 80117f4:	d8800617 	ldw	r2,24(sp)
 80117f8:	1002c716 	blt	r2,zero,8012318 <_dtoa_r+0x1500>
 80117fc:	dd000817 	ldw	r20,32(sp)
 8011800:	d8800617 	ldw	r2,24(sp)
 8011804:	d9800817 	ldw	r6,32(sp)
 8011808:	8009883a 	mov	r4,r16
 801180c:	01400044 	movi	r5,1
 8011810:	308d883a 	add	r6,r6,r2
 8011814:	d9800815 	stw	r6,32(sp)
 8011818:	b0ad883a 	add	r22,r22,r2
 801181c:	8013e3c0 	call	8013e3c <__i2b>
 8011820:	1023883a 	mov	r17,r2
 8011824:	a0000826 	beq	r20,zero,8011848 <_dtoa_r+0xa30>
 8011828:	0580070e 	bge	zero,r22,8011848 <_dtoa_r+0xa30>
 801182c:	b005883a 	mov	r2,r22
 8011830:	a5812016 	blt	r20,r22,8011cb4 <_dtoa_r+0xe9c>
 8011834:	d8c00817 	ldw	r3,32(sp)
 8011838:	a0a9c83a 	sub	r20,r20,r2
 801183c:	b0adc83a 	sub	r22,r22,r2
 8011840:	1887c83a 	sub	r3,r3,r2
 8011844:	d8c00815 	stw	r3,32(sp)
 8011848:	d9000917 	ldw	r4,36(sp)
 801184c:	0100140e 	bge	zero,r4,80118a0 <_dtoa_r+0xa88>
 8011850:	d9800b17 	ldw	r6,44(sp)
 8011854:	3001e526 	beq	r6,zero,8011fec <_dtoa_r+0x11d4>
 8011858:	05400e0e 	bge	zero,r21,8011894 <_dtoa_r+0xa7c>
 801185c:	880b883a 	mov	r5,r17
 8011860:	8009883a 	mov	r4,r16
 8011864:	a80d883a 	mov	r6,r21
 8011868:	80140740 	call	8014074 <__pow5mult>
 801186c:	e00d883a 	mov	r6,fp
 8011870:	8009883a 	mov	r4,r16
 8011874:	100b883a 	mov	r5,r2
 8011878:	1023883a 	mov	r17,r2
 801187c:	8013e780 	call	8013e78 <__multiply>
 8011880:	102f883a 	mov	r23,r2
 8011884:	e00b883a 	mov	r5,fp
 8011888:	8009883a 	mov	r4,r16
 801188c:	8013ae40 	call	8013ae4 <_Bfree>
 8011890:	b839883a 	mov	fp,r23
 8011894:	d8800917 	ldw	r2,36(sp)
 8011898:	154dc83a 	sub	r6,r2,r21
 801189c:	3001281e 	bne	r6,zero,8011d40 <_dtoa_r+0xf28>
 80118a0:	05c00044 	movi	r23,1
 80118a4:	8009883a 	mov	r4,r16
 80118a8:	b80b883a 	mov	r5,r23
 80118ac:	8013e3c0 	call	8013e3c <__i2b>
 80118b0:	d8c00a17 	ldw	r3,40(sp)
 80118b4:	102b883a 	mov	r21,r2
 80118b8:	00c0310e 	bge	zero,r3,8011980 <_dtoa_r+0xb68>
 80118bc:	8009883a 	mov	r4,r16
 80118c0:	100b883a 	mov	r5,r2
 80118c4:	180d883a 	mov	r6,r3
 80118c8:	80140740 	call	8014074 <__pow5mult>
 80118cc:	d9000317 	ldw	r4,12(sp)
 80118d0:	102b883a 	mov	r21,r2
 80118d4:	b9011f0e 	bge	r23,r4,8011d54 <_dtoa_r+0xf3c>
 80118d8:	0027883a 	mov	r19,zero
 80118dc:	a8800417 	ldw	r2,16(r21)
 80118e0:	10800104 	addi	r2,r2,4
 80118e4:	1085883a 	add	r2,r2,r2
 80118e8:	1085883a 	add	r2,r2,r2
 80118ec:	a885883a 	add	r2,r21,r2
 80118f0:	11000017 	ldw	r4,0(r2)
 80118f4:	8013d240 	call	8013d24 <__hi0bits>
 80118f8:	00c00804 	movi	r3,32
 80118fc:	1885c83a 	sub	r2,r3,r2
 8011900:	00002506 	br	8011998 <_dtoa_r+0xb80>
 8011904:	01800044 	movi	r6,1
 8011908:	d9800c15 	stw	r6,48(sp)
 801190c:	003dec06 	br	80110c0 <__alt_data_end+0xfc0110c0>
 8011910:	d8c00817 	ldw	r3,32(sp)
 8011914:	d9000517 	ldw	r4,20(sp)
 8011918:	d8000a15 	stw	zero,40(sp)
 801191c:	1907c83a 	sub	r3,r3,r4
 8011920:	010dc83a 	sub	r6,zero,r4
 8011924:	d8c00815 	stw	r3,32(sp)
 8011928:	d9800915 	stw	r6,36(sp)
 801192c:	003ded06 	br	80110e4 <__alt_data_end+0xfc0110e4>
 8011930:	05adc83a 	sub	r22,zero,r22
 8011934:	dd800815 	stw	r22,32(sp)
 8011938:	002d883a 	mov	r22,zero
 801193c:	003de406 	br	80110d0 <__alt_data_end+0xfc0110d0>
 8011940:	d9000517 	ldw	r4,20(sp)
 8011944:	800b6280 	call	800b628 <__floatsidf>
 8011948:	1009883a 	mov	r4,r2
 801194c:	180b883a 	mov	r5,r3
 8011950:	b00d883a 	mov	r6,r22
 8011954:	a80f883a 	mov	r7,r21
 8011958:	800a3680 	call	800a368 <__eqdf2>
 801195c:	103dc726 	beq	r2,zero,801107c <__alt_data_end+0xfc01107c>
 8011960:	d8800517 	ldw	r2,20(sp)
 8011964:	10bfffc4 	addi	r2,r2,-1
 8011968:	d8800515 	stw	r2,20(sp)
 801196c:	003dc306 	br	801107c <__alt_data_end+0xfc01107c>
 8011970:	dd400917 	ldw	r21,36(sp)
 8011974:	dd000817 	ldw	r20,32(sp)
 8011978:	0023883a 	mov	r17,zero
 801197c:	003fa906 	br	8011824 <__alt_data_end+0xfc011824>
 8011980:	d9800317 	ldw	r6,12(sp)
 8011984:	b981670e 	bge	r23,r6,8011f24 <_dtoa_r+0x110c>
 8011988:	0027883a 	mov	r19,zero
 801198c:	d8c00a17 	ldw	r3,40(sp)
 8011990:	183fd21e 	bne	r3,zero,80118dc <__alt_data_end+0xfc0118dc>
 8011994:	00800044 	movi	r2,1
 8011998:	1585883a 	add	r2,r2,r22
 801199c:	108007cc 	andi	r2,r2,31
 80119a0:	10005f26 	beq	r2,zero,8011b20 <_dtoa_r+0xd08>
 80119a4:	00c00804 	movi	r3,32
 80119a8:	1887c83a 	sub	r3,r3,r2
 80119ac:	01000104 	movi	r4,4
 80119b0:	20c2dd0e 	bge	r4,r3,8012528 <_dtoa_r+0x1710>
 80119b4:	d9000817 	ldw	r4,32(sp)
 80119b8:	00c00704 	movi	r3,28
 80119bc:	1885c83a 	sub	r2,r3,r2
 80119c0:	2089883a 	add	r4,r4,r2
 80119c4:	d9000815 	stw	r4,32(sp)
 80119c8:	a0a9883a 	add	r20,r20,r2
 80119cc:	b0ad883a 	add	r22,r22,r2
 80119d0:	d8800817 	ldw	r2,32(sp)
 80119d4:	0080050e 	bge	zero,r2,80119ec <_dtoa_r+0xbd4>
 80119d8:	e00b883a 	mov	r5,fp
 80119dc:	8009883a 	mov	r4,r16
 80119e0:	100d883a 	mov	r6,r2
 80119e4:	80141b40 	call	80141b4 <__lshift>
 80119e8:	1039883a 	mov	fp,r2
 80119ec:	0580050e 	bge	zero,r22,8011a04 <_dtoa_r+0xbec>
 80119f0:	a80b883a 	mov	r5,r21
 80119f4:	8009883a 	mov	r4,r16
 80119f8:	b00d883a 	mov	r6,r22
 80119fc:	80141b40 	call	80141b4 <__lshift>
 8011a00:	102b883a 	mov	r21,r2
 8011a04:	d8c00c17 	ldw	r3,48(sp)
 8011a08:	1801161e 	bne	r3,zero,8011e64 <_dtoa_r+0x104c>
 8011a0c:	d8c00617 	ldw	r3,24(sp)
 8011a10:	00c12d0e 	bge	zero,r3,8011ec8 <_dtoa_r+0x10b0>
 8011a14:	d8c00b17 	ldw	r3,44(sp)
 8011a18:	1800571e 	bne	r3,zero,8011b78 <_dtoa_r+0xd60>
 8011a1c:	dc800717 	ldw	r18,28(sp)
 8011a20:	dcc00617 	ldw	r19,24(sp)
 8011a24:	9029883a 	mov	r20,r18
 8011a28:	00000206 	br	8011a34 <_dtoa_r+0xc1c>
 8011a2c:	8013b0c0 	call	8013b0c <__multadd>
 8011a30:	1039883a 	mov	fp,r2
 8011a34:	e009883a 	mov	r4,fp
 8011a38:	a80b883a 	mov	r5,r21
 8011a3c:	8010c180 	call	8010c18 <quorem>
 8011a40:	10800c04 	addi	r2,r2,48
 8011a44:	90800005 	stb	r2,0(r18)
 8011a48:	94800044 	addi	r18,r18,1
 8011a4c:	9507c83a 	sub	r3,r18,r20
 8011a50:	8009883a 	mov	r4,r16
 8011a54:	e00b883a 	mov	r5,fp
 8011a58:	01800284 	movi	r6,10
 8011a5c:	000f883a 	mov	r7,zero
 8011a60:	1cfff216 	blt	r3,r19,8011a2c <__alt_data_end+0xfc011a2c>
 8011a64:	1011883a 	mov	r8,r2
 8011a68:	d8800617 	ldw	r2,24(sp)
 8011a6c:	00822e0e 	bge	zero,r2,8012328 <_dtoa_r+0x1510>
 8011a70:	d9000717 	ldw	r4,28(sp)
 8011a74:	0025883a 	mov	r18,zero
 8011a78:	20af883a 	add	r23,r4,r2
 8011a7c:	e00b883a 	mov	r5,fp
 8011a80:	01800044 	movi	r6,1
 8011a84:	8009883a 	mov	r4,r16
 8011a88:	da001715 	stw	r8,92(sp)
 8011a8c:	80141b40 	call	80141b4 <__lshift>
 8011a90:	1009883a 	mov	r4,r2
 8011a94:	a80b883a 	mov	r5,r21
 8011a98:	1039883a 	mov	fp,r2
 8011a9c:	80142fc0 	call	80142fc <__mcmp>
 8011aa0:	da001717 	ldw	r8,92(sp)
 8011aa4:	00816e0e 	bge	zero,r2,8012060 <_dtoa_r+0x1248>
 8011aa8:	b93fffc3 	ldbu	r4,-1(r23)
 8011aac:	b8bfffc4 	addi	r2,r23,-1
 8011ab0:	1007883a 	mov	r3,r2
 8011ab4:	01800e44 	movi	r6,57
 8011ab8:	d9c00717 	ldw	r7,28(sp)
 8011abc:	00000506 	br	8011ad4 <_dtoa_r+0xcbc>
 8011ac0:	18ffffc4 	addi	r3,r3,-1
 8011ac4:	38811926 	beq	r7,r2,8011f2c <_dtoa_r+0x1114>
 8011ac8:	19000003 	ldbu	r4,0(r3)
 8011acc:	102f883a 	mov	r23,r2
 8011ad0:	10bfffc4 	addi	r2,r2,-1
 8011ad4:	21403fcc 	andi	r5,r4,255
 8011ad8:	2940201c 	xori	r5,r5,128
 8011adc:	297fe004 	addi	r5,r5,-128
 8011ae0:	29bff726 	beq	r5,r6,8011ac0 <__alt_data_end+0xfc011ac0>
 8011ae4:	21000044 	addi	r4,r4,1
 8011ae8:	11000005 	stb	r4,0(r2)
 8011aec:	8009883a 	mov	r4,r16
 8011af0:	a80b883a 	mov	r5,r21
 8011af4:	8013ae40 	call	8013ae4 <_Bfree>
 8011af8:	883e7526 	beq	r17,zero,80114d0 <__alt_data_end+0xfc0114d0>
 8011afc:	90000426 	beq	r18,zero,8011b10 <_dtoa_r+0xcf8>
 8011b00:	94400326 	beq	r18,r17,8011b10 <_dtoa_r+0xcf8>
 8011b04:	8009883a 	mov	r4,r16
 8011b08:	900b883a 	mov	r5,r18
 8011b0c:	8013ae40 	call	8013ae4 <_Bfree>
 8011b10:	8009883a 	mov	r4,r16
 8011b14:	880b883a 	mov	r5,r17
 8011b18:	8013ae40 	call	8013ae4 <_Bfree>
 8011b1c:	003e6c06 	br	80114d0 <__alt_data_end+0xfc0114d0>
 8011b20:	00800704 	movi	r2,28
 8011b24:	d9800817 	ldw	r6,32(sp)
 8011b28:	a0a9883a 	add	r20,r20,r2
 8011b2c:	b0ad883a 	add	r22,r22,r2
 8011b30:	308d883a 	add	r6,r6,r2
 8011b34:	d9800815 	stw	r6,32(sp)
 8011b38:	003fa506 	br	80119d0 <__alt_data_end+0xfc0119d0>
 8011b3c:	013efb84 	movi	r4,-1042
 8011b40:	246bc83a 	sub	r21,r4,r17
 8011b44:	9548983a 	sll	r4,r18,r21
 8011b48:	003d1806 	br	8010fac <__alt_data_end+0xfc010fac>
 8011b4c:	d8000c15 	stw	zero,48(sp)
 8011b50:	003d5b06 	br	80110c0 <__alt_data_end+0xfc0110c0>
 8011b54:	880b883a 	mov	r5,r17
 8011b58:	8009883a 	mov	r4,r16
 8011b5c:	01800284 	movi	r6,10
 8011b60:	000f883a 	mov	r7,zero
 8011b64:	8013b0c0 	call	8013b0c <__multadd>
 8011b68:	1023883a 	mov	r17,r2
 8011b6c:	d8800d17 	ldw	r2,52(sp)
 8011b70:	0082550e 	bge	zero,r2,80124c8 <_dtoa_r+0x16b0>
 8011b74:	d8800615 	stw	r2,24(sp)
 8011b78:	0500050e 	bge	zero,r20,8011b90 <_dtoa_r+0xd78>
 8011b7c:	880b883a 	mov	r5,r17
 8011b80:	8009883a 	mov	r4,r16
 8011b84:	a00d883a 	mov	r6,r20
 8011b88:	80141b40 	call	80141b4 <__lshift>
 8011b8c:	1023883a 	mov	r17,r2
 8011b90:	98016a1e 	bne	r19,zero,801213c <_dtoa_r+0x1324>
 8011b94:	8829883a 	mov	r20,r17
 8011b98:	d9000617 	ldw	r4,24(sp)
 8011b9c:	dcc00717 	ldw	r19,28(sp)
 8011ba0:	9480004c 	andi	r18,r18,1
 8011ba4:	20bfffc4 	addi	r2,r4,-1
 8011ba8:	9885883a 	add	r2,r19,r2
 8011bac:	d8800415 	stw	r2,16(sp)
 8011bb0:	dc800615 	stw	r18,24(sp)
 8011bb4:	e009883a 	mov	r4,fp
 8011bb8:	a80b883a 	mov	r5,r21
 8011bbc:	8010c180 	call	8010c18 <quorem>
 8011bc0:	e009883a 	mov	r4,fp
 8011bc4:	880b883a 	mov	r5,r17
 8011bc8:	102f883a 	mov	r23,r2
 8011bcc:	80142fc0 	call	80142fc <__mcmp>
 8011bd0:	8009883a 	mov	r4,r16
 8011bd4:	a80b883a 	mov	r5,r21
 8011bd8:	a00d883a 	mov	r6,r20
 8011bdc:	102d883a 	mov	r22,r2
 8011be0:	801435c0 	call	801435c <__mdiff>
 8011be4:	1007883a 	mov	r3,r2
 8011be8:	10800317 	ldw	r2,12(r2)
 8011bec:	bc800c04 	addi	r18,r23,48
 8011bf0:	1000971e 	bne	r2,zero,8011e50 <_dtoa_r+0x1038>
 8011bf4:	180b883a 	mov	r5,r3
 8011bf8:	e009883a 	mov	r4,fp
 8011bfc:	d8c01515 	stw	r3,84(sp)
 8011c00:	80142fc0 	call	80142fc <__mcmp>
 8011c04:	d8c01517 	ldw	r3,84(sp)
 8011c08:	8009883a 	mov	r4,r16
 8011c0c:	d8801515 	stw	r2,84(sp)
 8011c10:	180b883a 	mov	r5,r3
 8011c14:	8013ae40 	call	8013ae4 <_Bfree>
 8011c18:	d8801517 	ldw	r2,84(sp)
 8011c1c:	1000041e 	bne	r2,zero,8011c30 <_dtoa_r+0xe18>
 8011c20:	d9800317 	ldw	r6,12(sp)
 8011c24:	3000021e 	bne	r6,zero,8011c30 <_dtoa_r+0xe18>
 8011c28:	d8c00617 	ldw	r3,24(sp)
 8011c2c:	18007626 	beq	r3,zero,8011e08 <_dtoa_r+0xff0>
 8011c30:	b0005b16 	blt	r22,zero,8011da0 <_dtoa_r+0xf88>
 8011c34:	b000041e 	bne	r22,zero,8011c48 <_dtoa_r+0xe30>
 8011c38:	d9000317 	ldw	r4,12(sp)
 8011c3c:	2000021e 	bne	r4,zero,8011c48 <_dtoa_r+0xe30>
 8011c40:	d8c00617 	ldw	r3,24(sp)
 8011c44:	18005626 	beq	r3,zero,8011da0 <_dtoa_r+0xf88>
 8011c48:	00814d16 	blt	zero,r2,8012180 <_dtoa_r+0x1368>
 8011c4c:	d8c00417 	ldw	r3,16(sp)
 8011c50:	9d800044 	addi	r22,r19,1
 8011c54:	9c800005 	stb	r18,0(r19)
 8011c58:	b02f883a 	mov	r23,r22
 8011c5c:	98c14c26 	beq	r19,r3,8012190 <_dtoa_r+0x1378>
 8011c60:	e00b883a 	mov	r5,fp
 8011c64:	8009883a 	mov	r4,r16
 8011c68:	01800284 	movi	r6,10
 8011c6c:	000f883a 	mov	r7,zero
 8011c70:	8013b0c0 	call	8013b0c <__multadd>
 8011c74:	1039883a 	mov	fp,r2
 8011c78:	8d006d26 	beq	r17,r20,8011e30 <_dtoa_r+0x1018>
 8011c7c:	880b883a 	mov	r5,r17
 8011c80:	01800284 	movi	r6,10
 8011c84:	000f883a 	mov	r7,zero
 8011c88:	8009883a 	mov	r4,r16
 8011c8c:	8013b0c0 	call	8013b0c <__multadd>
 8011c90:	a00b883a 	mov	r5,r20
 8011c94:	8009883a 	mov	r4,r16
 8011c98:	01800284 	movi	r6,10
 8011c9c:	000f883a 	mov	r7,zero
 8011ca0:	1023883a 	mov	r17,r2
 8011ca4:	8013b0c0 	call	8013b0c <__multadd>
 8011ca8:	1029883a 	mov	r20,r2
 8011cac:	b027883a 	mov	r19,r22
 8011cb0:	003fc006 	br	8011bb4 <__alt_data_end+0xfc011bb4>
 8011cb4:	a005883a 	mov	r2,r20
 8011cb8:	003ede06 	br	8011834 <__alt_data_end+0xfc011834>
 8011cbc:	01000044 	movi	r4,1
 8011cc0:	d9000b15 	stw	r4,44(sp)
 8011cc4:	d9802217 	ldw	r6,136(sp)
 8011cc8:	0180dc0e 	bge	zero,r6,801203c <_dtoa_r+0x1224>
 8011ccc:	3023883a 	mov	r17,r6
 8011cd0:	d9800d15 	stw	r6,52(sp)
 8011cd4:	d9800615 	stw	r6,24(sp)
 8011cd8:	003d1e06 	br	8011154 <__alt_data_end+0xfc011154>
 8011cdc:	d8800617 	ldw	r2,24(sp)
 8011ce0:	00be3716 	blt	zero,r2,80115c0 <__alt_data_end+0xfc0115c0>
 8011ce4:	1000be1e 	bne	r2,zero,8011fe0 <_dtoa_r+0x11c8>
 8011ce8:	8809883a 	mov	r4,r17
 8011cec:	a00b883a 	mov	r5,r20
 8011cf0:	000d883a 	mov	r6,zero
 8011cf4:	01d00534 	movhi	r7,16404
 8011cf8:	800a5ac0 	call	800a5ac <__muldf3>
 8011cfc:	1009883a 	mov	r4,r2
 8011d00:	180b883a 	mov	r5,r3
 8011d04:	900d883a 	mov	r6,r18
 8011d08:	980f883a 	mov	r7,r19
 8011d0c:	800a3ec0 	call	800a3ec <__gedf2>
 8011d10:	002b883a 	mov	r21,zero
 8011d14:	0023883a 	mov	r17,zero
 8011d18:	10007a16 	blt	r2,zero,8011f04 <_dtoa_r+0x10ec>
 8011d1c:	d9002217 	ldw	r4,136(sp)
 8011d20:	ddc00717 	ldw	r23,28(sp)
 8011d24:	0108303a 	nor	r4,zero,r4
 8011d28:	d9000515 	stw	r4,20(sp)
 8011d2c:	8009883a 	mov	r4,r16
 8011d30:	a80b883a 	mov	r5,r21
 8011d34:	8013ae40 	call	8013ae4 <_Bfree>
 8011d38:	883f751e 	bne	r17,zero,8011b10 <__alt_data_end+0xfc011b10>
 8011d3c:	003de406 	br	80114d0 <__alt_data_end+0xfc0114d0>
 8011d40:	e00b883a 	mov	r5,fp
 8011d44:	8009883a 	mov	r4,r16
 8011d48:	80140740 	call	8014074 <__pow5mult>
 8011d4c:	1039883a 	mov	fp,r2
 8011d50:	003ed306 	br	80118a0 <__alt_data_end+0xfc0118a0>
 8011d54:	903ee01e 	bne	r18,zero,80118d8 <__alt_data_end+0xfc0118d8>
 8011d58:	00800434 	movhi	r2,16
 8011d5c:	10bfffc4 	addi	r2,r2,-1
 8011d60:	9884703a 	and	r2,r19,r2
 8011d64:	103f081e 	bne	r2,zero,8011988 <__alt_data_end+0xfc011988>
 8011d68:	9cdffc2c 	andhi	r19,r19,32752
 8011d6c:	983f0626 	beq	r19,zero,8011988 <__alt_data_end+0xfc011988>
 8011d70:	d8800817 	ldw	r2,32(sp)
 8011d74:	b5800044 	addi	r22,r22,1
 8011d78:	04c00044 	movi	r19,1
 8011d7c:	10800044 	addi	r2,r2,1
 8011d80:	d8800815 	stw	r2,32(sp)
 8011d84:	003f0106 	br	801198c <__alt_data_end+0xfc01198c>
 8011d88:	d9800f17 	ldw	r6,60(sp)
 8011d8c:	30016826 	beq	r6,zero,8012330 <_dtoa_r+0x1518>
 8011d90:	10810cc4 	addi	r2,r2,1075
 8011d94:	dd400917 	ldw	r21,36(sp)
 8011d98:	dd000817 	ldw	r20,32(sp)
 8011d9c:	003e9906 	br	8011804 <__alt_data_end+0xfc011804>
 8011da0:	9011883a 	mov	r8,r18
 8011da4:	4007883a 	mov	r3,r8
 8011da8:	e02d883a 	mov	r22,fp
 8011dac:	0080100e 	bge	zero,r2,8011df0 <_dtoa_r+0xfd8>
 8011db0:	01800044 	movi	r6,1
 8011db4:	8009883a 	mov	r4,r16
 8011db8:	e00b883a 	mov	r5,fp
 8011dbc:	da001515 	stw	r8,84(sp)
 8011dc0:	da001715 	stw	r8,92(sp)
 8011dc4:	80141b40 	call	80141b4 <__lshift>
 8011dc8:	1009883a 	mov	r4,r2
 8011dcc:	a80b883a 	mov	r5,r21
 8011dd0:	102d883a 	mov	r22,r2
 8011dd4:	80142fc0 	call	80142fc <__mcmp>
 8011dd8:	d8c01517 	ldw	r3,84(sp)
 8011ddc:	da001717 	ldw	r8,92(sp)
 8011de0:	0081a50e 	bge	zero,r2,8012478 <_dtoa_r+0x1660>
 8011de4:	00800e44 	movi	r2,57
 8011de8:	40817b26 	beq	r8,r2,80123d8 <_dtoa_r+0x15c0>
 8011dec:	40c00044 	addi	r3,r8,1
 8011df0:	8825883a 	mov	r18,r17
 8011df4:	9dc00044 	addi	r23,r19,1
 8011df8:	98c00005 	stb	r3,0(r19)
 8011dfc:	a023883a 	mov	r17,r20
 8011e00:	b039883a 	mov	fp,r22
 8011e04:	003f3906 	br	8011aec <__alt_data_end+0xfc011aec>
 8011e08:	00800e44 	movi	r2,57
 8011e0c:	9011883a 	mov	r8,r18
 8011e10:	90817226 	beq	r18,r2,80123dc <_dtoa_r+0x15c4>
 8011e14:	0580010e 	bge	zero,r22,8011e1c <_dtoa_r+0x1004>
 8011e18:	ba000c44 	addi	r8,r23,49
 8011e1c:	8825883a 	mov	r18,r17
 8011e20:	9dc00044 	addi	r23,r19,1
 8011e24:	9a000005 	stb	r8,0(r19)
 8011e28:	a023883a 	mov	r17,r20
 8011e2c:	003f2f06 	br	8011aec <__alt_data_end+0xfc011aec>
 8011e30:	880b883a 	mov	r5,r17
 8011e34:	8009883a 	mov	r4,r16
 8011e38:	01800284 	movi	r6,10
 8011e3c:	000f883a 	mov	r7,zero
 8011e40:	8013b0c0 	call	8013b0c <__multadd>
 8011e44:	1023883a 	mov	r17,r2
 8011e48:	1029883a 	mov	r20,r2
 8011e4c:	003f9706 	br	8011cac <__alt_data_end+0xfc011cac>
 8011e50:	8009883a 	mov	r4,r16
 8011e54:	180b883a 	mov	r5,r3
 8011e58:	8013ae40 	call	8013ae4 <_Bfree>
 8011e5c:	00800044 	movi	r2,1
 8011e60:	003f7306 	br	8011c30 <__alt_data_end+0xfc011c30>
 8011e64:	e009883a 	mov	r4,fp
 8011e68:	a80b883a 	mov	r5,r21
 8011e6c:	80142fc0 	call	80142fc <__mcmp>
 8011e70:	103ee60e 	bge	r2,zero,8011a0c <__alt_data_end+0xfc011a0c>
 8011e74:	8009883a 	mov	r4,r16
 8011e78:	e00b883a 	mov	r5,fp
 8011e7c:	01800284 	movi	r6,10
 8011e80:	000f883a 	mov	r7,zero
 8011e84:	8013b0c0 	call	8013b0c <__multadd>
 8011e88:	d9000517 	ldw	r4,20(sp)
 8011e8c:	d9800b17 	ldw	r6,44(sp)
 8011e90:	1039883a 	mov	fp,r2
 8011e94:	213fffc4 	addi	r4,r4,-1
 8011e98:	d9000515 	stw	r4,20(sp)
 8011e9c:	303f2d1e 	bne	r6,zero,8011b54 <__alt_data_end+0xfc011b54>
 8011ea0:	d9000d17 	ldw	r4,52(sp)
 8011ea4:	0101780e 	bge	zero,r4,8012488 <_dtoa_r+0x1670>
 8011ea8:	d9000615 	stw	r4,24(sp)
 8011eac:	003edb06 	br	8011a1c <__alt_data_end+0xfc011a1c>
 8011eb0:	00800084 	movi	r2,2
 8011eb4:	30818e1e 	bne	r6,r2,80124f0 <_dtoa_r+0x16d8>
 8011eb8:	d8000b15 	stw	zero,44(sp)
 8011ebc:	003f8106 	br	8011cc4 <__alt_data_end+0xfc011cc4>
 8011ec0:	d8800717 	ldw	r2,28(sp)
 8011ec4:	003c0306 	br	8010ed4 <__alt_data_end+0xfc010ed4>
 8011ec8:	d9000317 	ldw	r4,12(sp)
 8011ecc:	00800084 	movi	r2,2
 8011ed0:	113ed00e 	bge	r2,r4,8011a14 <__alt_data_end+0xfc011a14>
 8011ed4:	d8c00617 	ldw	r3,24(sp)
 8011ed8:	183f901e 	bne	r3,zero,8011d1c <__alt_data_end+0xfc011d1c>
 8011edc:	a80b883a 	mov	r5,r21
 8011ee0:	8009883a 	mov	r4,r16
 8011ee4:	01800144 	movi	r6,5
 8011ee8:	000f883a 	mov	r7,zero
 8011eec:	8013b0c0 	call	8013b0c <__multadd>
 8011ef0:	e009883a 	mov	r4,fp
 8011ef4:	100b883a 	mov	r5,r2
 8011ef8:	102b883a 	mov	r21,r2
 8011efc:	80142fc0 	call	80142fc <__mcmp>
 8011f00:	00bf860e 	bge	zero,r2,8011d1c <__alt_data_end+0xfc011d1c>
 8011f04:	d9800717 	ldw	r6,28(sp)
 8011f08:	00800c44 	movi	r2,49
 8011f0c:	30800005 	stb	r2,0(r6)
 8011f10:	d8800517 	ldw	r2,20(sp)
 8011f14:	35c00044 	addi	r23,r6,1
 8011f18:	10800044 	addi	r2,r2,1
 8011f1c:	d8800515 	stw	r2,20(sp)
 8011f20:	003f8206 	br	8011d2c <__alt_data_end+0xfc011d2c>
 8011f24:	903e981e 	bne	r18,zero,8011988 <__alt_data_end+0xfc011988>
 8011f28:	003f8b06 	br	8011d58 <__alt_data_end+0xfc011d58>
 8011f2c:	d9800517 	ldw	r6,20(sp)
 8011f30:	d8c00717 	ldw	r3,28(sp)
 8011f34:	00800c44 	movi	r2,49
 8011f38:	31800044 	addi	r6,r6,1
 8011f3c:	d9800515 	stw	r6,20(sp)
 8011f40:	18800005 	stb	r2,0(r3)
 8011f44:	003ee906 	br	8011aec <__alt_data_end+0xfc011aec>
 8011f48:	dc000317 	ldw	r16,12(sp)
 8011f4c:	003d6006 	br	80114d0 <__alt_data_end+0xfc0114d0>
 8011f50:	8809883a 	mov	r4,r17
 8011f54:	800b6280 	call	800b628 <__floatsidf>
 8011f58:	a009883a 	mov	r4,r20
 8011f5c:	a80b883a 	mov	r5,r21
 8011f60:	100d883a 	mov	r6,r2
 8011f64:	180f883a 	mov	r7,r3
 8011f68:	800a5ac0 	call	800a5ac <__muldf3>
 8011f6c:	1009883a 	mov	r4,r2
 8011f70:	180b883a 	mov	r5,r3
 8011f74:	000d883a 	mov	r6,zero
 8011f78:	01d00734 	movhi	r7,16412
 8011f7c:	80092000 	call	8009200 <__adddf3>
 8011f80:	1023883a 	mov	r17,r2
 8011f84:	00bf3034 	movhi	r2,64704
 8011f88:	1885883a 	add	r2,r3,r2
 8011f8c:	d8800e15 	stw	r2,56(sp)
 8011f90:	a009883a 	mov	r4,r20
 8011f94:	a80b883a 	mov	r5,r21
 8011f98:	000d883a 	mov	r6,zero
 8011f9c:	01d00534 	movhi	r7,16404
 8011fa0:	800acd00 	call	800acd0 <__subdf3>
 8011fa4:	d9c00e17 	ldw	r7,56(sp)
 8011fa8:	1009883a 	mov	r4,r2
 8011fac:	180b883a 	mov	r5,r3
 8011fb0:	880d883a 	mov	r6,r17
 8011fb4:	102b883a 	mov	r21,r2
 8011fb8:	1829883a 	mov	r20,r3
 8011fbc:	800a3ec0 	call	800a3ec <__gedf2>
 8011fc0:	00807716 	blt	zero,r2,80121a0 <_dtoa_r+0x1388>
 8011fc4:	d8800e17 	ldw	r2,56(sp)
 8011fc8:	a809883a 	mov	r4,r21
 8011fcc:	a00b883a 	mov	r5,r20
 8011fd0:	11e0003c 	xorhi	r7,r2,32768
 8011fd4:	880d883a 	mov	r6,r17
 8011fd8:	800a4cc0 	call	800a4cc <__ledf2>
 8011fdc:	103d6b0e 	bge	r2,zero,801158c <__alt_data_end+0xfc01158c>
 8011fe0:	002b883a 	mov	r21,zero
 8011fe4:	0023883a 	mov	r17,zero
 8011fe8:	003f4c06 	br	8011d1c <__alt_data_end+0xfc011d1c>
 8011fec:	d9800917 	ldw	r6,36(sp)
 8011ff0:	e00b883a 	mov	r5,fp
 8011ff4:	8009883a 	mov	r4,r16
 8011ff8:	80140740 	call	8014074 <__pow5mult>
 8011ffc:	1039883a 	mov	fp,r2
 8012000:	003e2706 	br	80118a0 <__alt_data_end+0xfc0118a0>
 8012004:	d8000b15 	stw	zero,44(sp)
 8012008:	003c4906 	br	8011130 <__alt_data_end+0xfc011130>
 801200c:	d9000917 	ldw	r4,36(sp)
 8012010:	d9800a17 	ldw	r6,40(sp)
 8012014:	dd400915 	stw	r21,36(sp)
 8012018:	a905c83a 	sub	r2,r21,r4
 801201c:	308d883a 	add	r6,r6,r2
 8012020:	d9800a15 	stw	r6,40(sp)
 8012024:	002b883a 	mov	r21,zero
 8012028:	003df206 	br	80117f4 <__alt_data_end+0xfc0117f4>
 801202c:	dc800e15 	stw	r18,56(sp)
 8012030:	982b883a 	mov	r21,r19
 8012034:	04400084 	movi	r17,2
 8012038:	003c7406 	br	801120c <__alt_data_end+0xfc01120c>
 801203c:	04400044 	movi	r17,1
 8012040:	dc400d15 	stw	r17,52(sp)
 8012044:	dc400615 	stw	r17,24(sp)
 8012048:	dc402215 	stw	r17,136(sp)
 801204c:	80001115 	stw	zero,68(r16)
 8012050:	000b883a 	mov	r5,zero
 8012054:	003c4a06 	br	8011180 <__alt_data_end+0xfc011180>
 8012058:	3023883a 	mov	r17,r6
 801205c:	003ffb06 	br	801204c <__alt_data_end+0xfc01204c>
 8012060:	1000021e 	bne	r2,zero,801206c <_dtoa_r+0x1254>
 8012064:	4200004c 	andi	r8,r8,1
 8012068:	403e8f1e 	bne	r8,zero,8011aa8 <__alt_data_end+0xfc011aa8>
 801206c:	01000c04 	movi	r4,48
 8012070:	00000106 	br	8012078 <_dtoa_r+0x1260>
 8012074:	102f883a 	mov	r23,r2
 8012078:	b8bfffc4 	addi	r2,r23,-1
 801207c:	10c00007 	ldb	r3,0(r2)
 8012080:	193ffc26 	beq	r3,r4,8012074 <__alt_data_end+0xfc012074>
 8012084:	003e9906 	br	8011aec <__alt_data_end+0xfc011aec>
 8012088:	d9000517 	ldw	r4,20(sp)
 801208c:	012fc83a 	sub	r23,zero,r4
 8012090:	b800ad26 	beq	r23,zero,8012348 <_dtoa_r+0x1530>
 8012094:	b88003cc 	andi	r2,r23,15
 8012098:	100490fa 	slli	r2,r2,3
 801209c:	00c200b4 	movhi	r3,2050
 80120a0:	18dccc04 	addi	r3,r3,29488
 80120a4:	1885883a 	add	r2,r3,r2
 80120a8:	11800017 	ldw	r6,0(r2)
 80120ac:	11c00117 	ldw	r7,4(r2)
 80120b0:	b82fd13a 	srai	r23,r23,4
 80120b4:	9009883a 	mov	r4,r18
 80120b8:	980b883a 	mov	r5,r19
 80120bc:	800a5ac0 	call	800a5ac <__muldf3>
 80120c0:	1029883a 	mov	r20,r2
 80120c4:	182b883a 	mov	r21,r3
 80120c8:	b800f426 	beq	r23,zero,801249c <_dtoa_r+0x1684>
 80120cc:	020200b4 	movhi	r8,2050
 80120d0:	421cc204 	addi	r8,r8,29448
 80120d4:	8029883a 	mov	r20,r16
 80120d8:	04400084 	movi	r17,2
 80120dc:	4021883a 	mov	r16,r8
 80120e0:	b980004c 	andi	r6,r23,1
 80120e4:	1009883a 	mov	r4,r2
 80120e8:	b82fd07a 	srai	r23,r23,1
 80120ec:	180b883a 	mov	r5,r3
 80120f0:	30000426 	beq	r6,zero,8012104 <_dtoa_r+0x12ec>
 80120f4:	81800017 	ldw	r6,0(r16)
 80120f8:	81c00117 	ldw	r7,4(r16)
 80120fc:	8c400044 	addi	r17,r17,1
 8012100:	800a5ac0 	call	800a5ac <__muldf3>
 8012104:	84000204 	addi	r16,r16,8
 8012108:	b83ff51e 	bne	r23,zero,80120e0 <__alt_data_end+0xfc0120e0>
 801210c:	a021883a 	mov	r16,r20
 8012110:	182b883a 	mov	r21,r3
 8012114:	1029883a 	mov	r20,r2
 8012118:	003c5506 	br	8011270 <__alt_data_end+0xfc011270>
 801211c:	d9800517 	ldw	r6,20(sp)
 8012120:	d9000717 	ldw	r4,28(sp)
 8012124:	00c00c04 	movi	r3,48
 8012128:	31800044 	addi	r6,r6,1
 801212c:	d9800515 	stw	r6,20(sp)
 8012130:	20c00005 	stb	r3,0(r4)
 8012134:	02000c44 	movi	r8,49
 8012138:	003da206 	br	80117c4 <__alt_data_end+0xfc0117c4>
 801213c:	89400117 	ldw	r5,4(r17)
 8012140:	8009883a 	mov	r4,r16
 8012144:	8013a3c0 	call	8013a3c <_Balloc>
 8012148:	89800417 	ldw	r6,16(r17)
 801214c:	11000304 	addi	r4,r2,12
 8012150:	89400304 	addi	r5,r17,12
 8012154:	31800084 	addi	r6,r6,2
 8012158:	318d883a 	add	r6,r6,r6
 801215c:	318d883a 	add	r6,r6,r6
 8012160:	1027883a 	mov	r19,r2
 8012164:	800c5000 	call	800c500 <memcpy>
 8012168:	8009883a 	mov	r4,r16
 801216c:	980b883a 	mov	r5,r19
 8012170:	01800044 	movi	r6,1
 8012174:	80141b40 	call	80141b4 <__lshift>
 8012178:	1029883a 	mov	r20,r2
 801217c:	003e8606 	br	8011b98 <__alt_data_end+0xfc011b98>
 8012180:	00800e44 	movi	r2,57
 8012184:	90809526 	beq	r18,r2,80123dc <_dtoa_r+0x15c4>
 8012188:	92000044 	addi	r8,r18,1
 801218c:	003f2306 	br	8011e1c <__alt_data_end+0xfc011e1c>
 8012190:	9011883a 	mov	r8,r18
 8012194:	8825883a 	mov	r18,r17
 8012198:	a023883a 	mov	r17,r20
 801219c:	003e3706 	br	8011a7c <__alt_data_end+0xfc011a7c>
 80121a0:	002b883a 	mov	r21,zero
 80121a4:	0023883a 	mov	r17,zero
 80121a8:	003f5606 	br	8011f04 <__alt_data_end+0xfc011f04>
 80121ac:	51bfffc4 	addi	r6,r10,-1
 80121b0:	300490fa 	slli	r2,r6,3
 80121b4:	00c200b4 	movhi	r3,2050
 80121b8:	18dccc04 	addi	r3,r3,29488
 80121bc:	1885883a 	add	r2,r3,r2
 80121c0:	d9c00e17 	ldw	r7,56(sp)
 80121c4:	11000017 	ldw	r4,0(r2)
 80121c8:	11400117 	ldw	r5,4(r2)
 80121cc:	d8800717 	ldw	r2,28(sp)
 80121d0:	d9801015 	stw	r6,64(sp)
 80121d4:	880d883a 	mov	r6,r17
 80121d8:	da801615 	stw	r10,88(sp)
 80121dc:	15c00044 	addi	r23,r2,1
 80121e0:	800a5ac0 	call	800a5ac <__muldf3>
 80121e4:	a80b883a 	mov	r5,r21
 80121e8:	a009883a 	mov	r4,r20
 80121ec:	d8c01115 	stw	r3,68(sp)
 80121f0:	d8800e15 	stw	r2,56(sp)
 80121f4:	800b5a00 	call	800b5a0 <__fixdfsi>
 80121f8:	1009883a 	mov	r4,r2
 80121fc:	1023883a 	mov	r17,r2
 8012200:	800b6280 	call	800b628 <__floatsidf>
 8012204:	a009883a 	mov	r4,r20
 8012208:	a80b883a 	mov	r5,r21
 801220c:	100d883a 	mov	r6,r2
 8012210:	180f883a 	mov	r7,r3
 8012214:	800acd00 	call	800acd0 <__subdf3>
 8012218:	1813883a 	mov	r9,r3
 801221c:	d8c00717 	ldw	r3,28(sp)
 8012220:	8c400c04 	addi	r17,r17,48
 8012224:	1011883a 	mov	r8,r2
 8012228:	1c400005 	stb	r17,0(r3)
 801222c:	da801617 	ldw	r10,88(sp)
 8012230:	00800044 	movi	r2,1
 8012234:	50802326 	beq	r10,r2,80122c4 <_dtoa_r+0x14ac>
 8012238:	d8800717 	ldw	r2,28(sp)
 801223c:	b82b883a 	mov	r21,r23
 8012240:	dc001315 	stw	r16,76(sp)
 8012244:	12a9883a 	add	r20,r2,r10
 8012248:	4807883a 	mov	r3,r9
 801224c:	4005883a 	mov	r2,r8
 8012250:	dc801415 	stw	r18,80(sp)
 8012254:	000d883a 	mov	r6,zero
 8012258:	01d00934 	movhi	r7,16420
 801225c:	1009883a 	mov	r4,r2
 8012260:	180b883a 	mov	r5,r3
 8012264:	800a5ac0 	call	800a5ac <__muldf3>
 8012268:	180b883a 	mov	r5,r3
 801226c:	1009883a 	mov	r4,r2
 8012270:	1821883a 	mov	r16,r3
 8012274:	1025883a 	mov	r18,r2
 8012278:	800b5a00 	call	800b5a0 <__fixdfsi>
 801227c:	1009883a 	mov	r4,r2
 8012280:	1023883a 	mov	r17,r2
 8012284:	800b6280 	call	800b628 <__floatsidf>
 8012288:	9009883a 	mov	r4,r18
 801228c:	800b883a 	mov	r5,r16
 8012290:	100d883a 	mov	r6,r2
 8012294:	180f883a 	mov	r7,r3
 8012298:	8c400c04 	addi	r17,r17,48
 801229c:	800acd00 	call	800acd0 <__subdf3>
 80122a0:	ad400044 	addi	r21,r21,1
 80122a4:	ac7fffc5 	stb	r17,-1(r21)
 80122a8:	ad3fea1e 	bne	r21,r20,8012254 <__alt_data_end+0xfc012254>
 80122ac:	1813883a 	mov	r9,r3
 80122b0:	d8c01017 	ldw	r3,64(sp)
 80122b4:	dc001317 	ldw	r16,76(sp)
 80122b8:	dc801417 	ldw	r18,80(sp)
 80122bc:	1011883a 	mov	r8,r2
 80122c0:	b8ef883a 	add	r23,r23,r3
 80122c4:	d9000e17 	ldw	r4,56(sp)
 80122c8:	d9401117 	ldw	r5,68(sp)
 80122cc:	000d883a 	mov	r6,zero
 80122d0:	01cff834 	movhi	r7,16352
 80122d4:	da001715 	stw	r8,92(sp)
 80122d8:	da401515 	stw	r9,84(sp)
 80122dc:	80092000 	call	8009200 <__adddf3>
 80122e0:	da001717 	ldw	r8,92(sp)
 80122e4:	da401517 	ldw	r9,84(sp)
 80122e8:	1009883a 	mov	r4,r2
 80122ec:	400d883a 	mov	r6,r8
 80122f0:	480f883a 	mov	r7,r9
 80122f4:	180b883a 	mov	r5,r3
 80122f8:	800a4cc0 	call	800a4cc <__ledf2>
 80122fc:	da001717 	ldw	r8,92(sp)
 8012300:	da401517 	ldw	r9,84(sp)
 8012304:	10003b0e 	bge	r2,zero,80123f4 <_dtoa_r+0x15dc>
 8012308:	d9001217 	ldw	r4,72(sp)
 801230c:	bd7fffc3 	ldbu	r21,-1(r23)
 8012310:	d9000515 	stw	r4,20(sp)
 8012314:	003d1c06 	br	8011788 <__alt_data_end+0xfc011788>
 8012318:	d8c00817 	ldw	r3,32(sp)
 801231c:	18a9c83a 	sub	r20,r3,r2
 8012320:	0005883a 	mov	r2,zero
 8012324:	003d3706 	br	8011804 <__alt_data_end+0xfc011804>
 8012328:	00800044 	movi	r2,1
 801232c:	003dd006 	br	8011a70 <__alt_data_end+0xfc011a70>
 8012330:	d8c00217 	ldw	r3,8(sp)
 8012334:	00800d84 	movi	r2,54
 8012338:	dd400917 	ldw	r21,36(sp)
 801233c:	10c5c83a 	sub	r2,r2,r3
 8012340:	dd000817 	ldw	r20,32(sp)
 8012344:	003d2f06 	br	8011804 <__alt_data_end+0xfc011804>
 8012348:	9029883a 	mov	r20,r18
 801234c:	982b883a 	mov	r21,r19
 8012350:	04400084 	movi	r17,2
 8012354:	003bc606 	br	8011270 <__alt_data_end+0xfc011270>
 8012358:	d8800617 	ldw	r2,24(sp)
 801235c:	103efc26 	beq	r2,zero,8011f50 <__alt_data_end+0xfc011f50>
 8012360:	d8c00d17 	ldw	r3,52(sp)
 8012364:	00fc890e 	bge	zero,r3,801158c <__alt_data_end+0xfc01158c>
 8012368:	a80b883a 	mov	r5,r21
 801236c:	a009883a 	mov	r4,r20
 8012370:	000d883a 	mov	r6,zero
 8012374:	01d00934 	movhi	r7,16420
 8012378:	800a5ac0 	call	800a5ac <__muldf3>
 801237c:	89000044 	addi	r4,r17,1
 8012380:	1029883a 	mov	r20,r2
 8012384:	182b883a 	mov	r21,r3
 8012388:	800b6280 	call	800b628 <__floatsidf>
 801238c:	a009883a 	mov	r4,r20
 8012390:	a80b883a 	mov	r5,r21
 8012394:	100d883a 	mov	r6,r2
 8012398:	180f883a 	mov	r7,r3
 801239c:	800a5ac0 	call	800a5ac <__muldf3>
 80123a0:	1009883a 	mov	r4,r2
 80123a4:	180b883a 	mov	r5,r3
 80123a8:	000d883a 	mov	r6,zero
 80123ac:	01d00734 	movhi	r7,16412
 80123b0:	80092000 	call	8009200 <__adddf3>
 80123b4:	d9000517 	ldw	r4,20(sp)
 80123b8:	1023883a 	mov	r17,r2
 80123bc:	00bf3034 	movhi	r2,64704
 80123c0:	213fffc4 	addi	r4,r4,-1
 80123c4:	1885883a 	add	r2,r3,r2
 80123c8:	d9001215 	stw	r4,72(sp)
 80123cc:	d8800e15 	stw	r2,56(sp)
 80123d0:	da800d17 	ldw	r10,52(sp)
 80123d4:	003bc306 	br	80112e4 <__alt_data_end+0xfc0112e4>
 80123d8:	b039883a 	mov	fp,r22
 80123dc:	01000e44 	movi	r4,57
 80123e0:	8825883a 	mov	r18,r17
 80123e4:	9dc00044 	addi	r23,r19,1
 80123e8:	99000005 	stb	r4,0(r19)
 80123ec:	a023883a 	mov	r17,r20
 80123f0:	003dae06 	br	8011aac <__alt_data_end+0xfc011aac>
 80123f4:	d9800e17 	ldw	r6,56(sp)
 80123f8:	d9c01117 	ldw	r7,68(sp)
 80123fc:	0009883a 	mov	r4,zero
 8012400:	014ff834 	movhi	r5,16352
 8012404:	da001715 	stw	r8,92(sp)
 8012408:	da401515 	stw	r9,84(sp)
 801240c:	800acd00 	call	800acd0 <__subdf3>
 8012410:	da001717 	ldw	r8,92(sp)
 8012414:	da401517 	ldw	r9,84(sp)
 8012418:	1009883a 	mov	r4,r2
 801241c:	180b883a 	mov	r5,r3
 8012420:	400d883a 	mov	r6,r8
 8012424:	480f883a 	mov	r7,r9
 8012428:	800a3ec0 	call	800a3ec <__gedf2>
 801242c:	00bc570e 	bge	zero,r2,801158c <__alt_data_end+0xfc01158c>
 8012430:	01000c04 	movi	r4,48
 8012434:	00000106 	br	801243c <_dtoa_r+0x1624>
 8012438:	102f883a 	mov	r23,r2
 801243c:	b8bfffc4 	addi	r2,r23,-1
 8012440:	10c00007 	ldb	r3,0(r2)
 8012444:	193ffc26 	beq	r3,r4,8012438 <__alt_data_end+0xfc012438>
 8012448:	d9801217 	ldw	r6,72(sp)
 801244c:	d9800515 	stw	r6,20(sp)
 8012450:	003c1f06 	br	80114d0 <__alt_data_end+0xfc0114d0>
 8012454:	d8801217 	ldw	r2,72(sp)
 8012458:	dc001117 	ldw	r16,68(sp)
 801245c:	d8800515 	stw	r2,20(sp)
 8012460:	003cc906 	br	8011788 <__alt_data_end+0xfc011788>
 8012464:	dd801317 	ldw	r22,76(sp)
 8012468:	dc001117 	ldw	r16,68(sp)
 801246c:	dcc01417 	ldw	r19,80(sp)
 8012470:	dc801017 	ldw	r18,64(sp)
 8012474:	003c4506 	br	801158c <__alt_data_end+0xfc01158c>
 8012478:	103e5d1e 	bne	r2,zero,8011df0 <__alt_data_end+0xfc011df0>
 801247c:	4080004c 	andi	r2,r8,1
 8012480:	103e5b26 	beq	r2,zero,8011df0 <__alt_data_end+0xfc011df0>
 8012484:	003e5706 	br	8011de4 <__alt_data_end+0xfc011de4>
 8012488:	d8c00317 	ldw	r3,12(sp)
 801248c:	00800084 	movi	r2,2
 8012490:	10c00a16 	blt	r2,r3,80124bc <_dtoa_r+0x16a4>
 8012494:	d9000d17 	ldw	r4,52(sp)
 8012498:	003e8306 	br	8011ea8 <__alt_data_end+0xfc011ea8>
 801249c:	04400084 	movi	r17,2
 80124a0:	003b7306 	br	8011270 <__alt_data_end+0xfc011270>
 80124a4:	d9801217 	ldw	r6,72(sp)
 80124a8:	d9800515 	stw	r6,20(sp)
 80124ac:	003cb606 	br	8011788 <__alt_data_end+0xfc011788>
 80124b0:	d9001217 	ldw	r4,72(sp)
 80124b4:	d9000515 	stw	r4,20(sp)
 80124b8:	003c0506 	br	80114d0 <__alt_data_end+0xfc0114d0>
 80124bc:	d9800d17 	ldw	r6,52(sp)
 80124c0:	d9800615 	stw	r6,24(sp)
 80124c4:	003e8306 	br	8011ed4 <__alt_data_end+0xfc011ed4>
 80124c8:	d9800317 	ldw	r6,12(sp)
 80124cc:	00800084 	movi	r2,2
 80124d0:	11800216 	blt	r2,r6,80124dc <_dtoa_r+0x16c4>
 80124d4:	d8800d17 	ldw	r2,52(sp)
 80124d8:	003da606 	br	8011b74 <__alt_data_end+0xfc011b74>
 80124dc:	d8800d17 	ldw	r2,52(sp)
 80124e0:	d8800615 	stw	r2,24(sp)
 80124e4:	003e7b06 	br	8011ed4 <__alt_data_end+0xfc011ed4>
 80124e8:	05000044 	movi	r20,1
 80124ec:	003b0506 	br	8011104 <__alt_data_end+0xfc011104>
 80124f0:	8009883a 	mov	r4,r16
 80124f4:	80001115 	stw	zero,68(r16)
 80124f8:	000b883a 	mov	r5,zero
 80124fc:	8013a3c0 	call	8013a3c <_Balloc>
 8012500:	d8800715 	stw	r2,28(sp)
 8012504:	d8c00717 	ldw	r3,28(sp)
 8012508:	00bfffc4 	movi	r2,-1
 801250c:	01000044 	movi	r4,1
 8012510:	d8800615 	stw	r2,24(sp)
 8012514:	80c01015 	stw	r3,64(r16)
 8012518:	d9000b15 	stw	r4,44(sp)
 801251c:	d8002215 	stw	zero,136(sp)
 8012520:	d8800d15 	stw	r2,52(sp)
 8012524:	003c1906 	br	801158c <__alt_data_end+0xfc01158c>
 8012528:	193d2926 	beq	r3,r4,80119d0 <__alt_data_end+0xfc0119d0>
 801252c:	00c00f04 	movi	r3,60
 8012530:	1885c83a 	sub	r2,r3,r2
 8012534:	003d7b06 	br	8011b24 <__alt_data_end+0xfc011b24>
 8012538:	000b883a 	mov	r5,zero
 801253c:	003b1006 	br	8011180 <__alt_data_end+0xfc011180>

08012540 <_fflush_r>:
 8012540:	defffb04 	addi	sp,sp,-20
 8012544:	dcc00315 	stw	r19,12(sp)
 8012548:	dc000015 	stw	r16,0(sp)
 801254c:	dfc00415 	stw	ra,16(sp)
 8012550:	dc800215 	stw	r18,8(sp)
 8012554:	dc400115 	stw	r17,4(sp)
 8012558:	2027883a 	mov	r19,r4
 801255c:	2821883a 	mov	r16,r5
 8012560:	20000226 	beq	r4,zero,801256c <_fflush_r+0x2c>
 8012564:	20800e17 	ldw	r2,56(r4)
 8012568:	10005326 	beq	r2,zero,80126b8 <_fflush_r+0x178>
 801256c:	8080030b 	ldhu	r2,12(r16)
 8012570:	10ffffcc 	andi	r3,r2,65535
 8012574:	18e0001c 	xori	r3,r3,32768
 8012578:	18e00004 	addi	r3,r3,-32768
 801257c:	18002c26 	beq	r3,zero,8012630 <_fflush_r+0xf0>
 8012580:	10c0020c 	andi	r3,r2,8
 8012584:	1800321e 	bne	r3,zero,8012650 <_fflush_r+0x110>
 8012588:	80c00117 	ldw	r3,4(r16)
 801258c:	10820014 	ori	r2,r2,2048
 8012590:	8080030d 	sth	r2,12(r16)
 8012594:	00c0570e 	bge	zero,r3,80126f4 <_fflush_r+0x1b4>
 8012598:	82000a17 	ldw	r8,40(r16)
 801259c:	40002426 	beq	r8,zero,8012630 <_fflush_r+0xf0>
 80125a0:	9c400017 	ldw	r17,0(r19)
 80125a4:	10c4000c 	andi	r3,r2,4096
 80125a8:	98000015 	stw	zero,0(r19)
 80125ac:	18004626 	beq	r3,zero,80126c8 <_fflush_r+0x188>
 80125b0:	81801417 	ldw	r6,80(r16)
 80125b4:	10c0010c 	andi	r3,r2,4
 80125b8:	18000626 	beq	r3,zero,80125d4 <_fflush_r+0x94>
 80125bc:	80c00117 	ldw	r3,4(r16)
 80125c0:	80800c17 	ldw	r2,48(r16)
 80125c4:	30cdc83a 	sub	r6,r6,r3
 80125c8:	10000226 	beq	r2,zero,80125d4 <_fflush_r+0x94>
 80125cc:	80800f17 	ldw	r2,60(r16)
 80125d0:	308dc83a 	sub	r6,r6,r2
 80125d4:	81400717 	ldw	r5,28(r16)
 80125d8:	9809883a 	mov	r4,r19
 80125dc:	000f883a 	mov	r7,zero
 80125e0:	403ee83a 	callr	r8
 80125e4:	00ffffc4 	movi	r3,-1
 80125e8:	10c04526 	beq	r2,r3,8012700 <_fflush_r+0x1c0>
 80125ec:	80c0030b 	ldhu	r3,12(r16)
 80125f0:	81000417 	ldw	r4,16(r16)
 80125f4:	80000115 	stw	zero,4(r16)
 80125f8:	197dffcc 	andi	r5,r3,63487
 80125fc:	8140030d 	sth	r5,12(r16)
 8012600:	81000015 	stw	r4,0(r16)
 8012604:	18c4000c 	andi	r3,r3,4096
 8012608:	18000126 	beq	r3,zero,8012610 <_fflush_r+0xd0>
 801260c:	80801415 	stw	r2,80(r16)
 8012610:	81400c17 	ldw	r5,48(r16)
 8012614:	9c400015 	stw	r17,0(r19)
 8012618:	28000526 	beq	r5,zero,8012630 <_fflush_r+0xf0>
 801261c:	80801004 	addi	r2,r16,64
 8012620:	28800226 	beq	r5,r2,801262c <_fflush_r+0xec>
 8012624:	9809883a 	mov	r4,r19
 8012628:	8012c5c0 	call	8012c5c <_free_r>
 801262c:	80000c15 	stw	zero,48(r16)
 8012630:	0005883a 	mov	r2,zero
 8012634:	dfc00417 	ldw	ra,16(sp)
 8012638:	dcc00317 	ldw	r19,12(sp)
 801263c:	dc800217 	ldw	r18,8(sp)
 8012640:	dc400117 	ldw	r17,4(sp)
 8012644:	dc000017 	ldw	r16,0(sp)
 8012648:	dec00504 	addi	sp,sp,20
 801264c:	f800283a 	ret
 8012650:	84800417 	ldw	r18,16(r16)
 8012654:	903ff626 	beq	r18,zero,8012630 <__alt_data_end+0xfc012630>
 8012658:	84400017 	ldw	r17,0(r16)
 801265c:	108000cc 	andi	r2,r2,3
 8012660:	84800015 	stw	r18,0(r16)
 8012664:	8ca3c83a 	sub	r17,r17,r18
 8012668:	10001526 	beq	r2,zero,80126c0 <_fflush_r+0x180>
 801266c:	0005883a 	mov	r2,zero
 8012670:	80800215 	stw	r2,8(r16)
 8012674:	04400316 	blt	zero,r17,8012684 <_fflush_r+0x144>
 8012678:	003fed06 	br	8012630 <__alt_data_end+0xfc012630>
 801267c:	90a5883a 	add	r18,r18,r2
 8012680:	047feb0e 	bge	zero,r17,8012630 <__alt_data_end+0xfc012630>
 8012684:	80800917 	ldw	r2,36(r16)
 8012688:	81400717 	ldw	r5,28(r16)
 801268c:	880f883a 	mov	r7,r17
 8012690:	900d883a 	mov	r6,r18
 8012694:	9809883a 	mov	r4,r19
 8012698:	103ee83a 	callr	r2
 801269c:	88a3c83a 	sub	r17,r17,r2
 80126a0:	00bff616 	blt	zero,r2,801267c <__alt_data_end+0xfc01267c>
 80126a4:	80c0030b 	ldhu	r3,12(r16)
 80126a8:	00bfffc4 	movi	r2,-1
 80126ac:	18c01014 	ori	r3,r3,64
 80126b0:	80c0030d 	sth	r3,12(r16)
 80126b4:	003fdf06 	br	8012634 <__alt_data_end+0xfc012634>
 80126b8:	8012ae80 	call	8012ae8 <__sinit>
 80126bc:	003fab06 	br	801256c <__alt_data_end+0xfc01256c>
 80126c0:	80800517 	ldw	r2,20(r16)
 80126c4:	003fea06 	br	8012670 <__alt_data_end+0xfc012670>
 80126c8:	81400717 	ldw	r5,28(r16)
 80126cc:	000d883a 	mov	r6,zero
 80126d0:	9809883a 	mov	r4,r19
 80126d4:	01c00044 	movi	r7,1
 80126d8:	403ee83a 	callr	r8
 80126dc:	100d883a 	mov	r6,r2
 80126e0:	00bfffc4 	movi	r2,-1
 80126e4:	30801326 	beq	r6,r2,8012734 <_fflush_r+0x1f4>
 80126e8:	8080030b 	ldhu	r2,12(r16)
 80126ec:	82000a17 	ldw	r8,40(r16)
 80126f0:	003fb006 	br	80125b4 <__alt_data_end+0xfc0125b4>
 80126f4:	80c00f17 	ldw	r3,60(r16)
 80126f8:	00ffa716 	blt	zero,r3,8012598 <__alt_data_end+0xfc012598>
 80126fc:	003fcc06 	br	8012630 <__alt_data_end+0xfc012630>
 8012700:	98c00017 	ldw	r3,0(r19)
 8012704:	183fb926 	beq	r3,zero,80125ec <__alt_data_end+0xfc0125ec>
 8012708:	01000744 	movi	r4,29
 801270c:	19000226 	beq	r3,r4,8012718 <_fflush_r+0x1d8>
 8012710:	01000584 	movi	r4,22
 8012714:	1900101e 	bne	r3,r4,8012758 <_fflush_r+0x218>
 8012718:	8080030b 	ldhu	r2,12(r16)
 801271c:	80c00417 	ldw	r3,16(r16)
 8012720:	80000115 	stw	zero,4(r16)
 8012724:	10bdffcc 	andi	r2,r2,63487
 8012728:	8080030d 	sth	r2,12(r16)
 801272c:	80c00015 	stw	r3,0(r16)
 8012730:	003fb706 	br	8012610 <__alt_data_end+0xfc012610>
 8012734:	98800017 	ldw	r2,0(r19)
 8012738:	103feb26 	beq	r2,zero,80126e8 <__alt_data_end+0xfc0126e8>
 801273c:	00c00744 	movi	r3,29
 8012740:	10c00226 	beq	r2,r3,801274c <_fflush_r+0x20c>
 8012744:	00c00584 	movi	r3,22
 8012748:	10ffd61e 	bne	r2,r3,80126a4 <__alt_data_end+0xfc0126a4>
 801274c:	9c400015 	stw	r17,0(r19)
 8012750:	0005883a 	mov	r2,zero
 8012754:	003fb706 	br	8012634 <__alt_data_end+0xfc012634>
 8012758:	80c0030b 	ldhu	r3,12(r16)
 801275c:	18c01014 	ori	r3,r3,64
 8012760:	80c0030d 	sth	r3,12(r16)
 8012764:	003fb306 	br	8012634 <__alt_data_end+0xfc012634>

08012768 <fflush>:
 8012768:	20000526 	beq	r4,zero,8012780 <fflush+0x18>
 801276c:	008200f4 	movhi	r2,2051
 8012770:	10a3ec04 	addi	r2,r2,-28752
 8012774:	200b883a 	mov	r5,r4
 8012778:	11000017 	ldw	r4,0(r2)
 801277c:	80125401 	jmpi	8012540 <_fflush_r>
 8012780:	008200f4 	movhi	r2,2051
 8012784:	10a3eb04 	addi	r2,r2,-28756
 8012788:	11000017 	ldw	r4,0(r2)
 801278c:	01420074 	movhi	r5,2049
 8012790:	29495004 	addi	r5,r5,9536
 8012794:	80134a81 	jmpi	80134a8 <_fwalk_reent>

08012798 <__fp_lock>:
 8012798:	0005883a 	mov	r2,zero
 801279c:	f800283a 	ret

080127a0 <__fp_unlock>:
 80127a0:	0005883a 	mov	r2,zero
 80127a4:	f800283a 	ret

080127a8 <_cleanup_r>:
 80127a8:	01420074 	movhi	r5,2049
 80127ac:	295fd904 	addi	r5,r5,32612
 80127b0:	80133f01 	jmpi	80133f0 <_fwalk>

080127b4 <__sinit.part.1>:
 80127b4:	defff604 	addi	sp,sp,-40
 80127b8:	00c20074 	movhi	r3,2049
 80127bc:	dfc00915 	stw	ra,36(sp)
 80127c0:	df000815 	stw	fp,32(sp)
 80127c4:	ddc00715 	stw	r23,28(sp)
 80127c8:	dd800615 	stw	r22,24(sp)
 80127cc:	dd400515 	stw	r21,20(sp)
 80127d0:	dd000415 	stw	r20,16(sp)
 80127d4:	dcc00315 	stw	r19,12(sp)
 80127d8:	dc800215 	stw	r18,8(sp)
 80127dc:	dc400115 	stw	r17,4(sp)
 80127e0:	dc000015 	stw	r16,0(sp)
 80127e4:	18c9ea04 	addi	r3,r3,10152
 80127e8:	24000117 	ldw	r16,4(r4)
 80127ec:	20c00f15 	stw	r3,60(r4)
 80127f0:	07000044 	movi	fp,1
 80127f4:	00c000c4 	movi	r3,3
 80127f8:	2080bb04 	addi	r2,r4,748
 80127fc:	20c0b915 	stw	r3,740(r4)
 8012800:	27000e15 	stw	fp,56(r4)
 8012804:	2080ba15 	stw	r2,744(r4)
 8012808:	2000b815 	stw	zero,736(r4)
 801280c:	05c00204 	movi	r23,8
 8012810:	00800104 	movi	r2,4
 8012814:	2025883a 	mov	r18,r4
 8012818:	b80d883a 	mov	r6,r23
 801281c:	81001704 	addi	r4,r16,92
 8012820:	000b883a 	mov	r5,zero
 8012824:	80000015 	stw	zero,0(r16)
 8012828:	80000115 	stw	zero,4(r16)
 801282c:	80000215 	stw	zero,8(r16)
 8012830:	8080030d 	sth	r2,12(r16)
 8012834:	80001915 	stw	zero,100(r16)
 8012838:	8000038d 	sth	zero,14(r16)
 801283c:	80000415 	stw	zero,16(r16)
 8012840:	80000515 	stw	zero,20(r16)
 8012844:	80000615 	stw	zero,24(r16)
 8012848:	800c6380 	call	800c638 <memset>
 801284c:	05820074 	movhi	r22,2049
 8012850:	94400217 	ldw	r17,8(r18)
 8012854:	05420074 	movhi	r21,2049
 8012858:	05020074 	movhi	r20,2049
 801285c:	04c20074 	movhi	r19,2049
 8012860:	b5951104 	addi	r22,r22,21572
 8012864:	ad552804 	addi	r21,r21,21664
 8012868:	a5154704 	addi	r20,r20,21788
 801286c:	9cd55e04 	addi	r19,r19,21880
 8012870:	85800815 	stw	r22,32(r16)
 8012874:	85400915 	stw	r21,36(r16)
 8012878:	85000a15 	stw	r20,40(r16)
 801287c:	84c00b15 	stw	r19,44(r16)
 8012880:	84000715 	stw	r16,28(r16)
 8012884:	00800284 	movi	r2,10
 8012888:	89001704 	addi	r4,r17,92
 801288c:	b80d883a 	mov	r6,r23
 8012890:	000b883a 	mov	r5,zero
 8012894:	88000015 	stw	zero,0(r17)
 8012898:	88000115 	stw	zero,4(r17)
 801289c:	88000215 	stw	zero,8(r17)
 80128a0:	8880030d 	sth	r2,12(r17)
 80128a4:	88001915 	stw	zero,100(r17)
 80128a8:	8f00038d 	sth	fp,14(r17)
 80128ac:	88000415 	stw	zero,16(r17)
 80128b0:	88000515 	stw	zero,20(r17)
 80128b4:	88000615 	stw	zero,24(r17)
 80128b8:	800c6380 	call	800c638 <memset>
 80128bc:	94000317 	ldw	r16,12(r18)
 80128c0:	00800484 	movi	r2,18
 80128c4:	8c400715 	stw	r17,28(r17)
 80128c8:	8d800815 	stw	r22,32(r17)
 80128cc:	8d400915 	stw	r21,36(r17)
 80128d0:	8d000a15 	stw	r20,40(r17)
 80128d4:	8cc00b15 	stw	r19,44(r17)
 80128d8:	8080030d 	sth	r2,12(r16)
 80128dc:	00800084 	movi	r2,2
 80128e0:	80000015 	stw	zero,0(r16)
 80128e4:	80000115 	stw	zero,4(r16)
 80128e8:	80000215 	stw	zero,8(r16)
 80128ec:	80001915 	stw	zero,100(r16)
 80128f0:	8080038d 	sth	r2,14(r16)
 80128f4:	80000415 	stw	zero,16(r16)
 80128f8:	80000515 	stw	zero,20(r16)
 80128fc:	80000615 	stw	zero,24(r16)
 8012900:	81001704 	addi	r4,r16,92
 8012904:	000b883a 	mov	r5,zero
 8012908:	b80d883a 	mov	r6,r23
 801290c:	800c6380 	call	800c638 <memset>
 8012910:	84000715 	stw	r16,28(r16)
 8012914:	85800815 	stw	r22,32(r16)
 8012918:	85400915 	stw	r21,36(r16)
 801291c:	85000a15 	stw	r20,40(r16)
 8012920:	84c00b15 	stw	r19,44(r16)
 8012924:	dfc00917 	ldw	ra,36(sp)
 8012928:	df000817 	ldw	fp,32(sp)
 801292c:	ddc00717 	ldw	r23,28(sp)
 8012930:	dd800617 	ldw	r22,24(sp)
 8012934:	dd400517 	ldw	r21,20(sp)
 8012938:	dd000417 	ldw	r20,16(sp)
 801293c:	dcc00317 	ldw	r19,12(sp)
 8012940:	dc800217 	ldw	r18,8(sp)
 8012944:	dc400117 	ldw	r17,4(sp)
 8012948:	dc000017 	ldw	r16,0(sp)
 801294c:	dec00a04 	addi	sp,sp,40
 8012950:	f800283a 	ret

08012954 <__sfmoreglue>:
 8012954:	defffc04 	addi	sp,sp,-16
 8012958:	dc400115 	stw	r17,4(sp)
 801295c:	2c401a24 	muli	r17,r5,104
 8012960:	dc800215 	stw	r18,8(sp)
 8012964:	2825883a 	mov	r18,r5
 8012968:	89400304 	addi	r5,r17,12
 801296c:	dc000015 	stw	r16,0(sp)
 8012970:	dfc00315 	stw	ra,12(sp)
 8012974:	800bd580 	call	800bd58 <_malloc_r>
 8012978:	1021883a 	mov	r16,r2
 801297c:	10000726 	beq	r2,zero,801299c <__sfmoreglue+0x48>
 8012980:	11000304 	addi	r4,r2,12
 8012984:	10000015 	stw	zero,0(r2)
 8012988:	14800115 	stw	r18,4(r2)
 801298c:	11000215 	stw	r4,8(r2)
 8012990:	000b883a 	mov	r5,zero
 8012994:	880d883a 	mov	r6,r17
 8012998:	800c6380 	call	800c638 <memset>
 801299c:	8005883a 	mov	r2,r16
 80129a0:	dfc00317 	ldw	ra,12(sp)
 80129a4:	dc800217 	ldw	r18,8(sp)
 80129a8:	dc400117 	ldw	r17,4(sp)
 80129ac:	dc000017 	ldw	r16,0(sp)
 80129b0:	dec00404 	addi	sp,sp,16
 80129b4:	f800283a 	ret

080129b8 <__sfp>:
 80129b8:	008200f4 	movhi	r2,2051
 80129bc:	defffb04 	addi	sp,sp,-20
 80129c0:	10a3eb04 	addi	r2,r2,-28756
 80129c4:	dc800215 	stw	r18,8(sp)
 80129c8:	14800017 	ldw	r18,0(r2)
 80129cc:	dcc00315 	stw	r19,12(sp)
 80129d0:	dfc00415 	stw	ra,16(sp)
 80129d4:	90800e17 	ldw	r2,56(r18)
 80129d8:	dc400115 	stw	r17,4(sp)
 80129dc:	dc000015 	stw	r16,0(sp)
 80129e0:	2027883a 	mov	r19,r4
 80129e4:	1000021e 	bne	r2,zero,80129f0 <__sfp+0x38>
 80129e8:	9009883a 	mov	r4,r18
 80129ec:	80127b40 	call	80127b4 <__sinit.part.1>
 80129f0:	9480b804 	addi	r18,r18,736
 80129f4:	047fffc4 	movi	r17,-1
 80129f8:	91400117 	ldw	r5,4(r18)
 80129fc:	94000217 	ldw	r16,8(r18)
 8012a00:	297fffc4 	addi	r5,r5,-1
 8012a04:	28000a16 	blt	r5,zero,8012a30 <__sfp+0x78>
 8012a08:	8080030f 	ldh	r2,12(r16)
 8012a0c:	10000c26 	beq	r2,zero,8012a40 <__sfp+0x88>
 8012a10:	80c01d04 	addi	r3,r16,116
 8012a14:	00000206 	br	8012a20 <__sfp+0x68>
 8012a18:	18bfe60f 	ldh	r2,-104(r3)
 8012a1c:	10000826 	beq	r2,zero,8012a40 <__sfp+0x88>
 8012a20:	297fffc4 	addi	r5,r5,-1
 8012a24:	1c3ffd04 	addi	r16,r3,-12
 8012a28:	18c01a04 	addi	r3,r3,104
 8012a2c:	2c7ffa1e 	bne	r5,r17,8012a18 <__alt_data_end+0xfc012a18>
 8012a30:	90800017 	ldw	r2,0(r18)
 8012a34:	10001d26 	beq	r2,zero,8012aac <__sfp+0xf4>
 8012a38:	1025883a 	mov	r18,r2
 8012a3c:	003fee06 	br	80129f8 <__alt_data_end+0xfc0129f8>
 8012a40:	00bfffc4 	movi	r2,-1
 8012a44:	8080038d 	sth	r2,14(r16)
 8012a48:	00800044 	movi	r2,1
 8012a4c:	8080030d 	sth	r2,12(r16)
 8012a50:	80001915 	stw	zero,100(r16)
 8012a54:	80000015 	stw	zero,0(r16)
 8012a58:	80000215 	stw	zero,8(r16)
 8012a5c:	80000115 	stw	zero,4(r16)
 8012a60:	80000415 	stw	zero,16(r16)
 8012a64:	80000515 	stw	zero,20(r16)
 8012a68:	80000615 	stw	zero,24(r16)
 8012a6c:	81001704 	addi	r4,r16,92
 8012a70:	000b883a 	mov	r5,zero
 8012a74:	01800204 	movi	r6,8
 8012a78:	800c6380 	call	800c638 <memset>
 8012a7c:	8005883a 	mov	r2,r16
 8012a80:	80000c15 	stw	zero,48(r16)
 8012a84:	80000d15 	stw	zero,52(r16)
 8012a88:	80001115 	stw	zero,68(r16)
 8012a8c:	80001215 	stw	zero,72(r16)
 8012a90:	dfc00417 	ldw	ra,16(sp)
 8012a94:	dcc00317 	ldw	r19,12(sp)
 8012a98:	dc800217 	ldw	r18,8(sp)
 8012a9c:	dc400117 	ldw	r17,4(sp)
 8012aa0:	dc000017 	ldw	r16,0(sp)
 8012aa4:	dec00504 	addi	sp,sp,20
 8012aa8:	f800283a 	ret
 8012aac:	9809883a 	mov	r4,r19
 8012ab0:	01400104 	movi	r5,4
 8012ab4:	80129540 	call	8012954 <__sfmoreglue>
 8012ab8:	90800015 	stw	r2,0(r18)
 8012abc:	103fde1e 	bne	r2,zero,8012a38 <__alt_data_end+0xfc012a38>
 8012ac0:	00800304 	movi	r2,12
 8012ac4:	98800015 	stw	r2,0(r19)
 8012ac8:	0005883a 	mov	r2,zero
 8012acc:	003ff006 	br	8012a90 <__alt_data_end+0xfc012a90>

08012ad0 <_cleanup>:
 8012ad0:	008200f4 	movhi	r2,2051
 8012ad4:	10a3eb04 	addi	r2,r2,-28756
 8012ad8:	11000017 	ldw	r4,0(r2)
 8012adc:	01420074 	movhi	r5,2049
 8012ae0:	295fd904 	addi	r5,r5,32612
 8012ae4:	80133f01 	jmpi	80133f0 <_fwalk>

08012ae8 <__sinit>:
 8012ae8:	20800e17 	ldw	r2,56(r4)
 8012aec:	10000126 	beq	r2,zero,8012af4 <__sinit+0xc>
 8012af0:	f800283a 	ret
 8012af4:	80127b41 	jmpi	80127b4 <__sinit.part.1>

08012af8 <__sfp_lock_acquire>:
 8012af8:	f800283a 	ret

08012afc <__sfp_lock_release>:
 8012afc:	f800283a 	ret

08012b00 <__sinit_lock_acquire>:
 8012b00:	f800283a 	ret

08012b04 <__sinit_lock_release>:
 8012b04:	f800283a 	ret

08012b08 <__fp_lock_all>:
 8012b08:	008200f4 	movhi	r2,2051
 8012b0c:	10a3ec04 	addi	r2,r2,-28752
 8012b10:	11000017 	ldw	r4,0(r2)
 8012b14:	01420074 	movhi	r5,2049
 8012b18:	2949e604 	addi	r5,r5,10136
 8012b1c:	80133f01 	jmpi	80133f0 <_fwalk>

08012b20 <__fp_unlock_all>:
 8012b20:	008200f4 	movhi	r2,2051
 8012b24:	10a3ec04 	addi	r2,r2,-28752
 8012b28:	11000017 	ldw	r4,0(r2)
 8012b2c:	01420074 	movhi	r5,2049
 8012b30:	2949e804 	addi	r5,r5,10144
 8012b34:	80133f01 	jmpi	80133f0 <_fwalk>

08012b38 <_malloc_trim_r>:
 8012b38:	defffb04 	addi	sp,sp,-20
 8012b3c:	dcc00315 	stw	r19,12(sp)
 8012b40:	04c200b4 	movhi	r19,2050
 8012b44:	dc800215 	stw	r18,8(sp)
 8012b48:	dc400115 	stw	r17,4(sp)
 8012b4c:	dc000015 	stw	r16,0(sp)
 8012b50:	dfc00415 	stw	ra,16(sp)
 8012b54:	2821883a 	mov	r16,r5
 8012b58:	9cde2a04 	addi	r19,r19,30888
 8012b5c:	2025883a 	mov	r18,r4
 8012b60:	8019b100 	call	8019b10 <__malloc_lock>
 8012b64:	98800217 	ldw	r2,8(r19)
 8012b68:	14400117 	ldw	r17,4(r2)
 8012b6c:	00bfff04 	movi	r2,-4
 8012b70:	88a2703a 	and	r17,r17,r2
 8012b74:	8c21c83a 	sub	r16,r17,r16
 8012b78:	8403fbc4 	addi	r16,r16,4079
 8012b7c:	8020d33a 	srli	r16,r16,12
 8012b80:	0083ffc4 	movi	r2,4095
 8012b84:	843fffc4 	addi	r16,r16,-1
 8012b88:	8020933a 	slli	r16,r16,12
 8012b8c:	1400060e 	bge	r2,r16,8012ba8 <_malloc_trim_r+0x70>
 8012b90:	9009883a 	mov	r4,r18
 8012b94:	000b883a 	mov	r5,zero
 8012b98:	800c8b00 	call	800c8b0 <_sbrk_r>
 8012b9c:	98c00217 	ldw	r3,8(r19)
 8012ba0:	1c47883a 	add	r3,r3,r17
 8012ba4:	10c00a26 	beq	r2,r3,8012bd0 <_malloc_trim_r+0x98>
 8012ba8:	9009883a 	mov	r4,r18
 8012bac:	8019b300 	call	8019b30 <__malloc_unlock>
 8012bb0:	0005883a 	mov	r2,zero
 8012bb4:	dfc00417 	ldw	ra,16(sp)
 8012bb8:	dcc00317 	ldw	r19,12(sp)
 8012bbc:	dc800217 	ldw	r18,8(sp)
 8012bc0:	dc400117 	ldw	r17,4(sp)
 8012bc4:	dc000017 	ldw	r16,0(sp)
 8012bc8:	dec00504 	addi	sp,sp,20
 8012bcc:	f800283a 	ret
 8012bd0:	9009883a 	mov	r4,r18
 8012bd4:	040bc83a 	sub	r5,zero,r16
 8012bd8:	800c8b00 	call	800c8b0 <_sbrk_r>
 8012bdc:	00ffffc4 	movi	r3,-1
 8012be0:	10c00d26 	beq	r2,r3,8012c18 <_malloc_trim_r+0xe0>
 8012be4:	00c200f4 	movhi	r3,2051
 8012be8:	18eb0404 	addi	r3,r3,-21488
 8012bec:	18800017 	ldw	r2,0(r3)
 8012bf0:	99000217 	ldw	r4,8(r19)
 8012bf4:	8c23c83a 	sub	r17,r17,r16
 8012bf8:	8c400054 	ori	r17,r17,1
 8012bfc:	1421c83a 	sub	r16,r2,r16
 8012c00:	24400115 	stw	r17,4(r4)
 8012c04:	9009883a 	mov	r4,r18
 8012c08:	1c000015 	stw	r16,0(r3)
 8012c0c:	8019b300 	call	8019b30 <__malloc_unlock>
 8012c10:	00800044 	movi	r2,1
 8012c14:	003fe706 	br	8012bb4 <__alt_data_end+0xfc012bb4>
 8012c18:	9009883a 	mov	r4,r18
 8012c1c:	000b883a 	mov	r5,zero
 8012c20:	800c8b00 	call	800c8b0 <_sbrk_r>
 8012c24:	99000217 	ldw	r4,8(r19)
 8012c28:	014003c4 	movi	r5,15
 8012c2c:	1107c83a 	sub	r3,r2,r4
 8012c30:	28ffdd0e 	bge	r5,r3,8012ba8 <__alt_data_end+0xfc012ba8>
 8012c34:	014200f4 	movhi	r5,2051
 8012c38:	2963ed04 	addi	r5,r5,-28748
 8012c3c:	29400017 	ldw	r5,0(r5)
 8012c40:	18c00054 	ori	r3,r3,1
 8012c44:	20c00115 	stw	r3,4(r4)
 8012c48:	00c200f4 	movhi	r3,2051
 8012c4c:	1145c83a 	sub	r2,r2,r5
 8012c50:	18eb0404 	addi	r3,r3,-21488
 8012c54:	18800015 	stw	r2,0(r3)
 8012c58:	003fd306 	br	8012ba8 <__alt_data_end+0xfc012ba8>

08012c5c <_free_r>:
 8012c5c:	28004c26 	beq	r5,zero,8012d90 <_free_r+0x134>
 8012c60:	defffd04 	addi	sp,sp,-12
 8012c64:	dc400115 	stw	r17,4(sp)
 8012c68:	dc000015 	stw	r16,0(sp)
 8012c6c:	2023883a 	mov	r17,r4
 8012c70:	2821883a 	mov	r16,r5
 8012c74:	dfc00215 	stw	ra,8(sp)
 8012c78:	8019b100 	call	8019b10 <__malloc_lock>
 8012c7c:	813fff17 	ldw	r4,-4(r16)
 8012c80:	00bfff84 	movi	r2,-2
 8012c84:	024200b4 	movhi	r9,2050
 8012c88:	81bffe04 	addi	r6,r16,-8
 8012c8c:	2084703a 	and	r2,r4,r2
 8012c90:	4a5e2a04 	addi	r9,r9,30888
 8012c94:	308b883a 	add	r5,r6,r2
 8012c98:	2a000117 	ldw	r8,4(r5)
 8012c9c:	49c00217 	ldw	r7,8(r9)
 8012ca0:	00ffff04 	movi	r3,-4
 8012ca4:	40c6703a 	and	r3,r8,r3
 8012ca8:	39405326 	beq	r7,r5,8012df8 <_free_r+0x19c>
 8012cac:	28c00115 	stw	r3,4(r5)
 8012cb0:	2100004c 	andi	r4,r4,1
 8012cb4:	2000091e 	bne	r4,zero,8012cdc <_free_r+0x80>
 8012cb8:	81fffe17 	ldw	r7,-8(r16)
 8012cbc:	4a000204 	addi	r8,r9,8
 8012cc0:	31cdc83a 	sub	r6,r6,r7
 8012cc4:	31000217 	ldw	r4,8(r6)
 8012cc8:	11c5883a 	add	r2,r2,r7
 8012ccc:	22006126 	beq	r4,r8,8012e54 <_free_r+0x1f8>
 8012cd0:	31c00317 	ldw	r7,12(r6)
 8012cd4:	21c00315 	stw	r7,12(r4)
 8012cd8:	39000215 	stw	r4,8(r7)
 8012cdc:	28c9883a 	add	r4,r5,r3
 8012ce0:	21c00117 	ldw	r7,4(r4)
 8012ce4:	39c0004c 	andi	r7,r7,1
 8012ce8:	38000d1e 	bne	r7,zero,8012d20 <_free_r+0xc4>
 8012cec:	29000217 	ldw	r4,8(r5)
 8012cf0:	10c5883a 	add	r2,r2,r3
 8012cf4:	00c200b4 	movhi	r3,2050
 8012cf8:	18de2c04 	addi	r3,r3,30896
 8012cfc:	20c07526 	beq	r4,r3,8012ed4 <_free_r+0x278>
 8012d00:	29c00317 	ldw	r7,12(r5)
 8012d04:	11400054 	ori	r5,r2,1
 8012d08:	3087883a 	add	r3,r6,r2
 8012d0c:	21c00315 	stw	r7,12(r4)
 8012d10:	39000215 	stw	r4,8(r7)
 8012d14:	31400115 	stw	r5,4(r6)
 8012d18:	18800015 	stw	r2,0(r3)
 8012d1c:	00000406 	br	8012d30 <_free_r+0xd4>
 8012d20:	10c00054 	ori	r3,r2,1
 8012d24:	30c00115 	stw	r3,4(r6)
 8012d28:	3087883a 	add	r3,r6,r2
 8012d2c:	18800015 	stw	r2,0(r3)
 8012d30:	00c07fc4 	movi	r3,511
 8012d34:	18801736 	bltu	r3,r2,8012d94 <_free_r+0x138>
 8012d38:	1004d0fa 	srli	r2,r2,3
 8012d3c:	01400044 	movi	r5,1
 8012d40:	49000117 	ldw	r4,4(r9)
 8012d44:	1087883a 	add	r3,r2,r2
 8012d48:	18c7883a 	add	r3,r3,r3
 8012d4c:	1005d0ba 	srai	r2,r2,2
 8012d50:	18c7883a 	add	r3,r3,r3
 8012d54:	1a47883a 	add	r3,r3,r9
 8012d58:	19c00217 	ldw	r7,8(r3)
 8012d5c:	2884983a 	sll	r2,r5,r2
 8012d60:	30c00315 	stw	r3,12(r6)
 8012d64:	31c00215 	stw	r7,8(r6)
 8012d68:	1104b03a 	or	r2,r2,r4
 8012d6c:	19800215 	stw	r6,8(r3)
 8012d70:	48800115 	stw	r2,4(r9)
 8012d74:	39800315 	stw	r6,12(r7)
 8012d78:	8809883a 	mov	r4,r17
 8012d7c:	dfc00217 	ldw	ra,8(sp)
 8012d80:	dc400117 	ldw	r17,4(sp)
 8012d84:	dc000017 	ldw	r16,0(sp)
 8012d88:	dec00304 	addi	sp,sp,12
 8012d8c:	8019b301 	jmpi	8019b30 <__malloc_unlock>
 8012d90:	f800283a 	ret
 8012d94:	1006d27a 	srli	r3,r2,9
 8012d98:	01000104 	movi	r4,4
 8012d9c:	20c04036 	bltu	r4,r3,8012ea0 <_free_r+0x244>
 8012da0:	1006d1ba 	srli	r3,r2,6
 8012da4:	19400e04 	addi	r5,r3,56
 8012da8:	2947883a 	add	r3,r5,r5
 8012dac:	18c7883a 	add	r3,r3,r3
 8012db0:	18c7883a 	add	r3,r3,r3
 8012db4:	1a49883a 	add	r4,r3,r9
 8012db8:	20c00217 	ldw	r3,8(r4)
 8012dbc:	01c200b4 	movhi	r7,2050
 8012dc0:	39de2a04 	addi	r7,r7,30888
 8012dc4:	19003b26 	beq	r3,r4,8012eb4 <_free_r+0x258>
 8012dc8:	01ffff04 	movi	r7,-4
 8012dcc:	19400117 	ldw	r5,4(r3)
 8012dd0:	29ca703a 	and	r5,r5,r7
 8012dd4:	1140022e 	bgeu	r2,r5,8012de0 <_free_r+0x184>
 8012dd8:	18c00217 	ldw	r3,8(r3)
 8012ddc:	20fffb1e 	bne	r4,r3,8012dcc <__alt_data_end+0xfc012dcc>
 8012de0:	18800317 	ldw	r2,12(r3)
 8012de4:	30800315 	stw	r2,12(r6)
 8012de8:	30c00215 	stw	r3,8(r6)
 8012dec:	11800215 	stw	r6,8(r2)
 8012df0:	19800315 	stw	r6,12(r3)
 8012df4:	003fe006 	br	8012d78 <__alt_data_end+0xfc012d78>
 8012df8:	2100004c 	andi	r4,r4,1
 8012dfc:	1885883a 	add	r2,r3,r2
 8012e00:	2000071e 	bne	r4,zero,8012e20 <_free_r+0x1c4>
 8012e04:	817ffe17 	ldw	r5,-8(r16)
 8012e08:	314dc83a 	sub	r6,r6,r5
 8012e0c:	30c00317 	ldw	r3,12(r6)
 8012e10:	31000217 	ldw	r4,8(r6)
 8012e14:	1145883a 	add	r2,r2,r5
 8012e18:	20c00315 	stw	r3,12(r4)
 8012e1c:	19000215 	stw	r4,8(r3)
 8012e20:	10c00054 	ori	r3,r2,1
 8012e24:	30c00115 	stw	r3,4(r6)
 8012e28:	00c200f4 	movhi	r3,2051
 8012e2c:	18e3ee04 	addi	r3,r3,-28744
 8012e30:	18c00017 	ldw	r3,0(r3)
 8012e34:	49800215 	stw	r6,8(r9)
 8012e38:	10ffcf36 	bltu	r2,r3,8012d78 <__alt_data_end+0xfc012d78>
 8012e3c:	008200f4 	movhi	r2,2051
 8012e40:	10aaf904 	addi	r2,r2,-21532
 8012e44:	11400017 	ldw	r5,0(r2)
 8012e48:	8809883a 	mov	r4,r17
 8012e4c:	8012b380 	call	8012b38 <_malloc_trim_r>
 8012e50:	003fc906 	br	8012d78 <__alt_data_end+0xfc012d78>
 8012e54:	28c9883a 	add	r4,r5,r3
 8012e58:	21000117 	ldw	r4,4(r4)
 8012e5c:	2100004c 	andi	r4,r4,1
 8012e60:	20000a1e 	bne	r4,zero,8012e8c <_free_r+0x230>
 8012e64:	29000317 	ldw	r4,12(r5)
 8012e68:	29400217 	ldw	r5,8(r5)
 8012e6c:	10c5883a 	add	r2,r2,r3
 8012e70:	10c00054 	ori	r3,r2,1
 8012e74:	29000315 	stw	r4,12(r5)
 8012e78:	21400215 	stw	r5,8(r4)
 8012e7c:	30c00115 	stw	r3,4(r6)
 8012e80:	308d883a 	add	r6,r6,r2
 8012e84:	30800015 	stw	r2,0(r6)
 8012e88:	003fbb06 	br	8012d78 <__alt_data_end+0xfc012d78>
 8012e8c:	10c00054 	ori	r3,r2,1
 8012e90:	30c00115 	stw	r3,4(r6)
 8012e94:	308d883a 	add	r6,r6,r2
 8012e98:	30800015 	stw	r2,0(r6)
 8012e9c:	003fb606 	br	8012d78 <__alt_data_end+0xfc012d78>
 8012ea0:	01000504 	movi	r4,20
 8012ea4:	20c01436 	bltu	r4,r3,8012ef8 <_free_r+0x29c>
 8012ea8:	194016c4 	addi	r5,r3,91
 8012eac:	2947883a 	add	r3,r5,r5
 8012eb0:	003fbe06 	br	8012dac <__alt_data_end+0xfc012dac>
 8012eb4:	280bd0ba 	srai	r5,r5,2
 8012eb8:	00800044 	movi	r2,1
 8012ebc:	39000117 	ldw	r4,4(r7)
 8012ec0:	114a983a 	sll	r5,r2,r5
 8012ec4:	1805883a 	mov	r2,r3
 8012ec8:	2908b03a 	or	r4,r5,r4
 8012ecc:	39000115 	stw	r4,4(r7)
 8012ed0:	003fc406 	br	8012de4 <__alt_data_end+0xfc012de4>
 8012ed4:	49800515 	stw	r6,20(r9)
 8012ed8:	49800415 	stw	r6,16(r9)
 8012edc:	10c00054 	ori	r3,r2,1
 8012ee0:	31000315 	stw	r4,12(r6)
 8012ee4:	31000215 	stw	r4,8(r6)
 8012ee8:	30c00115 	stw	r3,4(r6)
 8012eec:	308d883a 	add	r6,r6,r2
 8012ef0:	30800015 	stw	r2,0(r6)
 8012ef4:	003fa006 	br	8012d78 <__alt_data_end+0xfc012d78>
 8012ef8:	01001504 	movi	r4,84
 8012efc:	20c00436 	bltu	r4,r3,8012f10 <_free_r+0x2b4>
 8012f00:	1006d33a 	srli	r3,r2,12
 8012f04:	19401b84 	addi	r5,r3,110
 8012f08:	2947883a 	add	r3,r5,r5
 8012f0c:	003fa706 	br	8012dac <__alt_data_end+0xfc012dac>
 8012f10:	01005504 	movi	r4,340
 8012f14:	20c00436 	bltu	r4,r3,8012f28 <_free_r+0x2cc>
 8012f18:	1006d3fa 	srli	r3,r2,15
 8012f1c:	19401dc4 	addi	r5,r3,119
 8012f20:	2947883a 	add	r3,r5,r5
 8012f24:	003fa106 	br	8012dac <__alt_data_end+0xfc012dac>
 8012f28:	01015504 	movi	r4,1364
 8012f2c:	20c00436 	bltu	r4,r3,8012f40 <_free_r+0x2e4>
 8012f30:	1006d4ba 	srli	r3,r2,18
 8012f34:	19401f04 	addi	r5,r3,124
 8012f38:	2947883a 	add	r3,r5,r5
 8012f3c:	003f9b06 	br	8012dac <__alt_data_end+0xfc012dac>
 8012f40:	00c03f04 	movi	r3,252
 8012f44:	01401f84 	movi	r5,126
 8012f48:	003f9806 	br	8012dac <__alt_data_end+0xfc012dac>

08012f4c <__sfvwrite_r>:
 8012f4c:	30800217 	ldw	r2,8(r6)
 8012f50:	10004526 	beq	r2,zero,8013068 <__sfvwrite_r+0x11c>
 8012f54:	28c0030b 	ldhu	r3,12(r5)
 8012f58:	defff404 	addi	sp,sp,-48
 8012f5c:	dd400715 	stw	r21,28(sp)
 8012f60:	dcc00515 	stw	r19,20(sp)
 8012f64:	dc000215 	stw	r16,8(sp)
 8012f68:	dfc00b15 	stw	ra,44(sp)
 8012f6c:	df000a15 	stw	fp,40(sp)
 8012f70:	ddc00915 	stw	r23,36(sp)
 8012f74:	dd800815 	stw	r22,32(sp)
 8012f78:	dd000615 	stw	r20,24(sp)
 8012f7c:	dc800415 	stw	r18,16(sp)
 8012f80:	dc400315 	stw	r17,12(sp)
 8012f84:	1880020c 	andi	r2,r3,8
 8012f88:	2821883a 	mov	r16,r5
 8012f8c:	202b883a 	mov	r21,r4
 8012f90:	3027883a 	mov	r19,r6
 8012f94:	10002526 	beq	r2,zero,801302c <__sfvwrite_r+0xe0>
 8012f98:	28800417 	ldw	r2,16(r5)
 8012f9c:	10002326 	beq	r2,zero,801302c <__sfvwrite_r+0xe0>
 8012fa0:	1880008c 	andi	r2,r3,2
 8012fa4:	9c400017 	ldw	r17,0(r19)
 8012fa8:	10003126 	beq	r2,zero,8013070 <__sfvwrite_r+0x124>
 8012fac:	0029883a 	mov	r20,zero
 8012fb0:	0025883a 	mov	r18,zero
 8012fb4:	05810004 	movi	r22,1024
 8012fb8:	a00d883a 	mov	r6,r20
 8012fbc:	a809883a 	mov	r4,r21
 8012fc0:	90002526 	beq	r18,zero,8013058 <__sfvwrite_r+0x10c>
 8012fc4:	900f883a 	mov	r7,r18
 8012fc8:	81400717 	ldw	r5,28(r16)
 8012fcc:	b480012e 	bgeu	r22,r18,8012fd4 <__sfvwrite_r+0x88>
 8012fd0:	01c10004 	movi	r7,1024
 8012fd4:	80800917 	ldw	r2,36(r16)
 8012fd8:	103ee83a 	callr	r2
 8012fdc:	0080510e 	bge	zero,r2,8013124 <__sfvwrite_r+0x1d8>
 8012fe0:	98c00217 	ldw	r3,8(r19)
 8012fe4:	a0a9883a 	add	r20,r20,r2
 8012fe8:	90a5c83a 	sub	r18,r18,r2
 8012fec:	1885c83a 	sub	r2,r3,r2
 8012ff0:	98800215 	stw	r2,8(r19)
 8012ff4:	103ff01e 	bne	r2,zero,8012fb8 <__alt_data_end+0xfc012fb8>
 8012ff8:	0005883a 	mov	r2,zero
 8012ffc:	dfc00b17 	ldw	ra,44(sp)
 8013000:	df000a17 	ldw	fp,40(sp)
 8013004:	ddc00917 	ldw	r23,36(sp)
 8013008:	dd800817 	ldw	r22,32(sp)
 801300c:	dd400717 	ldw	r21,28(sp)
 8013010:	dd000617 	ldw	r20,24(sp)
 8013014:	dcc00517 	ldw	r19,20(sp)
 8013018:	dc800417 	ldw	r18,16(sp)
 801301c:	dc400317 	ldw	r17,12(sp)
 8013020:	dc000217 	ldw	r16,8(sp)
 8013024:	dec00c04 	addi	sp,sp,48
 8013028:	f800283a 	ret
 801302c:	a809883a 	mov	r4,r21
 8013030:	800b883a 	mov	r5,r16
 8013034:	8010ad00 	call	8010ad0 <__swsetup_r>
 8013038:	80c0030b 	ldhu	r3,12(r16)
 801303c:	103fd826 	beq	r2,zero,8012fa0 <__alt_data_end+0xfc012fa0>
 8013040:	18c01014 	ori	r3,r3,64
 8013044:	80c0030d 	sth	r3,12(r16)
 8013048:	00c00244 	movi	r3,9
 801304c:	00bfffc4 	movi	r2,-1
 8013050:	a8c00015 	stw	r3,0(r21)
 8013054:	003fe906 	br	8012ffc <__alt_data_end+0xfc012ffc>
 8013058:	8d000017 	ldw	r20,0(r17)
 801305c:	8c800117 	ldw	r18,4(r17)
 8013060:	8c400204 	addi	r17,r17,8
 8013064:	003fd406 	br	8012fb8 <__alt_data_end+0xfc012fb8>
 8013068:	0005883a 	mov	r2,zero
 801306c:	f800283a 	ret
 8013070:	1880004c 	andi	r2,r3,1
 8013074:	1000301e 	bne	r2,zero,8013138 <__sfvwrite_r+0x1ec>
 8013078:	002f883a 	mov	r23,zero
 801307c:	0025883a 	mov	r18,zero
 8013080:	90001c26 	beq	r18,zero,80130f4 <__sfvwrite_r+0x1a8>
 8013084:	1880800c 	andi	r2,r3,512
 8013088:	85000217 	ldw	r20,8(r16)
 801308c:	10006c26 	beq	r2,zero,8013240 <__sfvwrite_r+0x2f4>
 8013090:	a02d883a 	mov	r22,r20
 8013094:	95008536 	bltu	r18,r20,80132ac <__sfvwrite_r+0x360>
 8013098:	1881200c 	andi	r2,r3,1152
 801309c:	10009d1e 	bne	r2,zero,8013314 <__sfvwrite_r+0x3c8>
 80130a0:	81000017 	ldw	r4,0(r16)
 80130a4:	a039883a 	mov	fp,r20
 80130a8:	9029883a 	mov	r20,r18
 80130ac:	b80b883a 	mov	r5,r23
 80130b0:	b00d883a 	mov	r6,r22
 80130b4:	80138e00 	call	80138e0 <memmove>
 80130b8:	80c00217 	ldw	r3,8(r16)
 80130bc:	81000017 	ldw	r4,0(r16)
 80130c0:	9005883a 	mov	r2,r18
 80130c4:	1f39c83a 	sub	fp,r3,fp
 80130c8:	258f883a 	add	r7,r4,r22
 80130cc:	87000215 	stw	fp,8(r16)
 80130d0:	81c00015 	stw	r7,0(r16)
 80130d4:	98c00217 	ldw	r3,8(r19)
 80130d8:	b8af883a 	add	r23,r23,r2
 80130dc:	90a5c83a 	sub	r18,r18,r2
 80130e0:	1d05c83a 	sub	r2,r3,r20
 80130e4:	98800215 	stw	r2,8(r19)
 80130e8:	103fc326 	beq	r2,zero,8012ff8 <__alt_data_end+0xfc012ff8>
 80130ec:	80c0030b 	ldhu	r3,12(r16)
 80130f0:	903fe41e 	bne	r18,zero,8013084 <__alt_data_end+0xfc013084>
 80130f4:	8dc00017 	ldw	r23,0(r17)
 80130f8:	8c800117 	ldw	r18,4(r17)
 80130fc:	8c400204 	addi	r17,r17,8
 8013100:	003fdf06 	br	8013080 <__alt_data_end+0xfc013080>
 8013104:	8014b300 	call	8014b30 <_realloc_r>
 8013108:	102d883a 	mov	r22,r2
 801310c:	1000a01e 	bne	r2,zero,8013390 <__sfvwrite_r+0x444>
 8013110:	81400417 	ldw	r5,16(r16)
 8013114:	a809883a 	mov	r4,r21
 8013118:	8012c5c0 	call	8012c5c <_free_r>
 801311c:	00800304 	movi	r2,12
 8013120:	a8800015 	stw	r2,0(r21)
 8013124:	80c0030b 	ldhu	r3,12(r16)
 8013128:	00bfffc4 	movi	r2,-1
 801312c:	18c01014 	ori	r3,r3,64
 8013130:	80c0030d 	sth	r3,12(r16)
 8013134:	003fb106 	br	8012ffc <__alt_data_end+0xfc012ffc>
 8013138:	0029883a 	mov	r20,zero
 801313c:	0011883a 	mov	r8,zero
 8013140:	0039883a 	mov	fp,zero
 8013144:	0025883a 	mov	r18,zero
 8013148:	90001f26 	beq	r18,zero,80131c8 <__sfvwrite_r+0x27c>
 801314c:	40006826 	beq	r8,zero,80132f0 <__sfvwrite_r+0x3a4>
 8013150:	a02f883a 	mov	r23,r20
 8013154:	9500012e 	bgeu	r18,r20,801315c <__sfvwrite_r+0x210>
 8013158:	902f883a 	mov	r23,r18
 801315c:	81000017 	ldw	r4,0(r16)
 8013160:	80800417 	ldw	r2,16(r16)
 8013164:	b82d883a 	mov	r22,r23
 8013168:	81800217 	ldw	r6,8(r16)
 801316c:	81c00517 	ldw	r7,20(r16)
 8013170:	1100022e 	bgeu	r2,r4,801317c <__sfvwrite_r+0x230>
 8013174:	31c7883a 	add	r3,r6,r7
 8013178:	1dc01816 	blt	r3,r23,80131dc <__sfvwrite_r+0x290>
 801317c:	b9c03f16 	blt	r23,r7,801327c <__sfvwrite_r+0x330>
 8013180:	80800917 	ldw	r2,36(r16)
 8013184:	81400717 	ldw	r5,28(r16)
 8013188:	a809883a 	mov	r4,r21
 801318c:	da000115 	stw	r8,4(sp)
 8013190:	e00d883a 	mov	r6,fp
 8013194:	103ee83a 	callr	r2
 8013198:	102d883a 	mov	r22,r2
 801319c:	da000117 	ldw	r8,4(sp)
 80131a0:	00bfe00e 	bge	zero,r2,8013124 <__alt_data_end+0xfc013124>
 80131a4:	a5a9c83a 	sub	r20,r20,r22
 80131a8:	a0001f26 	beq	r20,zero,8013228 <__sfvwrite_r+0x2dc>
 80131ac:	98800217 	ldw	r2,8(r19)
 80131b0:	e5b9883a 	add	fp,fp,r22
 80131b4:	95a5c83a 	sub	r18,r18,r22
 80131b8:	15adc83a 	sub	r22,r2,r22
 80131bc:	9d800215 	stw	r22,8(r19)
 80131c0:	b03f8d26 	beq	r22,zero,8012ff8 <__alt_data_end+0xfc012ff8>
 80131c4:	903fe11e 	bne	r18,zero,801314c <__alt_data_end+0xfc01314c>
 80131c8:	8f000017 	ldw	fp,0(r17)
 80131cc:	8c800117 	ldw	r18,4(r17)
 80131d0:	0011883a 	mov	r8,zero
 80131d4:	8c400204 	addi	r17,r17,8
 80131d8:	003fdb06 	br	8013148 <__alt_data_end+0xfc013148>
 80131dc:	180d883a 	mov	r6,r3
 80131e0:	e00b883a 	mov	r5,fp
 80131e4:	da000115 	stw	r8,4(sp)
 80131e8:	d8c00015 	stw	r3,0(sp)
 80131ec:	80138e00 	call	80138e0 <memmove>
 80131f0:	d8c00017 	ldw	r3,0(sp)
 80131f4:	80800017 	ldw	r2,0(r16)
 80131f8:	a809883a 	mov	r4,r21
 80131fc:	800b883a 	mov	r5,r16
 8013200:	10c5883a 	add	r2,r2,r3
 8013204:	80800015 	stw	r2,0(r16)
 8013208:	d8c00015 	stw	r3,0(sp)
 801320c:	80125400 	call	8012540 <_fflush_r>
 8013210:	d8c00017 	ldw	r3,0(sp)
 8013214:	da000117 	ldw	r8,4(sp)
 8013218:	103fc21e 	bne	r2,zero,8013124 <__alt_data_end+0xfc013124>
 801321c:	182d883a 	mov	r22,r3
 8013220:	a5a9c83a 	sub	r20,r20,r22
 8013224:	a03fe11e 	bne	r20,zero,80131ac <__alt_data_end+0xfc0131ac>
 8013228:	a809883a 	mov	r4,r21
 801322c:	800b883a 	mov	r5,r16
 8013230:	80125400 	call	8012540 <_fflush_r>
 8013234:	103fbb1e 	bne	r2,zero,8013124 <__alt_data_end+0xfc013124>
 8013238:	0011883a 	mov	r8,zero
 801323c:	003fdb06 	br	80131ac <__alt_data_end+0xfc0131ac>
 8013240:	81000017 	ldw	r4,0(r16)
 8013244:	80800417 	ldw	r2,16(r16)
 8013248:	1100012e 	bgeu	r2,r4,8013250 <__sfvwrite_r+0x304>
 801324c:	a4805a36 	bltu	r20,r18,80133b8 <__sfvwrite_r+0x46c>
 8013250:	81c00517 	ldw	r7,20(r16)
 8013254:	91c01a36 	bltu	r18,r7,80132c0 <__sfvwrite_r+0x374>
 8013258:	80800917 	ldw	r2,36(r16)
 801325c:	81400717 	ldw	r5,28(r16)
 8013260:	a809883a 	mov	r4,r21
 8013264:	b80d883a 	mov	r6,r23
 8013268:	103ee83a 	callr	r2
 801326c:	1029883a 	mov	r20,r2
 8013270:	00bfac0e 	bge	zero,r2,8013124 <__alt_data_end+0xfc013124>
 8013274:	a005883a 	mov	r2,r20
 8013278:	003f9606 	br	80130d4 <__alt_data_end+0xfc0130d4>
 801327c:	b80d883a 	mov	r6,r23
 8013280:	e00b883a 	mov	r5,fp
 8013284:	da000115 	stw	r8,4(sp)
 8013288:	80138e00 	call	80138e0 <memmove>
 801328c:	80800217 	ldw	r2,8(r16)
 8013290:	80c00017 	ldw	r3,0(r16)
 8013294:	da000117 	ldw	r8,4(sp)
 8013298:	15c5c83a 	sub	r2,r2,r23
 801329c:	1def883a 	add	r23,r3,r23
 80132a0:	80800215 	stw	r2,8(r16)
 80132a4:	85c00015 	stw	r23,0(r16)
 80132a8:	003fbe06 	br	80131a4 <__alt_data_end+0xfc0131a4>
 80132ac:	81000017 	ldw	r4,0(r16)
 80132b0:	9039883a 	mov	fp,r18
 80132b4:	9029883a 	mov	r20,r18
 80132b8:	902d883a 	mov	r22,r18
 80132bc:	003f7b06 	br	80130ac <__alt_data_end+0xfc0130ac>
 80132c0:	b80b883a 	mov	r5,r23
 80132c4:	900d883a 	mov	r6,r18
 80132c8:	80138e00 	call	80138e0 <memmove>
 80132cc:	80c00217 	ldw	r3,8(r16)
 80132d0:	80800017 	ldw	r2,0(r16)
 80132d4:	9029883a 	mov	r20,r18
 80132d8:	1c87c83a 	sub	r3,r3,r18
 80132dc:	1485883a 	add	r2,r2,r18
 80132e0:	80800015 	stw	r2,0(r16)
 80132e4:	80c00215 	stw	r3,8(r16)
 80132e8:	9005883a 	mov	r2,r18
 80132ec:	003f7906 	br	80130d4 <__alt_data_end+0xfc0130d4>
 80132f0:	e009883a 	mov	r4,fp
 80132f4:	01400284 	movi	r5,10
 80132f8:	900d883a 	mov	r6,r18
 80132fc:	80137f80 	call	80137f8 <memchr>
 8013300:	10003826 	beq	r2,zero,80133e4 <__sfvwrite_r+0x498>
 8013304:	10800044 	addi	r2,r2,1
 8013308:	1729c83a 	sub	r20,r2,fp
 801330c:	02000044 	movi	r8,1
 8013310:	003f8f06 	br	8013150 <__alt_data_end+0xfc013150>
 8013314:	80800517 	ldw	r2,20(r16)
 8013318:	81400417 	ldw	r5,16(r16)
 801331c:	87000017 	ldw	fp,0(r16)
 8013320:	10a9883a 	add	r20,r2,r2
 8013324:	a085883a 	add	r2,r20,r2
 8013328:	1028d7fa 	srli	r20,r2,31
 801332c:	e179c83a 	sub	fp,fp,r5
 8013330:	e1000044 	addi	r4,fp,1
 8013334:	a085883a 	add	r2,r20,r2
 8013338:	1029d07a 	srai	r20,r2,1
 801333c:	2485883a 	add	r2,r4,r18
 8013340:	a00d883a 	mov	r6,r20
 8013344:	a080022e 	bgeu	r20,r2,8013350 <__sfvwrite_r+0x404>
 8013348:	1029883a 	mov	r20,r2
 801334c:	100d883a 	mov	r6,r2
 8013350:	18c1000c 	andi	r3,r3,1024
 8013354:	a809883a 	mov	r4,r21
 8013358:	183f6a26 	beq	r3,zero,8013104 <__alt_data_end+0xfc013104>
 801335c:	300b883a 	mov	r5,r6
 8013360:	800bd580 	call	800bd58 <_malloc_r>
 8013364:	102d883a 	mov	r22,r2
 8013368:	103f6c26 	beq	r2,zero,801311c <__alt_data_end+0xfc01311c>
 801336c:	81400417 	ldw	r5,16(r16)
 8013370:	1009883a 	mov	r4,r2
 8013374:	e00d883a 	mov	r6,fp
 8013378:	800c5000 	call	800c500 <memcpy>
 801337c:	8080030b 	ldhu	r2,12(r16)
 8013380:	00fedfc4 	movi	r3,-1153
 8013384:	10c4703a 	and	r2,r2,r3
 8013388:	10802014 	ori	r2,r2,128
 801338c:	8080030d 	sth	r2,12(r16)
 8013390:	b709883a 	add	r4,r22,fp
 8013394:	a707c83a 	sub	r3,r20,fp
 8013398:	85800415 	stw	r22,16(r16)
 801339c:	85000515 	stw	r20,20(r16)
 80133a0:	81000015 	stw	r4,0(r16)
 80133a4:	9039883a 	mov	fp,r18
 80133a8:	80c00215 	stw	r3,8(r16)
 80133ac:	9029883a 	mov	r20,r18
 80133b0:	902d883a 	mov	r22,r18
 80133b4:	003f3d06 	br	80130ac <__alt_data_end+0xfc0130ac>
 80133b8:	b80b883a 	mov	r5,r23
 80133bc:	a00d883a 	mov	r6,r20
 80133c0:	80138e00 	call	80138e0 <memmove>
 80133c4:	80800017 	ldw	r2,0(r16)
 80133c8:	a809883a 	mov	r4,r21
 80133cc:	800b883a 	mov	r5,r16
 80133d0:	1505883a 	add	r2,r2,r20
 80133d4:	80800015 	stw	r2,0(r16)
 80133d8:	80125400 	call	8012540 <_fflush_r>
 80133dc:	103fa526 	beq	r2,zero,8013274 <__alt_data_end+0xfc013274>
 80133e0:	003f5006 	br	8013124 <__alt_data_end+0xfc013124>
 80133e4:	95000044 	addi	r20,r18,1
 80133e8:	02000044 	movi	r8,1
 80133ec:	003f5806 	br	8013150 <__alt_data_end+0xfc013150>

080133f0 <_fwalk>:
 80133f0:	defff804 	addi	sp,sp,-32
 80133f4:	dd400515 	stw	r21,20(sp)
 80133f8:	2540b804 	addi	r21,r4,736
 80133fc:	dd800615 	stw	r22,24(sp)
 8013400:	dd000415 	stw	r20,16(sp)
 8013404:	dfc00715 	stw	ra,28(sp)
 8013408:	dcc00315 	stw	r19,12(sp)
 801340c:	dc800215 	stw	r18,8(sp)
 8013410:	dc400115 	stw	r17,4(sp)
 8013414:	dc000015 	stw	r16,0(sp)
 8013418:	2829883a 	mov	r20,r5
 801341c:	002d883a 	mov	r22,zero
 8013420:	8012af80 	call	8012af8 <__sfp_lock_acquire>
 8013424:	a8001426 	beq	r21,zero,8013478 <_fwalk+0x88>
 8013428:	04ffffc4 	movi	r19,-1
 801342c:	ac400117 	ldw	r17,4(r21)
 8013430:	ac800217 	ldw	r18,8(r21)
 8013434:	8c7fffc4 	addi	r17,r17,-1
 8013438:	88000d16 	blt	r17,zero,8013470 <_fwalk+0x80>
 801343c:	94000304 	addi	r16,r18,12
 8013440:	94800384 	addi	r18,r18,14
 8013444:	80c0000f 	ldh	r3,0(r16)
 8013448:	8c7fffc4 	addi	r17,r17,-1
 801344c:	813ffd04 	addi	r4,r16,-12
 8013450:	18000426 	beq	r3,zero,8013464 <_fwalk+0x74>
 8013454:	90c0000f 	ldh	r3,0(r18)
 8013458:	1cc00226 	beq	r3,r19,8013464 <_fwalk+0x74>
 801345c:	a03ee83a 	callr	r20
 8013460:	b0acb03a 	or	r22,r22,r2
 8013464:	84001a04 	addi	r16,r16,104
 8013468:	94801a04 	addi	r18,r18,104
 801346c:	8cfff51e 	bne	r17,r19,8013444 <__alt_data_end+0xfc013444>
 8013470:	ad400017 	ldw	r21,0(r21)
 8013474:	a83fed1e 	bne	r21,zero,801342c <__alt_data_end+0xfc01342c>
 8013478:	8012afc0 	call	8012afc <__sfp_lock_release>
 801347c:	b005883a 	mov	r2,r22
 8013480:	dfc00717 	ldw	ra,28(sp)
 8013484:	dd800617 	ldw	r22,24(sp)
 8013488:	dd400517 	ldw	r21,20(sp)
 801348c:	dd000417 	ldw	r20,16(sp)
 8013490:	dcc00317 	ldw	r19,12(sp)
 8013494:	dc800217 	ldw	r18,8(sp)
 8013498:	dc400117 	ldw	r17,4(sp)
 801349c:	dc000017 	ldw	r16,0(sp)
 80134a0:	dec00804 	addi	sp,sp,32
 80134a4:	f800283a 	ret

080134a8 <_fwalk_reent>:
 80134a8:	defff804 	addi	sp,sp,-32
 80134ac:	dd400515 	stw	r21,20(sp)
 80134b0:	2540b804 	addi	r21,r4,736
 80134b4:	dd800615 	stw	r22,24(sp)
 80134b8:	dd000415 	stw	r20,16(sp)
 80134bc:	dcc00315 	stw	r19,12(sp)
 80134c0:	dfc00715 	stw	ra,28(sp)
 80134c4:	dc800215 	stw	r18,8(sp)
 80134c8:	dc400115 	stw	r17,4(sp)
 80134cc:	dc000015 	stw	r16,0(sp)
 80134d0:	2027883a 	mov	r19,r4
 80134d4:	2829883a 	mov	r20,r5
 80134d8:	002d883a 	mov	r22,zero
 80134dc:	8012af80 	call	8012af8 <__sfp_lock_acquire>
 80134e0:	a8001326 	beq	r21,zero,8013530 <_fwalk_reent+0x88>
 80134e4:	04bfffc4 	movi	r18,-1
 80134e8:	ac400117 	ldw	r17,4(r21)
 80134ec:	ac000217 	ldw	r16,8(r21)
 80134f0:	8c7fffc4 	addi	r17,r17,-1
 80134f4:	88000c16 	blt	r17,zero,8013528 <_fwalk_reent+0x80>
 80134f8:	84000304 	addi	r16,r16,12
 80134fc:	80c0000f 	ldh	r3,0(r16)
 8013500:	8c7fffc4 	addi	r17,r17,-1
 8013504:	817ffd04 	addi	r5,r16,-12
 8013508:	18000526 	beq	r3,zero,8013520 <_fwalk_reent+0x78>
 801350c:	80c0008f 	ldh	r3,2(r16)
 8013510:	9809883a 	mov	r4,r19
 8013514:	1c800226 	beq	r3,r18,8013520 <_fwalk_reent+0x78>
 8013518:	a03ee83a 	callr	r20
 801351c:	b0acb03a 	or	r22,r22,r2
 8013520:	84001a04 	addi	r16,r16,104
 8013524:	8cbff51e 	bne	r17,r18,80134fc <__alt_data_end+0xfc0134fc>
 8013528:	ad400017 	ldw	r21,0(r21)
 801352c:	a83fee1e 	bne	r21,zero,80134e8 <__alt_data_end+0xfc0134e8>
 8013530:	8012afc0 	call	8012afc <__sfp_lock_release>
 8013534:	b005883a 	mov	r2,r22
 8013538:	dfc00717 	ldw	ra,28(sp)
 801353c:	dd800617 	ldw	r22,24(sp)
 8013540:	dd400517 	ldw	r21,20(sp)
 8013544:	dd000417 	ldw	r20,16(sp)
 8013548:	dcc00317 	ldw	r19,12(sp)
 801354c:	dc800217 	ldw	r18,8(sp)
 8013550:	dc400117 	ldw	r17,4(sp)
 8013554:	dc000017 	ldw	r16,0(sp)
 8013558:	dec00804 	addi	sp,sp,32
 801355c:	f800283a 	ret

08013560 <_setlocale_r>:
 8013560:	30001b26 	beq	r6,zero,80135d0 <_setlocale_r+0x70>
 8013564:	014200b4 	movhi	r5,2050
 8013568:	defffe04 	addi	sp,sp,-8
 801356c:	295cb204 	addi	r5,r5,29384
 8013570:	3009883a 	mov	r4,r6
 8013574:	dc000015 	stw	r16,0(sp)
 8013578:	dfc00115 	stw	ra,4(sp)
 801357c:	3021883a 	mov	r16,r6
 8013580:	800c9c80 	call	800c9c8 <strcmp>
 8013584:	1000061e 	bne	r2,zero,80135a0 <_setlocale_r+0x40>
 8013588:	008200b4 	movhi	r2,2050
 801358c:	109c8b04 	addi	r2,r2,29228
 8013590:	dfc00117 	ldw	ra,4(sp)
 8013594:	dc000017 	ldw	r16,0(sp)
 8013598:	dec00204 	addi	sp,sp,8
 801359c:	f800283a 	ret
 80135a0:	014200b4 	movhi	r5,2050
 80135a4:	295c8b04 	addi	r5,r5,29228
 80135a8:	8009883a 	mov	r4,r16
 80135ac:	800c9c80 	call	800c9c8 <strcmp>
 80135b0:	103ff526 	beq	r2,zero,8013588 <__alt_data_end+0xfc013588>
 80135b4:	014200b4 	movhi	r5,2050
 80135b8:	295c7e04 	addi	r5,r5,29176
 80135bc:	8009883a 	mov	r4,r16
 80135c0:	800c9c80 	call	800c9c8 <strcmp>
 80135c4:	103ff026 	beq	r2,zero,8013588 <__alt_data_end+0xfc013588>
 80135c8:	0005883a 	mov	r2,zero
 80135cc:	003ff006 	br	8013590 <__alt_data_end+0xfc013590>
 80135d0:	008200b4 	movhi	r2,2050
 80135d4:	109c8b04 	addi	r2,r2,29228
 80135d8:	f800283a 	ret

080135dc <__locale_charset>:
 80135dc:	008200b4 	movhi	r2,2050
 80135e0:	109f3404 	addi	r2,r2,31952
 80135e4:	f800283a 	ret

080135e8 <__locale_mb_cur_max>:
 80135e8:	008200f4 	movhi	r2,2051
 80135ec:	10a3ef04 	addi	r2,r2,-28740
 80135f0:	10800017 	ldw	r2,0(r2)
 80135f4:	f800283a 	ret

080135f8 <__locale_msgcharset>:
 80135f8:	008200b4 	movhi	r2,2050
 80135fc:	109f2c04 	addi	r2,r2,31920
 8013600:	f800283a 	ret

08013604 <__locale_cjk_lang>:
 8013604:	0005883a 	mov	r2,zero
 8013608:	f800283a 	ret

0801360c <_localeconv_r>:
 801360c:	008200b4 	movhi	r2,2050
 8013610:	109f3c04 	addi	r2,r2,31984
 8013614:	f800283a 	ret

08013618 <setlocale>:
 8013618:	00c200f4 	movhi	r3,2051
 801361c:	18e3ec04 	addi	r3,r3,-28752
 8013620:	2005883a 	mov	r2,r4
 8013624:	19000017 	ldw	r4,0(r3)
 8013628:	280d883a 	mov	r6,r5
 801362c:	100b883a 	mov	r5,r2
 8013630:	80135601 	jmpi	8013560 <_setlocale_r>

08013634 <localeconv>:
 8013634:	008200b4 	movhi	r2,2050
 8013638:	109f3c04 	addi	r2,r2,31984
 801363c:	f800283a 	ret

08013640 <__smakebuf_r>:
 8013640:	2880030b 	ldhu	r2,12(r5)
 8013644:	10c0008c 	andi	r3,r2,2
 8013648:	1800401e 	bne	r3,zero,801374c <__smakebuf_r+0x10c>
 801364c:	deffec04 	addi	sp,sp,-80
 8013650:	dc000f15 	stw	r16,60(sp)
 8013654:	2821883a 	mov	r16,r5
 8013658:	2940038f 	ldh	r5,14(r5)
 801365c:	dc401015 	stw	r17,64(sp)
 8013660:	dfc01315 	stw	ra,76(sp)
 8013664:	dcc01215 	stw	r19,72(sp)
 8013668:	dc801115 	stw	r18,68(sp)
 801366c:	2023883a 	mov	r17,r4
 8013670:	28001b16 	blt	r5,zero,80136e0 <__smakebuf_r+0xa0>
 8013674:	d80d883a 	mov	r6,sp
 8013678:	80181540 	call	8018154 <_fstat_r>
 801367c:	10001716 	blt	r2,zero,80136dc <__smakebuf_r+0x9c>
 8013680:	d8800117 	ldw	r2,4(sp)
 8013684:	00e00014 	movui	r3,32768
 8013688:	10bc000c 	andi	r2,r2,61440
 801368c:	10c03726 	beq	r2,r3,801376c <__smakebuf_r+0x12c>
 8013690:	80c0030b 	ldhu	r3,12(r16)
 8013694:	18c20014 	ori	r3,r3,2048
 8013698:	80c0030d 	sth	r3,12(r16)
 801369c:	00c80004 	movi	r3,8192
 80136a0:	10c03c1e 	bne	r2,r3,8013794 <__smakebuf_r+0x154>
 80136a4:	8140038f 	ldh	r5,14(r16)
 80136a8:	8809883a 	mov	r4,r17
 80136ac:	80181ac0 	call	80181ac <_isatty_r>
 80136b0:	10004e26 	beq	r2,zero,80137ec <__smakebuf_r+0x1ac>
 80136b4:	8080030b 	ldhu	r2,12(r16)
 80136b8:	04c00044 	movi	r19,1
 80136bc:	80c010c4 	addi	r3,r16,67
 80136c0:	14c4b03a 	or	r2,r2,r19
 80136c4:	8080030d 	sth	r2,12(r16)
 80136c8:	80c00015 	stw	r3,0(r16)
 80136cc:	80c00415 	stw	r3,16(r16)
 80136d0:	84c00515 	stw	r19,20(r16)
 80136d4:	04810004 	movi	r18,1024
 80136d8:	00000706 	br	80136f8 <__smakebuf_r+0xb8>
 80136dc:	8080030b 	ldhu	r2,12(r16)
 80136e0:	10c0200c 	andi	r3,r2,128
 80136e4:	18001f1e 	bne	r3,zero,8013764 <__smakebuf_r+0x124>
 80136e8:	04810004 	movi	r18,1024
 80136ec:	10820014 	ori	r2,r2,2048
 80136f0:	8080030d 	sth	r2,12(r16)
 80136f4:	0027883a 	mov	r19,zero
 80136f8:	8809883a 	mov	r4,r17
 80136fc:	900b883a 	mov	r5,r18
 8013700:	800bd580 	call	800bd58 <_malloc_r>
 8013704:	10002e26 	beq	r2,zero,80137c0 <__smakebuf_r+0x180>
 8013708:	80c0030b 	ldhu	r3,12(r16)
 801370c:	01020074 	movhi	r4,2049
 8013710:	2109ea04 	addi	r4,r4,10152
 8013714:	89000f15 	stw	r4,60(r17)
 8013718:	18c02014 	ori	r3,r3,128
 801371c:	80c0030d 	sth	r3,12(r16)
 8013720:	80800015 	stw	r2,0(r16)
 8013724:	80800415 	stw	r2,16(r16)
 8013728:	84800515 	stw	r18,20(r16)
 801372c:	98001c1e 	bne	r19,zero,80137a0 <__smakebuf_r+0x160>
 8013730:	dfc01317 	ldw	ra,76(sp)
 8013734:	dcc01217 	ldw	r19,72(sp)
 8013738:	dc801117 	ldw	r18,68(sp)
 801373c:	dc401017 	ldw	r17,64(sp)
 8013740:	dc000f17 	ldw	r16,60(sp)
 8013744:	dec01404 	addi	sp,sp,80
 8013748:	f800283a 	ret
 801374c:	288010c4 	addi	r2,r5,67
 8013750:	28800015 	stw	r2,0(r5)
 8013754:	28800415 	stw	r2,16(r5)
 8013758:	00800044 	movi	r2,1
 801375c:	28800515 	stw	r2,20(r5)
 8013760:	f800283a 	ret
 8013764:	04801004 	movi	r18,64
 8013768:	003fe006 	br	80136ec <__alt_data_end+0xfc0136ec>
 801376c:	81000a17 	ldw	r4,40(r16)
 8013770:	00c20074 	movhi	r3,2049
 8013774:	18d54704 	addi	r3,r3,21788
 8013778:	20ffc51e 	bne	r4,r3,8013690 <__alt_data_end+0xfc013690>
 801377c:	80c0030b 	ldhu	r3,12(r16)
 8013780:	01010004 	movi	r4,1024
 8013784:	81001315 	stw	r4,76(r16)
 8013788:	1906b03a 	or	r3,r3,r4
 801378c:	80c0030d 	sth	r3,12(r16)
 8013790:	003fc206 	br	801369c <__alt_data_end+0xfc01369c>
 8013794:	0027883a 	mov	r19,zero
 8013798:	04810004 	movi	r18,1024
 801379c:	003fd606 	br	80136f8 <__alt_data_end+0xfc0136f8>
 80137a0:	8140038f 	ldh	r5,14(r16)
 80137a4:	8809883a 	mov	r4,r17
 80137a8:	80181ac0 	call	80181ac <_isatty_r>
 80137ac:	103fe026 	beq	r2,zero,8013730 <__alt_data_end+0xfc013730>
 80137b0:	8080030b 	ldhu	r2,12(r16)
 80137b4:	10800054 	ori	r2,r2,1
 80137b8:	8080030d 	sth	r2,12(r16)
 80137bc:	003fdc06 	br	8013730 <__alt_data_end+0xfc013730>
 80137c0:	8080030b 	ldhu	r2,12(r16)
 80137c4:	10c0800c 	andi	r3,r2,512
 80137c8:	183fd91e 	bne	r3,zero,8013730 <__alt_data_end+0xfc013730>
 80137cc:	10800094 	ori	r2,r2,2
 80137d0:	80c010c4 	addi	r3,r16,67
 80137d4:	8080030d 	sth	r2,12(r16)
 80137d8:	00800044 	movi	r2,1
 80137dc:	80c00015 	stw	r3,0(r16)
 80137e0:	80c00415 	stw	r3,16(r16)
 80137e4:	80800515 	stw	r2,20(r16)
 80137e8:	003fd106 	br	8013730 <__alt_data_end+0xfc013730>
 80137ec:	04c00044 	movi	r19,1
 80137f0:	04810004 	movi	r18,1024
 80137f4:	003fc006 	br	80136f8 <__alt_data_end+0xfc0136f8>

080137f8 <memchr>:
 80137f8:	208000cc 	andi	r2,r4,3
 80137fc:	280f883a 	mov	r7,r5
 8013800:	10003526 	beq	r2,zero,80138d8 <memchr+0xe0>
 8013804:	30bfffc4 	addi	r2,r6,-1
 8013808:	30001b26 	beq	r6,zero,8013878 <memchr+0x80>
 801380c:	21800003 	ldbu	r6,0(r4)
 8013810:	28c03fcc 	andi	r3,r5,255
 8013814:	30c01a26 	beq	r6,r3,8013880 <memchr+0x88>
 8013818:	180d883a 	mov	r6,r3
 801381c:	00000406 	br	8013830 <memchr+0x38>
 8013820:	10001526 	beq	r2,zero,8013878 <memchr+0x80>
 8013824:	20c00003 	ldbu	r3,0(r4)
 8013828:	10bfffc4 	addi	r2,r2,-1
 801382c:	19801426 	beq	r3,r6,8013880 <memchr+0x88>
 8013830:	21000044 	addi	r4,r4,1
 8013834:	20c000cc 	andi	r3,r4,3
 8013838:	183ff91e 	bne	r3,zero,8013820 <__alt_data_end+0xfc013820>
 801383c:	024000c4 	movi	r9,3
 8013840:	48801136 	bltu	r9,r2,8013888 <memchr+0x90>
 8013844:	10000c26 	beq	r2,zero,8013878 <memchr+0x80>
 8013848:	20c00003 	ldbu	r3,0(r4)
 801384c:	29403fcc 	andi	r5,r5,255
 8013850:	19400b26 	beq	r3,r5,8013880 <memchr+0x88>
 8013854:	20c00044 	addi	r3,r4,1
 8013858:	2085883a 	add	r2,r4,r2
 801385c:	39803fcc 	andi	r6,r7,255
 8013860:	00000306 	br	8013870 <memchr+0x78>
 8013864:	18c00044 	addi	r3,r3,1
 8013868:	197fffc3 	ldbu	r5,-1(r3)
 801386c:	29800426 	beq	r5,r6,8013880 <memchr+0x88>
 8013870:	1809883a 	mov	r4,r3
 8013874:	18bffb1e 	bne	r3,r2,8013864 <__alt_data_end+0xfc013864>
 8013878:	0005883a 	mov	r2,zero
 801387c:	f800283a 	ret
 8013880:	2005883a 	mov	r2,r4
 8013884:	f800283a 	ret
 8013888:	28c03fcc 	andi	r3,r5,255
 801388c:	1810923a 	slli	r8,r3,8
 8013890:	02ffbff4 	movhi	r11,65279
 8013894:	02a02074 	movhi	r10,32897
 8013898:	40c6b03a 	or	r3,r8,r3
 801389c:	1810943a 	slli	r8,r3,16
 80138a0:	5affbfc4 	addi	r11,r11,-257
 80138a4:	52a02004 	addi	r10,r10,-32640
 80138a8:	40d0b03a 	or	r8,r8,r3
 80138ac:	20c00017 	ldw	r3,0(r4)
 80138b0:	40c6f03a 	xor	r3,r8,r3
 80138b4:	1acd883a 	add	r6,r3,r11
 80138b8:	00c6303a 	nor	r3,zero,r3
 80138bc:	30c6703a 	and	r3,r6,r3
 80138c0:	1a86703a 	and	r3,r3,r10
 80138c4:	183fdf1e 	bne	r3,zero,8013844 <__alt_data_end+0xfc013844>
 80138c8:	10bfff04 	addi	r2,r2,-4
 80138cc:	21000104 	addi	r4,r4,4
 80138d0:	48bff636 	bltu	r9,r2,80138ac <__alt_data_end+0xfc0138ac>
 80138d4:	003fdb06 	br	8013844 <__alt_data_end+0xfc013844>
 80138d8:	3005883a 	mov	r2,r6
 80138dc:	003fd706 	br	801383c <__alt_data_end+0xfc01383c>

080138e0 <memmove>:
 80138e0:	2005883a 	mov	r2,r4
 80138e4:	29000b2e 	bgeu	r5,r4,8013914 <memmove+0x34>
 80138e8:	298f883a 	add	r7,r5,r6
 80138ec:	21c0092e 	bgeu	r4,r7,8013914 <memmove+0x34>
 80138f0:	2187883a 	add	r3,r4,r6
 80138f4:	198bc83a 	sub	r5,r3,r6
 80138f8:	30004b26 	beq	r6,zero,8013a28 <memmove+0x148>
 80138fc:	39ffffc4 	addi	r7,r7,-1
 8013900:	39000003 	ldbu	r4,0(r7)
 8013904:	18ffffc4 	addi	r3,r3,-1
 8013908:	19000005 	stb	r4,0(r3)
 801390c:	197ffb1e 	bne	r3,r5,80138fc <__alt_data_end+0xfc0138fc>
 8013910:	f800283a 	ret
 8013914:	00c003c4 	movi	r3,15
 8013918:	1980412e 	bgeu	r3,r6,8013a20 <memmove+0x140>
 801391c:	1146b03a 	or	r3,r2,r5
 8013920:	18c000cc 	andi	r3,r3,3
 8013924:	1800411e 	bne	r3,zero,8013a2c <memmove+0x14c>
 8013928:	33fffc04 	addi	r15,r6,-16
 801392c:	781ed13a 	srli	r15,r15,4
 8013930:	28c00104 	addi	r3,r5,4
 8013934:	13400104 	addi	r13,r2,4
 8013938:	781c913a 	slli	r14,r15,4
 801393c:	2b000204 	addi	r12,r5,8
 8013940:	12c00204 	addi	r11,r2,8
 8013944:	73800504 	addi	r14,r14,20
 8013948:	2a800304 	addi	r10,r5,12
 801394c:	12400304 	addi	r9,r2,12
 8013950:	2b9d883a 	add	r14,r5,r14
 8013954:	2811883a 	mov	r8,r5
 8013958:	100f883a 	mov	r7,r2
 801395c:	41000017 	ldw	r4,0(r8)
 8013960:	39c00404 	addi	r7,r7,16
 8013964:	18c00404 	addi	r3,r3,16
 8013968:	393ffc15 	stw	r4,-16(r7)
 801396c:	193ffc17 	ldw	r4,-16(r3)
 8013970:	6b400404 	addi	r13,r13,16
 8013974:	5ac00404 	addi	r11,r11,16
 8013978:	693ffc15 	stw	r4,-16(r13)
 801397c:	61000017 	ldw	r4,0(r12)
 8013980:	4a400404 	addi	r9,r9,16
 8013984:	42000404 	addi	r8,r8,16
 8013988:	593ffc15 	stw	r4,-16(r11)
 801398c:	51000017 	ldw	r4,0(r10)
 8013990:	63000404 	addi	r12,r12,16
 8013994:	52800404 	addi	r10,r10,16
 8013998:	493ffc15 	stw	r4,-16(r9)
 801399c:	1bbfef1e 	bne	r3,r14,801395c <__alt_data_end+0xfc01395c>
 80139a0:	79000044 	addi	r4,r15,1
 80139a4:	2008913a 	slli	r4,r4,4
 80139a8:	328003cc 	andi	r10,r6,15
 80139ac:	02c000c4 	movi	r11,3
 80139b0:	1107883a 	add	r3,r2,r4
 80139b4:	290b883a 	add	r5,r5,r4
 80139b8:	5a801e2e 	bgeu	r11,r10,8013a34 <memmove+0x154>
 80139bc:	1813883a 	mov	r9,r3
 80139c0:	2811883a 	mov	r8,r5
 80139c4:	500f883a 	mov	r7,r10
 80139c8:	41000017 	ldw	r4,0(r8)
 80139cc:	4a400104 	addi	r9,r9,4
 80139d0:	39ffff04 	addi	r7,r7,-4
 80139d4:	493fff15 	stw	r4,-4(r9)
 80139d8:	42000104 	addi	r8,r8,4
 80139dc:	59fffa36 	bltu	r11,r7,80139c8 <__alt_data_end+0xfc0139c8>
 80139e0:	513fff04 	addi	r4,r10,-4
 80139e4:	2008d0ba 	srli	r4,r4,2
 80139e8:	318000cc 	andi	r6,r6,3
 80139ec:	21000044 	addi	r4,r4,1
 80139f0:	2109883a 	add	r4,r4,r4
 80139f4:	2109883a 	add	r4,r4,r4
 80139f8:	1907883a 	add	r3,r3,r4
 80139fc:	290b883a 	add	r5,r5,r4
 8013a00:	30000926 	beq	r6,zero,8013a28 <memmove+0x148>
 8013a04:	198d883a 	add	r6,r3,r6
 8013a08:	29c00003 	ldbu	r7,0(r5)
 8013a0c:	18c00044 	addi	r3,r3,1
 8013a10:	29400044 	addi	r5,r5,1
 8013a14:	19ffffc5 	stb	r7,-1(r3)
 8013a18:	19bffb1e 	bne	r3,r6,8013a08 <__alt_data_end+0xfc013a08>
 8013a1c:	f800283a 	ret
 8013a20:	1007883a 	mov	r3,r2
 8013a24:	003ff606 	br	8013a00 <__alt_data_end+0xfc013a00>
 8013a28:	f800283a 	ret
 8013a2c:	1007883a 	mov	r3,r2
 8013a30:	003ff406 	br	8013a04 <__alt_data_end+0xfc013a04>
 8013a34:	500d883a 	mov	r6,r10
 8013a38:	003ff106 	br	8013a00 <__alt_data_end+0xfc013a00>

08013a3c <_Balloc>:
 8013a3c:	20801317 	ldw	r2,76(r4)
 8013a40:	defffc04 	addi	sp,sp,-16
 8013a44:	dc400115 	stw	r17,4(sp)
 8013a48:	dc000015 	stw	r16,0(sp)
 8013a4c:	dfc00315 	stw	ra,12(sp)
 8013a50:	dc800215 	stw	r18,8(sp)
 8013a54:	2023883a 	mov	r17,r4
 8013a58:	2821883a 	mov	r16,r5
 8013a5c:	10000f26 	beq	r2,zero,8013a9c <_Balloc+0x60>
 8013a60:	8407883a 	add	r3,r16,r16
 8013a64:	18c7883a 	add	r3,r3,r3
 8013a68:	10c7883a 	add	r3,r2,r3
 8013a6c:	18800017 	ldw	r2,0(r3)
 8013a70:	10001126 	beq	r2,zero,8013ab8 <_Balloc+0x7c>
 8013a74:	11000017 	ldw	r4,0(r2)
 8013a78:	19000015 	stw	r4,0(r3)
 8013a7c:	10000415 	stw	zero,16(r2)
 8013a80:	10000315 	stw	zero,12(r2)
 8013a84:	dfc00317 	ldw	ra,12(sp)
 8013a88:	dc800217 	ldw	r18,8(sp)
 8013a8c:	dc400117 	ldw	r17,4(sp)
 8013a90:	dc000017 	ldw	r16,0(sp)
 8013a94:	dec00404 	addi	sp,sp,16
 8013a98:	f800283a 	ret
 8013a9c:	01400104 	movi	r5,4
 8013aa0:	01800844 	movi	r6,33
 8013aa4:	800bbc40 	call	800bbc4 <_calloc_r>
 8013aa8:	88801315 	stw	r2,76(r17)
 8013aac:	103fec1e 	bne	r2,zero,8013a60 <__alt_data_end+0xfc013a60>
 8013ab0:	0005883a 	mov	r2,zero
 8013ab4:	003ff306 	br	8013a84 <__alt_data_end+0xfc013a84>
 8013ab8:	01400044 	movi	r5,1
 8013abc:	2c24983a 	sll	r18,r5,r16
 8013ac0:	8809883a 	mov	r4,r17
 8013ac4:	91800144 	addi	r6,r18,5
 8013ac8:	318d883a 	add	r6,r6,r6
 8013acc:	318d883a 	add	r6,r6,r6
 8013ad0:	800bbc40 	call	800bbc4 <_calloc_r>
 8013ad4:	103ff626 	beq	r2,zero,8013ab0 <__alt_data_end+0xfc013ab0>
 8013ad8:	14000115 	stw	r16,4(r2)
 8013adc:	14800215 	stw	r18,8(r2)
 8013ae0:	003fe606 	br	8013a7c <__alt_data_end+0xfc013a7c>

08013ae4 <_Bfree>:
 8013ae4:	28000826 	beq	r5,zero,8013b08 <_Bfree+0x24>
 8013ae8:	28c00117 	ldw	r3,4(r5)
 8013aec:	20801317 	ldw	r2,76(r4)
 8013af0:	18c7883a 	add	r3,r3,r3
 8013af4:	18c7883a 	add	r3,r3,r3
 8013af8:	10c5883a 	add	r2,r2,r3
 8013afc:	10c00017 	ldw	r3,0(r2)
 8013b00:	28c00015 	stw	r3,0(r5)
 8013b04:	11400015 	stw	r5,0(r2)
 8013b08:	f800283a 	ret

08013b0c <__multadd>:
 8013b0c:	defffa04 	addi	sp,sp,-24
 8013b10:	dc000115 	stw	r16,4(sp)
 8013b14:	2c000417 	ldw	r16,16(r5)
 8013b18:	dc800315 	stw	r18,12(sp)
 8013b1c:	dc400215 	stw	r17,8(sp)
 8013b20:	dfc00515 	stw	ra,20(sp)
 8013b24:	dcc00415 	stw	r19,16(sp)
 8013b28:	2823883a 	mov	r17,r5
 8013b2c:	2025883a 	mov	r18,r4
 8013b30:	2a400504 	addi	r9,r5,20
 8013b34:	0015883a 	mov	r10,zero
 8013b38:	4a000017 	ldw	r8,0(r9)
 8013b3c:	4a400104 	addi	r9,r9,4
 8013b40:	52800044 	addi	r10,r10,1
 8013b44:	40ffffcc 	andi	r3,r8,65535
 8013b48:	1987383a 	mul	r3,r3,r6
 8013b4c:	4010d43a 	srli	r8,r8,16
 8013b50:	19cf883a 	add	r7,r3,r7
 8013b54:	4191383a 	mul	r8,r8,r6
 8013b58:	3816d43a 	srli	r11,r7,16
 8013b5c:	38ffffcc 	andi	r3,r7,65535
 8013b60:	5a0f883a 	add	r7,r11,r8
 8013b64:	3810943a 	slli	r8,r7,16
 8013b68:	380ed43a 	srli	r7,r7,16
 8013b6c:	40c7883a 	add	r3,r8,r3
 8013b70:	48ffff15 	stw	r3,-4(r9)
 8013b74:	543ff016 	blt	r10,r16,8013b38 <__alt_data_end+0xfc013b38>
 8013b78:	38000926 	beq	r7,zero,8013ba0 <__multadd+0x94>
 8013b7c:	88800217 	ldw	r2,8(r17)
 8013b80:	80800f0e 	bge	r16,r2,8013bc0 <__multadd+0xb4>
 8013b84:	80800144 	addi	r2,r16,5
 8013b88:	1085883a 	add	r2,r2,r2
 8013b8c:	1085883a 	add	r2,r2,r2
 8013b90:	8885883a 	add	r2,r17,r2
 8013b94:	11c00015 	stw	r7,0(r2)
 8013b98:	84000044 	addi	r16,r16,1
 8013b9c:	8c000415 	stw	r16,16(r17)
 8013ba0:	8805883a 	mov	r2,r17
 8013ba4:	dfc00517 	ldw	ra,20(sp)
 8013ba8:	dcc00417 	ldw	r19,16(sp)
 8013bac:	dc800317 	ldw	r18,12(sp)
 8013bb0:	dc400217 	ldw	r17,8(sp)
 8013bb4:	dc000117 	ldw	r16,4(sp)
 8013bb8:	dec00604 	addi	sp,sp,24
 8013bbc:	f800283a 	ret
 8013bc0:	89400117 	ldw	r5,4(r17)
 8013bc4:	9009883a 	mov	r4,r18
 8013bc8:	d9c00015 	stw	r7,0(sp)
 8013bcc:	29400044 	addi	r5,r5,1
 8013bd0:	8013a3c0 	call	8013a3c <_Balloc>
 8013bd4:	89800417 	ldw	r6,16(r17)
 8013bd8:	89400304 	addi	r5,r17,12
 8013bdc:	11000304 	addi	r4,r2,12
 8013be0:	31800084 	addi	r6,r6,2
 8013be4:	318d883a 	add	r6,r6,r6
 8013be8:	318d883a 	add	r6,r6,r6
 8013bec:	1027883a 	mov	r19,r2
 8013bf0:	800c5000 	call	800c500 <memcpy>
 8013bf4:	89000117 	ldw	r4,4(r17)
 8013bf8:	90c01317 	ldw	r3,76(r18)
 8013bfc:	d9c00017 	ldw	r7,0(sp)
 8013c00:	2109883a 	add	r4,r4,r4
 8013c04:	2109883a 	add	r4,r4,r4
 8013c08:	1907883a 	add	r3,r3,r4
 8013c0c:	18800017 	ldw	r2,0(r3)
 8013c10:	88800015 	stw	r2,0(r17)
 8013c14:	1c400015 	stw	r17,0(r3)
 8013c18:	9823883a 	mov	r17,r19
 8013c1c:	003fd906 	br	8013b84 <__alt_data_end+0xfc013b84>

08013c20 <__s2b>:
 8013c20:	defff904 	addi	sp,sp,-28
 8013c24:	dc400115 	stw	r17,4(sp)
 8013c28:	dc000015 	stw	r16,0(sp)
 8013c2c:	2023883a 	mov	r17,r4
 8013c30:	2821883a 	mov	r16,r5
 8013c34:	39000204 	addi	r4,r7,8
 8013c38:	01400244 	movi	r5,9
 8013c3c:	dcc00315 	stw	r19,12(sp)
 8013c40:	dc800215 	stw	r18,8(sp)
 8013c44:	dfc00615 	stw	ra,24(sp)
 8013c48:	dd400515 	stw	r21,20(sp)
 8013c4c:	dd000415 	stw	r20,16(sp)
 8013c50:	3825883a 	mov	r18,r7
 8013c54:	3027883a 	mov	r19,r6
 8013c58:	800ba700 	call	800ba70 <__divsi3>
 8013c5c:	00c00044 	movi	r3,1
 8013c60:	000b883a 	mov	r5,zero
 8013c64:	1880030e 	bge	r3,r2,8013c74 <__s2b+0x54>
 8013c68:	18c7883a 	add	r3,r3,r3
 8013c6c:	29400044 	addi	r5,r5,1
 8013c70:	18bffd16 	blt	r3,r2,8013c68 <__alt_data_end+0xfc013c68>
 8013c74:	8809883a 	mov	r4,r17
 8013c78:	8013a3c0 	call	8013a3c <_Balloc>
 8013c7c:	d8c00717 	ldw	r3,28(sp)
 8013c80:	10c00515 	stw	r3,20(r2)
 8013c84:	00c00044 	movi	r3,1
 8013c88:	10c00415 	stw	r3,16(r2)
 8013c8c:	00c00244 	movi	r3,9
 8013c90:	1cc0210e 	bge	r3,r19,8013d18 <__s2b+0xf8>
 8013c94:	80eb883a 	add	r21,r16,r3
 8013c98:	a829883a 	mov	r20,r21
 8013c9c:	84e1883a 	add	r16,r16,r19
 8013ca0:	a1c00007 	ldb	r7,0(r20)
 8013ca4:	8809883a 	mov	r4,r17
 8013ca8:	a5000044 	addi	r20,r20,1
 8013cac:	100b883a 	mov	r5,r2
 8013cb0:	01800284 	movi	r6,10
 8013cb4:	39fff404 	addi	r7,r7,-48
 8013cb8:	8013b0c0 	call	8013b0c <__multadd>
 8013cbc:	a43ff81e 	bne	r20,r16,8013ca0 <__alt_data_end+0xfc013ca0>
 8013cc0:	ace1883a 	add	r16,r21,r19
 8013cc4:	843ffe04 	addi	r16,r16,-8
 8013cc8:	9c800a0e 	bge	r19,r18,8013cf4 <__s2b+0xd4>
 8013ccc:	94e5c83a 	sub	r18,r18,r19
 8013cd0:	84a5883a 	add	r18,r16,r18
 8013cd4:	81c00007 	ldb	r7,0(r16)
 8013cd8:	8809883a 	mov	r4,r17
 8013cdc:	84000044 	addi	r16,r16,1
 8013ce0:	100b883a 	mov	r5,r2
 8013ce4:	01800284 	movi	r6,10
 8013ce8:	39fff404 	addi	r7,r7,-48
 8013cec:	8013b0c0 	call	8013b0c <__multadd>
 8013cf0:	84bff81e 	bne	r16,r18,8013cd4 <__alt_data_end+0xfc013cd4>
 8013cf4:	dfc00617 	ldw	ra,24(sp)
 8013cf8:	dd400517 	ldw	r21,20(sp)
 8013cfc:	dd000417 	ldw	r20,16(sp)
 8013d00:	dcc00317 	ldw	r19,12(sp)
 8013d04:	dc800217 	ldw	r18,8(sp)
 8013d08:	dc400117 	ldw	r17,4(sp)
 8013d0c:	dc000017 	ldw	r16,0(sp)
 8013d10:	dec00704 	addi	sp,sp,28
 8013d14:	f800283a 	ret
 8013d18:	84000284 	addi	r16,r16,10
 8013d1c:	1827883a 	mov	r19,r3
 8013d20:	003fe906 	br	8013cc8 <__alt_data_end+0xfc013cc8>

08013d24 <__hi0bits>:
 8013d24:	20bfffec 	andhi	r2,r4,65535
 8013d28:	1000141e 	bne	r2,zero,8013d7c <__hi0bits+0x58>
 8013d2c:	2008943a 	slli	r4,r4,16
 8013d30:	00800404 	movi	r2,16
 8013d34:	20ffc02c 	andhi	r3,r4,65280
 8013d38:	1800021e 	bne	r3,zero,8013d44 <__hi0bits+0x20>
 8013d3c:	2008923a 	slli	r4,r4,8
 8013d40:	10800204 	addi	r2,r2,8
 8013d44:	20fc002c 	andhi	r3,r4,61440
 8013d48:	1800021e 	bne	r3,zero,8013d54 <__hi0bits+0x30>
 8013d4c:	2008913a 	slli	r4,r4,4
 8013d50:	10800104 	addi	r2,r2,4
 8013d54:	20f0002c 	andhi	r3,r4,49152
 8013d58:	1800031e 	bne	r3,zero,8013d68 <__hi0bits+0x44>
 8013d5c:	2109883a 	add	r4,r4,r4
 8013d60:	10800084 	addi	r2,r2,2
 8013d64:	2109883a 	add	r4,r4,r4
 8013d68:	20000316 	blt	r4,zero,8013d78 <__hi0bits+0x54>
 8013d6c:	2110002c 	andhi	r4,r4,16384
 8013d70:	2000041e 	bne	r4,zero,8013d84 <__hi0bits+0x60>
 8013d74:	00800804 	movi	r2,32
 8013d78:	f800283a 	ret
 8013d7c:	0005883a 	mov	r2,zero
 8013d80:	003fec06 	br	8013d34 <__alt_data_end+0xfc013d34>
 8013d84:	10800044 	addi	r2,r2,1
 8013d88:	f800283a 	ret

08013d8c <__lo0bits>:
 8013d8c:	20c00017 	ldw	r3,0(r4)
 8013d90:	188001cc 	andi	r2,r3,7
 8013d94:	10000826 	beq	r2,zero,8013db8 <__lo0bits+0x2c>
 8013d98:	1880004c 	andi	r2,r3,1
 8013d9c:	1000211e 	bne	r2,zero,8013e24 <__lo0bits+0x98>
 8013da0:	1880008c 	andi	r2,r3,2
 8013da4:	1000211e 	bne	r2,zero,8013e2c <__lo0bits+0xa0>
 8013da8:	1806d0ba 	srli	r3,r3,2
 8013dac:	00800084 	movi	r2,2
 8013db0:	20c00015 	stw	r3,0(r4)
 8013db4:	f800283a 	ret
 8013db8:	18bfffcc 	andi	r2,r3,65535
 8013dbc:	10001326 	beq	r2,zero,8013e0c <__lo0bits+0x80>
 8013dc0:	0005883a 	mov	r2,zero
 8013dc4:	19403fcc 	andi	r5,r3,255
 8013dc8:	2800021e 	bne	r5,zero,8013dd4 <__lo0bits+0x48>
 8013dcc:	1806d23a 	srli	r3,r3,8
 8013dd0:	10800204 	addi	r2,r2,8
 8013dd4:	194003cc 	andi	r5,r3,15
 8013dd8:	2800021e 	bne	r5,zero,8013de4 <__lo0bits+0x58>
 8013ddc:	1806d13a 	srli	r3,r3,4
 8013de0:	10800104 	addi	r2,r2,4
 8013de4:	194000cc 	andi	r5,r3,3
 8013de8:	2800021e 	bne	r5,zero,8013df4 <__lo0bits+0x68>
 8013dec:	1806d0ba 	srli	r3,r3,2
 8013df0:	10800084 	addi	r2,r2,2
 8013df4:	1940004c 	andi	r5,r3,1
 8013df8:	2800081e 	bne	r5,zero,8013e1c <__lo0bits+0x90>
 8013dfc:	1806d07a 	srli	r3,r3,1
 8013e00:	1800051e 	bne	r3,zero,8013e18 <__lo0bits+0x8c>
 8013e04:	00800804 	movi	r2,32
 8013e08:	f800283a 	ret
 8013e0c:	1806d43a 	srli	r3,r3,16
 8013e10:	00800404 	movi	r2,16
 8013e14:	003feb06 	br	8013dc4 <__alt_data_end+0xfc013dc4>
 8013e18:	10800044 	addi	r2,r2,1
 8013e1c:	20c00015 	stw	r3,0(r4)
 8013e20:	f800283a 	ret
 8013e24:	0005883a 	mov	r2,zero
 8013e28:	f800283a 	ret
 8013e2c:	1806d07a 	srli	r3,r3,1
 8013e30:	00800044 	movi	r2,1
 8013e34:	20c00015 	stw	r3,0(r4)
 8013e38:	f800283a 	ret

08013e3c <__i2b>:
 8013e3c:	defffd04 	addi	sp,sp,-12
 8013e40:	dc000015 	stw	r16,0(sp)
 8013e44:	04000044 	movi	r16,1
 8013e48:	dc400115 	stw	r17,4(sp)
 8013e4c:	2823883a 	mov	r17,r5
 8013e50:	800b883a 	mov	r5,r16
 8013e54:	dfc00215 	stw	ra,8(sp)
 8013e58:	8013a3c0 	call	8013a3c <_Balloc>
 8013e5c:	14400515 	stw	r17,20(r2)
 8013e60:	14000415 	stw	r16,16(r2)
 8013e64:	dfc00217 	ldw	ra,8(sp)
 8013e68:	dc400117 	ldw	r17,4(sp)
 8013e6c:	dc000017 	ldw	r16,0(sp)
 8013e70:	dec00304 	addi	sp,sp,12
 8013e74:	f800283a 	ret

08013e78 <__multiply>:
 8013e78:	defffa04 	addi	sp,sp,-24
 8013e7c:	dcc00315 	stw	r19,12(sp)
 8013e80:	dc800215 	stw	r18,8(sp)
 8013e84:	2cc00417 	ldw	r19,16(r5)
 8013e88:	34800417 	ldw	r18,16(r6)
 8013e8c:	dd000415 	stw	r20,16(sp)
 8013e90:	dc400115 	stw	r17,4(sp)
 8013e94:	dfc00515 	stw	ra,20(sp)
 8013e98:	dc000015 	stw	r16,0(sp)
 8013e9c:	2829883a 	mov	r20,r5
 8013ea0:	3023883a 	mov	r17,r6
 8013ea4:	9c807016 	blt	r19,r18,8014068 <__multiply+0x1f0>
 8013ea8:	9005883a 	mov	r2,r18
 8013eac:	9825883a 	mov	r18,r19
 8013eb0:	1027883a 	mov	r19,r2
 8013eb4:	a0800217 	ldw	r2,8(r20)
 8013eb8:	94e1883a 	add	r16,r18,r19
 8013ebc:	a1400117 	ldw	r5,4(r20)
 8013ec0:	1400010e 	bge	r2,r16,8013ec8 <__multiply+0x50>
 8013ec4:	29400044 	addi	r5,r5,1
 8013ec8:	8013a3c0 	call	8013a3c <_Balloc>
 8013ecc:	8417883a 	add	r11,r16,r16
 8013ed0:	13000504 	addi	r12,r2,20
 8013ed4:	5ad7883a 	add	r11,r11,r11
 8013ed8:	62d7883a 	add	r11,r12,r11
 8013edc:	6007883a 	mov	r3,r12
 8013ee0:	62c0032e 	bgeu	r12,r11,8013ef0 <__multiply+0x78>
 8013ee4:	18000015 	stw	zero,0(r3)
 8013ee8:	18c00104 	addi	r3,r3,4
 8013eec:	1afffd36 	bltu	r3,r11,8013ee4 <__alt_data_end+0xfc013ee4>
 8013ef0:	9ce7883a 	add	r19,r19,r19
 8013ef4:	94a5883a 	add	r18,r18,r18
 8013ef8:	89800504 	addi	r6,r17,20
 8013efc:	9ce7883a 	add	r19,r19,r19
 8013f00:	a3800504 	addi	r14,r20,20
 8013f04:	94a5883a 	add	r18,r18,r18
 8013f08:	34db883a 	add	r13,r6,r19
 8013f0c:	7495883a 	add	r10,r14,r18
 8013f10:	3340422e 	bgeu	r6,r13,801401c <__multiply+0x1a4>
 8013f14:	34400017 	ldw	r17,0(r6)
 8013f18:	8cbfffcc 	andi	r18,r17,65535
 8013f1c:	90001b26 	beq	r18,zero,8013f8c <__multiply+0x114>
 8013f20:	6013883a 	mov	r9,r12
 8013f24:	7023883a 	mov	r17,r14
 8013f28:	0011883a 	mov	r8,zero
 8013f2c:	88c00017 	ldw	r3,0(r17)
 8013f30:	4bc00017 	ldw	r15,0(r9)
 8013f34:	8c400104 	addi	r17,r17,4
 8013f38:	19ffffcc 	andi	r7,r3,65535
 8013f3c:	3c8f383a 	mul	r7,r7,r18
 8013f40:	1808d43a 	srli	r4,r3,16
 8013f44:	797fffcc 	andi	r5,r15,65535
 8013f48:	29cb883a 	add	r5,r5,r7
 8013f4c:	2a0b883a 	add	r5,r5,r8
 8013f50:	2489383a 	mul	r4,r4,r18
 8013f54:	7806d43a 	srli	r3,r15,16
 8013f58:	2810d43a 	srli	r8,r5,16
 8013f5c:	297fffcc 	andi	r5,r5,65535
 8013f60:	1907883a 	add	r3,r3,r4
 8013f64:	1a07883a 	add	r3,r3,r8
 8013f68:	1808943a 	slli	r4,r3,16
 8013f6c:	480f883a 	mov	r7,r9
 8013f70:	1810d43a 	srli	r8,r3,16
 8013f74:	214ab03a 	or	r5,r4,r5
 8013f78:	49400015 	stw	r5,0(r9)
 8013f7c:	4a400104 	addi	r9,r9,4
 8013f80:	8abfea36 	bltu	r17,r10,8013f2c <__alt_data_end+0xfc013f2c>
 8013f84:	3a000115 	stw	r8,4(r7)
 8013f88:	34400017 	ldw	r17,0(r6)
 8013f8c:	8822d43a 	srli	r17,r17,16
 8013f90:	88001f26 	beq	r17,zero,8014010 <__multiply+0x198>
 8013f94:	60c00017 	ldw	r3,0(r12)
 8013f98:	7013883a 	mov	r9,r14
 8013f9c:	601f883a 	mov	r15,r12
 8013fa0:	1811883a 	mov	r8,r3
 8013fa4:	6027883a 	mov	r19,r12
 8013fa8:	000f883a 	mov	r7,zero
 8013fac:	00000106 	br	8013fb4 <__multiply+0x13c>
 8013fb0:	9027883a 	mov	r19,r18
 8013fb4:	4940000b 	ldhu	r5,0(r9)
 8013fb8:	4010d43a 	srli	r8,r8,16
 8013fbc:	193fffcc 	andi	r4,r3,65535
 8013fc0:	2c4b383a 	mul	r5,r5,r17
 8013fc4:	7bc00104 	addi	r15,r15,4
 8013fc8:	4a400104 	addi	r9,r9,4
 8013fcc:	2a0b883a 	add	r5,r5,r8
 8013fd0:	29cb883a 	add	r5,r5,r7
 8013fd4:	2806943a 	slli	r3,r5,16
 8013fd8:	9c800104 	addi	r18,r19,4
 8013fdc:	280ad43a 	srli	r5,r5,16
 8013fe0:	1908b03a 	or	r4,r3,r4
 8013fe4:	793fff15 	stw	r4,-4(r15)
 8013fe8:	48ffff17 	ldw	r3,-4(r9)
 8013fec:	92000017 	ldw	r8,0(r18)
 8013ff0:	1806d43a 	srli	r3,r3,16
 8013ff4:	413fffcc 	andi	r4,r8,65535
 8013ff8:	1c47383a 	mul	r3,r3,r17
 8013ffc:	1907883a 	add	r3,r3,r4
 8014000:	1947883a 	add	r3,r3,r5
 8014004:	180ed43a 	srli	r7,r3,16
 8014008:	4abfe936 	bltu	r9,r10,8013fb0 <__alt_data_end+0xfc013fb0>
 801400c:	98c00115 	stw	r3,4(r19)
 8014010:	31800104 	addi	r6,r6,4
 8014014:	63000104 	addi	r12,r12,4
 8014018:	337fbe36 	bltu	r6,r13,8013f14 <__alt_data_end+0xfc013f14>
 801401c:	0400090e 	bge	zero,r16,8014044 <__multiply+0x1cc>
 8014020:	58ffff17 	ldw	r3,-4(r11)
 8014024:	5affff04 	addi	r11,r11,-4
 8014028:	18000326 	beq	r3,zero,8014038 <__multiply+0x1c0>
 801402c:	00000506 	br	8014044 <__multiply+0x1cc>
 8014030:	58c00017 	ldw	r3,0(r11)
 8014034:	1800031e 	bne	r3,zero,8014044 <__multiply+0x1cc>
 8014038:	843fffc4 	addi	r16,r16,-1
 801403c:	5affff04 	addi	r11,r11,-4
 8014040:	803ffb1e 	bne	r16,zero,8014030 <__alt_data_end+0xfc014030>
 8014044:	14000415 	stw	r16,16(r2)
 8014048:	dfc00517 	ldw	ra,20(sp)
 801404c:	dd000417 	ldw	r20,16(sp)
 8014050:	dcc00317 	ldw	r19,12(sp)
 8014054:	dc800217 	ldw	r18,8(sp)
 8014058:	dc400117 	ldw	r17,4(sp)
 801405c:	dc000017 	ldw	r16,0(sp)
 8014060:	dec00604 	addi	sp,sp,24
 8014064:	f800283a 	ret
 8014068:	3029883a 	mov	r20,r6
 801406c:	2823883a 	mov	r17,r5
 8014070:	003f9006 	br	8013eb4 <__alt_data_end+0xfc013eb4>

08014074 <__pow5mult>:
 8014074:	defffa04 	addi	sp,sp,-24
 8014078:	dcc00315 	stw	r19,12(sp)
 801407c:	dc800215 	stw	r18,8(sp)
 8014080:	dc000015 	stw	r16,0(sp)
 8014084:	dfc00515 	stw	ra,20(sp)
 8014088:	dd000415 	stw	r20,16(sp)
 801408c:	dc400115 	stw	r17,4(sp)
 8014090:	308000cc 	andi	r2,r6,3
 8014094:	3021883a 	mov	r16,r6
 8014098:	2027883a 	mov	r19,r4
 801409c:	2825883a 	mov	r18,r5
 80140a0:	10002e1e 	bne	r2,zero,801415c <__pow5mult+0xe8>
 80140a4:	8021d0ba 	srai	r16,r16,2
 80140a8:	80001a26 	beq	r16,zero,8014114 <__pow5mult+0xa0>
 80140ac:	9c401217 	ldw	r17,72(r19)
 80140b0:	8800061e 	bne	r17,zero,80140cc <__pow5mult+0x58>
 80140b4:	00003406 	br	8014188 <__pow5mult+0x114>
 80140b8:	8021d07a 	srai	r16,r16,1
 80140bc:	80001526 	beq	r16,zero,8014114 <__pow5mult+0xa0>
 80140c0:	88800017 	ldw	r2,0(r17)
 80140c4:	10001c26 	beq	r2,zero,8014138 <__pow5mult+0xc4>
 80140c8:	1023883a 	mov	r17,r2
 80140cc:	80c0004c 	andi	r3,r16,1
 80140d0:	183ff926 	beq	r3,zero,80140b8 <__alt_data_end+0xfc0140b8>
 80140d4:	900b883a 	mov	r5,r18
 80140d8:	880d883a 	mov	r6,r17
 80140dc:	9809883a 	mov	r4,r19
 80140e0:	8013e780 	call	8013e78 <__multiply>
 80140e4:	90001b26 	beq	r18,zero,8014154 <__pow5mult+0xe0>
 80140e8:	91c00117 	ldw	r7,4(r18)
 80140ec:	98c01317 	ldw	r3,76(r19)
 80140f0:	8021d07a 	srai	r16,r16,1
 80140f4:	39cf883a 	add	r7,r7,r7
 80140f8:	39cf883a 	add	r7,r7,r7
 80140fc:	19c7883a 	add	r3,r3,r7
 8014100:	19000017 	ldw	r4,0(r3)
 8014104:	91000015 	stw	r4,0(r18)
 8014108:	1c800015 	stw	r18,0(r3)
 801410c:	1025883a 	mov	r18,r2
 8014110:	803feb1e 	bne	r16,zero,80140c0 <__alt_data_end+0xfc0140c0>
 8014114:	9005883a 	mov	r2,r18
 8014118:	dfc00517 	ldw	ra,20(sp)
 801411c:	dd000417 	ldw	r20,16(sp)
 8014120:	dcc00317 	ldw	r19,12(sp)
 8014124:	dc800217 	ldw	r18,8(sp)
 8014128:	dc400117 	ldw	r17,4(sp)
 801412c:	dc000017 	ldw	r16,0(sp)
 8014130:	dec00604 	addi	sp,sp,24
 8014134:	f800283a 	ret
 8014138:	9809883a 	mov	r4,r19
 801413c:	880b883a 	mov	r5,r17
 8014140:	880d883a 	mov	r6,r17
 8014144:	8013e780 	call	8013e78 <__multiply>
 8014148:	88800015 	stw	r2,0(r17)
 801414c:	10000015 	stw	zero,0(r2)
 8014150:	003fdd06 	br	80140c8 <__alt_data_end+0xfc0140c8>
 8014154:	1025883a 	mov	r18,r2
 8014158:	003fd706 	br	80140b8 <__alt_data_end+0xfc0140b8>
 801415c:	10bfffc4 	addi	r2,r2,-1
 8014160:	1085883a 	add	r2,r2,r2
 8014164:	00c200b4 	movhi	r3,2050
 8014168:	18dcb504 	addi	r3,r3,29396
 801416c:	1085883a 	add	r2,r2,r2
 8014170:	1885883a 	add	r2,r3,r2
 8014174:	11800017 	ldw	r6,0(r2)
 8014178:	000f883a 	mov	r7,zero
 801417c:	8013b0c0 	call	8013b0c <__multadd>
 8014180:	1025883a 	mov	r18,r2
 8014184:	003fc706 	br	80140a4 <__alt_data_end+0xfc0140a4>
 8014188:	05000044 	movi	r20,1
 801418c:	9809883a 	mov	r4,r19
 8014190:	a00b883a 	mov	r5,r20
 8014194:	8013a3c0 	call	8013a3c <_Balloc>
 8014198:	1023883a 	mov	r17,r2
 801419c:	00809c44 	movi	r2,625
 80141a0:	88800515 	stw	r2,20(r17)
 80141a4:	8d000415 	stw	r20,16(r17)
 80141a8:	9c401215 	stw	r17,72(r19)
 80141ac:	88000015 	stw	zero,0(r17)
 80141b0:	003fc606 	br	80140cc <__alt_data_end+0xfc0140cc>

080141b4 <__lshift>:
 80141b4:	defff904 	addi	sp,sp,-28
 80141b8:	dd000415 	stw	r20,16(sp)
 80141bc:	dcc00315 	stw	r19,12(sp)
 80141c0:	3029d17a 	srai	r20,r6,5
 80141c4:	2cc00417 	ldw	r19,16(r5)
 80141c8:	28800217 	ldw	r2,8(r5)
 80141cc:	dd400515 	stw	r21,20(sp)
 80141d0:	a4e7883a 	add	r19,r20,r19
 80141d4:	dc800215 	stw	r18,8(sp)
 80141d8:	dc400115 	stw	r17,4(sp)
 80141dc:	dc000015 	stw	r16,0(sp)
 80141e0:	dfc00615 	stw	ra,24(sp)
 80141e4:	9c000044 	addi	r16,r19,1
 80141e8:	2823883a 	mov	r17,r5
 80141ec:	302b883a 	mov	r21,r6
 80141f0:	2025883a 	mov	r18,r4
 80141f4:	29400117 	ldw	r5,4(r5)
 80141f8:	1400030e 	bge	r2,r16,8014208 <__lshift+0x54>
 80141fc:	1085883a 	add	r2,r2,r2
 8014200:	29400044 	addi	r5,r5,1
 8014204:	143ffd16 	blt	r2,r16,80141fc <__alt_data_end+0xfc0141fc>
 8014208:	9009883a 	mov	r4,r18
 801420c:	8013a3c0 	call	8013a3c <_Balloc>
 8014210:	11c00504 	addi	r7,r2,20
 8014214:	0500090e 	bge	zero,r20,801423c <__lshift+0x88>
 8014218:	3811883a 	mov	r8,r7
 801421c:	0007883a 	mov	r3,zero
 8014220:	40000015 	stw	zero,0(r8)
 8014224:	18c00044 	addi	r3,r3,1
 8014228:	42000104 	addi	r8,r8,4
 801422c:	1d3ffc1e 	bne	r3,r20,8014220 <__alt_data_end+0xfc014220>
 8014230:	18c7883a 	add	r3,r3,r3
 8014234:	18c7883a 	add	r3,r3,r3
 8014238:	38cf883a 	add	r7,r7,r3
 801423c:	89000417 	ldw	r4,16(r17)
 8014240:	88c00504 	addi	r3,r17,20
 8014244:	a98007cc 	andi	r6,r21,31
 8014248:	2109883a 	add	r4,r4,r4
 801424c:	2109883a 	add	r4,r4,r4
 8014250:	1909883a 	add	r4,r3,r4
 8014254:	30002326 	beq	r6,zero,80142e4 <__lshift+0x130>
 8014258:	01400804 	movi	r5,32
 801425c:	298bc83a 	sub	r5,r5,r6
 8014260:	0013883a 	mov	r9,zero
 8014264:	1a000017 	ldw	r8,0(r3)
 8014268:	3815883a 	mov	r10,r7
 801426c:	39c00104 	addi	r7,r7,4
 8014270:	4190983a 	sll	r8,r8,r6
 8014274:	18c00104 	addi	r3,r3,4
 8014278:	4a10b03a 	or	r8,r9,r8
 801427c:	3a3fff15 	stw	r8,-4(r7)
 8014280:	1a3fff17 	ldw	r8,-4(r3)
 8014284:	4152d83a 	srl	r9,r8,r5
 8014288:	193ff636 	bltu	r3,r4,8014264 <__alt_data_end+0xfc014264>
 801428c:	52400115 	stw	r9,4(r10)
 8014290:	48000126 	beq	r9,zero,8014298 <__lshift+0xe4>
 8014294:	9c000084 	addi	r16,r19,2
 8014298:	89000117 	ldw	r4,4(r17)
 801429c:	90c01317 	ldw	r3,76(r18)
 80142a0:	843fffc4 	addi	r16,r16,-1
 80142a4:	2109883a 	add	r4,r4,r4
 80142a8:	2109883a 	add	r4,r4,r4
 80142ac:	1907883a 	add	r3,r3,r4
 80142b0:	19000017 	ldw	r4,0(r3)
 80142b4:	14000415 	stw	r16,16(r2)
 80142b8:	89000015 	stw	r4,0(r17)
 80142bc:	1c400015 	stw	r17,0(r3)
 80142c0:	dfc00617 	ldw	ra,24(sp)
 80142c4:	dd400517 	ldw	r21,20(sp)
 80142c8:	dd000417 	ldw	r20,16(sp)
 80142cc:	dcc00317 	ldw	r19,12(sp)
 80142d0:	dc800217 	ldw	r18,8(sp)
 80142d4:	dc400117 	ldw	r17,4(sp)
 80142d8:	dc000017 	ldw	r16,0(sp)
 80142dc:	dec00704 	addi	sp,sp,28
 80142e0:	f800283a 	ret
 80142e4:	19400017 	ldw	r5,0(r3)
 80142e8:	39c00104 	addi	r7,r7,4
 80142ec:	18c00104 	addi	r3,r3,4
 80142f0:	397fff15 	stw	r5,-4(r7)
 80142f4:	193ffb36 	bltu	r3,r4,80142e4 <__alt_data_end+0xfc0142e4>
 80142f8:	003fe706 	br	8014298 <__alt_data_end+0xfc014298>

080142fc <__mcmp>:
 80142fc:	20800417 	ldw	r2,16(r4)
 8014300:	28c00417 	ldw	r3,16(r5)
 8014304:	10c5c83a 	sub	r2,r2,r3
 8014308:	1000111e 	bne	r2,zero,8014350 <__mcmp+0x54>
 801430c:	18c7883a 	add	r3,r3,r3
 8014310:	18c7883a 	add	r3,r3,r3
 8014314:	21000504 	addi	r4,r4,20
 8014318:	29400504 	addi	r5,r5,20
 801431c:	20c5883a 	add	r2,r4,r3
 8014320:	28cb883a 	add	r5,r5,r3
 8014324:	00000106 	br	801432c <__mcmp+0x30>
 8014328:	20800a2e 	bgeu	r4,r2,8014354 <__mcmp+0x58>
 801432c:	10bfff04 	addi	r2,r2,-4
 8014330:	297fff04 	addi	r5,r5,-4
 8014334:	11800017 	ldw	r6,0(r2)
 8014338:	28c00017 	ldw	r3,0(r5)
 801433c:	30fffa26 	beq	r6,r3,8014328 <__alt_data_end+0xfc014328>
 8014340:	30c00236 	bltu	r6,r3,801434c <__mcmp+0x50>
 8014344:	00800044 	movi	r2,1
 8014348:	f800283a 	ret
 801434c:	00bfffc4 	movi	r2,-1
 8014350:	f800283a 	ret
 8014354:	0005883a 	mov	r2,zero
 8014358:	f800283a 	ret

0801435c <__mdiff>:
 801435c:	defffb04 	addi	sp,sp,-20
 8014360:	dc000015 	stw	r16,0(sp)
 8014364:	2821883a 	mov	r16,r5
 8014368:	dcc00315 	stw	r19,12(sp)
 801436c:	300b883a 	mov	r5,r6
 8014370:	2027883a 	mov	r19,r4
 8014374:	8009883a 	mov	r4,r16
 8014378:	dc800215 	stw	r18,8(sp)
 801437c:	dfc00415 	stw	ra,16(sp)
 8014380:	dc400115 	stw	r17,4(sp)
 8014384:	3025883a 	mov	r18,r6
 8014388:	80142fc0 	call	80142fc <__mcmp>
 801438c:	10005226 	beq	r2,zero,80144d8 <__mdiff+0x17c>
 8014390:	10004c16 	blt	r2,zero,80144c4 <__mdiff+0x168>
 8014394:	0023883a 	mov	r17,zero
 8014398:	81400117 	ldw	r5,4(r16)
 801439c:	9809883a 	mov	r4,r19
 80143a0:	8013a3c0 	call	8013a3c <_Balloc>
 80143a4:	83400417 	ldw	r13,16(r16)
 80143a8:	93800417 	ldw	r14,16(r18)
 80143ac:	81000504 	addi	r4,r16,20
 80143b0:	6b59883a 	add	r12,r13,r13
 80143b4:	739d883a 	add	r14,r14,r14
 80143b8:	6319883a 	add	r12,r12,r12
 80143bc:	91800504 	addi	r6,r18,20
 80143c0:	739d883a 	add	r14,r14,r14
 80143c4:	14400315 	stw	r17,12(r2)
 80143c8:	2319883a 	add	r12,r4,r12
 80143cc:	339d883a 	add	r14,r6,r14
 80143d0:	12400504 	addi	r9,r2,20
 80143d4:	0007883a 	mov	r3,zero
 80143d8:	22000017 	ldw	r8,0(r4)
 80143dc:	32800017 	ldw	r10,0(r6)
 80143e0:	4ac00104 	addi	r11,r9,4
 80143e4:	41ffffcc 	andi	r7,r8,65535
 80143e8:	38c7883a 	add	r3,r7,r3
 80143ec:	51ffffcc 	andi	r7,r10,65535
 80143f0:	19cfc83a 	sub	r7,r3,r7
 80143f4:	4010d43a 	srli	r8,r8,16
 80143f8:	5014d43a 	srli	r10,r10,16
 80143fc:	3807d43a 	srai	r3,r7,16
 8014400:	39ffffcc 	andi	r7,r7,65535
 8014404:	4291c83a 	sub	r8,r8,r10
 8014408:	40c7883a 	add	r3,r8,r3
 801440c:	1810943a 	slli	r8,r3,16
 8014410:	31800104 	addi	r6,r6,4
 8014414:	21000104 	addi	r4,r4,4
 8014418:	41ceb03a 	or	r7,r8,r7
 801441c:	49c00015 	stw	r7,0(r9)
 8014420:	1807d43a 	srai	r3,r3,16
 8014424:	580b883a 	mov	r5,r11
 8014428:	5813883a 	mov	r9,r11
 801442c:	33bfea36 	bltu	r6,r14,80143d8 <__alt_data_end+0xfc0143d8>
 8014430:	2011883a 	mov	r8,r4
 8014434:	2300152e 	bgeu	r4,r12,801448c <__mdiff+0x130>
 8014438:	21400017 	ldw	r5,0(r4)
 801443c:	4a400104 	addi	r9,r9,4
 8014440:	21000104 	addi	r4,r4,4
 8014444:	29ffffcc 	andi	r7,r5,65535
 8014448:	38c7883a 	add	r3,r7,r3
 801444c:	280ad43a 	srli	r5,r5,16
 8014450:	180dd43a 	srai	r6,r3,16
 8014454:	19ffffcc 	andi	r7,r3,65535
 8014458:	3147883a 	add	r3,r6,r5
 801445c:	180a943a 	slli	r5,r3,16
 8014460:	1807d43a 	srai	r3,r3,16
 8014464:	29ceb03a 	or	r7,r5,r7
 8014468:	49ffff15 	stw	r7,-4(r9)
 801446c:	233ff236 	bltu	r4,r12,8014438 <__alt_data_end+0xfc014438>
 8014470:	0206303a 	nor	r3,zero,r8
 8014474:	1b07883a 	add	r3,r3,r12
 8014478:	1806d0ba 	srli	r3,r3,2
 801447c:	18c00044 	addi	r3,r3,1
 8014480:	18c7883a 	add	r3,r3,r3
 8014484:	18c7883a 	add	r3,r3,r3
 8014488:	58cb883a 	add	r5,r11,r3
 801448c:	28ffff04 	addi	r3,r5,-4
 8014490:	3800041e 	bne	r7,zero,80144a4 <__mdiff+0x148>
 8014494:	18ffff04 	addi	r3,r3,-4
 8014498:	19000017 	ldw	r4,0(r3)
 801449c:	6b7fffc4 	addi	r13,r13,-1
 80144a0:	203ffc26 	beq	r4,zero,8014494 <__alt_data_end+0xfc014494>
 80144a4:	13400415 	stw	r13,16(r2)
 80144a8:	dfc00417 	ldw	ra,16(sp)
 80144ac:	dcc00317 	ldw	r19,12(sp)
 80144b0:	dc800217 	ldw	r18,8(sp)
 80144b4:	dc400117 	ldw	r17,4(sp)
 80144b8:	dc000017 	ldw	r16,0(sp)
 80144bc:	dec00504 	addi	sp,sp,20
 80144c0:	f800283a 	ret
 80144c4:	8005883a 	mov	r2,r16
 80144c8:	04400044 	movi	r17,1
 80144cc:	9021883a 	mov	r16,r18
 80144d0:	1025883a 	mov	r18,r2
 80144d4:	003fb006 	br	8014398 <__alt_data_end+0xfc014398>
 80144d8:	9809883a 	mov	r4,r19
 80144dc:	000b883a 	mov	r5,zero
 80144e0:	8013a3c0 	call	8013a3c <_Balloc>
 80144e4:	00c00044 	movi	r3,1
 80144e8:	10c00415 	stw	r3,16(r2)
 80144ec:	10000515 	stw	zero,20(r2)
 80144f0:	003fed06 	br	80144a8 <__alt_data_end+0xfc0144a8>

080144f4 <__ulp>:
 80144f4:	295ffc2c 	andhi	r5,r5,32752
 80144f8:	00bf3034 	movhi	r2,64704
 80144fc:	2887883a 	add	r3,r5,r2
 8014500:	00c0020e 	bge	zero,r3,801450c <__ulp+0x18>
 8014504:	0005883a 	mov	r2,zero
 8014508:	f800283a 	ret
 801450c:	00c7c83a 	sub	r3,zero,r3
 8014510:	180bd53a 	srai	r5,r3,20
 8014514:	008004c4 	movi	r2,19
 8014518:	11400a0e 	bge	r2,r5,8014544 <__ulp+0x50>
 801451c:	00800c84 	movi	r2,50
 8014520:	0007883a 	mov	r3,zero
 8014524:	11400516 	blt	r2,r5,801453c <__ulp+0x48>
 8014528:	00800cc4 	movi	r2,51
 801452c:	114bc83a 	sub	r5,r2,r5
 8014530:	00800044 	movi	r2,1
 8014534:	1144983a 	sll	r2,r2,r5
 8014538:	f800283a 	ret
 801453c:	00800044 	movi	r2,1
 8014540:	f800283a 	ret
 8014544:	00800234 	movhi	r2,8
 8014548:	1147d83a 	sra	r3,r2,r5
 801454c:	0005883a 	mov	r2,zero
 8014550:	f800283a 	ret

08014554 <__b2d>:
 8014554:	defffa04 	addi	sp,sp,-24
 8014558:	dc000015 	stw	r16,0(sp)
 801455c:	24000417 	ldw	r16,16(r4)
 8014560:	dc400115 	stw	r17,4(sp)
 8014564:	24400504 	addi	r17,r4,20
 8014568:	8421883a 	add	r16,r16,r16
 801456c:	8421883a 	add	r16,r16,r16
 8014570:	8c21883a 	add	r16,r17,r16
 8014574:	dc800215 	stw	r18,8(sp)
 8014578:	84bfff17 	ldw	r18,-4(r16)
 801457c:	dd000415 	stw	r20,16(sp)
 8014580:	dcc00315 	stw	r19,12(sp)
 8014584:	9009883a 	mov	r4,r18
 8014588:	2829883a 	mov	r20,r5
 801458c:	dfc00515 	stw	ra,20(sp)
 8014590:	8013d240 	call	8013d24 <__hi0bits>
 8014594:	00c00804 	movi	r3,32
 8014598:	1887c83a 	sub	r3,r3,r2
 801459c:	a0c00015 	stw	r3,0(r20)
 80145a0:	00c00284 	movi	r3,10
 80145a4:	84ffff04 	addi	r19,r16,-4
 80145a8:	18801216 	blt	r3,r2,80145f4 <__b2d+0xa0>
 80145ac:	014002c4 	movi	r5,11
 80145b0:	2889c83a 	sub	r4,r5,r2
 80145b4:	9106d83a 	srl	r3,r18,r4
 80145b8:	18cffc34 	orhi	r3,r3,16368
 80145bc:	8cc0282e 	bgeu	r17,r19,8014660 <__b2d+0x10c>
 80145c0:	817ffe17 	ldw	r5,-8(r16)
 80145c4:	290ad83a 	srl	r5,r5,r4
 80145c8:	10800544 	addi	r2,r2,21
 80145cc:	9084983a 	sll	r2,r18,r2
 80145d0:	2884b03a 	or	r2,r5,r2
 80145d4:	dfc00517 	ldw	ra,20(sp)
 80145d8:	dd000417 	ldw	r20,16(sp)
 80145dc:	dcc00317 	ldw	r19,12(sp)
 80145e0:	dc800217 	ldw	r18,8(sp)
 80145e4:	dc400117 	ldw	r17,4(sp)
 80145e8:	dc000017 	ldw	r16,0(sp)
 80145ec:	dec00604 	addi	sp,sp,24
 80145f0:	f800283a 	ret
 80145f4:	113ffd44 	addi	r4,r2,-11
 80145f8:	8cc00f2e 	bgeu	r17,r19,8014638 <__b2d+0xe4>
 80145fc:	81bffe04 	addi	r6,r16,-8
 8014600:	817ffe17 	ldw	r5,-8(r16)
 8014604:	20001326 	beq	r4,zero,8014654 <__b2d+0x100>
 8014608:	00c00ac4 	movi	r3,43
 801460c:	1885c83a 	sub	r2,r3,r2
 8014610:	2886d83a 	srl	r3,r5,r2
 8014614:	9124983a 	sll	r18,r18,r4
 8014618:	90e4b03a 	or	r18,r18,r3
 801461c:	90cffc34 	orhi	r3,r18,16368
 8014620:	8980112e 	bgeu	r17,r6,8014668 <__b2d+0x114>
 8014624:	81bffd17 	ldw	r6,-12(r16)
 8014628:	308cd83a 	srl	r6,r6,r2
 801462c:	2904983a 	sll	r2,r5,r4
 8014630:	1184b03a 	or	r2,r2,r6
 8014634:	003fe706 	br	80145d4 <__alt_data_end+0xfc0145d4>
 8014638:	20000526 	beq	r4,zero,8014650 <__b2d+0xfc>
 801463c:	9124983a 	sll	r18,r18,r4
 8014640:	000d883a 	mov	r6,zero
 8014644:	000b883a 	mov	r5,zero
 8014648:	90cffc34 	orhi	r3,r18,16368
 801464c:	003ff706 	br	801462c <__alt_data_end+0xfc01462c>
 8014650:	000b883a 	mov	r5,zero
 8014654:	90cffc34 	orhi	r3,r18,16368
 8014658:	2805883a 	mov	r2,r5
 801465c:	003fdd06 	br	80145d4 <__alt_data_end+0xfc0145d4>
 8014660:	000b883a 	mov	r5,zero
 8014664:	003fd806 	br	80145c8 <__alt_data_end+0xfc0145c8>
 8014668:	000d883a 	mov	r6,zero
 801466c:	003fef06 	br	801462c <__alt_data_end+0xfc01462c>

08014670 <__d2b>:
 8014670:	defff704 	addi	sp,sp,-36
 8014674:	dc000215 	stw	r16,8(sp)
 8014678:	3021883a 	mov	r16,r6
 801467c:	dc400315 	stw	r17,12(sp)
 8014680:	8022907a 	slli	r17,r16,1
 8014684:	dd400715 	stw	r21,28(sp)
 8014688:	282b883a 	mov	r21,r5
 801468c:	01400044 	movi	r5,1
 8014690:	dd000615 	stw	r20,24(sp)
 8014694:	dcc00515 	stw	r19,20(sp)
 8014698:	dc800415 	stw	r18,16(sp)
 801469c:	dfc00815 	stw	ra,32(sp)
 80146a0:	3829883a 	mov	r20,r7
 80146a4:	dc800917 	ldw	r18,36(sp)
 80146a8:	8822d57a 	srli	r17,r17,21
 80146ac:	8013a3c0 	call	8013a3c <_Balloc>
 80146b0:	1027883a 	mov	r19,r2
 80146b4:	00800434 	movhi	r2,16
 80146b8:	10bfffc4 	addi	r2,r2,-1
 80146bc:	808c703a 	and	r6,r16,r2
 80146c0:	88000126 	beq	r17,zero,80146c8 <__d2b+0x58>
 80146c4:	31800434 	orhi	r6,r6,16
 80146c8:	d9800015 	stw	r6,0(sp)
 80146cc:	a8001f26 	beq	r21,zero,801474c <__d2b+0xdc>
 80146d0:	d9000104 	addi	r4,sp,4
 80146d4:	dd400115 	stw	r21,4(sp)
 80146d8:	8013d8c0 	call	8013d8c <__lo0bits>
 80146dc:	d8c00017 	ldw	r3,0(sp)
 80146e0:	1000291e 	bne	r2,zero,8014788 <__d2b+0x118>
 80146e4:	d9000117 	ldw	r4,4(sp)
 80146e8:	99000515 	stw	r4,20(r19)
 80146ec:	1820c03a 	cmpne	r16,r3,zero
 80146f0:	84000044 	addi	r16,r16,1
 80146f4:	98c00615 	stw	r3,24(r19)
 80146f8:	9c000415 	stw	r16,16(r19)
 80146fc:	88001b1e 	bne	r17,zero,801476c <__d2b+0xfc>
 8014700:	800690ba 	slli	r3,r16,2
 8014704:	10bef384 	addi	r2,r2,-1074
 8014708:	a0800015 	stw	r2,0(r20)
 801470c:	98c5883a 	add	r2,r19,r3
 8014710:	11000417 	ldw	r4,16(r2)
 8014714:	8020917a 	slli	r16,r16,5
 8014718:	8013d240 	call	8013d24 <__hi0bits>
 801471c:	8085c83a 	sub	r2,r16,r2
 8014720:	90800015 	stw	r2,0(r18)
 8014724:	9805883a 	mov	r2,r19
 8014728:	dfc00817 	ldw	ra,32(sp)
 801472c:	dd400717 	ldw	r21,28(sp)
 8014730:	dd000617 	ldw	r20,24(sp)
 8014734:	dcc00517 	ldw	r19,20(sp)
 8014738:	dc800417 	ldw	r18,16(sp)
 801473c:	dc400317 	ldw	r17,12(sp)
 8014740:	dc000217 	ldw	r16,8(sp)
 8014744:	dec00904 	addi	sp,sp,36
 8014748:	f800283a 	ret
 801474c:	d809883a 	mov	r4,sp
 8014750:	8013d8c0 	call	8013d8c <__lo0bits>
 8014754:	d8c00017 	ldw	r3,0(sp)
 8014758:	04000044 	movi	r16,1
 801475c:	9c000415 	stw	r16,16(r19)
 8014760:	98c00515 	stw	r3,20(r19)
 8014764:	10800804 	addi	r2,r2,32
 8014768:	883fe526 	beq	r17,zero,8014700 <__alt_data_end+0xfc014700>
 801476c:	8c7ef344 	addi	r17,r17,-1075
 8014770:	88a3883a 	add	r17,r17,r2
 8014774:	00c00d44 	movi	r3,53
 8014778:	a4400015 	stw	r17,0(r20)
 801477c:	1885c83a 	sub	r2,r3,r2
 8014780:	90800015 	stw	r2,0(r18)
 8014784:	003fe706 	br	8014724 <__alt_data_end+0xfc014724>
 8014788:	01000804 	movi	r4,32
 801478c:	2089c83a 	sub	r4,r4,r2
 8014790:	1908983a 	sll	r4,r3,r4
 8014794:	d9400117 	ldw	r5,4(sp)
 8014798:	1886d83a 	srl	r3,r3,r2
 801479c:	2148b03a 	or	r4,r4,r5
 80147a0:	99000515 	stw	r4,20(r19)
 80147a4:	d8c00015 	stw	r3,0(sp)
 80147a8:	003fd006 	br	80146ec <__alt_data_end+0xfc0146ec>

080147ac <__ratio>:
 80147ac:	defff904 	addi	sp,sp,-28
 80147b0:	dc400315 	stw	r17,12(sp)
 80147b4:	2823883a 	mov	r17,r5
 80147b8:	d9400104 	addi	r5,sp,4
 80147bc:	dfc00615 	stw	ra,24(sp)
 80147c0:	dcc00515 	stw	r19,20(sp)
 80147c4:	dc800415 	stw	r18,16(sp)
 80147c8:	2027883a 	mov	r19,r4
 80147cc:	dc000215 	stw	r16,8(sp)
 80147d0:	80145540 	call	8014554 <__b2d>
 80147d4:	8809883a 	mov	r4,r17
 80147d8:	d80b883a 	mov	r5,sp
 80147dc:	1025883a 	mov	r18,r2
 80147e0:	1821883a 	mov	r16,r3
 80147e4:	80145540 	call	8014554 <__b2d>
 80147e8:	8a400417 	ldw	r9,16(r17)
 80147ec:	9a000417 	ldw	r8,16(r19)
 80147f0:	100d883a 	mov	r6,r2
 80147f4:	d8800017 	ldw	r2,0(sp)
 80147f8:	4251c83a 	sub	r8,r8,r9
 80147fc:	4012917a 	slli	r9,r8,5
 8014800:	da000117 	ldw	r8,4(sp)
 8014804:	4091c83a 	sub	r8,r8,r2
 8014808:	4251883a 	add	r8,r8,r9
 801480c:	02000d0e 	bge	zero,r8,8014844 <__ratio+0x98>
 8014810:	4010953a 	slli	r8,r8,20
 8014814:	4421883a 	add	r16,r8,r16
 8014818:	9009883a 	mov	r4,r18
 801481c:	800b883a 	mov	r5,r16
 8014820:	180f883a 	mov	r7,r3
 8014824:	8009a9c0 	call	8009a9c <__divdf3>
 8014828:	dfc00617 	ldw	ra,24(sp)
 801482c:	dcc00517 	ldw	r19,20(sp)
 8014830:	dc800417 	ldw	r18,16(sp)
 8014834:	dc400317 	ldw	r17,12(sp)
 8014838:	dc000217 	ldw	r16,8(sp)
 801483c:	dec00704 	addi	sp,sp,28
 8014840:	f800283a 	ret
 8014844:	4010953a 	slli	r8,r8,20
 8014848:	1a07c83a 	sub	r3,r3,r8
 801484c:	003ff206 	br	8014818 <__alt_data_end+0xfc014818>

08014850 <_mprec_log10>:
 8014850:	defffe04 	addi	sp,sp,-8
 8014854:	dc000015 	stw	r16,0(sp)
 8014858:	dfc00115 	stw	ra,4(sp)
 801485c:	008005c4 	movi	r2,23
 8014860:	2021883a 	mov	r16,r4
 8014864:	11000d0e 	bge	r2,r4,801489c <_mprec_log10+0x4c>
 8014868:	0005883a 	mov	r2,zero
 801486c:	00cffc34 	movhi	r3,16368
 8014870:	843fffc4 	addi	r16,r16,-1
 8014874:	1009883a 	mov	r4,r2
 8014878:	180b883a 	mov	r5,r3
 801487c:	000d883a 	mov	r6,zero
 8014880:	01d00934 	movhi	r7,16420
 8014884:	800a5ac0 	call	800a5ac <__muldf3>
 8014888:	803ff91e 	bne	r16,zero,8014870 <__alt_data_end+0xfc014870>
 801488c:	dfc00117 	ldw	ra,4(sp)
 8014890:	dc000017 	ldw	r16,0(sp)
 8014894:	dec00204 	addi	sp,sp,8
 8014898:	f800283a 	ret
 801489c:	202090fa 	slli	r16,r4,3
 80148a0:	008200b4 	movhi	r2,2050
 80148a4:	109ccc04 	addi	r2,r2,29488
 80148a8:	1421883a 	add	r16,r2,r16
 80148ac:	80800017 	ldw	r2,0(r16)
 80148b0:	80c00117 	ldw	r3,4(r16)
 80148b4:	dfc00117 	ldw	ra,4(sp)
 80148b8:	dc000017 	ldw	r16,0(sp)
 80148bc:	dec00204 	addi	sp,sp,8
 80148c0:	f800283a 	ret

080148c4 <__copybits>:
 80148c4:	297fffc4 	addi	r5,r5,-1
 80148c8:	280fd17a 	srai	r7,r5,5
 80148cc:	30c00417 	ldw	r3,16(r6)
 80148d0:	30800504 	addi	r2,r6,20
 80148d4:	39c00044 	addi	r7,r7,1
 80148d8:	18c7883a 	add	r3,r3,r3
 80148dc:	39cf883a 	add	r7,r7,r7
 80148e0:	18c7883a 	add	r3,r3,r3
 80148e4:	39cf883a 	add	r7,r7,r7
 80148e8:	10c7883a 	add	r3,r2,r3
 80148ec:	21cf883a 	add	r7,r4,r7
 80148f0:	10c00d2e 	bgeu	r2,r3,8014928 <__copybits+0x64>
 80148f4:	200b883a 	mov	r5,r4
 80148f8:	12000017 	ldw	r8,0(r2)
 80148fc:	29400104 	addi	r5,r5,4
 8014900:	10800104 	addi	r2,r2,4
 8014904:	2a3fff15 	stw	r8,-4(r5)
 8014908:	10fffb36 	bltu	r2,r3,80148f8 <__alt_data_end+0xfc0148f8>
 801490c:	1985c83a 	sub	r2,r3,r6
 8014910:	10bffac4 	addi	r2,r2,-21
 8014914:	1004d0ba 	srli	r2,r2,2
 8014918:	10800044 	addi	r2,r2,1
 801491c:	1085883a 	add	r2,r2,r2
 8014920:	1085883a 	add	r2,r2,r2
 8014924:	2089883a 	add	r4,r4,r2
 8014928:	21c0032e 	bgeu	r4,r7,8014938 <__copybits+0x74>
 801492c:	20000015 	stw	zero,0(r4)
 8014930:	21000104 	addi	r4,r4,4
 8014934:	21fffd36 	bltu	r4,r7,801492c <__alt_data_end+0xfc01492c>
 8014938:	f800283a 	ret

0801493c <__any_on>:
 801493c:	20c00417 	ldw	r3,16(r4)
 8014940:	2805d17a 	srai	r2,r5,5
 8014944:	21000504 	addi	r4,r4,20
 8014948:	18800d0e 	bge	r3,r2,8014980 <__any_on+0x44>
 801494c:	18c7883a 	add	r3,r3,r3
 8014950:	18c7883a 	add	r3,r3,r3
 8014954:	20c7883a 	add	r3,r4,r3
 8014958:	20c0192e 	bgeu	r4,r3,80149c0 <__any_on+0x84>
 801495c:	18bfff17 	ldw	r2,-4(r3)
 8014960:	18ffff04 	addi	r3,r3,-4
 8014964:	1000041e 	bne	r2,zero,8014978 <__any_on+0x3c>
 8014968:	20c0142e 	bgeu	r4,r3,80149bc <__any_on+0x80>
 801496c:	18ffff04 	addi	r3,r3,-4
 8014970:	19400017 	ldw	r5,0(r3)
 8014974:	283ffc26 	beq	r5,zero,8014968 <__alt_data_end+0xfc014968>
 8014978:	00800044 	movi	r2,1
 801497c:	f800283a 	ret
 8014980:	10c00a0e 	bge	r2,r3,80149ac <__any_on+0x70>
 8014984:	1085883a 	add	r2,r2,r2
 8014988:	1085883a 	add	r2,r2,r2
 801498c:	294007cc 	andi	r5,r5,31
 8014990:	2087883a 	add	r3,r4,r2
 8014994:	283ff026 	beq	r5,zero,8014958 <__alt_data_end+0xfc014958>
 8014998:	19800017 	ldw	r6,0(r3)
 801499c:	3144d83a 	srl	r2,r6,r5
 80149a0:	114a983a 	sll	r5,r2,r5
 80149a4:	29bff41e 	bne	r5,r6,8014978 <__alt_data_end+0xfc014978>
 80149a8:	003feb06 	br	8014958 <__alt_data_end+0xfc014958>
 80149ac:	1085883a 	add	r2,r2,r2
 80149b0:	1085883a 	add	r2,r2,r2
 80149b4:	2087883a 	add	r3,r4,r2
 80149b8:	003fe706 	br	8014958 <__alt_data_end+0xfc014958>
 80149bc:	f800283a 	ret
 80149c0:	0005883a 	mov	r2,zero
 80149c4:	f800283a 	ret

080149c8 <_putc_r>:
 80149c8:	defffc04 	addi	sp,sp,-16
 80149cc:	dc000215 	stw	r16,8(sp)
 80149d0:	dfc00315 	stw	ra,12(sp)
 80149d4:	2021883a 	mov	r16,r4
 80149d8:	20000226 	beq	r4,zero,80149e4 <_putc_r+0x1c>
 80149dc:	20800e17 	ldw	r2,56(r4)
 80149e0:	10001b26 	beq	r2,zero,8014a50 <_putc_r+0x88>
 80149e4:	30800217 	ldw	r2,8(r6)
 80149e8:	10bfffc4 	addi	r2,r2,-1
 80149ec:	30800215 	stw	r2,8(r6)
 80149f0:	10000a16 	blt	r2,zero,8014a1c <_putc_r+0x54>
 80149f4:	30800017 	ldw	r2,0(r6)
 80149f8:	11400005 	stb	r5,0(r2)
 80149fc:	30800017 	ldw	r2,0(r6)
 8014a00:	10c00044 	addi	r3,r2,1
 8014a04:	30c00015 	stw	r3,0(r6)
 8014a08:	10800003 	ldbu	r2,0(r2)
 8014a0c:	dfc00317 	ldw	ra,12(sp)
 8014a10:	dc000217 	ldw	r16,8(sp)
 8014a14:	dec00404 	addi	sp,sp,16
 8014a18:	f800283a 	ret
 8014a1c:	30c00617 	ldw	r3,24(r6)
 8014a20:	10c00616 	blt	r2,r3,8014a3c <_putc_r+0x74>
 8014a24:	30800017 	ldw	r2,0(r6)
 8014a28:	00c00284 	movi	r3,10
 8014a2c:	11400005 	stb	r5,0(r2)
 8014a30:	30800017 	ldw	r2,0(r6)
 8014a34:	11400003 	ldbu	r5,0(r2)
 8014a38:	28fff11e 	bne	r5,r3,8014a00 <__alt_data_end+0xfc014a00>
 8014a3c:	8009883a 	mov	r4,r16
 8014a40:	dfc00317 	ldw	ra,12(sp)
 8014a44:	dc000217 	ldw	r16,8(sp)
 8014a48:	dec00404 	addi	sp,sp,16
 8014a4c:	8017c441 	jmpi	8017c44 <__swbuf_r>
 8014a50:	d9400015 	stw	r5,0(sp)
 8014a54:	d9800115 	stw	r6,4(sp)
 8014a58:	8012ae80 	call	8012ae8 <__sinit>
 8014a5c:	d9800117 	ldw	r6,4(sp)
 8014a60:	d9400017 	ldw	r5,0(sp)
 8014a64:	003fdf06 	br	80149e4 <__alt_data_end+0xfc0149e4>

08014a68 <putc>:
 8014a68:	defffc04 	addi	sp,sp,-16
 8014a6c:	dc400115 	stw	r17,4(sp)
 8014a70:	044200f4 	movhi	r17,2051
 8014a74:	8c63ec04 	addi	r17,r17,-28752
 8014a78:	dc800215 	stw	r18,8(sp)
 8014a7c:	2025883a 	mov	r18,r4
 8014a80:	89000017 	ldw	r4,0(r17)
 8014a84:	dc000015 	stw	r16,0(sp)
 8014a88:	dfc00315 	stw	ra,12(sp)
 8014a8c:	2821883a 	mov	r16,r5
 8014a90:	20000226 	beq	r4,zero,8014a9c <putc+0x34>
 8014a94:	20c00e17 	ldw	r3,56(r4)
 8014a98:	18001a26 	beq	r3,zero,8014b04 <putc+0x9c>
 8014a9c:	80800217 	ldw	r2,8(r16)
 8014aa0:	10bfffc4 	addi	r2,r2,-1
 8014aa4:	80800215 	stw	r2,8(r16)
 8014aa8:	10000c16 	blt	r2,zero,8014adc <putc+0x74>
 8014aac:	80800017 	ldw	r2,0(r16)
 8014ab0:	14800005 	stb	r18,0(r2)
 8014ab4:	80800017 	ldw	r2,0(r16)
 8014ab8:	10c00044 	addi	r3,r2,1
 8014abc:	80c00015 	stw	r3,0(r16)
 8014ac0:	10800003 	ldbu	r2,0(r2)
 8014ac4:	dfc00317 	ldw	ra,12(sp)
 8014ac8:	dc800217 	ldw	r18,8(sp)
 8014acc:	dc400117 	ldw	r17,4(sp)
 8014ad0:	dc000017 	ldw	r16,0(sp)
 8014ad4:	dec00404 	addi	sp,sp,16
 8014ad8:	f800283a 	ret
 8014adc:	80c00617 	ldw	r3,24(r16)
 8014ae0:	10c00a16 	blt	r2,r3,8014b0c <putc+0xa4>
 8014ae4:	80800017 	ldw	r2,0(r16)
 8014ae8:	00c00284 	movi	r3,10
 8014aec:	14800005 	stb	r18,0(r2)
 8014af0:	80800017 	ldw	r2,0(r16)
 8014af4:	11400003 	ldbu	r5,0(r2)
 8014af8:	28ffef1e 	bne	r5,r3,8014ab8 <__alt_data_end+0xfc014ab8>
 8014afc:	89000017 	ldw	r4,0(r17)
 8014b00:	00000406 	br	8014b14 <putc+0xac>
 8014b04:	8012ae80 	call	8012ae8 <__sinit>
 8014b08:	003fe406 	br	8014a9c <__alt_data_end+0xfc014a9c>
 8014b0c:	89000017 	ldw	r4,0(r17)
 8014b10:	900b883a 	mov	r5,r18
 8014b14:	800d883a 	mov	r6,r16
 8014b18:	dfc00317 	ldw	ra,12(sp)
 8014b1c:	dc800217 	ldw	r18,8(sp)
 8014b20:	dc400117 	ldw	r17,4(sp)
 8014b24:	dc000017 	ldw	r16,0(sp)
 8014b28:	dec00404 	addi	sp,sp,16
 8014b2c:	8017c441 	jmpi	8017c44 <__swbuf_r>

08014b30 <_realloc_r>:
 8014b30:	defff604 	addi	sp,sp,-40
 8014b34:	dcc00315 	stw	r19,12(sp)
 8014b38:	dc400115 	stw	r17,4(sp)
 8014b3c:	dfc00915 	stw	ra,36(sp)
 8014b40:	df000815 	stw	fp,32(sp)
 8014b44:	ddc00715 	stw	r23,28(sp)
 8014b48:	dd800615 	stw	r22,24(sp)
 8014b4c:	dd400515 	stw	r21,20(sp)
 8014b50:	dd000415 	stw	r20,16(sp)
 8014b54:	dc800215 	stw	r18,8(sp)
 8014b58:	dc000015 	stw	r16,0(sp)
 8014b5c:	2827883a 	mov	r19,r5
 8014b60:	3023883a 	mov	r17,r6
 8014b64:	2800bf26 	beq	r5,zero,8014e64 <_realloc_r+0x334>
 8014b68:	2025883a 	mov	r18,r4
 8014b6c:	8019b100 	call	8019b10 <__malloc_lock>
 8014b70:	98ffff17 	ldw	r3,-4(r19)
 8014b74:	01bfff04 	movi	r6,-4
 8014b78:	890002c4 	addi	r4,r17,11
 8014b7c:	01c00584 	movi	r7,22
 8014b80:	9d7ffe04 	addi	r21,r19,-8
 8014b84:	19a0703a 	and	r16,r3,r6
 8014b88:	39003f2e 	bgeu	r7,r4,8014c88 <_realloc_r+0x158>
 8014b8c:	053ffe04 	movi	r20,-8
 8014b90:	2528703a 	and	r20,r4,r20
 8014b94:	a00f883a 	mov	r7,r20
 8014b98:	a0008216 	blt	r20,zero,8014da4 <_realloc_r+0x274>
 8014b9c:	a4408136 	bltu	r20,r17,8014da4 <_realloc_r+0x274>
 8014ba0:	81c03c0e 	bge	r16,r7,8014c94 <_realloc_r+0x164>
 8014ba4:	070200b4 	movhi	fp,2050
 8014ba8:	e71e2a04 	addi	fp,fp,30888
 8014bac:	e1000217 	ldw	r4,8(fp)
 8014bb0:	ac05883a 	add	r2,r21,r16
 8014bb4:	2080bf26 	beq	r4,r2,8014eb4 <_realloc_r+0x384>
 8014bb8:	11000117 	ldw	r4,4(r2)
 8014bbc:	023fff84 	movi	r8,-2
 8014bc0:	2210703a 	and	r8,r4,r8
 8014bc4:	1211883a 	add	r8,r2,r8
 8014bc8:	41400117 	ldw	r5,4(r8)
 8014bcc:	2940004c 	andi	r5,r5,1
 8014bd0:	28004a1e 	bne	r5,zero,8014cfc <_realloc_r+0x1cc>
 8014bd4:	017fff04 	movi	r5,-4
 8014bd8:	2148703a 	and	r4,r4,r5
 8014bdc:	2409883a 	add	r4,r4,r16
 8014be0:	21c0ad0e 	bge	r4,r7,8014e98 <_realloc_r+0x368>
 8014be4:	18c0004c 	andi	r3,r3,1
 8014be8:	18007f1e 	bne	r3,zero,8014de8 <_realloc_r+0x2b8>
 8014bec:	9dfffe17 	ldw	r23,-8(r19)
 8014bf0:	adefc83a 	sub	r23,r21,r23
 8014bf4:	bd800117 	ldw	r22,4(r23)
 8014bf8:	b14a703a 	and	r5,r22,r5
 8014bfc:	216d883a 	add	r22,r4,r5
 8014c00:	b1c04516 	blt	r22,r7,8014d18 <_realloc_r+0x1e8>
 8014c04:	10c00317 	ldw	r3,12(r2)
 8014c08:	10800217 	ldw	r2,8(r2)
 8014c0c:	81bfff04 	addi	r6,r16,-4
 8014c10:	bc400204 	addi	r17,r23,8
 8014c14:	10c00315 	stw	r3,12(r2)
 8014c18:	18800215 	stw	r2,8(r3)
 8014c1c:	b9400217 	ldw	r5,8(r23)
 8014c20:	b8c00317 	ldw	r3,12(r23)
 8014c24:	00800904 	movi	r2,36
 8014c28:	28c00315 	stw	r3,12(r5)
 8014c2c:	19400215 	stw	r5,8(r3)
 8014c30:	1180ef36 	bltu	r2,r6,8014ff0 <_realloc_r+0x4c0>
 8014c34:	008004c4 	movi	r2,19
 8014c38:	1180da2e 	bgeu	r2,r6,8014fa4 <_realloc_r+0x474>
 8014c3c:	98800017 	ldw	r2,0(r19)
 8014c40:	b8800215 	stw	r2,8(r23)
 8014c44:	98800117 	ldw	r2,4(r19)
 8014c48:	b8800315 	stw	r2,12(r23)
 8014c4c:	008006c4 	movi	r2,27
 8014c50:	1180fc2e 	bgeu	r2,r6,8015044 <_realloc_r+0x514>
 8014c54:	98800217 	ldw	r2,8(r19)
 8014c58:	b8800415 	stw	r2,16(r23)
 8014c5c:	98800317 	ldw	r2,12(r19)
 8014c60:	b8800515 	stw	r2,20(r23)
 8014c64:	00800904 	movi	r2,36
 8014c68:	3080421e 	bne	r6,r2,8014d74 <_realloc_r+0x244>
 8014c6c:	98800417 	ldw	r2,16(r19)
 8014c70:	9cc00604 	addi	r19,r19,24
 8014c74:	b8c00804 	addi	r3,r23,32
 8014c78:	b8800615 	stw	r2,24(r23)
 8014c7c:	98bfff17 	ldw	r2,-4(r19)
 8014c80:	b8800715 	stw	r2,28(r23)
 8014c84:	00003d06 	br	8014d7c <_realloc_r+0x24c>
 8014c88:	01c00404 	movi	r7,16
 8014c8c:	3829883a 	mov	r20,r7
 8014c90:	003fc206 	br	8014b9c <__alt_data_end+0xfc014b9c>
 8014c94:	9823883a 	mov	r17,r19
 8014c98:	850fc83a 	sub	r7,r16,r20
 8014c9c:	008003c4 	movi	r2,15
 8014ca0:	18c0004c 	andi	r3,r3,1
 8014ca4:	11c04336 	bltu	r2,r7,8014db4 <_realloc_r+0x284>
 8014ca8:	1c06b03a 	or	r3,r3,r16
 8014cac:	a8c00115 	stw	r3,4(r21)
 8014cb0:	ac21883a 	add	r16,r21,r16
 8014cb4:	80c00117 	ldw	r3,4(r16)
 8014cb8:	18c00054 	ori	r3,r3,1
 8014cbc:	80c00115 	stw	r3,4(r16)
 8014cc0:	9009883a 	mov	r4,r18
 8014cc4:	8019b300 	call	8019b30 <__malloc_unlock>
 8014cc8:	8805883a 	mov	r2,r17
 8014ccc:	dfc00917 	ldw	ra,36(sp)
 8014cd0:	df000817 	ldw	fp,32(sp)
 8014cd4:	ddc00717 	ldw	r23,28(sp)
 8014cd8:	dd800617 	ldw	r22,24(sp)
 8014cdc:	dd400517 	ldw	r21,20(sp)
 8014ce0:	dd000417 	ldw	r20,16(sp)
 8014ce4:	dcc00317 	ldw	r19,12(sp)
 8014ce8:	dc800217 	ldw	r18,8(sp)
 8014cec:	dc400117 	ldw	r17,4(sp)
 8014cf0:	dc000017 	ldw	r16,0(sp)
 8014cf4:	dec00a04 	addi	sp,sp,40
 8014cf8:	f800283a 	ret
 8014cfc:	18c0004c 	andi	r3,r3,1
 8014d00:	1800391e 	bne	r3,zero,8014de8 <_realloc_r+0x2b8>
 8014d04:	9dfffe17 	ldw	r23,-8(r19)
 8014d08:	00bfff04 	movi	r2,-4
 8014d0c:	adefc83a 	sub	r23,r21,r23
 8014d10:	b9400117 	ldw	r5,4(r23)
 8014d14:	288a703a 	and	r5,r5,r2
 8014d18:	2c2d883a 	add	r22,r5,r16
 8014d1c:	b1c03216 	blt	r22,r7,8014de8 <_realloc_r+0x2b8>
 8014d20:	b8800317 	ldw	r2,12(r23)
 8014d24:	b8c00217 	ldw	r3,8(r23)
 8014d28:	81bfff04 	addi	r6,r16,-4
 8014d2c:	01000904 	movi	r4,36
 8014d30:	18800315 	stw	r2,12(r3)
 8014d34:	10c00215 	stw	r3,8(r2)
 8014d38:	bc400204 	addi	r17,r23,8
 8014d3c:	2180ac36 	bltu	r4,r6,8014ff0 <_realloc_r+0x4c0>
 8014d40:	008004c4 	movi	r2,19
 8014d44:	1180972e 	bgeu	r2,r6,8014fa4 <_realloc_r+0x474>
 8014d48:	98800017 	ldw	r2,0(r19)
 8014d4c:	b8800215 	stw	r2,8(r23)
 8014d50:	98800117 	ldw	r2,4(r19)
 8014d54:	b8800315 	stw	r2,12(r23)
 8014d58:	008006c4 	movi	r2,27
 8014d5c:	1180b92e 	bgeu	r2,r6,8015044 <_realloc_r+0x514>
 8014d60:	98800217 	ldw	r2,8(r19)
 8014d64:	b8800415 	stw	r2,16(r23)
 8014d68:	98800317 	ldw	r2,12(r19)
 8014d6c:	b8800515 	stw	r2,20(r23)
 8014d70:	313fbe26 	beq	r6,r4,8014c6c <__alt_data_end+0xfc014c6c>
 8014d74:	b8c00604 	addi	r3,r23,24
 8014d78:	9cc00404 	addi	r19,r19,16
 8014d7c:	98800017 	ldw	r2,0(r19)
 8014d80:	b021883a 	mov	r16,r22
 8014d84:	b82b883a 	mov	r21,r23
 8014d88:	18800015 	stw	r2,0(r3)
 8014d8c:	98800117 	ldw	r2,4(r19)
 8014d90:	18800115 	stw	r2,4(r3)
 8014d94:	98800217 	ldw	r2,8(r19)
 8014d98:	18800215 	stw	r2,8(r3)
 8014d9c:	b8c00117 	ldw	r3,4(r23)
 8014da0:	003fbd06 	br	8014c98 <__alt_data_end+0xfc014c98>
 8014da4:	00800304 	movi	r2,12
 8014da8:	90800015 	stw	r2,0(r18)
 8014dac:	0005883a 	mov	r2,zero
 8014db0:	003fc606 	br	8014ccc <__alt_data_end+0xfc014ccc>
 8014db4:	1d06b03a 	or	r3,r3,r20
 8014db8:	ad0b883a 	add	r5,r21,r20
 8014dbc:	a8c00115 	stw	r3,4(r21)
 8014dc0:	38800054 	ori	r2,r7,1
 8014dc4:	28800115 	stw	r2,4(r5)
 8014dc8:	29cf883a 	add	r7,r5,r7
 8014dcc:	38800117 	ldw	r2,4(r7)
 8014dd0:	9009883a 	mov	r4,r18
 8014dd4:	29400204 	addi	r5,r5,8
 8014dd8:	10800054 	ori	r2,r2,1
 8014ddc:	38800115 	stw	r2,4(r7)
 8014de0:	8012c5c0 	call	8012c5c <_free_r>
 8014de4:	003fb606 	br	8014cc0 <__alt_data_end+0xfc014cc0>
 8014de8:	880b883a 	mov	r5,r17
 8014dec:	9009883a 	mov	r4,r18
 8014df0:	800bd580 	call	800bd58 <_malloc_r>
 8014df4:	1023883a 	mov	r17,r2
 8014df8:	1000aa26 	beq	r2,zero,80150a4 <_realloc_r+0x574>
 8014dfc:	98ffff17 	ldw	r3,-4(r19)
 8014e00:	113ffe04 	addi	r4,r2,-8
 8014e04:	00bfff84 	movi	r2,-2
 8014e08:	1884703a 	and	r2,r3,r2
 8014e0c:	a885883a 	add	r2,r21,r2
 8014e10:	20808626 	beq	r4,r2,801502c <_realloc_r+0x4fc>
 8014e14:	81bfff04 	addi	r6,r16,-4
 8014e18:	00800904 	movi	r2,36
 8014e1c:	11807036 	bltu	r2,r6,8014fe0 <_realloc_r+0x4b0>
 8014e20:	00c004c4 	movi	r3,19
 8014e24:	19805636 	bltu	r3,r6,8014f80 <_realloc_r+0x450>
 8014e28:	8805883a 	mov	r2,r17
 8014e2c:	9807883a 	mov	r3,r19
 8014e30:	19000017 	ldw	r4,0(r3)
 8014e34:	11000015 	stw	r4,0(r2)
 8014e38:	19000117 	ldw	r4,4(r3)
 8014e3c:	11000115 	stw	r4,4(r2)
 8014e40:	18c00217 	ldw	r3,8(r3)
 8014e44:	10c00215 	stw	r3,8(r2)
 8014e48:	980b883a 	mov	r5,r19
 8014e4c:	9009883a 	mov	r4,r18
 8014e50:	8012c5c0 	call	8012c5c <_free_r>
 8014e54:	9009883a 	mov	r4,r18
 8014e58:	8019b300 	call	8019b30 <__malloc_unlock>
 8014e5c:	8805883a 	mov	r2,r17
 8014e60:	003f9a06 	br	8014ccc <__alt_data_end+0xfc014ccc>
 8014e64:	300b883a 	mov	r5,r6
 8014e68:	dfc00917 	ldw	ra,36(sp)
 8014e6c:	df000817 	ldw	fp,32(sp)
 8014e70:	ddc00717 	ldw	r23,28(sp)
 8014e74:	dd800617 	ldw	r22,24(sp)
 8014e78:	dd400517 	ldw	r21,20(sp)
 8014e7c:	dd000417 	ldw	r20,16(sp)
 8014e80:	dcc00317 	ldw	r19,12(sp)
 8014e84:	dc800217 	ldw	r18,8(sp)
 8014e88:	dc400117 	ldw	r17,4(sp)
 8014e8c:	dc000017 	ldw	r16,0(sp)
 8014e90:	dec00a04 	addi	sp,sp,40
 8014e94:	800bd581 	jmpi	800bd58 <_malloc_r>
 8014e98:	11400317 	ldw	r5,12(r2)
 8014e9c:	10800217 	ldw	r2,8(r2)
 8014ea0:	9823883a 	mov	r17,r19
 8014ea4:	2021883a 	mov	r16,r4
 8014ea8:	11400315 	stw	r5,12(r2)
 8014eac:	28800215 	stw	r2,8(r5)
 8014eb0:	003f7906 	br	8014c98 <__alt_data_end+0xfc014c98>
 8014eb4:	21000117 	ldw	r4,4(r4)
 8014eb8:	00bfff04 	movi	r2,-4
 8014ebc:	a1800404 	addi	r6,r20,16
 8014ec0:	2088703a 	and	r4,r4,r2
 8014ec4:	2409883a 	add	r4,r4,r16
 8014ec8:	2180380e 	bge	r4,r6,8014fac <_realloc_r+0x47c>
 8014ecc:	18c0004c 	andi	r3,r3,1
 8014ed0:	183fc51e 	bne	r3,zero,8014de8 <__alt_data_end+0xfc014de8>
 8014ed4:	9dfffe17 	ldw	r23,-8(r19)
 8014ed8:	adefc83a 	sub	r23,r21,r23
 8014edc:	b9400117 	ldw	r5,4(r23)
 8014ee0:	288a703a 	and	r5,r5,r2
 8014ee4:	216d883a 	add	r22,r4,r5
 8014ee8:	b1bf8b16 	blt	r22,r6,8014d18 <__alt_data_end+0xfc014d18>
 8014eec:	b8800317 	ldw	r2,12(r23)
 8014ef0:	b8c00217 	ldw	r3,8(r23)
 8014ef4:	81bfff04 	addi	r6,r16,-4
 8014ef8:	01000904 	movi	r4,36
 8014efc:	18800315 	stw	r2,12(r3)
 8014f00:	10c00215 	stw	r3,8(r2)
 8014f04:	bc400204 	addi	r17,r23,8
 8014f08:	21805a36 	bltu	r4,r6,8015074 <_realloc_r+0x544>
 8014f0c:	008004c4 	movi	r2,19
 8014f10:	1180562e 	bgeu	r2,r6,801506c <_realloc_r+0x53c>
 8014f14:	98800017 	ldw	r2,0(r19)
 8014f18:	b8800215 	stw	r2,8(r23)
 8014f1c:	98800117 	ldw	r2,4(r19)
 8014f20:	b8800315 	stw	r2,12(r23)
 8014f24:	008006c4 	movi	r2,27
 8014f28:	11805636 	bltu	r2,r6,8015084 <_realloc_r+0x554>
 8014f2c:	b8800404 	addi	r2,r23,16
 8014f30:	9cc00204 	addi	r19,r19,8
 8014f34:	98c00017 	ldw	r3,0(r19)
 8014f38:	10c00015 	stw	r3,0(r2)
 8014f3c:	98c00117 	ldw	r3,4(r19)
 8014f40:	10c00115 	stw	r3,4(r2)
 8014f44:	98c00217 	ldw	r3,8(r19)
 8014f48:	10c00215 	stw	r3,8(r2)
 8014f4c:	bd07883a 	add	r3,r23,r20
 8014f50:	b505c83a 	sub	r2,r22,r20
 8014f54:	e0c00215 	stw	r3,8(fp)
 8014f58:	10800054 	ori	r2,r2,1
 8014f5c:	18800115 	stw	r2,4(r3)
 8014f60:	b8800117 	ldw	r2,4(r23)
 8014f64:	9009883a 	mov	r4,r18
 8014f68:	1080004c 	andi	r2,r2,1
 8014f6c:	a0a8b03a 	or	r20,r20,r2
 8014f70:	bd000115 	stw	r20,4(r23)
 8014f74:	8019b300 	call	8019b30 <__malloc_unlock>
 8014f78:	8805883a 	mov	r2,r17
 8014f7c:	003f5306 	br	8014ccc <__alt_data_end+0xfc014ccc>
 8014f80:	98c00017 	ldw	r3,0(r19)
 8014f84:	88c00015 	stw	r3,0(r17)
 8014f88:	98c00117 	ldw	r3,4(r19)
 8014f8c:	88c00115 	stw	r3,4(r17)
 8014f90:	00c006c4 	movi	r3,27
 8014f94:	19801d36 	bltu	r3,r6,801500c <_realloc_r+0x4dc>
 8014f98:	88800204 	addi	r2,r17,8
 8014f9c:	98c00204 	addi	r3,r19,8
 8014fa0:	003fa306 	br	8014e30 <__alt_data_end+0xfc014e30>
 8014fa4:	8807883a 	mov	r3,r17
 8014fa8:	003f7406 	br	8014d7c <__alt_data_end+0xfc014d7c>
 8014fac:	ad2b883a 	add	r21,r21,r20
 8014fb0:	2505c83a 	sub	r2,r4,r20
 8014fb4:	e5400215 	stw	r21,8(fp)
 8014fb8:	10800054 	ori	r2,r2,1
 8014fbc:	a8800115 	stw	r2,4(r21)
 8014fc0:	98bfff17 	ldw	r2,-4(r19)
 8014fc4:	9009883a 	mov	r4,r18
 8014fc8:	1080004c 	andi	r2,r2,1
 8014fcc:	a0a8b03a 	or	r20,r20,r2
 8014fd0:	9d3fff15 	stw	r20,-4(r19)
 8014fd4:	8019b300 	call	8019b30 <__malloc_unlock>
 8014fd8:	9805883a 	mov	r2,r19
 8014fdc:	003f3b06 	br	8014ccc <__alt_data_end+0xfc014ccc>
 8014fe0:	8809883a 	mov	r4,r17
 8014fe4:	980b883a 	mov	r5,r19
 8014fe8:	80138e00 	call	80138e0 <memmove>
 8014fec:	003f9606 	br	8014e48 <__alt_data_end+0xfc014e48>
 8014ff0:	8809883a 	mov	r4,r17
 8014ff4:	980b883a 	mov	r5,r19
 8014ff8:	80138e00 	call	80138e0 <memmove>
 8014ffc:	b8c00117 	ldw	r3,4(r23)
 8015000:	b021883a 	mov	r16,r22
 8015004:	b82b883a 	mov	r21,r23
 8015008:	003f2306 	br	8014c98 <__alt_data_end+0xfc014c98>
 801500c:	98c00217 	ldw	r3,8(r19)
 8015010:	88c00215 	stw	r3,8(r17)
 8015014:	98c00317 	ldw	r3,12(r19)
 8015018:	88c00315 	stw	r3,12(r17)
 801501c:	30800c26 	beq	r6,r2,8015050 <_realloc_r+0x520>
 8015020:	88800404 	addi	r2,r17,16
 8015024:	98c00404 	addi	r3,r19,16
 8015028:	003f8106 	br	8014e30 <__alt_data_end+0xfc014e30>
 801502c:	893fff17 	ldw	r4,-4(r17)
 8015030:	00bfff04 	movi	r2,-4
 8015034:	9823883a 	mov	r17,r19
 8015038:	2084703a 	and	r2,r4,r2
 801503c:	80a1883a 	add	r16,r16,r2
 8015040:	003f1506 	br	8014c98 <__alt_data_end+0xfc014c98>
 8015044:	b8c00404 	addi	r3,r23,16
 8015048:	9cc00204 	addi	r19,r19,8
 801504c:	003f4b06 	br	8014d7c <__alt_data_end+0xfc014d7c>
 8015050:	99000417 	ldw	r4,16(r19)
 8015054:	88800604 	addi	r2,r17,24
 8015058:	98c00604 	addi	r3,r19,24
 801505c:	89000415 	stw	r4,16(r17)
 8015060:	99000517 	ldw	r4,20(r19)
 8015064:	89000515 	stw	r4,20(r17)
 8015068:	003f7106 	br	8014e30 <__alt_data_end+0xfc014e30>
 801506c:	8805883a 	mov	r2,r17
 8015070:	003fb006 	br	8014f34 <__alt_data_end+0xfc014f34>
 8015074:	8809883a 	mov	r4,r17
 8015078:	980b883a 	mov	r5,r19
 801507c:	80138e00 	call	80138e0 <memmove>
 8015080:	003fb206 	br	8014f4c <__alt_data_end+0xfc014f4c>
 8015084:	98800217 	ldw	r2,8(r19)
 8015088:	b8800415 	stw	r2,16(r23)
 801508c:	98800317 	ldw	r2,12(r19)
 8015090:	b8800515 	stw	r2,20(r23)
 8015094:	31000726 	beq	r6,r4,80150b4 <_realloc_r+0x584>
 8015098:	b8800604 	addi	r2,r23,24
 801509c:	9cc00404 	addi	r19,r19,16
 80150a0:	003fa406 	br	8014f34 <__alt_data_end+0xfc014f34>
 80150a4:	9009883a 	mov	r4,r18
 80150a8:	8019b300 	call	8019b30 <__malloc_unlock>
 80150ac:	0005883a 	mov	r2,zero
 80150b0:	003f0606 	br	8014ccc <__alt_data_end+0xfc014ccc>
 80150b4:	98c00417 	ldw	r3,16(r19)
 80150b8:	9cc00604 	addi	r19,r19,24
 80150bc:	b8800804 	addi	r2,r23,32
 80150c0:	b8c00615 	stw	r3,24(r23)
 80150c4:	98ffff17 	ldw	r3,-4(r19)
 80150c8:	b8c00715 	stw	r3,28(r23)
 80150cc:	003f9906 	br	8014f34 <__alt_data_end+0xfc014f34>

080150d0 <__fpclassifyd>:
 80150d0:	00a00034 	movhi	r2,32768
 80150d4:	10bfffc4 	addi	r2,r2,-1
 80150d8:	2884703a 	and	r2,r5,r2
 80150dc:	10000726 	beq	r2,zero,80150fc <__fpclassifyd+0x2c>
 80150e0:	00fffc34 	movhi	r3,65520
 80150e4:	019ff834 	movhi	r6,32736
 80150e8:	28c7883a 	add	r3,r5,r3
 80150ec:	31bfffc4 	addi	r6,r6,-1
 80150f0:	30c00536 	bltu	r6,r3,8015108 <__fpclassifyd+0x38>
 80150f4:	00800104 	movi	r2,4
 80150f8:	f800283a 	ret
 80150fc:	2000021e 	bne	r4,zero,8015108 <__fpclassifyd+0x38>
 8015100:	00800084 	movi	r2,2
 8015104:	f800283a 	ret
 8015108:	00dffc34 	movhi	r3,32752
 801510c:	019ff834 	movhi	r6,32736
 8015110:	28cb883a 	add	r5,r5,r3
 8015114:	31bfffc4 	addi	r6,r6,-1
 8015118:	317ff62e 	bgeu	r6,r5,80150f4 <__alt_data_end+0xfc0150f4>
 801511c:	01400434 	movhi	r5,16
 8015120:	297fffc4 	addi	r5,r5,-1
 8015124:	28800236 	bltu	r5,r2,8015130 <__fpclassifyd+0x60>
 8015128:	008000c4 	movi	r2,3
 801512c:	f800283a 	ret
 8015130:	10c00226 	beq	r2,r3,801513c <__fpclassifyd+0x6c>
 8015134:	0005883a 	mov	r2,zero
 8015138:	f800283a 	ret
 801513c:	2005003a 	cmpeq	r2,r4,zero
 8015140:	f800283a 	ret

08015144 <_init_signal_r>:
 8015144:	2080b717 	ldw	r2,732(r4)
 8015148:	defffe04 	addi	sp,sp,-8
 801514c:	dc000015 	stw	r16,0(sp)
 8015150:	dfc00115 	stw	ra,4(sp)
 8015154:	2021883a 	mov	r16,r4
 8015158:	10000526 	beq	r2,zero,8015170 <_init_signal_r+0x2c>
 801515c:	0005883a 	mov	r2,zero
 8015160:	dfc00117 	ldw	ra,4(sp)
 8015164:	dc000017 	ldw	r16,0(sp)
 8015168:	dec00204 	addi	sp,sp,8
 801516c:	f800283a 	ret
 8015170:	01402004 	movi	r5,128
 8015174:	800bd580 	call	800bd58 <_malloc_r>
 8015178:	8080b715 	stw	r2,732(r16)
 801517c:	10000926 	beq	r2,zero,80151a4 <_init_signal_r+0x60>
 8015180:	0007883a 	mov	r3,zero
 8015184:	01002004 	movi	r4,128
 8015188:	00000106 	br	8015190 <_init_signal_r+0x4c>
 801518c:	8080b717 	ldw	r2,732(r16)
 8015190:	10c5883a 	add	r2,r2,r3
 8015194:	10000015 	stw	zero,0(r2)
 8015198:	18c00104 	addi	r3,r3,4
 801519c:	193ffb1e 	bne	r3,r4,801518c <__alt_data_end+0xfc01518c>
 80151a0:	003fee06 	br	801515c <__alt_data_end+0xfc01515c>
 80151a4:	00bfffc4 	movi	r2,-1
 80151a8:	003fed06 	br	8015160 <__alt_data_end+0xfc015160>

080151ac <_signal_r>:
 80151ac:	00c007c4 	movi	r3,31
 80151b0:	19401536 	bltu	r3,r5,8015208 <_signal_r+0x5c>
 80151b4:	2080b717 	ldw	r2,732(r4)
 80151b8:	defffc04 	addi	sp,sp,-16
 80151bc:	dc800215 	stw	r18,8(sp)
 80151c0:	dc400115 	stw	r17,4(sp)
 80151c4:	dc000015 	stw	r16,0(sp)
 80151c8:	dfc00315 	stw	ra,12(sp)
 80151cc:	3023883a 	mov	r17,r6
 80151d0:	2021883a 	mov	r16,r4
 80151d4:	2825883a 	mov	r18,r5
 80151d8:	10000f26 	beq	r2,zero,8015218 <_signal_r+0x6c>
 80151dc:	948b883a 	add	r5,r18,r18
 80151e0:	294b883a 	add	r5,r5,r5
 80151e4:	114b883a 	add	r5,r2,r5
 80151e8:	28800017 	ldw	r2,0(r5)
 80151ec:	2c400015 	stw	r17,0(r5)
 80151f0:	dfc00317 	ldw	ra,12(sp)
 80151f4:	dc800217 	ldw	r18,8(sp)
 80151f8:	dc400117 	ldw	r17,4(sp)
 80151fc:	dc000017 	ldw	r16,0(sp)
 8015200:	dec00404 	addi	sp,sp,16
 8015204:	f800283a 	ret
 8015208:	00c00584 	movi	r3,22
 801520c:	20c00015 	stw	r3,0(r4)
 8015210:	00bfffc4 	movi	r2,-1
 8015214:	f800283a 	ret
 8015218:	80151440 	call	8015144 <_init_signal_r>
 801521c:	1000021e 	bne	r2,zero,8015228 <_signal_r+0x7c>
 8015220:	8080b717 	ldw	r2,732(r16)
 8015224:	003fed06 	br	80151dc <__alt_data_end+0xfc0151dc>
 8015228:	00bfffc4 	movi	r2,-1
 801522c:	003ff006 	br	80151f0 <__alt_data_end+0xfc0151f0>

08015230 <_raise_r>:
 8015230:	008007c4 	movi	r2,31
 8015234:	11402936 	bltu	r2,r5,80152dc <_raise_r+0xac>
 8015238:	20c0b717 	ldw	r3,732(r4)
 801523c:	defffd04 	addi	sp,sp,-12
 8015240:	dc400115 	stw	r17,4(sp)
 8015244:	dc000015 	stw	r16,0(sp)
 8015248:	dfc00215 	stw	ra,8(sp)
 801524c:	2023883a 	mov	r17,r4
 8015250:	2821883a 	mov	r16,r5
 8015254:	18001726 	beq	r3,zero,80152b4 <_raise_r+0x84>
 8015258:	2945883a 	add	r2,r5,r5
 801525c:	1085883a 	add	r2,r2,r2
 8015260:	1887883a 	add	r3,r3,r2
 8015264:	19400017 	ldw	r5,0(r3)
 8015268:	28001226 	beq	r5,zero,80152b4 <_raise_r+0x84>
 801526c:	00800044 	movi	r2,1
 8015270:	28800e26 	beq	r5,r2,80152ac <_raise_r+0x7c>
 8015274:	013fffc4 	movi	r4,-1
 8015278:	29000926 	beq	r5,r4,80152a0 <_raise_r+0x70>
 801527c:	18000015 	stw	zero,0(r3)
 8015280:	8009883a 	mov	r4,r16
 8015284:	283ee83a 	callr	r5
 8015288:	0005883a 	mov	r2,zero
 801528c:	dfc00217 	ldw	ra,8(sp)
 8015290:	dc400117 	ldw	r17,4(sp)
 8015294:	dc000017 	ldw	r16,0(sp)
 8015298:	dec00304 	addi	sp,sp,12
 801529c:	f800283a 	ret
 80152a0:	00c00584 	movi	r3,22
 80152a4:	88c00015 	stw	r3,0(r17)
 80152a8:	003ff806 	br	801528c <__alt_data_end+0xfc01528c>
 80152ac:	0005883a 	mov	r2,zero
 80152b0:	003ff606 	br	801528c <__alt_data_end+0xfc01528c>
 80152b4:	8809883a 	mov	r4,r17
 80152b8:	80154400 	call	8015440 <_getpid_r>
 80152bc:	8809883a 	mov	r4,r17
 80152c0:	100b883a 	mov	r5,r2
 80152c4:	800d883a 	mov	r6,r16
 80152c8:	dfc00217 	ldw	ra,8(sp)
 80152cc:	dc400117 	ldw	r17,4(sp)
 80152d0:	dc000017 	ldw	r16,0(sp)
 80152d4:	dec00304 	addi	sp,sp,12
 80152d8:	80153e81 	jmpi	80153e8 <_kill_r>
 80152dc:	00800584 	movi	r2,22
 80152e0:	20800015 	stw	r2,0(r4)
 80152e4:	00bfffc4 	movi	r2,-1
 80152e8:	f800283a 	ret

080152ec <__sigtramp_r>:
 80152ec:	008007c4 	movi	r2,31
 80152f0:	11402436 	bltu	r2,r5,8015384 <__sigtramp_r+0x98>
 80152f4:	20c0b717 	ldw	r3,732(r4)
 80152f8:	defffd04 	addi	sp,sp,-12
 80152fc:	dc400115 	stw	r17,4(sp)
 8015300:	dc000015 	stw	r16,0(sp)
 8015304:	dfc00215 	stw	ra,8(sp)
 8015308:	2021883a 	mov	r16,r4
 801530c:	2823883a 	mov	r17,r5
 8015310:	18001826 	beq	r3,zero,8015374 <__sigtramp_r+0x88>
 8015314:	8c45883a 	add	r2,r17,r17
 8015318:	1085883a 	add	r2,r2,r2
 801531c:	1885883a 	add	r2,r3,r2
 8015320:	10c00017 	ldw	r3,0(r2)
 8015324:	18001126 	beq	r3,zero,801536c <__sigtramp_r+0x80>
 8015328:	013fffc4 	movi	r4,-1
 801532c:	19000d26 	beq	r3,r4,8015364 <__sigtramp_r+0x78>
 8015330:	01000044 	movi	r4,1
 8015334:	19000926 	beq	r3,r4,801535c <__sigtramp_r+0x70>
 8015338:	10000015 	stw	zero,0(r2)
 801533c:	8809883a 	mov	r4,r17
 8015340:	183ee83a 	callr	r3
 8015344:	0005883a 	mov	r2,zero
 8015348:	dfc00217 	ldw	ra,8(sp)
 801534c:	dc400117 	ldw	r17,4(sp)
 8015350:	dc000017 	ldw	r16,0(sp)
 8015354:	dec00304 	addi	sp,sp,12
 8015358:	f800283a 	ret
 801535c:	008000c4 	movi	r2,3
 8015360:	003ff906 	br	8015348 <__alt_data_end+0xfc015348>
 8015364:	00800084 	movi	r2,2
 8015368:	003ff706 	br	8015348 <__alt_data_end+0xfc015348>
 801536c:	00800044 	movi	r2,1
 8015370:	003ff506 	br	8015348 <__alt_data_end+0xfc015348>
 8015374:	80151440 	call	8015144 <_init_signal_r>
 8015378:	1000041e 	bne	r2,zero,801538c <__sigtramp_r+0xa0>
 801537c:	80c0b717 	ldw	r3,732(r16)
 8015380:	003fe406 	br	8015314 <__alt_data_end+0xfc015314>
 8015384:	00bfffc4 	movi	r2,-1
 8015388:	f800283a 	ret
 801538c:	00bfffc4 	movi	r2,-1
 8015390:	003fed06 	br	8015348 <__alt_data_end+0xfc015348>

08015394 <raise>:
 8015394:	008200f4 	movhi	r2,2051
 8015398:	10a3ec04 	addi	r2,r2,-28752
 801539c:	200b883a 	mov	r5,r4
 80153a0:	11000017 	ldw	r4,0(r2)
 80153a4:	80152301 	jmpi	8015230 <_raise_r>

080153a8 <signal>:
 80153a8:	00c200f4 	movhi	r3,2051
 80153ac:	18e3ec04 	addi	r3,r3,-28752
 80153b0:	2005883a 	mov	r2,r4
 80153b4:	19000017 	ldw	r4,0(r3)
 80153b8:	280d883a 	mov	r6,r5
 80153bc:	100b883a 	mov	r5,r2
 80153c0:	80151ac1 	jmpi	80151ac <_signal_r>

080153c4 <_init_signal>:
 80153c4:	008200f4 	movhi	r2,2051
 80153c8:	10a3ec04 	addi	r2,r2,-28752
 80153cc:	11000017 	ldw	r4,0(r2)
 80153d0:	80151441 	jmpi	8015144 <_init_signal_r>

080153d4 <__sigtramp>:
 80153d4:	008200f4 	movhi	r2,2051
 80153d8:	10a3ec04 	addi	r2,r2,-28752
 80153dc:	200b883a 	mov	r5,r4
 80153e0:	11000017 	ldw	r4,0(r2)
 80153e4:	80152ec1 	jmpi	80152ec <__sigtramp_r>

080153e8 <_kill_r>:
 80153e8:	defffd04 	addi	sp,sp,-12
 80153ec:	dc000015 	stw	r16,0(sp)
 80153f0:	040200f4 	movhi	r16,2051
 80153f4:	dc400115 	stw	r17,4(sp)
 80153f8:	842afa04 	addi	r16,r16,-21528
 80153fc:	2023883a 	mov	r17,r4
 8015400:	2809883a 	mov	r4,r5
 8015404:	300b883a 	mov	r5,r6
 8015408:	dfc00215 	stw	ra,8(sp)
 801540c:	80000015 	stw	zero,0(r16)
 8015410:	80197600 	call	8019760 <kill>
 8015414:	00ffffc4 	movi	r3,-1
 8015418:	10c00526 	beq	r2,r3,8015430 <_kill_r+0x48>
 801541c:	dfc00217 	ldw	ra,8(sp)
 8015420:	dc400117 	ldw	r17,4(sp)
 8015424:	dc000017 	ldw	r16,0(sp)
 8015428:	dec00304 	addi	sp,sp,12
 801542c:	f800283a 	ret
 8015430:	80c00017 	ldw	r3,0(r16)
 8015434:	183ff926 	beq	r3,zero,801541c <__alt_data_end+0xfc01541c>
 8015438:	88c00015 	stw	r3,0(r17)
 801543c:	003ff706 	br	801541c <__alt_data_end+0xfc01541c>

08015440 <_getpid_r>:
 8015440:	801932c1 	jmpi	801932c <getpid>

08015444 <__sread>:
 8015444:	defffe04 	addi	sp,sp,-8
 8015448:	dc000015 	stw	r16,0(sp)
 801544c:	2821883a 	mov	r16,r5
 8015450:	2940038f 	ldh	r5,14(r5)
 8015454:	dfc00115 	stw	ra,4(sp)
 8015458:	801825c0 	call	801825c <_read_r>
 801545c:	10000716 	blt	r2,zero,801547c <__sread+0x38>
 8015460:	80c01417 	ldw	r3,80(r16)
 8015464:	1887883a 	add	r3,r3,r2
 8015468:	80c01415 	stw	r3,80(r16)
 801546c:	dfc00117 	ldw	ra,4(sp)
 8015470:	dc000017 	ldw	r16,0(sp)
 8015474:	dec00204 	addi	sp,sp,8
 8015478:	f800283a 	ret
 801547c:	80c0030b 	ldhu	r3,12(r16)
 8015480:	18fbffcc 	andi	r3,r3,61439
 8015484:	80c0030d 	sth	r3,12(r16)
 8015488:	dfc00117 	ldw	ra,4(sp)
 801548c:	dc000017 	ldw	r16,0(sp)
 8015490:	dec00204 	addi	sp,sp,8
 8015494:	f800283a 	ret

08015498 <__seofread>:
 8015498:	0005883a 	mov	r2,zero
 801549c:	f800283a 	ret

080154a0 <__swrite>:
 80154a0:	2880030b 	ldhu	r2,12(r5)
 80154a4:	defffb04 	addi	sp,sp,-20
 80154a8:	dcc00315 	stw	r19,12(sp)
 80154ac:	dc800215 	stw	r18,8(sp)
 80154b0:	dc400115 	stw	r17,4(sp)
 80154b4:	dc000015 	stw	r16,0(sp)
 80154b8:	dfc00415 	stw	ra,16(sp)
 80154bc:	10c0400c 	andi	r3,r2,256
 80154c0:	2821883a 	mov	r16,r5
 80154c4:	2027883a 	mov	r19,r4
 80154c8:	3025883a 	mov	r18,r6
 80154cc:	3823883a 	mov	r17,r7
 80154d0:	18000526 	beq	r3,zero,80154e8 <__swrite+0x48>
 80154d4:	2940038f 	ldh	r5,14(r5)
 80154d8:	000d883a 	mov	r6,zero
 80154dc:	01c00084 	movi	r7,2
 80154e0:	80182000 	call	8018200 <_lseek_r>
 80154e4:	8080030b 	ldhu	r2,12(r16)
 80154e8:	8140038f 	ldh	r5,14(r16)
 80154ec:	10bbffcc 	andi	r2,r2,61439
 80154f0:	9809883a 	mov	r4,r19
 80154f4:	900d883a 	mov	r6,r18
 80154f8:	880f883a 	mov	r7,r17
 80154fc:	8080030d 	sth	r2,12(r16)
 8015500:	dfc00417 	ldw	ra,16(sp)
 8015504:	dcc00317 	ldw	r19,12(sp)
 8015508:	dc800217 	ldw	r18,8(sp)
 801550c:	dc400117 	ldw	r17,4(sp)
 8015510:	dc000017 	ldw	r16,0(sp)
 8015514:	dec00504 	addi	sp,sp,20
 8015518:	8017db41 	jmpi	8017db4 <_write_r>

0801551c <__sseek>:
 801551c:	defffe04 	addi	sp,sp,-8
 8015520:	dc000015 	stw	r16,0(sp)
 8015524:	2821883a 	mov	r16,r5
 8015528:	2940038f 	ldh	r5,14(r5)
 801552c:	dfc00115 	stw	ra,4(sp)
 8015530:	80182000 	call	8018200 <_lseek_r>
 8015534:	00ffffc4 	movi	r3,-1
 8015538:	10c00826 	beq	r2,r3,801555c <__sseek+0x40>
 801553c:	80c0030b 	ldhu	r3,12(r16)
 8015540:	80801415 	stw	r2,80(r16)
 8015544:	18c40014 	ori	r3,r3,4096
 8015548:	80c0030d 	sth	r3,12(r16)
 801554c:	dfc00117 	ldw	ra,4(sp)
 8015550:	dc000017 	ldw	r16,0(sp)
 8015554:	dec00204 	addi	sp,sp,8
 8015558:	f800283a 	ret
 801555c:	80c0030b 	ldhu	r3,12(r16)
 8015560:	18fbffcc 	andi	r3,r3,61439
 8015564:	80c0030d 	sth	r3,12(r16)
 8015568:	dfc00117 	ldw	ra,4(sp)
 801556c:	dc000017 	ldw	r16,0(sp)
 8015570:	dec00204 	addi	sp,sp,8
 8015574:	f800283a 	ret

08015578 <__sclose>:
 8015578:	2940038f 	ldh	r5,14(r5)
 801557c:	8017e101 	jmpi	8017e10 <_close_r>

08015580 <__ssprint_r>:
 8015580:	30800217 	ldw	r2,8(r6)
 8015584:	defff604 	addi	sp,sp,-40
 8015588:	ddc00715 	stw	r23,28(sp)
 801558c:	dcc00315 	stw	r19,12(sp)
 8015590:	dfc00915 	stw	ra,36(sp)
 8015594:	df000815 	stw	fp,32(sp)
 8015598:	dd800615 	stw	r22,24(sp)
 801559c:	dd400515 	stw	r21,20(sp)
 80155a0:	dd000415 	stw	r20,16(sp)
 80155a4:	dc800215 	stw	r18,8(sp)
 80155a8:	dc400115 	stw	r17,4(sp)
 80155ac:	dc000015 	stw	r16,0(sp)
 80155b0:	3027883a 	mov	r19,r6
 80155b4:	35c00017 	ldw	r23,0(r6)
 80155b8:	10005526 	beq	r2,zero,8015710 <__ssprint_r+0x190>
 80155bc:	2029883a 	mov	r20,r4
 80155c0:	29000017 	ldw	r4,0(r5)
 80155c4:	2821883a 	mov	r16,r5
 80155c8:	0039883a 	mov	fp,zero
 80155cc:	0023883a 	mov	r17,zero
 80155d0:	88003926 	beq	r17,zero,80156b8 <__ssprint_r+0x138>
 80155d4:	84800217 	ldw	r18,8(r16)
 80155d8:	902d883a 	mov	r22,r18
 80155dc:	8c803a36 	bltu	r17,r18,80156c8 <__ssprint_r+0x148>
 80155e0:	80c0030b 	ldhu	r3,12(r16)
 80155e4:	1881200c 	andi	r2,r3,1152
 80155e8:	10002626 	beq	r2,zero,8015684 <__ssprint_r+0x104>
 80155ec:	80800517 	ldw	r2,20(r16)
 80155f0:	81400417 	ldw	r5,16(r16)
 80155f4:	89c00044 	addi	r7,r17,1
 80155f8:	108d883a 	add	r6,r2,r2
 80155fc:	3085883a 	add	r2,r6,r2
 8015600:	100cd7fa 	srli	r6,r2,31
 8015604:	216dc83a 	sub	r22,r4,r5
 8015608:	3d89883a 	add	r4,r7,r22
 801560c:	3085883a 	add	r2,r6,r2
 8015610:	1025d07a 	srai	r18,r2,1
 8015614:	900d883a 	mov	r6,r18
 8015618:	9100022e 	bgeu	r18,r4,8015624 <__ssprint_r+0xa4>
 801561c:	2025883a 	mov	r18,r4
 8015620:	200d883a 	mov	r6,r4
 8015624:	18c1000c 	andi	r3,r3,1024
 8015628:	a009883a 	mov	r4,r20
 801562c:	18002926 	beq	r3,zero,80156d4 <__ssprint_r+0x154>
 8015630:	300b883a 	mov	r5,r6
 8015634:	800bd580 	call	800bd58 <_malloc_r>
 8015638:	102b883a 	mov	r21,r2
 801563c:	10002b26 	beq	r2,zero,80156ec <__ssprint_r+0x16c>
 8015640:	81400417 	ldw	r5,16(r16)
 8015644:	1009883a 	mov	r4,r2
 8015648:	b00d883a 	mov	r6,r22
 801564c:	800c5000 	call	800c500 <memcpy>
 8015650:	8080030b 	ldhu	r2,12(r16)
 8015654:	00fedfc4 	movi	r3,-1153
 8015658:	10c4703a 	and	r2,r2,r3
 801565c:	10802014 	ori	r2,r2,128
 8015660:	8080030d 	sth	r2,12(r16)
 8015664:	ad89883a 	add	r4,r21,r22
 8015668:	95adc83a 	sub	r22,r18,r22
 801566c:	84800515 	stw	r18,20(r16)
 8015670:	85800215 	stw	r22,8(r16)
 8015674:	85400415 	stw	r21,16(r16)
 8015678:	81000015 	stw	r4,0(r16)
 801567c:	8825883a 	mov	r18,r17
 8015680:	882d883a 	mov	r22,r17
 8015684:	e00b883a 	mov	r5,fp
 8015688:	b00d883a 	mov	r6,r22
 801568c:	80138e00 	call	80138e0 <memmove>
 8015690:	80c00217 	ldw	r3,8(r16)
 8015694:	81000017 	ldw	r4,0(r16)
 8015698:	98800217 	ldw	r2,8(r19)
 801569c:	1ca5c83a 	sub	r18,r3,r18
 80156a0:	2589883a 	add	r4,r4,r22
 80156a4:	84800215 	stw	r18,8(r16)
 80156a8:	81000015 	stw	r4,0(r16)
 80156ac:	1463c83a 	sub	r17,r2,r17
 80156b0:	9c400215 	stw	r17,8(r19)
 80156b4:	88001626 	beq	r17,zero,8015710 <__ssprint_r+0x190>
 80156b8:	bf000017 	ldw	fp,0(r23)
 80156bc:	bc400117 	ldw	r17,4(r23)
 80156c0:	bdc00204 	addi	r23,r23,8
 80156c4:	003fc206 	br	80155d0 <__alt_data_end+0xfc0155d0>
 80156c8:	8825883a 	mov	r18,r17
 80156cc:	882d883a 	mov	r22,r17
 80156d0:	003fec06 	br	8015684 <__alt_data_end+0xfc015684>
 80156d4:	8014b300 	call	8014b30 <_realloc_r>
 80156d8:	102b883a 	mov	r21,r2
 80156dc:	103fe11e 	bne	r2,zero,8015664 <__alt_data_end+0xfc015664>
 80156e0:	81400417 	ldw	r5,16(r16)
 80156e4:	a009883a 	mov	r4,r20
 80156e8:	8012c5c0 	call	8012c5c <_free_r>
 80156ec:	80c0030b 	ldhu	r3,12(r16)
 80156f0:	00800304 	movi	r2,12
 80156f4:	a0800015 	stw	r2,0(r20)
 80156f8:	18c01014 	ori	r3,r3,64
 80156fc:	80c0030d 	sth	r3,12(r16)
 8015700:	00bfffc4 	movi	r2,-1
 8015704:	98000215 	stw	zero,8(r19)
 8015708:	98000115 	stw	zero,4(r19)
 801570c:	00000206 	br	8015718 <__ssprint_r+0x198>
 8015710:	98000115 	stw	zero,4(r19)
 8015714:	0005883a 	mov	r2,zero
 8015718:	dfc00917 	ldw	ra,36(sp)
 801571c:	df000817 	ldw	fp,32(sp)
 8015720:	ddc00717 	ldw	r23,28(sp)
 8015724:	dd800617 	ldw	r22,24(sp)
 8015728:	dd400517 	ldw	r21,20(sp)
 801572c:	dd000417 	ldw	r20,16(sp)
 8015730:	dcc00317 	ldw	r19,12(sp)
 8015734:	dc800217 	ldw	r18,8(sp)
 8015738:	dc400117 	ldw	r17,4(sp)
 801573c:	dc000017 	ldw	r16,0(sp)
 8015740:	dec00a04 	addi	sp,sp,40
 8015744:	f800283a 	ret

08015748 <___svfiprintf_internal_r>:
 8015748:	2880030b 	ldhu	r2,12(r5)
 801574c:	deffc904 	addi	sp,sp,-220
 8015750:	dd403215 	stw	r21,200(sp)
 8015754:	dfc03615 	stw	ra,216(sp)
 8015758:	df003515 	stw	fp,212(sp)
 801575c:	ddc03415 	stw	r23,208(sp)
 8015760:	dd803315 	stw	r22,204(sp)
 8015764:	dd003115 	stw	r20,196(sp)
 8015768:	dcc03015 	stw	r19,192(sp)
 801576c:	dc802f15 	stw	r18,188(sp)
 8015770:	dc402e15 	stw	r17,184(sp)
 8015774:	dc002d15 	stw	r16,180(sp)
 8015778:	d9402715 	stw	r5,156(sp)
 801577c:	d9002915 	stw	r4,164(sp)
 8015780:	1080200c 	andi	r2,r2,128
 8015784:	d9c02315 	stw	r7,140(sp)
 8015788:	302b883a 	mov	r21,r6
 801578c:	10000226 	beq	r2,zero,8015798 <___svfiprintf_internal_r+0x50>
 8015790:	28800417 	ldw	r2,16(r5)
 8015794:	1003ce26 	beq	r2,zero,80166d0 <___svfiprintf_internal_r+0xf88>
 8015798:	dac01a04 	addi	r11,sp,104
 801579c:	da8019c4 	addi	r10,sp,103
 80157a0:	dc802917 	ldw	r18,164(sp)
 80157a4:	dd002717 	ldw	r20,156(sp)
 80157a8:	04c200b4 	movhi	r19,2050
 80157ac:	dac01e15 	stw	r11,120(sp)
 80157b0:	5a97c83a 	sub	r11,r11,r10
 80157b4:	9cdcfe04 	addi	r19,r19,29688
 80157b8:	da801f15 	stw	r10,124(sp)
 80157bc:	dec01a15 	stw	sp,104(sp)
 80157c0:	d8001c15 	stw	zero,112(sp)
 80157c4:	d8001b15 	stw	zero,108(sp)
 80157c8:	d8002a15 	stw	zero,168(sp)
 80157cc:	d8002415 	stw	zero,144(sp)
 80157d0:	d811883a 	mov	r8,sp
 80157d4:	dac02b15 	stw	r11,172(sp)
 80157d8:	a8800007 	ldb	r2,0(r21)
 80157dc:	10026826 	beq	r2,zero,8016180 <___svfiprintf_internal_r+0xa38>
 80157e0:	01000944 	movi	r4,37
 80157e4:	11026626 	beq	r2,r4,8016180 <___svfiprintf_internal_r+0xa38>
 80157e8:	a805883a 	mov	r2,r21
 80157ec:	00000106 	br	80157f4 <___svfiprintf_internal_r+0xac>
 80157f0:	19000326 	beq	r3,r4,8015800 <___svfiprintf_internal_r+0xb8>
 80157f4:	10800044 	addi	r2,r2,1
 80157f8:	10c00007 	ldb	r3,0(r2)
 80157fc:	183ffc1e 	bne	r3,zero,80157f0 <__alt_data_end+0xfc0157f0>
 8015800:	1561c83a 	sub	r16,r2,r21
 8015804:	102d883a 	mov	r22,r2
 8015808:	80000e26 	beq	r16,zero,8015844 <___svfiprintf_internal_r+0xfc>
 801580c:	d8c01c17 	ldw	r3,112(sp)
 8015810:	d8801b17 	ldw	r2,108(sp)
 8015814:	45400015 	stw	r21,0(r8)
 8015818:	1c07883a 	add	r3,r3,r16
 801581c:	10800044 	addi	r2,r2,1
 8015820:	d8c01c15 	stw	r3,112(sp)
 8015824:	44000115 	stw	r16,4(r8)
 8015828:	d8801b15 	stw	r2,108(sp)
 801582c:	00c001c4 	movi	r3,7
 8015830:	1882d616 	blt	r3,r2,801638c <___svfiprintf_internal_r+0xc44>
 8015834:	42000204 	addi	r8,r8,8
 8015838:	da802417 	ldw	r10,144(sp)
 801583c:	5415883a 	add	r10,r10,r16
 8015840:	da802415 	stw	r10,144(sp)
 8015844:	b0800007 	ldb	r2,0(r22)
 8015848:	10027326 	beq	r2,zero,8016218 <___svfiprintf_internal_r+0xad0>
 801584c:	b1000047 	ldb	r4,1(r22)
 8015850:	b5400044 	addi	r21,r22,1
 8015854:	d8001d85 	stb	zero,118(sp)
 8015858:	000d883a 	mov	r6,zero
 801585c:	043fffc4 	movi	r16,-1
 8015860:	d8002115 	stw	zero,132(sp)
 8015864:	0023883a 	mov	r17,zero
 8015868:	00c01604 	movi	r3,88
 801586c:	01400244 	movi	r5,9
 8015870:	02400a84 	movi	r9,42
 8015874:	01c01b04 	movi	r7,108
 8015878:	ad400044 	addi	r21,r21,1
 801587c:	20bff804 	addi	r2,r4,-32
 8015880:	18819536 	bltu	r3,r2,8015ed8 <___svfiprintf_internal_r+0x790>
 8015884:	100490ba 	slli	r2,r2,2
 8015888:	02c20074 	movhi	r11,2049
 801588c:	5ad62704 	addi	r11,r11,22684
 8015890:	12c5883a 	add	r2,r2,r11
 8015894:	10800017 	ldw	r2,0(r2)
 8015898:	1000683a 	jmp	r2
 801589c:	08015dd8 	cmpnei	zero,at,1399
 80158a0:	08015ed8 	cmpnei	zero,at,1403
 80158a4:	08015ed8 	cmpnei	zero,at,1403
 80158a8:	08015dcc 	andi	zero,at,1399
 80158ac:	08015ed8 	cmpnei	zero,at,1403
 80158b0:	08015ed8 	cmpnei	zero,at,1403
 80158b4:	08015ed8 	cmpnei	zero,at,1403
 80158b8:	08015ed8 	cmpnei	zero,at,1403
 80158bc:	08015ed8 	cmpnei	zero,at,1403
 80158c0:	08015ed8 	cmpnei	zero,at,1403
 80158c4:	08015afc 	xorhi	zero,at,1387
 80158c8:	08015f0c 	andi	zero,at,1404
 80158cc:	08015ed8 	cmpnei	zero,at,1403
 80158d0:	08015b24 	muli	zero,at,1388
 80158d4:	08015f18 	cmpnei	zero,at,1404
 80158d8:	08015ed8 	cmpnei	zero,at,1403
 80158dc:	08015f00 	call	8015f0 <__reset-0x77fea10>
 80158e0:	08015ea0 	cmpeqi	zero,at,1402
 80158e4:	08015ea0 	cmpeqi	zero,at,1402
 80158e8:	08015ea0 	cmpeqi	zero,at,1402
 80158ec:	08015ea0 	cmpeqi	zero,at,1402
 80158f0:	08015ea0 	cmpeqi	zero,at,1402
 80158f4:	08015ea0 	cmpeqi	zero,at,1402
 80158f8:	08015ea0 	cmpeqi	zero,at,1402
 80158fc:	08015ea0 	cmpeqi	zero,at,1402
 8015900:	08015ea0 	cmpeqi	zero,at,1402
 8015904:	08015ed8 	cmpnei	zero,at,1403
 8015908:	08015ed8 	cmpnei	zero,at,1403
 801590c:	08015ed8 	cmpnei	zero,at,1403
 8015910:	08015ed8 	cmpnei	zero,at,1403
 8015914:	08015ed8 	cmpnei	zero,at,1403
 8015918:	08015ed8 	cmpnei	zero,at,1403
 801591c:	08015ed8 	cmpnei	zero,at,1403
 8015920:	08015ed8 	cmpnei	zero,at,1403
 8015924:	08015ed8 	cmpnei	zero,at,1403
 8015928:	08015ed8 	cmpnei	zero,at,1403
 801592c:	08015e38 	rdprs	zero,at,1400
 8015930:	08015ed8 	cmpnei	zero,at,1403
 8015934:	08015ed8 	cmpnei	zero,at,1403
 8015938:	08015ed8 	cmpnei	zero,at,1403
 801593c:	08015ed8 	cmpnei	zero,at,1403
 8015940:	08015ed8 	cmpnei	zero,at,1403
 8015944:	08015ed8 	cmpnei	zero,at,1403
 8015948:	08015ed8 	cmpnei	zero,at,1403
 801594c:	08015ed8 	cmpnei	zero,at,1403
 8015950:	08015ed8 	cmpnei	zero,at,1403
 8015954:	08015ed8 	cmpnei	zero,at,1403
 8015958:	08015acc 	andi	zero,at,1387
 801595c:	08015ed8 	cmpnei	zero,at,1403
 8015960:	08015ed8 	cmpnei	zero,at,1403
 8015964:	08015ed8 	cmpnei	zero,at,1403
 8015968:	08015ed8 	cmpnei	zero,at,1403
 801596c:	08015ed8 	cmpnei	zero,at,1403
 8015970:	08015a00 	call	8015a0 <__reset-0x77fea60>
 8015974:	08015ed8 	cmpnei	zero,at,1403
 8015978:	08015ed8 	cmpnei	zero,at,1403
 801597c:	08015d2c 	andhi	zero,at,1396
 8015980:	08015ed8 	cmpnei	zero,at,1403
 8015984:	08015ed8 	cmpnei	zero,at,1403
 8015988:	08015ed8 	cmpnei	zero,at,1403
 801598c:	08015ed8 	cmpnei	zero,at,1403
 8015990:	08015ed8 	cmpnei	zero,at,1403
 8015994:	08015ed8 	cmpnei	zero,at,1403
 8015998:	08015ed8 	cmpnei	zero,at,1403
 801599c:	08015ed8 	cmpnei	zero,at,1403
 80159a0:	08015ed8 	cmpnei	zero,at,1403
 80159a4:	08015ed8 	cmpnei	zero,at,1403
 80159a8:	08015c18 	cmpnei	zero,at,1392
 80159ac:	08015bd8 	cmpnei	zero,at,1391
 80159b0:	08015ed8 	cmpnei	zero,at,1403
 80159b4:	08015ed8 	cmpnei	zero,at,1403
 80159b8:	08015ed8 	cmpnei	zero,at,1403
 80159bc:	08015d88 	cmpgei	zero,at,1398
 80159c0:	08015bd8 	cmpnei	zero,at,1391
 80159c4:	08015ed8 	cmpnei	zero,at,1403
 80159c8:	08015ed8 	cmpnei	zero,at,1403
 80159cc:	08015d74 	orhi	zero,at,1397
 80159d0:	08015ed8 	cmpnei	zero,at,1403
 80159d4:	08015d94 	ori	zero,at,1398
 80159d8:	08015ad0 	cmplti	zero,at,1387
 80159dc:	08015b98 	cmpnei	zero,at,1390
 80159e0:	08015b8c 	andi	zero,at,1390
 80159e4:	08015ed8 	cmpnei	zero,at,1403
 80159e8:	08015b30 	cmpltui	zero,at,1388
 80159ec:	08015ed8 	cmpnei	zero,at,1403
 80159f0:	08015a04 	addi	zero,at,1384
 80159f4:	08015ed8 	cmpnei	zero,at,1403
 80159f8:	08015ed8 	cmpnei	zero,at,1403
 80159fc:	08015df4 	orhi	zero,at,1399
 8015a00:	8c400414 	ori	r17,r17,16
 8015a04:	88c0080c 	andi	r3,r17,32
 8015a08:	d8802317 	ldw	r2,140(sp)
 8015a0c:	18029626 	beq	r3,zero,8016468 <___svfiprintf_internal_r+0xd20>
 8015a10:	dac02317 	ldw	r11,140(sp)
 8015a14:	12400017 	ldw	r9,0(r2)
 8015a18:	12800117 	ldw	r10,4(r2)
 8015a1c:	5ac00204 	addi	r11,r11,8
 8015a20:	dac02315 	stw	r11,140(sp)
 8015a24:	00800044 	movi	r2,1
 8015a28:	4a86b03a 	or	r3,r9,r10
 8015a2c:	d8001d85 	stb	zero,118(sp)
 8015a30:	8039883a 	mov	fp,r16
 8015a34:	0017883a 	mov	r11,zero
 8015a38:	80000216 	blt	r16,zero,8015a44 <___svfiprintf_internal_r+0x2fc>
 8015a3c:	013fdfc4 	movi	r4,-129
 8015a40:	8922703a 	and	r17,r17,r4
 8015a44:	1801d01e 	bne	r3,zero,8016188 <___svfiprintf_internal_r+0xa40>
 8015a48:	80024426 	beq	r16,zero,801635c <___svfiprintf_internal_r+0xc14>
 8015a4c:	10803fcc 	andi	r2,r2,255
 8015a50:	00c00044 	movi	r3,1
 8015a54:	10c2b326 	beq	r2,r3,8016524 <___svfiprintf_internal_r+0xddc>
 8015a58:	00c00084 	movi	r3,2
 8015a5c:	10c25b26 	beq	r2,r3,80163cc <___svfiprintf_internal_r+0xc84>
 8015a60:	d8c01a04 	addi	r3,sp,104
 8015a64:	4808d0fa 	srli	r4,r9,3
 8015a68:	500a977a 	slli	r5,r10,29
 8015a6c:	5014d0fa 	srli	r10,r10,3
 8015a70:	4a4001cc 	andi	r9,r9,7
 8015a74:	48800c04 	addi	r2,r9,48
 8015a78:	18ffffc4 	addi	r3,r3,-1
 8015a7c:	2912b03a 	or	r9,r5,r4
 8015a80:	18800005 	stb	r2,0(r3)
 8015a84:	4a88b03a 	or	r4,r9,r10
 8015a88:	203ff61e 	bne	r4,zero,8015a64 <__alt_data_end+0xfc015a64>
 8015a8c:	8900004c 	andi	r4,r17,1
 8015a90:	d8c02615 	stw	r3,152(sp)
 8015a94:	2002951e 	bne	r4,zero,80164ec <___svfiprintf_internal_r+0xda4>
 8015a98:	da801e17 	ldw	r10,120(sp)
 8015a9c:	50f9c83a 	sub	fp,r10,r3
 8015aa0:	df002015 	stw	fp,128(sp)
 8015aa4:	e400010e 	bge	fp,r16,8015aac <___svfiprintf_internal_r+0x364>
 8015aa8:	dc002015 	stw	r16,128(sp)
 8015aac:	5ac03fcc 	andi	r11,r11,255
 8015ab0:	5ac0201c 	xori	r11,r11,128
 8015ab4:	5affe004 	addi	r11,r11,-128
 8015ab8:	58006326 	beq	r11,zero,8015c48 <___svfiprintf_internal_r+0x500>
 8015abc:	d8c02017 	ldw	r3,128(sp)
 8015ac0:	18c00044 	addi	r3,r3,1
 8015ac4:	d8c02015 	stw	r3,128(sp)
 8015ac8:	00005f06 	br	8015c48 <___svfiprintf_internal_r+0x500>
 8015acc:	8c400414 	ori	r17,r17,16
 8015ad0:	88c0080c 	andi	r3,r17,32
 8015ad4:	d8802317 	ldw	r2,140(sp)
 8015ad8:	18027826 	beq	r3,zero,80164bc <___svfiprintf_internal_r+0xd74>
 8015adc:	dac02317 	ldw	r11,140(sp)
 8015ae0:	12400017 	ldw	r9,0(r2)
 8015ae4:	12800117 	ldw	r10,4(r2)
 8015ae8:	5ac00204 	addi	r11,r11,8
 8015aec:	dac02315 	stw	r11,140(sp)
 8015af0:	0005883a 	mov	r2,zero
 8015af4:	4a86b03a 	or	r3,r9,r10
 8015af8:	003fcc06 	br	8015a2c <__alt_data_end+0xfc015a2c>
 8015afc:	da802317 	ldw	r10,140(sp)
 8015b00:	dac02317 	ldw	r11,140(sp)
 8015b04:	52800017 	ldw	r10,0(r10)
 8015b08:	58800104 	addi	r2,r11,4
 8015b0c:	da802115 	stw	r10,132(sp)
 8015b10:	50028a0e 	bge	r10,zero,801653c <___svfiprintf_internal_r+0xdf4>
 8015b14:	da802117 	ldw	r10,132(sp)
 8015b18:	d8802315 	stw	r2,140(sp)
 8015b1c:	0295c83a 	sub	r10,zero,r10
 8015b20:	da802115 	stw	r10,132(sp)
 8015b24:	8c400114 	ori	r17,r17,4
 8015b28:	a9000007 	ldb	r4,0(r21)
 8015b2c:	003f5206 	br	8015878 <__alt_data_end+0xfc015878>
 8015b30:	da802317 	ldw	r10,140(sp)
 8015b34:	dac02317 	ldw	r11,140(sp)
 8015b38:	d8001d85 	stb	zero,118(sp)
 8015b3c:	52800017 	ldw	r10,0(r10)
 8015b40:	5dc00104 	addi	r23,r11,4
 8015b44:	da802615 	stw	r10,152(sp)
 8015b48:	5002eb26 	beq	r10,zero,80166f8 <___svfiprintf_internal_r+0xfb0>
 8015b4c:	d9002617 	ldw	r4,152(sp)
 8015b50:	8002d716 	blt	r16,zero,80166b0 <___svfiprintf_internal_r+0xf68>
 8015b54:	000b883a 	mov	r5,zero
 8015b58:	800d883a 	mov	r6,r16
 8015b5c:	da002c15 	stw	r8,176(sp)
 8015b60:	80137f80 	call	80137f8 <memchr>
 8015b64:	da002c17 	ldw	r8,176(sp)
 8015b68:	1002fb26 	beq	r2,zero,8016758 <___svfiprintf_internal_r+0x1010>
 8015b6c:	d8c02617 	ldw	r3,152(sp)
 8015b70:	10f9c83a 	sub	fp,r2,r3
 8015b74:	8700010e 	bge	r16,fp,8015b7c <___svfiprintf_internal_r+0x434>
 8015b78:	8039883a 	mov	fp,r16
 8015b7c:	dac01d83 	ldbu	r11,118(sp)
 8015b80:	ddc02315 	stw	r23,140(sp)
 8015b84:	0021883a 	mov	r16,zero
 8015b88:	003fc506 	br	8015aa0 <__alt_data_end+0xfc015aa0>
 8015b8c:	8c400814 	ori	r17,r17,32
 8015b90:	a9000007 	ldb	r4,0(r21)
 8015b94:	003f3806 	br	8015878 <__alt_data_end+0xfc015878>
 8015b98:	dac02317 	ldw	r11,140(sp)
 8015b9c:	00800c04 	movi	r2,48
 8015ba0:	d8801d05 	stb	r2,116(sp)
 8015ba4:	5a400017 	ldw	r9,0(r11)
 8015ba8:	00801e04 	movi	r2,120
 8015bac:	d8801d45 	stb	r2,117(sp)
 8015bb0:	008200b4 	movhi	r2,2050
 8015bb4:	109c9604 	addi	r2,r2,29272
 8015bb8:	5ac00104 	addi	r11,r11,4
 8015bbc:	d8802a15 	stw	r2,168(sp)
 8015bc0:	0015883a 	mov	r10,zero
 8015bc4:	8c400094 	ori	r17,r17,2
 8015bc8:	dac02315 	stw	r11,140(sp)
 8015bcc:	00800084 	movi	r2,2
 8015bd0:	4807883a 	mov	r3,r9
 8015bd4:	003f9506 	br	8015a2c <__alt_data_end+0xfc015a2c>
 8015bd8:	d9801d85 	stb	r6,118(sp)
 8015bdc:	8880080c 	andi	r2,r17,32
 8015be0:	d8c02317 	ldw	r3,140(sp)
 8015be4:	10009926 	beq	r2,zero,8015e4c <___svfiprintf_internal_r+0x704>
 8015be8:	dac02317 	ldw	r11,140(sp)
 8015bec:	18800117 	ldw	r2,4(r3)
 8015bf0:	1a400017 	ldw	r9,0(r3)
 8015bf4:	5ac00204 	addi	r11,r11,8
 8015bf8:	dac02315 	stw	r11,140(sp)
 8015bfc:	1015883a 	mov	r10,r2
 8015c00:	10009d16 	blt	r2,zero,8015e78 <___svfiprintf_internal_r+0x730>
 8015c04:	dac01d83 	ldbu	r11,118(sp)
 8015c08:	8039883a 	mov	fp,r16
 8015c0c:	00800044 	movi	r2,1
 8015c10:	4a86b03a 	or	r3,r9,r10
 8015c14:	003f8806 	br	8015a38 <__alt_data_end+0xfc015a38>
 8015c18:	dac02317 	ldw	r11,140(sp)
 8015c1c:	00c00044 	movi	r3,1
 8015c20:	da801004 	addi	r10,sp,64
 8015c24:	58800017 	ldw	r2,0(r11)
 8015c28:	5ac00104 	addi	r11,r11,4
 8015c2c:	d8c02015 	stw	r3,128(sp)
 8015c30:	d8001d85 	stb	zero,118(sp)
 8015c34:	d8801005 	stb	r2,64(sp)
 8015c38:	dac02315 	stw	r11,140(sp)
 8015c3c:	1839883a 	mov	fp,r3
 8015c40:	da802615 	stw	r10,152(sp)
 8015c44:	0021883a 	mov	r16,zero
 8015c48:	8a80008c 	andi	r10,r17,2
 8015c4c:	da802215 	stw	r10,136(sp)
 8015c50:	50000326 	beq	r10,zero,8015c60 <___svfiprintf_internal_r+0x518>
 8015c54:	dac02017 	ldw	r11,128(sp)
 8015c58:	5ac00084 	addi	r11,r11,2
 8015c5c:	dac02015 	stw	r11,128(sp)
 8015c60:	88c0210c 	andi	r3,r17,132
 8015c64:	d8c02515 	stw	r3,148(sp)
 8015c68:	1800bb1e 	bne	r3,zero,8015f58 <___svfiprintf_internal_r+0x810>
 8015c6c:	da802117 	ldw	r10,132(sp)
 8015c70:	dac02017 	ldw	r11,128(sp)
 8015c74:	52edc83a 	sub	r22,r10,r11
 8015c78:	0580b70e 	bge	zero,r22,8015f58 <___svfiprintf_internal_r+0x810>
 8015c7c:	02400404 	movi	r9,16
 8015c80:	d8c01c17 	ldw	r3,112(sp)
 8015c84:	d8801b17 	ldw	r2,108(sp)
 8015c88:	4d82a70e 	bge	r9,r22,8016728 <___svfiprintf_internal_r+0xfe0>
 8015c8c:	014200b4 	movhi	r5,2050
 8015c90:	295d0204 	addi	r5,r5,29704
 8015c94:	d9402815 	stw	r5,160(sp)
 8015c98:	05c001c4 	movi	r23,7
 8015c9c:	00000306 	br	8015cac <___svfiprintf_internal_r+0x564>
 8015ca0:	b5bffc04 	addi	r22,r22,-16
 8015ca4:	42000204 	addi	r8,r8,8
 8015ca8:	4d80150e 	bge	r9,r22,8015d00 <___svfiprintf_internal_r+0x5b8>
 8015cac:	028200b4 	movhi	r10,2050
 8015cb0:	18c00404 	addi	r3,r3,16
 8015cb4:	10800044 	addi	r2,r2,1
 8015cb8:	529d0204 	addi	r10,r10,29704
 8015cbc:	42800015 	stw	r10,0(r8)
 8015cc0:	42400115 	stw	r9,4(r8)
 8015cc4:	d8c01c15 	stw	r3,112(sp)
 8015cc8:	d8801b15 	stw	r2,108(sp)
 8015ccc:	b8bff40e 	bge	r23,r2,8015ca0 <__alt_data_end+0xfc015ca0>
 8015cd0:	9009883a 	mov	r4,r18
 8015cd4:	a00b883a 	mov	r5,r20
 8015cd8:	d9801a04 	addi	r6,sp,104
 8015cdc:	da402c15 	stw	r9,176(sp)
 8015ce0:	80155800 	call	8015580 <__ssprint_r>
 8015ce4:	da402c17 	ldw	r9,176(sp)
 8015ce8:	1001511e 	bne	r2,zero,8016230 <___svfiprintf_internal_r+0xae8>
 8015cec:	b5bffc04 	addi	r22,r22,-16
 8015cf0:	d8c01c17 	ldw	r3,112(sp)
 8015cf4:	d8801b17 	ldw	r2,108(sp)
 8015cf8:	d811883a 	mov	r8,sp
 8015cfc:	4dbfeb16 	blt	r9,r22,8015cac <__alt_data_end+0xfc015cac>
 8015d00:	dac02817 	ldw	r11,160(sp)
 8015d04:	b0c7883a 	add	r3,r22,r3
 8015d08:	10800044 	addi	r2,r2,1
 8015d0c:	42c00015 	stw	r11,0(r8)
 8015d10:	45800115 	stw	r22,4(r8)
 8015d14:	d8c01c15 	stw	r3,112(sp)
 8015d18:	d8801b15 	stw	r2,108(sp)
 8015d1c:	010001c4 	movi	r4,7
 8015d20:	2081dd16 	blt	r4,r2,8016498 <___svfiprintf_internal_r+0xd50>
 8015d24:	42000204 	addi	r8,r8,8
 8015d28:	00008d06 	br	8015f60 <___svfiprintf_internal_r+0x818>
 8015d2c:	00c200b4 	movhi	r3,2050
 8015d30:	18dc9104 	addi	r3,r3,29252
 8015d34:	d8c02a15 	stw	r3,168(sp)
 8015d38:	d9801d85 	stb	r6,118(sp)
 8015d3c:	88c0080c 	andi	r3,r17,32
 8015d40:	d8802317 	ldw	r2,140(sp)
 8015d44:	18003226 	beq	r3,zero,8015e10 <___svfiprintf_internal_r+0x6c8>
 8015d48:	da802317 	ldw	r10,140(sp)
 8015d4c:	12400017 	ldw	r9,0(r2)
 8015d50:	52800204 	addi	r10,r10,8
 8015d54:	da802315 	stw	r10,140(sp)
 8015d58:	12800117 	ldw	r10,4(r2)
 8015d5c:	8880004c 	andi	r2,r17,1
 8015d60:	1001be26 	beq	r2,zero,801645c <___svfiprintf_internal_r+0xd14>
 8015d64:	4a86b03a 	or	r3,r9,r10
 8015d68:	1802291e 	bne	r3,zero,8016610 <___svfiprintf_internal_r+0xec8>
 8015d6c:	00800084 	movi	r2,2
 8015d70:	003f2e06 	br	8015a2c <__alt_data_end+0xfc015a2c>
 8015d74:	a9000007 	ldb	r4,0(r21)
 8015d78:	a805883a 	mov	r2,r21
 8015d7c:	21c22a26 	beq	r4,r7,8016628 <___svfiprintf_internal_r+0xee0>
 8015d80:	8c400414 	ori	r17,r17,16
 8015d84:	003ebc06 	br	8015878 <__alt_data_end+0xfc015878>
 8015d88:	8c401014 	ori	r17,r17,64
 8015d8c:	a9000007 	ldb	r4,0(r21)
 8015d90:	003eb906 	br	8015878 <__alt_data_end+0xfc015878>
 8015d94:	d9801d85 	stb	r6,118(sp)
 8015d98:	8880080c 	andi	r2,r17,32
 8015d9c:	1002131e 	bne	r2,zero,80165ec <___svfiprintf_internal_r+0xea4>
 8015da0:	8880040c 	andi	r2,r17,16
 8015da4:	1002241e 	bne	r2,zero,8016638 <___svfiprintf_internal_r+0xef0>
 8015da8:	8c40100c 	andi	r17,r17,64
 8015dac:	88022226 	beq	r17,zero,8016638 <___svfiprintf_internal_r+0xef0>
 8015db0:	dac02317 	ldw	r11,140(sp)
 8015db4:	da802417 	ldw	r10,144(sp)
 8015db8:	58800017 	ldw	r2,0(r11)
 8015dbc:	5ac00104 	addi	r11,r11,4
 8015dc0:	dac02315 	stw	r11,140(sp)
 8015dc4:	1280000d 	sth	r10,0(r2)
 8015dc8:	003e8306 	br	80157d8 <__alt_data_end+0xfc0157d8>
 8015dcc:	8c400054 	ori	r17,r17,1
 8015dd0:	a9000007 	ldb	r4,0(r21)
 8015dd4:	003ea806 	br	8015878 <__alt_data_end+0xfc015878>
 8015dd8:	30803fcc 	andi	r2,r6,255
 8015ddc:	1080201c 	xori	r2,r2,128
 8015de0:	10bfe004 	addi	r2,r2,-128
 8015de4:	1001ff1e 	bne	r2,zero,80165e4 <___svfiprintf_internal_r+0xe9c>
 8015de8:	01800804 	movi	r6,32
 8015dec:	a9000007 	ldb	r4,0(r21)
 8015df0:	003ea106 	br	8015878 <__alt_data_end+0xfc015878>
 8015df4:	02c200b4 	movhi	r11,2050
 8015df8:	5adc9604 	addi	r11,r11,29272
 8015dfc:	dac02a15 	stw	r11,168(sp)
 8015e00:	d9801d85 	stb	r6,118(sp)
 8015e04:	88c0080c 	andi	r3,r17,32
 8015e08:	d8802317 	ldw	r2,140(sp)
 8015e0c:	183fce1e 	bne	r3,zero,8015d48 <__alt_data_end+0xfc015d48>
 8015e10:	88c0040c 	andi	r3,r17,16
 8015e14:	1801ed1e 	bne	r3,zero,80165cc <___svfiprintf_internal_r+0xe84>
 8015e18:	88c0100c 	andi	r3,r17,64
 8015e1c:	18021a26 	beq	r3,zero,8016688 <___svfiprintf_internal_r+0xf40>
 8015e20:	da802317 	ldw	r10,140(sp)
 8015e24:	1240000b 	ldhu	r9,0(r2)
 8015e28:	52800104 	addi	r10,r10,4
 8015e2c:	da802315 	stw	r10,140(sp)
 8015e30:	0015883a 	mov	r10,zero
 8015e34:	003fc906 	br	8015d5c <__alt_data_end+0xfc015d5c>
 8015e38:	8c400414 	ori	r17,r17,16
 8015e3c:	d9801d85 	stb	r6,118(sp)
 8015e40:	8880080c 	andi	r2,r17,32
 8015e44:	d8c02317 	ldw	r3,140(sp)
 8015e48:	103f671e 	bne	r2,zero,8015be8 <__alt_data_end+0xfc015be8>
 8015e4c:	8880040c 	andi	r2,r17,16
 8015e50:	1001c71e 	bne	r2,zero,8016570 <___svfiprintf_internal_r+0xe28>
 8015e54:	8880100c 	andi	r2,r17,64
 8015e58:	1001c526 	beq	r2,zero,8016570 <___svfiprintf_internal_r+0xe28>
 8015e5c:	1a40000f 	ldh	r9,0(r3)
 8015e60:	dac02317 	ldw	r11,140(sp)
 8015e64:	4815d7fa 	srai	r10,r9,31
 8015e68:	5ac00104 	addi	r11,r11,4
 8015e6c:	dac02315 	stw	r11,140(sp)
 8015e70:	5005883a 	mov	r2,r10
 8015e74:	103f630e 	bge	r2,zero,8015c04 <__alt_data_end+0xfc015c04>
 8015e78:	0253c83a 	sub	r9,zero,r9
 8015e7c:	4804c03a 	cmpne	r2,r9,zero
 8015e80:	0295c83a 	sub	r10,zero,r10
 8015e84:	5095c83a 	sub	r10,r10,r2
 8015e88:	02c00b44 	movi	r11,45
 8015e8c:	dac01d85 	stb	r11,118(sp)
 8015e90:	8039883a 	mov	fp,r16
 8015e94:	00800044 	movi	r2,1
 8015e98:	4a86b03a 	or	r3,r9,r10
 8015e9c:	003ee606 	br	8015a38 <__alt_data_end+0xfc015a38>
 8015ea0:	a815883a 	mov	r10,r21
 8015ea4:	d8002115 	stw	zero,132(sp)
 8015ea8:	20bff404 	addi	r2,r4,-48
 8015eac:	51000007 	ldb	r4,0(r10)
 8015eb0:	da802117 	ldw	r10,132(sp)
 8015eb4:	ad400044 	addi	r21,r21,1
 8015eb8:	52c002a4 	muli	r11,r10,10
 8015ebc:	a815883a 	mov	r10,r21
 8015ec0:	5885883a 	add	r2,r11,r2
 8015ec4:	d8802115 	stw	r2,132(sp)
 8015ec8:	20bff404 	addi	r2,r4,-48
 8015ecc:	28bff72e 	bgeu	r5,r2,8015eac <__alt_data_end+0xfc015eac>
 8015ed0:	20bff804 	addi	r2,r4,-32
 8015ed4:	18be6b2e 	bgeu	r3,r2,8015884 <__alt_data_end+0xfc015884>
 8015ed8:	d9801d85 	stb	r6,118(sp)
 8015edc:	2000ce26 	beq	r4,zero,8016218 <___svfiprintf_internal_r+0xad0>
 8015ee0:	02800044 	movi	r10,1
 8015ee4:	dac01004 	addi	r11,sp,64
 8015ee8:	da802015 	stw	r10,128(sp)
 8015eec:	d9001005 	stb	r4,64(sp)
 8015ef0:	d8001d85 	stb	zero,118(sp)
 8015ef4:	5039883a 	mov	fp,r10
 8015ef8:	dac02615 	stw	r11,152(sp)
 8015efc:	003f5106 	br	8015c44 <__alt_data_end+0xfc015c44>
 8015f00:	8c402014 	ori	r17,r17,128
 8015f04:	a9000007 	ldb	r4,0(r21)
 8015f08:	003e5b06 	br	8015878 <__alt_data_end+0xfc015878>
 8015f0c:	01800ac4 	movi	r6,43
 8015f10:	a9000007 	ldb	r4,0(r21)
 8015f14:	003e5806 	br	8015878 <__alt_data_end+0xfc015878>
 8015f18:	a9000007 	ldb	r4,0(r21)
 8015f1c:	aa800044 	addi	r10,r21,1
 8015f20:	22421426 	beq	r4,r9,8016774 <___svfiprintf_internal_r+0x102c>
 8015f24:	20bff404 	addi	r2,r4,-48
 8015f28:	502b883a 	mov	r21,r10
 8015f2c:	0021883a 	mov	r16,zero
 8015f30:	28be5236 	bltu	r5,r2,801587c <__alt_data_end+0xfc01587c>
 8015f34:	a9000007 	ldb	r4,0(r21)
 8015f38:	840002a4 	muli	r16,r16,10
 8015f3c:	ad400044 	addi	r21,r21,1
 8015f40:	1421883a 	add	r16,r2,r16
 8015f44:	20bff404 	addi	r2,r4,-48
 8015f48:	28bffa2e 	bgeu	r5,r2,8015f34 <__alt_data_end+0xfc015f34>
 8015f4c:	803e4b0e 	bge	r16,zero,801587c <__alt_data_end+0xfc01587c>
 8015f50:	043fffc4 	movi	r16,-1
 8015f54:	003e4906 	br	801587c <__alt_data_end+0xfc01587c>
 8015f58:	d8c01c17 	ldw	r3,112(sp)
 8015f5c:	d8801b17 	ldw	r2,108(sp)
 8015f60:	d9001d87 	ldb	r4,118(sp)
 8015f64:	20000b26 	beq	r4,zero,8015f94 <___svfiprintf_internal_r+0x84c>
 8015f68:	d9001d84 	addi	r4,sp,118
 8015f6c:	18c00044 	addi	r3,r3,1
 8015f70:	10800044 	addi	r2,r2,1
 8015f74:	41000015 	stw	r4,0(r8)
 8015f78:	01000044 	movi	r4,1
 8015f7c:	41000115 	stw	r4,4(r8)
 8015f80:	d8c01c15 	stw	r3,112(sp)
 8015f84:	d8801b15 	stw	r2,108(sp)
 8015f88:	010001c4 	movi	r4,7
 8015f8c:	20811e16 	blt	r4,r2,8016408 <___svfiprintf_internal_r+0xcc0>
 8015f90:	42000204 	addi	r8,r8,8
 8015f94:	da802217 	ldw	r10,136(sp)
 8015f98:	50000b26 	beq	r10,zero,8015fc8 <___svfiprintf_internal_r+0x880>
 8015f9c:	d9001d04 	addi	r4,sp,116
 8015fa0:	18c00084 	addi	r3,r3,2
 8015fa4:	10800044 	addi	r2,r2,1
 8015fa8:	41000015 	stw	r4,0(r8)
 8015fac:	01000084 	movi	r4,2
 8015fb0:	41000115 	stw	r4,4(r8)
 8015fb4:	d8c01c15 	stw	r3,112(sp)
 8015fb8:	d8801b15 	stw	r2,108(sp)
 8015fbc:	010001c4 	movi	r4,7
 8015fc0:	20811a16 	blt	r4,r2,801642c <___svfiprintf_internal_r+0xce4>
 8015fc4:	42000204 	addi	r8,r8,8
 8015fc8:	dac02517 	ldw	r11,148(sp)
 8015fcc:	01002004 	movi	r4,128
 8015fd0:	5900a826 	beq	r11,r4,8016274 <___svfiprintf_internal_r+0xb2c>
 8015fd4:	8721c83a 	sub	r16,r16,fp
 8015fd8:	0400260e 	bge	zero,r16,8016074 <___svfiprintf_internal_r+0x92c>
 8015fdc:	01c00404 	movi	r7,16
 8015fe0:	3c01a50e 	bge	r7,r16,8016678 <___svfiprintf_internal_r+0xf30>
 8015fe4:	010200b4 	movhi	r4,2050
 8015fe8:	211cfe04 	addi	r4,r4,29688
 8015fec:	d9002215 	stw	r4,136(sp)
 8015ff0:	382f883a 	mov	r23,r7
 8015ff4:	058001c4 	movi	r22,7
 8015ff8:	00000306 	br	8016008 <___svfiprintf_internal_r+0x8c0>
 8015ffc:	843ffc04 	addi	r16,r16,-16
 8016000:	42000204 	addi	r8,r8,8
 8016004:	bc00110e 	bge	r23,r16,801604c <___svfiprintf_internal_r+0x904>
 8016008:	18c00404 	addi	r3,r3,16
 801600c:	10800044 	addi	r2,r2,1
 8016010:	44c00015 	stw	r19,0(r8)
 8016014:	45c00115 	stw	r23,4(r8)
 8016018:	d8c01c15 	stw	r3,112(sp)
 801601c:	d8801b15 	stw	r2,108(sp)
 8016020:	b0bff60e 	bge	r22,r2,8015ffc <__alt_data_end+0xfc015ffc>
 8016024:	9009883a 	mov	r4,r18
 8016028:	a00b883a 	mov	r5,r20
 801602c:	d9801a04 	addi	r6,sp,104
 8016030:	80155800 	call	8015580 <__ssprint_r>
 8016034:	10007e1e 	bne	r2,zero,8016230 <___svfiprintf_internal_r+0xae8>
 8016038:	843ffc04 	addi	r16,r16,-16
 801603c:	d8c01c17 	ldw	r3,112(sp)
 8016040:	d8801b17 	ldw	r2,108(sp)
 8016044:	d811883a 	mov	r8,sp
 8016048:	bc3fef16 	blt	r23,r16,8016008 <__alt_data_end+0xfc016008>
 801604c:	da802217 	ldw	r10,136(sp)
 8016050:	1c07883a 	add	r3,r3,r16
 8016054:	10800044 	addi	r2,r2,1
 8016058:	42800015 	stw	r10,0(r8)
 801605c:	44000115 	stw	r16,4(r8)
 8016060:	d8c01c15 	stw	r3,112(sp)
 8016064:	d8801b15 	stw	r2,108(sp)
 8016068:	010001c4 	movi	r4,7
 801606c:	2080ce16 	blt	r4,r2,80163a8 <___svfiprintf_internal_r+0xc60>
 8016070:	42000204 	addi	r8,r8,8
 8016074:	dac02617 	ldw	r11,152(sp)
 8016078:	e0c7883a 	add	r3,fp,r3
 801607c:	10800044 	addi	r2,r2,1
 8016080:	42c00015 	stw	r11,0(r8)
 8016084:	47000115 	stw	fp,4(r8)
 8016088:	d8c01c15 	stw	r3,112(sp)
 801608c:	d8801b15 	stw	r2,108(sp)
 8016090:	010001c4 	movi	r4,7
 8016094:	2080a316 	blt	r4,r2,8016324 <___svfiprintf_internal_r+0xbdc>
 8016098:	42000204 	addi	r8,r8,8
 801609c:	8c40010c 	andi	r17,r17,4
 80160a0:	88002b26 	beq	r17,zero,8016150 <___svfiprintf_internal_r+0xa08>
 80160a4:	da802117 	ldw	r10,132(sp)
 80160a8:	dac02017 	ldw	r11,128(sp)
 80160ac:	52e1c83a 	sub	r16,r10,r11
 80160b0:	0400270e 	bge	zero,r16,8016150 <___svfiprintf_internal_r+0xa08>
 80160b4:	04400404 	movi	r17,16
 80160b8:	d8801b17 	ldw	r2,108(sp)
 80160bc:	8c019e0e 	bge	r17,r16,8016738 <___svfiprintf_internal_r+0xff0>
 80160c0:	014200b4 	movhi	r5,2050
 80160c4:	295d0204 	addi	r5,r5,29704
 80160c8:	d9402815 	stw	r5,160(sp)
 80160cc:	070001c4 	movi	fp,7
 80160d0:	00000306 	br	80160e0 <___svfiprintf_internal_r+0x998>
 80160d4:	843ffc04 	addi	r16,r16,-16
 80160d8:	42000204 	addi	r8,r8,8
 80160dc:	8c00130e 	bge	r17,r16,801612c <___svfiprintf_internal_r+0x9e4>
 80160e0:	028200b4 	movhi	r10,2050
 80160e4:	18c00404 	addi	r3,r3,16
 80160e8:	10800044 	addi	r2,r2,1
 80160ec:	529d0204 	addi	r10,r10,29704
 80160f0:	42800015 	stw	r10,0(r8)
 80160f4:	44400115 	stw	r17,4(r8)
 80160f8:	d8c01c15 	stw	r3,112(sp)
 80160fc:	d8801b15 	stw	r2,108(sp)
 8016100:	e0bff40e 	bge	fp,r2,80160d4 <__alt_data_end+0xfc0160d4>
 8016104:	9009883a 	mov	r4,r18
 8016108:	a00b883a 	mov	r5,r20
 801610c:	d9801a04 	addi	r6,sp,104
 8016110:	80155800 	call	8015580 <__ssprint_r>
 8016114:	1000461e 	bne	r2,zero,8016230 <___svfiprintf_internal_r+0xae8>
 8016118:	843ffc04 	addi	r16,r16,-16
 801611c:	d8c01c17 	ldw	r3,112(sp)
 8016120:	d8801b17 	ldw	r2,108(sp)
 8016124:	d811883a 	mov	r8,sp
 8016128:	8c3fed16 	blt	r17,r16,80160e0 <__alt_data_end+0xfc0160e0>
 801612c:	dac02817 	ldw	r11,160(sp)
 8016130:	1c07883a 	add	r3,r3,r16
 8016134:	10800044 	addi	r2,r2,1
 8016138:	42c00015 	stw	r11,0(r8)
 801613c:	44000115 	stw	r16,4(r8)
 8016140:	d8c01c15 	stw	r3,112(sp)
 8016144:	d8801b15 	stw	r2,108(sp)
 8016148:	010001c4 	movi	r4,7
 801614c:	2080fe16 	blt	r4,r2,8016548 <___svfiprintf_internal_r+0xe00>
 8016150:	dd802017 	ldw	r22,128(sp)
 8016154:	da802117 	ldw	r10,132(sp)
 8016158:	b280010e 	bge	r22,r10,8016160 <___svfiprintf_internal_r+0xa18>
 801615c:	502d883a 	mov	r22,r10
 8016160:	dac02417 	ldw	r11,144(sp)
 8016164:	5d97883a 	add	r11,r11,r22
 8016168:	dac02415 	stw	r11,144(sp)
 801616c:	1800751e 	bne	r3,zero,8016344 <___svfiprintf_internal_r+0xbfc>
 8016170:	a8800007 	ldb	r2,0(r21)
 8016174:	d8001b15 	stw	zero,108(sp)
 8016178:	d811883a 	mov	r8,sp
 801617c:	103d981e 	bne	r2,zero,80157e0 <__alt_data_end+0xfc0157e0>
 8016180:	a82d883a 	mov	r22,r21
 8016184:	003daf06 	br	8015844 <__alt_data_end+0xfc015844>
 8016188:	10803fcc 	andi	r2,r2,255
 801618c:	00c00044 	movi	r3,1
 8016190:	10fe311e 	bne	r2,r3,8015a58 <__alt_data_end+0xfc015a58>
 8016194:	5000e126 	beq	r10,zero,801651c <___svfiprintf_internal_r+0xdd4>
 8016198:	dc402015 	stw	r17,128(sp)
 801619c:	dc002215 	stw	r16,136(sp)
 80161a0:	dd801a04 	addi	r22,sp,104
 80161a4:	402f883a 	mov	r23,r8
 80161a8:	5839883a 	mov	fp,r11
 80161ac:	4821883a 	mov	r16,r9
 80161b0:	5023883a 	mov	r17,r10
 80161b4:	8009883a 	mov	r4,r16
 80161b8:	880b883a 	mov	r5,r17
 80161bc:	01800284 	movi	r6,10
 80161c0:	000f883a 	mov	r7,zero
 80161c4:	8018a780 	call	8018a78 <__umoddi3>
 80161c8:	10800c04 	addi	r2,r2,48
 80161cc:	b5bfffc4 	addi	r22,r22,-1
 80161d0:	8009883a 	mov	r4,r16
 80161d4:	880b883a 	mov	r5,r17
 80161d8:	01800284 	movi	r6,10
 80161dc:	000f883a 	mov	r7,zero
 80161e0:	b0800005 	stb	r2,0(r22)
 80161e4:	80184b80 	call	80184b8 <__udivdi3>
 80161e8:	1021883a 	mov	r16,r2
 80161ec:	10c4b03a 	or	r2,r2,r3
 80161f0:	1823883a 	mov	r17,r3
 80161f4:	103fef1e 	bne	r2,zero,80161b4 <__alt_data_end+0xfc0161b4>
 80161f8:	da801e17 	ldw	r10,120(sp)
 80161fc:	e017883a 	mov	r11,fp
 8016200:	b811883a 	mov	r8,r23
 8016204:	dc402017 	ldw	r17,128(sp)
 8016208:	dc002217 	ldw	r16,136(sp)
 801620c:	dd802615 	stw	r22,152(sp)
 8016210:	55b9c83a 	sub	fp,r10,r22
 8016214:	003e2206 	br	8015aa0 <__alt_data_end+0xfc015aa0>
 8016218:	d8801c17 	ldw	r2,112(sp)
 801621c:	10000426 	beq	r2,zero,8016230 <___svfiprintf_internal_r+0xae8>
 8016220:	d9002917 	ldw	r4,164(sp)
 8016224:	d9402717 	ldw	r5,156(sp)
 8016228:	d9801a04 	addi	r6,sp,104
 801622c:	80155800 	call	8015580 <__ssprint_r>
 8016230:	da802717 	ldw	r10,156(sp)
 8016234:	5080030b 	ldhu	r2,12(r10)
 8016238:	1080100c 	andi	r2,r2,64
 801623c:	1000511e 	bne	r2,zero,8016384 <___svfiprintf_internal_r+0xc3c>
 8016240:	d8802417 	ldw	r2,144(sp)
 8016244:	dfc03617 	ldw	ra,216(sp)
 8016248:	df003517 	ldw	fp,212(sp)
 801624c:	ddc03417 	ldw	r23,208(sp)
 8016250:	dd803317 	ldw	r22,204(sp)
 8016254:	dd403217 	ldw	r21,200(sp)
 8016258:	dd003117 	ldw	r20,196(sp)
 801625c:	dcc03017 	ldw	r19,192(sp)
 8016260:	dc802f17 	ldw	r18,188(sp)
 8016264:	dc402e17 	ldw	r17,184(sp)
 8016268:	dc002d17 	ldw	r16,180(sp)
 801626c:	dec03704 	addi	sp,sp,220
 8016270:	f800283a 	ret
 8016274:	da802117 	ldw	r10,132(sp)
 8016278:	dac02017 	ldw	r11,128(sp)
 801627c:	52edc83a 	sub	r22,r10,r11
 8016280:	05bf540e 	bge	zero,r22,8015fd4 <__alt_data_end+0xfc015fd4>
 8016284:	02400404 	movi	r9,16
 8016288:	4d812f0e 	bge	r9,r22,8016748 <___svfiprintf_internal_r+0x1000>
 801628c:	014200b4 	movhi	r5,2050
 8016290:	295cfe04 	addi	r5,r5,29688
 8016294:	d9402215 	stw	r5,136(sp)
 8016298:	05c001c4 	movi	r23,7
 801629c:	00000306 	br	80162ac <___svfiprintf_internal_r+0xb64>
 80162a0:	b5bffc04 	addi	r22,r22,-16
 80162a4:	42000204 	addi	r8,r8,8
 80162a8:	4d80130e 	bge	r9,r22,80162f8 <___svfiprintf_internal_r+0xbb0>
 80162ac:	18c00404 	addi	r3,r3,16
 80162b0:	10800044 	addi	r2,r2,1
 80162b4:	44c00015 	stw	r19,0(r8)
 80162b8:	42400115 	stw	r9,4(r8)
 80162bc:	d8c01c15 	stw	r3,112(sp)
 80162c0:	d8801b15 	stw	r2,108(sp)
 80162c4:	b8bff60e 	bge	r23,r2,80162a0 <__alt_data_end+0xfc0162a0>
 80162c8:	9009883a 	mov	r4,r18
 80162cc:	a00b883a 	mov	r5,r20
 80162d0:	d9801a04 	addi	r6,sp,104
 80162d4:	da402c15 	stw	r9,176(sp)
 80162d8:	80155800 	call	8015580 <__ssprint_r>
 80162dc:	da402c17 	ldw	r9,176(sp)
 80162e0:	103fd31e 	bne	r2,zero,8016230 <__alt_data_end+0xfc016230>
 80162e4:	b5bffc04 	addi	r22,r22,-16
 80162e8:	d8c01c17 	ldw	r3,112(sp)
 80162ec:	d8801b17 	ldw	r2,108(sp)
 80162f0:	d811883a 	mov	r8,sp
 80162f4:	4dbfed16 	blt	r9,r22,80162ac <__alt_data_end+0xfc0162ac>
 80162f8:	da802217 	ldw	r10,136(sp)
 80162fc:	1d87883a 	add	r3,r3,r22
 8016300:	10800044 	addi	r2,r2,1
 8016304:	42800015 	stw	r10,0(r8)
 8016308:	45800115 	stw	r22,4(r8)
 801630c:	d8c01c15 	stw	r3,112(sp)
 8016310:	d8801b15 	stw	r2,108(sp)
 8016314:	010001c4 	movi	r4,7
 8016318:	2080ce16 	blt	r4,r2,8016654 <___svfiprintf_internal_r+0xf0c>
 801631c:	42000204 	addi	r8,r8,8
 8016320:	003f2c06 	br	8015fd4 <__alt_data_end+0xfc015fd4>
 8016324:	9009883a 	mov	r4,r18
 8016328:	a00b883a 	mov	r5,r20
 801632c:	d9801a04 	addi	r6,sp,104
 8016330:	80155800 	call	8015580 <__ssprint_r>
 8016334:	103fbe1e 	bne	r2,zero,8016230 <__alt_data_end+0xfc016230>
 8016338:	d8c01c17 	ldw	r3,112(sp)
 801633c:	d811883a 	mov	r8,sp
 8016340:	003f5606 	br	801609c <__alt_data_end+0xfc01609c>
 8016344:	9009883a 	mov	r4,r18
 8016348:	a00b883a 	mov	r5,r20
 801634c:	d9801a04 	addi	r6,sp,104
 8016350:	80155800 	call	8015580 <__ssprint_r>
 8016354:	103f8626 	beq	r2,zero,8016170 <__alt_data_end+0xfc016170>
 8016358:	003fb506 	br	8016230 <__alt_data_end+0xfc016230>
 801635c:	10803fcc 	andi	r2,r2,255
 8016360:	10003b1e 	bne	r2,zero,8016450 <___svfiprintf_internal_r+0xd08>
 8016364:	8880004c 	andi	r2,r17,1
 8016368:	10007e26 	beq	r2,zero,8016564 <___svfiprintf_internal_r+0xe1c>
 801636c:	00800c04 	movi	r2,48
 8016370:	d8c019c4 	addi	r3,sp,103
 8016374:	d88019c5 	stb	r2,103(sp)
 8016378:	df002b17 	ldw	fp,172(sp)
 801637c:	d8c02615 	stw	r3,152(sp)
 8016380:	003dc706 	br	8015aa0 <__alt_data_end+0xfc015aa0>
 8016384:	00bfffc4 	movi	r2,-1
 8016388:	003fae06 	br	8016244 <__alt_data_end+0xfc016244>
 801638c:	9009883a 	mov	r4,r18
 8016390:	a00b883a 	mov	r5,r20
 8016394:	d9801a04 	addi	r6,sp,104
 8016398:	80155800 	call	8015580 <__ssprint_r>
 801639c:	103fa41e 	bne	r2,zero,8016230 <__alt_data_end+0xfc016230>
 80163a0:	d811883a 	mov	r8,sp
 80163a4:	003d2406 	br	8015838 <__alt_data_end+0xfc015838>
 80163a8:	9009883a 	mov	r4,r18
 80163ac:	a00b883a 	mov	r5,r20
 80163b0:	d9801a04 	addi	r6,sp,104
 80163b4:	80155800 	call	8015580 <__ssprint_r>
 80163b8:	103f9d1e 	bne	r2,zero,8016230 <__alt_data_end+0xfc016230>
 80163bc:	d8c01c17 	ldw	r3,112(sp)
 80163c0:	d8801b17 	ldw	r2,108(sp)
 80163c4:	d811883a 	mov	r8,sp
 80163c8:	003f2a06 	br	8016074 <__alt_data_end+0xfc016074>
 80163cc:	d9402a17 	ldw	r5,168(sp)
 80163d0:	d8c01a04 	addi	r3,sp,104
 80163d4:	488003cc 	andi	r2,r9,15
 80163d8:	5008973a 	slli	r4,r10,28
 80163dc:	2885883a 	add	r2,r5,r2
 80163e0:	4812d13a 	srli	r9,r9,4
 80163e4:	10800003 	ldbu	r2,0(r2)
 80163e8:	5014d13a 	srli	r10,r10,4
 80163ec:	18ffffc4 	addi	r3,r3,-1
 80163f0:	2252b03a 	or	r9,r4,r9
 80163f4:	18800005 	stb	r2,0(r3)
 80163f8:	4a84b03a 	or	r2,r9,r10
 80163fc:	103ff51e 	bne	r2,zero,80163d4 <__alt_data_end+0xfc0163d4>
 8016400:	d8c02615 	stw	r3,152(sp)
 8016404:	003da406 	br	8015a98 <__alt_data_end+0xfc015a98>
 8016408:	9009883a 	mov	r4,r18
 801640c:	a00b883a 	mov	r5,r20
 8016410:	d9801a04 	addi	r6,sp,104
 8016414:	80155800 	call	8015580 <__ssprint_r>
 8016418:	103f851e 	bne	r2,zero,8016230 <__alt_data_end+0xfc016230>
 801641c:	d8c01c17 	ldw	r3,112(sp)
 8016420:	d8801b17 	ldw	r2,108(sp)
 8016424:	d811883a 	mov	r8,sp
 8016428:	003eda06 	br	8015f94 <__alt_data_end+0xfc015f94>
 801642c:	9009883a 	mov	r4,r18
 8016430:	a00b883a 	mov	r5,r20
 8016434:	d9801a04 	addi	r6,sp,104
 8016438:	80155800 	call	8015580 <__ssprint_r>
 801643c:	103f7c1e 	bne	r2,zero,8016230 <__alt_data_end+0xfc016230>
 8016440:	d8c01c17 	ldw	r3,112(sp)
 8016444:	d8801b17 	ldw	r2,108(sp)
 8016448:	d811883a 	mov	r8,sp
 801644c:	003ede06 	br	8015fc8 <__alt_data_end+0xfc015fc8>
 8016450:	da801a04 	addi	r10,sp,104
 8016454:	da802615 	stw	r10,152(sp)
 8016458:	003d9106 	br	8015aa0 <__alt_data_end+0xfc015aa0>
 801645c:	00800084 	movi	r2,2
 8016460:	4a86b03a 	or	r3,r9,r10
 8016464:	003d7106 	br	8015a2c <__alt_data_end+0xfc015a2c>
 8016468:	88c0040c 	andi	r3,r17,16
 801646c:	18004f1e 	bne	r3,zero,80165ac <___svfiprintf_internal_r+0xe64>
 8016470:	88c0100c 	andi	r3,r17,64
 8016474:	18004d26 	beq	r3,zero,80165ac <___svfiprintf_internal_r+0xe64>
 8016478:	dac02317 	ldw	r11,140(sp)
 801647c:	1240000b 	ldhu	r9,0(r2)
 8016480:	0015883a 	mov	r10,zero
 8016484:	5ac00104 	addi	r11,r11,4
 8016488:	dac02315 	stw	r11,140(sp)
 801648c:	00800044 	movi	r2,1
 8016490:	4807883a 	mov	r3,r9
 8016494:	003d6506 	br	8015a2c <__alt_data_end+0xfc015a2c>
 8016498:	9009883a 	mov	r4,r18
 801649c:	a00b883a 	mov	r5,r20
 80164a0:	d9801a04 	addi	r6,sp,104
 80164a4:	80155800 	call	8015580 <__ssprint_r>
 80164a8:	103f611e 	bne	r2,zero,8016230 <__alt_data_end+0xfc016230>
 80164ac:	d8c01c17 	ldw	r3,112(sp)
 80164b0:	d8801b17 	ldw	r2,108(sp)
 80164b4:	d811883a 	mov	r8,sp
 80164b8:	003ea906 	br	8015f60 <__alt_data_end+0xfc015f60>
 80164bc:	88c0040c 	andi	r3,r17,16
 80164c0:	1800321e 	bne	r3,zero,801658c <___svfiprintf_internal_r+0xe44>
 80164c4:	88c0100c 	andi	r3,r17,64
 80164c8:	18003026 	beq	r3,zero,801658c <___svfiprintf_internal_r+0xe44>
 80164cc:	dac02317 	ldw	r11,140(sp)
 80164d0:	1240000b 	ldhu	r9,0(r2)
 80164d4:	0015883a 	mov	r10,zero
 80164d8:	5ac00104 	addi	r11,r11,4
 80164dc:	dac02315 	stw	r11,140(sp)
 80164e0:	0005883a 	mov	r2,zero
 80164e4:	4807883a 	mov	r3,r9
 80164e8:	003d5006 	br	8015a2c <__alt_data_end+0xfc015a2c>
 80164ec:	10803fcc 	andi	r2,r2,255
 80164f0:	1080201c 	xori	r2,r2,128
 80164f4:	10bfe004 	addi	r2,r2,-128
 80164f8:	01000c04 	movi	r4,48
 80164fc:	11006826 	beq	r2,r4,80166a0 <___svfiprintf_internal_r+0xf58>
 8016500:	da802617 	ldw	r10,152(sp)
 8016504:	d8801e17 	ldw	r2,120(sp)
 8016508:	193fffc5 	stb	r4,-1(r3)
 801650c:	52bfffc4 	addi	r10,r10,-1
 8016510:	da802615 	stw	r10,152(sp)
 8016514:	12b9c83a 	sub	fp,r2,r10
 8016518:	003d6106 	br	8015aa0 <__alt_data_end+0xfc015aa0>
 801651c:	00800244 	movi	r2,9
 8016520:	127f1d36 	bltu	r2,r9,8016198 <__alt_data_end+0xfc016198>
 8016524:	4a400c04 	addi	r9,r9,48
 8016528:	d8c019c4 	addi	r3,sp,103
 801652c:	da4019c5 	stb	r9,103(sp)
 8016530:	df002b17 	ldw	fp,172(sp)
 8016534:	d8c02615 	stw	r3,152(sp)
 8016538:	003d5906 	br	8015aa0 <__alt_data_end+0xfc015aa0>
 801653c:	d8802315 	stw	r2,140(sp)
 8016540:	a9000007 	ldb	r4,0(r21)
 8016544:	003ccc06 	br	8015878 <__alt_data_end+0xfc015878>
 8016548:	9009883a 	mov	r4,r18
 801654c:	a00b883a 	mov	r5,r20
 8016550:	d9801a04 	addi	r6,sp,104
 8016554:	80155800 	call	8015580 <__ssprint_r>
 8016558:	103f351e 	bne	r2,zero,8016230 <__alt_data_end+0xfc016230>
 801655c:	d8c01c17 	ldw	r3,112(sp)
 8016560:	003efb06 	br	8016150 <__alt_data_end+0xfc016150>
 8016564:	d8c01a04 	addi	r3,sp,104
 8016568:	d8c02615 	stw	r3,152(sp)
 801656c:	003d4c06 	br	8015aa0 <__alt_data_end+0xfc015aa0>
 8016570:	da802317 	ldw	r10,140(sp)
 8016574:	1a400017 	ldw	r9,0(r3)
 8016578:	52800104 	addi	r10,r10,4
 801657c:	da802315 	stw	r10,140(sp)
 8016580:	4815d7fa 	srai	r10,r9,31
 8016584:	5005883a 	mov	r2,r10
 8016588:	003d9d06 	br	8015c00 <__alt_data_end+0xfc015c00>
 801658c:	da802317 	ldw	r10,140(sp)
 8016590:	12400017 	ldw	r9,0(r2)
 8016594:	0005883a 	mov	r2,zero
 8016598:	52800104 	addi	r10,r10,4
 801659c:	da802315 	stw	r10,140(sp)
 80165a0:	4807883a 	mov	r3,r9
 80165a4:	0015883a 	mov	r10,zero
 80165a8:	003d2006 	br	8015a2c <__alt_data_end+0xfc015a2c>
 80165ac:	da802317 	ldw	r10,140(sp)
 80165b0:	12400017 	ldw	r9,0(r2)
 80165b4:	00800044 	movi	r2,1
 80165b8:	52800104 	addi	r10,r10,4
 80165bc:	da802315 	stw	r10,140(sp)
 80165c0:	4807883a 	mov	r3,r9
 80165c4:	0015883a 	mov	r10,zero
 80165c8:	003d1806 	br	8015a2c <__alt_data_end+0xfc015a2c>
 80165cc:	dac02317 	ldw	r11,140(sp)
 80165d0:	12400017 	ldw	r9,0(r2)
 80165d4:	0015883a 	mov	r10,zero
 80165d8:	5ac00104 	addi	r11,r11,4
 80165dc:	dac02315 	stw	r11,140(sp)
 80165e0:	003dde06 	br	8015d5c <__alt_data_end+0xfc015d5c>
 80165e4:	a9000007 	ldb	r4,0(r21)
 80165e8:	003ca306 	br	8015878 <__alt_data_end+0xfc015878>
 80165ec:	dac02317 	ldw	r11,140(sp)
 80165f0:	da802417 	ldw	r10,144(sp)
 80165f4:	58800017 	ldw	r2,0(r11)
 80165f8:	5007d7fa 	srai	r3,r10,31
 80165fc:	5ac00104 	addi	r11,r11,4
 8016600:	dac02315 	stw	r11,140(sp)
 8016604:	12800015 	stw	r10,0(r2)
 8016608:	10c00115 	stw	r3,4(r2)
 801660c:	003c7206 	br	80157d8 <__alt_data_end+0xfc0157d8>
 8016610:	00800c04 	movi	r2,48
 8016614:	d8801d05 	stb	r2,116(sp)
 8016618:	d9001d45 	stb	r4,117(sp)
 801661c:	8c400094 	ori	r17,r17,2
 8016620:	00800084 	movi	r2,2
 8016624:	003d0106 	br	8015a2c <__alt_data_end+0xfc015a2c>
 8016628:	ad400044 	addi	r21,r21,1
 801662c:	8c400814 	ori	r17,r17,32
 8016630:	11000047 	ldb	r4,1(r2)
 8016634:	003c9006 	br	8015878 <__alt_data_end+0xfc015878>
 8016638:	dac02317 	ldw	r11,140(sp)
 801663c:	da802417 	ldw	r10,144(sp)
 8016640:	58800017 	ldw	r2,0(r11)
 8016644:	5ac00104 	addi	r11,r11,4
 8016648:	dac02315 	stw	r11,140(sp)
 801664c:	12800015 	stw	r10,0(r2)
 8016650:	003c6106 	br	80157d8 <__alt_data_end+0xfc0157d8>
 8016654:	9009883a 	mov	r4,r18
 8016658:	a00b883a 	mov	r5,r20
 801665c:	d9801a04 	addi	r6,sp,104
 8016660:	80155800 	call	8015580 <__ssprint_r>
 8016664:	103ef21e 	bne	r2,zero,8016230 <__alt_data_end+0xfc016230>
 8016668:	d8c01c17 	ldw	r3,112(sp)
 801666c:	d8801b17 	ldw	r2,108(sp)
 8016670:	d811883a 	mov	r8,sp
 8016674:	003e5706 	br	8015fd4 <__alt_data_end+0xfc015fd4>
 8016678:	02c200b4 	movhi	r11,2050
 801667c:	5adcfe04 	addi	r11,r11,29688
 8016680:	dac02215 	stw	r11,136(sp)
 8016684:	003e7106 	br	801604c <__alt_data_end+0xfc01604c>
 8016688:	dac02317 	ldw	r11,140(sp)
 801668c:	12400017 	ldw	r9,0(r2)
 8016690:	0015883a 	mov	r10,zero
 8016694:	5ac00104 	addi	r11,r11,4
 8016698:	dac02315 	stw	r11,140(sp)
 801669c:	003daf06 	br	8015d5c <__alt_data_end+0xfc015d5c>
 80166a0:	da801e17 	ldw	r10,120(sp)
 80166a4:	d8c02617 	ldw	r3,152(sp)
 80166a8:	50f9c83a 	sub	fp,r10,r3
 80166ac:	003cfc06 	br	8015aa0 <__alt_data_end+0xfc015aa0>
 80166b0:	da002c15 	stw	r8,176(sp)
 80166b4:	800ca6c0 	call	800ca6c <strlen>
 80166b8:	1039883a 	mov	fp,r2
 80166bc:	dac01d83 	ldbu	r11,118(sp)
 80166c0:	ddc02315 	stw	r23,140(sp)
 80166c4:	0021883a 	mov	r16,zero
 80166c8:	da002c17 	ldw	r8,176(sp)
 80166cc:	003cf406 	br	8015aa0 <__alt_data_end+0xfc015aa0>
 80166d0:	04001004 	movi	r16,64
 80166d4:	800b883a 	mov	r5,r16
 80166d8:	800bd580 	call	800bd58 <_malloc_r>
 80166dc:	da802717 	ldw	r10,156(sp)
 80166e0:	50800015 	stw	r2,0(r10)
 80166e4:	50800415 	stw	r2,16(r10)
 80166e8:	10002c26 	beq	r2,zero,801679c <___svfiprintf_internal_r+0x1054>
 80166ec:	da802717 	ldw	r10,156(sp)
 80166f0:	54000515 	stw	r16,20(r10)
 80166f4:	003c2806 	br	8015798 <__alt_data_end+0xfc015798>
 80166f8:	00800184 	movi	r2,6
 80166fc:	1400012e 	bgeu	r2,r16,8016704 <___svfiprintf_internal_r+0xfbc>
 8016700:	1021883a 	mov	r16,r2
 8016704:	8039883a 	mov	fp,r16
 8016708:	802d883a 	mov	r22,r16
 801670c:	80001716 	blt	r16,zero,801676c <___svfiprintf_internal_r+0x1024>
 8016710:	008200b4 	movhi	r2,2050
 8016714:	109c9b04 	addi	r2,r2,29292
 8016718:	dd802015 	stw	r22,128(sp)
 801671c:	ddc02315 	stw	r23,140(sp)
 8016720:	d8802615 	stw	r2,152(sp)
 8016724:	003d4706 	br	8015c44 <__alt_data_end+0xfc015c44>
 8016728:	010200b4 	movhi	r4,2050
 801672c:	211d0204 	addi	r4,r4,29704
 8016730:	d9002815 	stw	r4,160(sp)
 8016734:	003d7206 	br	8015d00 <__alt_data_end+0xfc015d00>
 8016738:	010200b4 	movhi	r4,2050
 801673c:	211d0204 	addi	r4,r4,29704
 8016740:	d9002815 	stw	r4,160(sp)
 8016744:	003e7906 	br	801612c <__alt_data_end+0xfc01612c>
 8016748:	010200b4 	movhi	r4,2050
 801674c:	211cfe04 	addi	r4,r4,29688
 8016750:	d9002215 	stw	r4,136(sp)
 8016754:	003ee806 	br	80162f8 <__alt_data_end+0xfc0162f8>
 8016758:	8039883a 	mov	fp,r16
 801675c:	dac01d83 	ldbu	r11,118(sp)
 8016760:	ddc02315 	stw	r23,140(sp)
 8016764:	0021883a 	mov	r16,zero
 8016768:	003ccd06 	br	8015aa0 <__alt_data_end+0xfc015aa0>
 801676c:	002d883a 	mov	r22,zero
 8016770:	003fe706 	br	8016710 <__alt_data_end+0xfc016710>
 8016774:	dac02317 	ldw	r11,140(sp)
 8016778:	a805883a 	mov	r2,r21
 801677c:	502b883a 	mov	r21,r10
 8016780:	5c000017 	ldw	r16,0(r11)
 8016784:	59000104 	addi	r4,r11,4
 8016788:	d9002315 	stw	r4,140(sp)
 801678c:	803fa80e 	bge	r16,zero,8016630 <__alt_data_end+0xfc016630>
 8016790:	043fffc4 	movi	r16,-1
 8016794:	11000047 	ldb	r4,1(r2)
 8016798:	003c3706 	br	8015878 <__alt_data_end+0xfc015878>
 801679c:	dac02917 	ldw	r11,164(sp)
 80167a0:	00800304 	movi	r2,12
 80167a4:	58800015 	stw	r2,0(r11)
 80167a8:	00bfffc4 	movi	r2,-1
 80167ac:	003ea506 	br	8016244 <__alt_data_end+0xfc016244>

080167b0 <__sprint_r.part.0>:
 80167b0:	28801917 	ldw	r2,100(r5)
 80167b4:	defff604 	addi	sp,sp,-40
 80167b8:	dd400515 	stw	r21,20(sp)
 80167bc:	dcc00315 	stw	r19,12(sp)
 80167c0:	dfc00915 	stw	ra,36(sp)
 80167c4:	df000815 	stw	fp,32(sp)
 80167c8:	ddc00715 	stw	r23,28(sp)
 80167cc:	dd800615 	stw	r22,24(sp)
 80167d0:	dd000415 	stw	r20,16(sp)
 80167d4:	dc800215 	stw	r18,8(sp)
 80167d8:	dc400115 	stw	r17,4(sp)
 80167dc:	dc000015 	stw	r16,0(sp)
 80167e0:	1088000c 	andi	r2,r2,8192
 80167e4:	2827883a 	mov	r19,r5
 80167e8:	302b883a 	mov	r21,r6
 80167ec:	10002d26 	beq	r2,zero,80168a4 <__sprint_r.part.0+0xf4>
 80167f0:	30800217 	ldw	r2,8(r6)
 80167f4:	35800017 	ldw	r22,0(r6)
 80167f8:	10002826 	beq	r2,zero,801689c <__sprint_r.part.0+0xec>
 80167fc:	2029883a 	mov	r20,r4
 8016800:	b5c00104 	addi	r23,r22,4
 8016804:	04bfffc4 	movi	r18,-1
 8016808:	bc400017 	ldw	r17,0(r23)
 801680c:	b4000017 	ldw	r16,0(r22)
 8016810:	0039883a 	mov	fp,zero
 8016814:	8822d0ba 	srli	r17,r17,2
 8016818:	04400316 	blt	zero,r17,8016828 <__sprint_r.part.0+0x78>
 801681c:	00001706 	br	801687c <__sprint_r.part.0+0xcc>
 8016820:	84000104 	addi	r16,r16,4
 8016824:	8f001526 	beq	r17,fp,801687c <__sprint_r.part.0+0xcc>
 8016828:	81400017 	ldw	r5,0(r16)
 801682c:	a009883a 	mov	r4,r20
 8016830:	980d883a 	mov	r6,r19
 8016834:	8017f780 	call	8017f78 <_fputwc_r>
 8016838:	e7000044 	addi	fp,fp,1
 801683c:	14bff81e 	bne	r2,r18,8016820 <__alt_data_end+0xfc016820>
 8016840:	9005883a 	mov	r2,r18
 8016844:	a8000215 	stw	zero,8(r21)
 8016848:	a8000115 	stw	zero,4(r21)
 801684c:	dfc00917 	ldw	ra,36(sp)
 8016850:	df000817 	ldw	fp,32(sp)
 8016854:	ddc00717 	ldw	r23,28(sp)
 8016858:	dd800617 	ldw	r22,24(sp)
 801685c:	dd400517 	ldw	r21,20(sp)
 8016860:	dd000417 	ldw	r20,16(sp)
 8016864:	dcc00317 	ldw	r19,12(sp)
 8016868:	dc800217 	ldw	r18,8(sp)
 801686c:	dc400117 	ldw	r17,4(sp)
 8016870:	dc000017 	ldw	r16,0(sp)
 8016874:	dec00a04 	addi	sp,sp,40
 8016878:	f800283a 	ret
 801687c:	a8c00217 	ldw	r3,8(r21)
 8016880:	8c63883a 	add	r17,r17,r17
 8016884:	8c63883a 	add	r17,r17,r17
 8016888:	1c45c83a 	sub	r2,r3,r17
 801688c:	a8800215 	stw	r2,8(r21)
 8016890:	b5800204 	addi	r22,r22,8
 8016894:	bdc00204 	addi	r23,r23,8
 8016898:	103fdb1e 	bne	r2,zero,8016808 <__alt_data_end+0xfc016808>
 801689c:	0005883a 	mov	r2,zero
 80168a0:	003fe806 	br	8016844 <__alt_data_end+0xfc016844>
 80168a4:	8012f4c0 	call	8012f4c <__sfvwrite_r>
 80168a8:	003fe606 	br	8016844 <__alt_data_end+0xfc016844>

080168ac <__sprint_r>:
 80168ac:	30c00217 	ldw	r3,8(r6)
 80168b0:	18000126 	beq	r3,zero,80168b8 <__sprint_r+0xc>
 80168b4:	80167b01 	jmpi	80167b0 <__sprint_r.part.0>
 80168b8:	30000115 	stw	zero,4(r6)
 80168bc:	0005883a 	mov	r2,zero
 80168c0:	f800283a 	ret

080168c4 <___vfiprintf_internal_r>:
 80168c4:	defeca04 	addi	sp,sp,-1240
 80168c8:	dd813215 	stw	r22,1224(sp)
 80168cc:	dd013015 	stw	r20,1216(sp)
 80168d0:	dfc13515 	stw	ra,1236(sp)
 80168d4:	df013415 	stw	fp,1232(sp)
 80168d8:	ddc13315 	stw	r23,1228(sp)
 80168dc:	dd413115 	stw	r21,1220(sp)
 80168e0:	dcc12f15 	stw	r19,1212(sp)
 80168e4:	dc812e15 	stw	r18,1208(sp)
 80168e8:	dc412d15 	stw	r17,1204(sp)
 80168ec:	dc012c15 	stw	r16,1200(sp)
 80168f0:	d9012015 	stw	r4,1152(sp)
 80168f4:	d9c12115 	stw	r7,1156(sp)
 80168f8:	2829883a 	mov	r20,r5
 80168fc:	302d883a 	mov	r22,r6
 8016900:	20000226 	beq	r4,zero,801690c <___vfiprintf_internal_r+0x48>
 8016904:	20800e17 	ldw	r2,56(r4)
 8016908:	1001d326 	beq	r2,zero,8017058 <___vfiprintf_internal_r+0x794>
 801690c:	a0c0030b 	ldhu	r3,12(r20)
 8016910:	1908000c 	andi	r4,r3,8192
 8016914:	1805883a 	mov	r2,r3
 8016918:	2000071e 	bne	r4,zero,8016938 <___vfiprintf_internal_r+0x74>
 801691c:	a1001917 	ldw	r4,100(r20)
 8016920:	18880014 	ori	r2,r3,8192
 8016924:	00f7ffc4 	movi	r3,-8193
 8016928:	20c8703a 	and	r4,r4,r3
 801692c:	a080030d 	sth	r2,12(r20)
 8016930:	1007883a 	mov	r3,r2
 8016934:	a1001915 	stw	r4,100(r20)
 8016938:	1100020c 	andi	r4,r2,8
 801693c:	20018926 	beq	r4,zero,8016f64 <___vfiprintf_internal_r+0x6a0>
 8016940:	a1000417 	ldw	r4,16(r20)
 8016944:	20018726 	beq	r4,zero,8016f64 <___vfiprintf_internal_r+0x6a0>
 8016948:	1080068c 	andi	r2,r2,26
 801694c:	01000284 	movi	r4,10
 8016950:	11018d26 	beq	r2,r4,8016f88 <___vfiprintf_internal_r+0x6c4>
 8016954:	da810a04 	addi	r10,sp,1064
 8016958:	dac109c4 	addi	r11,sp,1063
 801695c:	070200b4 	movhi	fp,2050
 8016960:	05c200b4 	movhi	r23,2050
 8016964:	da811e15 	stw	r10,1144(sp)
 8016968:	52d5c83a 	sub	r10,r10,r11
 801696c:	e71d0a04 	addi	fp,fp,29736
 8016970:	bddd0604 	addi	r23,r23,29720
 8016974:	dac11f15 	stw	r11,1148(sp)
 8016978:	dec11a15 	stw	sp,1128(sp)
 801697c:	d8011c15 	stw	zero,1136(sp)
 8016980:	d8011b15 	stw	zero,1132(sp)
 8016984:	d8012615 	stw	zero,1176(sp)
 8016988:	d8012215 	stw	zero,1160(sp)
 801698c:	da812715 	stw	r10,1180(sp)
 8016990:	d811883a 	mov	r8,sp
 8016994:	b021883a 	mov	r16,r22
 8016998:	80800007 	ldb	r2,0(r16)
 801699c:	10039c26 	beq	r2,zero,8017810 <___vfiprintf_internal_r+0xf4c>
 80169a0:	01000944 	movi	r4,37
 80169a4:	11039a26 	beq	r2,r4,8017810 <___vfiprintf_internal_r+0xf4c>
 80169a8:	8005883a 	mov	r2,r16
 80169ac:	00000106 	br	80169b4 <___vfiprintf_internal_r+0xf0>
 80169b0:	19000326 	beq	r3,r4,80169c0 <___vfiprintf_internal_r+0xfc>
 80169b4:	10800044 	addi	r2,r2,1
 80169b8:	10c00007 	ldb	r3,0(r2)
 80169bc:	183ffc1e 	bne	r3,zero,80169b0 <__alt_data_end+0xfc0169b0>
 80169c0:	1425c83a 	sub	r18,r2,r16
 80169c4:	1023883a 	mov	r17,r2
 80169c8:	90001026 	beq	r18,zero,8016a0c <___vfiprintf_internal_r+0x148>
 80169cc:	d8c11c17 	ldw	r3,1136(sp)
 80169d0:	d8811b17 	ldw	r2,1132(sp)
 80169d4:	44000015 	stw	r16,0(r8)
 80169d8:	90c7883a 	add	r3,r18,r3
 80169dc:	10800044 	addi	r2,r2,1
 80169e0:	44800115 	stw	r18,4(r8)
 80169e4:	d8c11c15 	stw	r3,1136(sp)
 80169e8:	d8811b15 	stw	r2,1132(sp)
 80169ec:	010001c4 	movi	r4,7
 80169f0:	2080750e 	bge	r4,r2,8016bc8 <___vfiprintf_internal_r+0x304>
 80169f4:	18039d1e 	bne	r3,zero,801786c <___vfiprintf_internal_r+0xfa8>
 80169f8:	dac12217 	ldw	r11,1160(sp)
 80169fc:	d8011b15 	stw	zero,1132(sp)
 8016a00:	d811883a 	mov	r8,sp
 8016a04:	5c97883a 	add	r11,r11,r18
 8016a08:	dac12215 	stw	r11,1160(sp)
 8016a0c:	88800007 	ldb	r2,0(r17)
 8016a10:	1002e026 	beq	r2,zero,8017594 <___vfiprintf_internal_r+0xcd0>
 8016a14:	88c00047 	ldb	r3,1(r17)
 8016a18:	8c000044 	addi	r16,r17,1
 8016a1c:	d8011d85 	stb	zero,1142(sp)
 8016a20:	000d883a 	mov	r6,zero
 8016a24:	027fffc4 	movi	r9,-1
 8016a28:	0027883a 	mov	r19,zero
 8016a2c:	002b883a 	mov	r21,zero
 8016a30:	01001604 	movi	r4,88
 8016a34:	01400244 	movi	r5,9
 8016a38:	03000a84 	movi	r12,42
 8016a3c:	01c01b04 	movi	r7,108
 8016a40:	84000044 	addi	r16,r16,1
 8016a44:	18bff804 	addi	r2,r3,-32
 8016a48:	20825f36 	bltu	r4,r2,80173c8 <___vfiprintf_internal_r+0xb04>
 8016a4c:	100490ba 	slli	r2,r2,2
 8016a50:	02820074 	movhi	r10,2049
 8016a54:	529a9904 	addi	r10,r10,27236
 8016a58:	1285883a 	add	r2,r2,r10
 8016a5c:	10800017 	ldw	r2,0(r2)
 8016a60:	1000683a 	jmp	r2
 8016a64:	08017238 	rdprs	zero,at,1480
 8016a68:	080173c8 	cmpgei	zero,at,1487
 8016a6c:	080173c8 	cmpgei	zero,at,1487
 8016a70:	080173bc 	xorhi	zero,at,1486
 8016a74:	080173c8 	cmpgei	zero,at,1487
 8016a78:	080173c8 	cmpgei	zero,at,1487
 8016a7c:	080173c8 	cmpgei	zero,at,1487
 8016a80:	080173c8 	cmpgei	zero,at,1487
 8016a84:	080173c8 	cmpgei	zero,at,1487
 8016a88:	080173c8 	cmpgei	zero,at,1487
 8016a8c:	08017394 	ori	zero,at,1486
 8016a90:	080173b0 	cmpltui	zero,at,1486
 8016a94:	080173c8 	cmpgei	zero,at,1487
 8016a98:	08017068 	cmpgeui	zero,at,1473
 8016a9c:	080171c8 	cmpgei	zero,at,1479
 8016aa0:	080173c8 	cmpgei	zero,at,1487
 8016aa4:	0801714c 	andi	zero,at,1477
 8016aa8:	08017158 	cmpnei	zero,at,1477
 8016aac:	08017158 	cmpnei	zero,at,1477
 8016ab0:	08017158 	cmpnei	zero,at,1477
 8016ab4:	08017158 	cmpnei	zero,at,1477
 8016ab8:	08017158 	cmpnei	zero,at,1477
 8016abc:	08017158 	cmpnei	zero,at,1477
 8016ac0:	08017158 	cmpnei	zero,at,1477
 8016ac4:	08017158 	cmpnei	zero,at,1477
 8016ac8:	08017158 	cmpnei	zero,at,1477
 8016acc:	080173c8 	cmpgei	zero,at,1487
 8016ad0:	080173c8 	cmpgei	zero,at,1487
 8016ad4:	080173c8 	cmpgei	zero,at,1487
 8016ad8:	080173c8 	cmpgei	zero,at,1487
 8016adc:	080173c8 	cmpgei	zero,at,1487
 8016ae0:	080173c8 	cmpgei	zero,at,1487
 8016ae4:	080173c8 	cmpgei	zero,at,1487
 8016ae8:	080173c8 	cmpgei	zero,at,1487
 8016aec:	080173c8 	cmpgei	zero,at,1487
 8016af0:	080173c8 	cmpgei	zero,at,1487
 8016af4:	08017184 	addi	zero,at,1478
 8016af8:	080173c8 	cmpgei	zero,at,1487
 8016afc:	080173c8 	cmpgei	zero,at,1487
 8016b00:	080173c8 	cmpgei	zero,at,1487
 8016b04:	080173c8 	cmpgei	zero,at,1487
 8016b08:	080173c8 	cmpgei	zero,at,1487
 8016b0c:	080173c8 	cmpgei	zero,at,1487
 8016b10:	080173c8 	cmpgei	zero,at,1487
 8016b14:	080173c8 	cmpgei	zero,at,1487
 8016b18:	080173c8 	cmpgei	zero,at,1487
 8016b1c:	080173c8 	cmpgei	zero,at,1487
 8016b20:	08016c18 	cmpnei	zero,at,1456
 8016b24:	080173c8 	cmpgei	zero,at,1487
 8016b28:	080173c8 	cmpgei	zero,at,1487
 8016b2c:	080173c8 	cmpgei	zero,at,1487
 8016b30:	080173c8 	cmpgei	zero,at,1487
 8016b34:	080173c8 	cmpgei	zero,at,1487
 8016b38:	08016bdc 	xori	zero,at,1455
 8016b3c:	080173c8 	cmpgei	zero,at,1487
 8016b40:	080173c8 	cmpgei	zero,at,1487
 8016b44:	080170c4 	addi	zero,at,1475
 8016b48:	080173c8 	cmpgei	zero,at,1487
 8016b4c:	080173c8 	cmpgei	zero,at,1487
 8016b50:	080173c8 	cmpgei	zero,at,1487
 8016b54:	080173c8 	cmpgei	zero,at,1487
 8016b58:	080173c8 	cmpgei	zero,at,1487
 8016b5c:	080173c8 	cmpgei	zero,at,1487
 8016b60:	080173c8 	cmpgei	zero,at,1487
 8016b64:	080173c8 	cmpgei	zero,at,1487
 8016b68:	080173c8 	cmpgei	zero,at,1487
 8016b6c:	080173c8 	cmpgei	zero,at,1487
 8016b70:	0801711c 	xori	zero,at,1476
 8016b74:	080172b4 	orhi	zero,at,1482
 8016b78:	080173c8 	cmpgei	zero,at,1487
 8016b7c:	080173c8 	cmpgei	zero,at,1487
 8016b80:	080173c8 	cmpgei	zero,at,1487
 8016b84:	0801733c 	xorhi	zero,at,1484
 8016b88:	080172b4 	orhi	zero,at,1482
 8016b8c:	080173c8 	cmpgei	zero,at,1487
 8016b90:	080173c8 	cmpgei	zero,at,1487
 8016b94:	08017348 	cmpgei	zero,at,1485
 8016b98:	080173c8 	cmpgei	zero,at,1487
 8016b9c:	08017208 	cmpgei	zero,at,1480
 8016ba0:	08016c1c 	xori	zero,at,1456
 8016ba4:	080172f0 	cmpltui	zero,at,1483
 8016ba8:	08017330 	cmpltui	zero,at,1484
 8016bac:	080173c8 	cmpgei	zero,at,1487
 8016bb0:	08017254 	ori	zero,at,1481
 8016bb4:	080173c8 	cmpgei	zero,at,1487
 8016bb8:	08016be0 	cmpeqi	zero,at,1455
 8016bbc:	080173c8 	cmpgei	zero,at,1487
 8016bc0:	080173c8 	cmpgei	zero,at,1487
 8016bc4:	08017358 	cmpnei	zero,at,1485
 8016bc8:	42000204 	addi	r8,r8,8
 8016bcc:	dac12217 	ldw	r11,1160(sp)
 8016bd0:	5c97883a 	add	r11,r11,r18
 8016bd4:	dac12215 	stw	r11,1160(sp)
 8016bd8:	003f8c06 	br	8016a0c <__alt_data_end+0xfc016a0c>
 8016bdc:	ad400414 	ori	r21,r21,16
 8016be0:	a880080c 	andi	r2,r21,32
 8016be4:	10012f1e 	bne	r2,zero,80170a4 <___vfiprintf_internal_r+0x7e0>
 8016be8:	a880040c 	andi	r2,r21,16
 8016bec:	1001ff1e 	bne	r2,zero,80173ec <___vfiprintf_internal_r+0xb28>
 8016bf0:	a880100c 	andi	r2,r21,64
 8016bf4:	1001fd26 	beq	r2,zero,80173ec <___vfiprintf_internal_r+0xb28>
 8016bf8:	da812117 	ldw	r10,1156(sp)
 8016bfc:	002d883a 	mov	r22,zero
 8016c00:	00800044 	movi	r2,1
 8016c04:	5480000b 	ldhu	r18,0(r10)
 8016c08:	52800104 	addi	r10,r10,4
 8016c0c:	da812115 	stw	r10,1156(sp)
 8016c10:	9009883a 	mov	r4,r18
 8016c14:	00000a06 	br	8016c40 <___vfiprintf_internal_r+0x37c>
 8016c18:	ad400414 	ori	r21,r21,16
 8016c1c:	a880080c 	andi	r2,r21,32
 8016c20:	10011426 	beq	r2,zero,8017074 <___vfiprintf_internal_r+0x7b0>
 8016c24:	da812117 	ldw	r10,1156(sp)
 8016c28:	0005883a 	mov	r2,zero
 8016c2c:	54800017 	ldw	r18,0(r10)
 8016c30:	55800117 	ldw	r22,4(r10)
 8016c34:	52800204 	addi	r10,r10,8
 8016c38:	da812115 	stw	r10,1156(sp)
 8016c3c:	9588b03a 	or	r4,r18,r22
 8016c40:	d8011d85 	stb	zero,1142(sp)
 8016c44:	4823883a 	mov	r17,r9
 8016c48:	0019883a 	mov	r12,zero
 8016c4c:	48000216 	blt	r9,zero,8016c58 <___vfiprintf_internal_r+0x394>
 8016c50:	00ffdfc4 	movi	r3,-129
 8016c54:	a8ea703a 	and	r21,r21,r3
 8016c58:	2002221e 	bne	r4,zero,80174e4 <___vfiprintf_internal_r+0xc20>
 8016c5c:	4802c726 	beq	r9,zero,801777c <___vfiprintf_internal_r+0xeb8>
 8016c60:	10803fcc 	andi	r2,r2,255
 8016c64:	00c00044 	movi	r3,1
 8016c68:	10c24426 	beq	r2,r3,801757c <___vfiprintf_internal_r+0xcb8>
 8016c6c:	00c00084 	movi	r3,2
 8016c70:	10c2cc26 	beq	r2,r3,80177a4 <___vfiprintf_internal_r+0xee0>
 8016c74:	d8c10a04 	addi	r3,sp,1064
 8016c78:	9008d0fa 	srli	r4,r18,3
 8016c7c:	b00a977a 	slli	r5,r22,29
 8016c80:	b02cd0fa 	srli	r22,r22,3
 8016c84:	948001cc 	andi	r18,r18,7
 8016c88:	90800c04 	addi	r2,r18,48
 8016c8c:	18ffffc4 	addi	r3,r3,-1
 8016c90:	2924b03a 	or	r18,r5,r4
 8016c94:	18800005 	stb	r2,0(r3)
 8016c98:	9588b03a 	or	r4,r18,r22
 8016c9c:	203ff61e 	bne	r4,zero,8016c78 <__alt_data_end+0xfc016c78>
 8016ca0:	a900004c 	andi	r4,r21,1
 8016ca4:	d8c12415 	stw	r3,1168(sp)
 8016ca8:	2002fb1e 	bne	r4,zero,8017898 <___vfiprintf_internal_r+0xfd4>
 8016cac:	da811e17 	ldw	r10,1144(sp)
 8016cb0:	50e3c83a 	sub	r17,r10,r3
 8016cb4:	8825883a 	mov	r18,r17
 8016cb8:	8a40010e 	bge	r17,r9,8016cc0 <___vfiprintf_internal_r+0x3fc>
 8016cbc:	4825883a 	mov	r18,r9
 8016cc0:	63003fcc 	andi	r12,r12,255
 8016cc4:	6300201c 	xori	r12,r12,128
 8016cc8:	633fe004 	addi	r12,r12,-128
 8016ccc:	60000126 	beq	r12,zero,8016cd4 <___vfiprintf_internal_r+0x410>
 8016cd0:	94800044 	addi	r18,r18,1
 8016cd4:	ab80008c 	andi	r14,r21,2
 8016cd8:	70000126 	beq	r14,zero,8016ce0 <___vfiprintf_internal_r+0x41c>
 8016cdc:	94800084 	addi	r18,r18,2
 8016ce0:	ad80210c 	andi	r22,r21,132
 8016ce4:	b001df1e 	bne	r22,zero,8017464 <___vfiprintf_internal_r+0xba0>
 8016ce8:	9c8fc83a 	sub	r7,r19,r18
 8016cec:	01c1dd0e 	bge	zero,r7,8017464 <___vfiprintf_internal_r+0xba0>
 8016cf0:	03000404 	movi	r12,16
 8016cf4:	d8811c17 	ldw	r2,1136(sp)
 8016cf8:	61c3920e 	bge	r12,r7,8017b44 <___vfiprintf_internal_r+0x1280>
 8016cfc:	028200b4 	movhi	r10,2050
 8016d00:	529d0a04 	addi	r10,r10,29736
 8016d04:	dc012915 	stw	r16,1188(sp)
 8016d08:	d9811b17 	ldw	r6,1132(sp)
 8016d0c:	da812315 	stw	r10,1164(sp)
 8016d10:	00c001c4 	movi	r3,7
 8016d14:	da412515 	stw	r9,1172(sp)
 8016d18:	db812815 	stw	r14,1184(sp)
 8016d1c:	3821883a 	mov	r16,r7
 8016d20:	00000506 	br	8016d38 <___vfiprintf_internal_r+0x474>
 8016d24:	31400084 	addi	r5,r6,2
 8016d28:	42000204 	addi	r8,r8,8
 8016d2c:	200d883a 	mov	r6,r4
 8016d30:	843ffc04 	addi	r16,r16,-16
 8016d34:	64000d0e 	bge	r12,r16,8016d6c <___vfiprintf_internal_r+0x4a8>
 8016d38:	10800404 	addi	r2,r2,16
 8016d3c:	31000044 	addi	r4,r6,1
 8016d40:	47000015 	stw	fp,0(r8)
 8016d44:	43000115 	stw	r12,4(r8)
 8016d48:	d8811c15 	stw	r2,1136(sp)
 8016d4c:	d9011b15 	stw	r4,1132(sp)
 8016d50:	193ff40e 	bge	r3,r4,8016d24 <__alt_data_end+0xfc016d24>
 8016d54:	1001b51e 	bne	r2,zero,801742c <___vfiprintf_internal_r+0xb68>
 8016d58:	843ffc04 	addi	r16,r16,-16
 8016d5c:	000d883a 	mov	r6,zero
 8016d60:	01400044 	movi	r5,1
 8016d64:	d811883a 	mov	r8,sp
 8016d68:	643ff316 	blt	r12,r16,8016d38 <__alt_data_end+0xfc016d38>
 8016d6c:	800f883a 	mov	r7,r16
 8016d70:	da412517 	ldw	r9,1172(sp)
 8016d74:	db812817 	ldw	r14,1184(sp)
 8016d78:	dc012917 	ldw	r16,1188(sp)
 8016d7c:	dac12317 	ldw	r11,1164(sp)
 8016d80:	3887883a 	add	r3,r7,r2
 8016d84:	41c00115 	stw	r7,4(r8)
 8016d88:	42c00015 	stw	r11,0(r8)
 8016d8c:	d8c11c15 	stw	r3,1136(sp)
 8016d90:	d9411b15 	stw	r5,1132(sp)
 8016d94:	008001c4 	movi	r2,7
 8016d98:	11429316 	blt	r2,r5,80177e8 <___vfiprintf_internal_r+0xf24>
 8016d9c:	d9011d87 	ldb	r4,1142(sp)
 8016da0:	42000204 	addi	r8,r8,8
 8016da4:	28800044 	addi	r2,r5,1
 8016da8:	2001b31e 	bne	r4,zero,8017478 <___vfiprintf_internal_r+0xbb4>
 8016dac:	70000c26 	beq	r14,zero,8016de0 <___vfiprintf_internal_r+0x51c>
 8016db0:	d9011d04 	addi	r4,sp,1140
 8016db4:	18c00084 	addi	r3,r3,2
 8016db8:	41000015 	stw	r4,0(r8)
 8016dbc:	01000084 	movi	r4,2
 8016dc0:	41000115 	stw	r4,4(r8)
 8016dc4:	d8c11c15 	stw	r3,1136(sp)
 8016dc8:	d8811b15 	stw	r2,1132(sp)
 8016dcc:	010001c4 	movi	r4,7
 8016dd0:	20826516 	blt	r4,r2,8017768 <___vfiprintf_internal_r+0xea4>
 8016dd4:	100b883a 	mov	r5,r2
 8016dd8:	42000204 	addi	r8,r8,8
 8016ddc:	10800044 	addi	r2,r2,1
 8016de0:	01002004 	movi	r4,128
 8016de4:	b1021a26 	beq	r22,r4,8017650 <___vfiprintf_internal_r+0xd8c>
 8016de8:	4c6dc83a 	sub	r22,r9,r17
 8016dec:	0580230e 	bge	zero,r22,8016e7c <___vfiprintf_internal_r+0x5b8>
 8016df0:	01c00404 	movi	r7,16
 8016df4:	3d83300e 	bge	r7,r22,8017ab8 <___vfiprintf_internal_r+0x11f4>
 8016df8:	008200b4 	movhi	r2,2050
 8016dfc:	109d0604 	addi	r2,r2,29720
 8016e00:	d8812315 	stw	r2,1164(sp)
 8016e04:	030001c4 	movi	r12,7
 8016e08:	00000506 	br	8016e20 <___vfiprintf_internal_r+0x55c>
 8016e0c:	28800084 	addi	r2,r5,2
 8016e10:	42000204 	addi	r8,r8,8
 8016e14:	200b883a 	mov	r5,r4
 8016e18:	b5bffc04 	addi	r22,r22,-16
 8016e1c:	3d800d0e 	bge	r7,r22,8016e54 <___vfiprintf_internal_r+0x590>
 8016e20:	18c00404 	addi	r3,r3,16
 8016e24:	29000044 	addi	r4,r5,1
 8016e28:	45c00015 	stw	r23,0(r8)
 8016e2c:	41c00115 	stw	r7,4(r8)
 8016e30:	d8c11c15 	stw	r3,1136(sp)
 8016e34:	d9011b15 	stw	r4,1132(sp)
 8016e38:	613ff40e 	bge	r12,r4,8016e0c <__alt_data_end+0xfc016e0c>
 8016e3c:	18019b1e 	bne	r3,zero,80174ac <___vfiprintf_internal_r+0xbe8>
 8016e40:	b5bffc04 	addi	r22,r22,-16
 8016e44:	000b883a 	mov	r5,zero
 8016e48:	00800044 	movi	r2,1
 8016e4c:	d811883a 	mov	r8,sp
 8016e50:	3dbff316 	blt	r7,r22,8016e20 <__alt_data_end+0xfc016e20>
 8016e54:	da812317 	ldw	r10,1164(sp)
 8016e58:	1d87883a 	add	r3,r3,r22
 8016e5c:	45800115 	stw	r22,4(r8)
 8016e60:	42800015 	stw	r10,0(r8)
 8016e64:	d8c11c15 	stw	r3,1136(sp)
 8016e68:	d8811b15 	stw	r2,1132(sp)
 8016e6c:	010001c4 	movi	r4,7
 8016e70:	2081dd16 	blt	r4,r2,80175e8 <___vfiprintf_internal_r+0xd24>
 8016e74:	42000204 	addi	r8,r8,8
 8016e78:	10800044 	addi	r2,r2,1
 8016e7c:	da812417 	ldw	r10,1168(sp)
 8016e80:	1c47883a 	add	r3,r3,r17
 8016e84:	44400115 	stw	r17,4(r8)
 8016e88:	42800015 	stw	r10,0(r8)
 8016e8c:	d8c11c15 	stw	r3,1136(sp)
 8016e90:	d8811b15 	stw	r2,1132(sp)
 8016e94:	010001c4 	movi	r4,7
 8016e98:	2081dc0e 	bge	r4,r2,801760c <___vfiprintf_internal_r+0xd48>
 8016e9c:	1802611e 	bne	r3,zero,8017824 <___vfiprintf_internal_r+0xf60>
 8016ea0:	d8011b15 	stw	zero,1132(sp)
 8016ea4:	aac0010c 	andi	r11,r21,4
 8016ea8:	58002726 	beq	r11,zero,8016f48 <___vfiprintf_internal_r+0x684>
 8016eac:	9ca3c83a 	sub	r17,r19,r18
 8016eb0:	d811883a 	mov	r8,sp
 8016eb4:	0443510e 	bge	zero,r17,8017bfc <___vfiprintf_internal_r+0x1338>
 8016eb8:	01c00404 	movi	r7,16
 8016ebc:	3c43320e 	bge	r7,r17,8017b88 <___vfiprintf_internal_r+0x12c4>
 8016ec0:	008200b4 	movhi	r2,2050
 8016ec4:	109d0a04 	addi	r2,r2,29736
 8016ec8:	d9011b17 	ldw	r4,1132(sp)
 8016ecc:	d8812315 	stw	r2,1164(sp)
 8016ed0:	382d883a 	mov	r22,r7
 8016ed4:	054001c4 	movi	r21,7
 8016ed8:	00000506 	br	8016ef0 <___vfiprintf_internal_r+0x62c>
 8016edc:	21400084 	addi	r5,r4,2
 8016ee0:	42000204 	addi	r8,r8,8
 8016ee4:	1009883a 	mov	r4,r2
 8016ee8:	8c7ffc04 	addi	r17,r17,-16
 8016eec:	b4400d0e 	bge	r22,r17,8016f24 <___vfiprintf_internal_r+0x660>
 8016ef0:	18c00404 	addi	r3,r3,16
 8016ef4:	20800044 	addi	r2,r4,1
 8016ef8:	47000015 	stw	fp,0(r8)
 8016efc:	45800115 	stw	r22,4(r8)
 8016f00:	d8c11c15 	stw	r3,1136(sp)
 8016f04:	d8811b15 	stw	r2,1132(sp)
 8016f08:	a8bff40e 	bge	r21,r2,8016edc <__alt_data_end+0xfc016edc>
 8016f0c:	1801ac1e 	bne	r3,zero,80175c0 <___vfiprintf_internal_r+0xcfc>
 8016f10:	8c7ffc04 	addi	r17,r17,-16
 8016f14:	0009883a 	mov	r4,zero
 8016f18:	01400044 	movi	r5,1
 8016f1c:	d811883a 	mov	r8,sp
 8016f20:	b47ff316 	blt	r22,r17,8016ef0 <__alt_data_end+0xfc016ef0>
 8016f24:	da812317 	ldw	r10,1164(sp)
 8016f28:	1c47883a 	add	r3,r3,r17
 8016f2c:	44400115 	stw	r17,4(r8)
 8016f30:	42800015 	stw	r10,0(r8)
 8016f34:	d8c11c15 	stw	r3,1136(sp)
 8016f38:	d9411b15 	stw	r5,1132(sp)
 8016f3c:	008001c4 	movi	r2,7
 8016f40:	1141b70e 	bge	r2,r5,8017620 <___vfiprintf_internal_r+0xd5c>
 8016f44:	1802cf1e 	bne	r3,zero,8017a84 <___vfiprintf_internal_r+0x11c0>
 8016f48:	94c2ca16 	blt	r18,r19,8017a74 <___vfiprintf_internal_r+0x11b0>
 8016f4c:	dac12217 	ldw	r11,1160(sp)
 8016f50:	5c97883a 	add	r11,r11,r18
 8016f54:	dac12215 	stw	r11,1160(sp)
 8016f58:	d8011b15 	stw	zero,1132(sp)
 8016f5c:	d811883a 	mov	r8,sp
 8016f60:	003e8d06 	br	8016998 <__alt_data_end+0xfc016998>
 8016f64:	d9012017 	ldw	r4,1152(sp)
 8016f68:	a00b883a 	mov	r5,r20
 8016f6c:	8010ad00 	call	8010ad0 <__swsetup_r>
 8016f70:	10002c1e 	bne	r2,zero,8017024 <___vfiprintf_internal_r+0x760>
 8016f74:	a0c0030b 	ldhu	r3,12(r20)
 8016f78:	01000284 	movi	r4,10
 8016f7c:	1805883a 	mov	r2,r3
 8016f80:	1080068c 	andi	r2,r2,26
 8016f84:	113e731e 	bne	r2,r4,8016954 <__alt_data_end+0xfc016954>
 8016f88:	a080038b 	ldhu	r2,14(r20)
 8016f8c:	113fffcc 	andi	r4,r2,65535
 8016f90:	2120001c 	xori	r4,r4,32768
 8016f94:	21200004 	addi	r4,r4,-32768
 8016f98:	203e6e16 	blt	r4,zero,8016954 <__alt_data_end+0xfc016954>
 8016f9c:	a3001917 	ldw	r12,100(r20)
 8016fa0:	a2c00717 	ldw	r11,28(r20)
 8016fa4:	a2800917 	ldw	r10,36(r20)
 8016fa8:	d9012017 	ldw	r4,1152(sp)
 8016fac:	d9c12117 	ldw	r7,1156(sp)
 8016fb0:	02410004 	movi	r9,1024
 8016fb4:	18ffff4c 	andi	r3,r3,65533
 8016fb8:	da4b883a 	add	r5,sp,r9
 8016fbc:	b00d883a 	mov	r6,r22
 8016fc0:	d8c1030d 	sth	r3,1036(sp)
 8016fc4:	db011915 	stw	r12,1124(sp)
 8016fc8:	d881038d 	sth	r2,1038(sp)
 8016fcc:	dac10715 	stw	r11,1052(sp)
 8016fd0:	da810915 	stw	r10,1060(sp)
 8016fd4:	dec10015 	stw	sp,1024(sp)
 8016fd8:	dec10415 	stw	sp,1040(sp)
 8016fdc:	da410215 	stw	r9,1032(sp)
 8016fe0:	da410515 	stw	r9,1044(sp)
 8016fe4:	d8010615 	stw	zero,1048(sp)
 8016fe8:	80168c40 	call	80168c4 <___vfiprintf_internal_r>
 8016fec:	1021883a 	mov	r16,r2
 8016ff0:	10000416 	blt	r2,zero,8017004 <___vfiprintf_internal_r+0x740>
 8016ff4:	d9012017 	ldw	r4,1152(sp)
 8016ff8:	d9410004 	addi	r5,sp,1024
 8016ffc:	80125400 	call	8012540 <_fflush_r>
 8017000:	1002fc1e 	bne	r2,zero,8017bf4 <___vfiprintf_internal_r+0x1330>
 8017004:	d881030b 	ldhu	r2,1036(sp)
 8017008:	1080100c 	andi	r2,r2,64
 801700c:	10000326 	beq	r2,zero,801701c <___vfiprintf_internal_r+0x758>
 8017010:	a080030b 	ldhu	r2,12(r20)
 8017014:	10801014 	ori	r2,r2,64
 8017018:	a080030d 	sth	r2,12(r20)
 801701c:	8005883a 	mov	r2,r16
 8017020:	00000106 	br	8017028 <___vfiprintf_internal_r+0x764>
 8017024:	00bfffc4 	movi	r2,-1
 8017028:	dfc13517 	ldw	ra,1236(sp)
 801702c:	df013417 	ldw	fp,1232(sp)
 8017030:	ddc13317 	ldw	r23,1228(sp)
 8017034:	dd813217 	ldw	r22,1224(sp)
 8017038:	dd413117 	ldw	r21,1220(sp)
 801703c:	dd013017 	ldw	r20,1216(sp)
 8017040:	dcc12f17 	ldw	r19,1212(sp)
 8017044:	dc812e17 	ldw	r18,1208(sp)
 8017048:	dc412d17 	ldw	r17,1204(sp)
 801704c:	dc012c17 	ldw	r16,1200(sp)
 8017050:	dec13604 	addi	sp,sp,1240
 8017054:	f800283a 	ret
 8017058:	8012ae80 	call	8012ae8 <__sinit>
 801705c:	003e2b06 	br	801690c <__alt_data_end+0xfc01690c>
 8017060:	04e7c83a 	sub	r19,zero,r19
 8017064:	d8812115 	stw	r2,1156(sp)
 8017068:	ad400114 	ori	r21,r21,4
 801706c:	80c00007 	ldb	r3,0(r16)
 8017070:	003e7306 	br	8016a40 <__alt_data_end+0xfc016a40>
 8017074:	a880040c 	andi	r2,r21,16
 8017078:	1000e41e 	bne	r2,zero,801740c <___vfiprintf_internal_r+0xb48>
 801707c:	a880100c 	andi	r2,r21,64
 8017080:	1000e226 	beq	r2,zero,801740c <___vfiprintf_internal_r+0xb48>
 8017084:	da812117 	ldw	r10,1156(sp)
 8017088:	002d883a 	mov	r22,zero
 801708c:	0005883a 	mov	r2,zero
 8017090:	5480000b 	ldhu	r18,0(r10)
 8017094:	52800104 	addi	r10,r10,4
 8017098:	da812115 	stw	r10,1156(sp)
 801709c:	9009883a 	mov	r4,r18
 80170a0:	003ee706 	br	8016c40 <__alt_data_end+0xfc016c40>
 80170a4:	da812117 	ldw	r10,1156(sp)
 80170a8:	00800044 	movi	r2,1
 80170ac:	54800017 	ldw	r18,0(r10)
 80170b0:	55800117 	ldw	r22,4(r10)
 80170b4:	52800204 	addi	r10,r10,8
 80170b8:	da812115 	stw	r10,1156(sp)
 80170bc:	9588b03a 	or	r4,r18,r22
 80170c0:	003edf06 	br	8016c40 <__alt_data_end+0xfc016c40>
 80170c4:	02c200b4 	movhi	r11,2050
 80170c8:	5adc9104 	addi	r11,r11,29252
 80170cc:	d9811d85 	stb	r6,1142(sp)
 80170d0:	dac12615 	stw	r11,1176(sp)
 80170d4:	a900080c 	andi	r4,r21,32
 80170d8:	d8812117 	ldw	r2,1156(sp)
 80170dc:	2000a526 	beq	r4,zero,8017374 <___vfiprintf_internal_r+0xab0>
 80170e0:	da812117 	ldw	r10,1156(sp)
 80170e4:	14800017 	ldw	r18,0(r2)
 80170e8:	15800117 	ldw	r22,4(r2)
 80170ec:	52800204 	addi	r10,r10,8
 80170f0:	da812115 	stw	r10,1156(sp)
 80170f4:	a880004c 	andi	r2,r21,1
 80170f8:	1001d926 	beq	r2,zero,8017860 <___vfiprintf_internal_r+0xf9c>
 80170fc:	9588b03a 	or	r4,r18,r22
 8017100:	20024426 	beq	r4,zero,8017a14 <___vfiprintf_internal_r+0x1150>
 8017104:	00800c04 	movi	r2,48
 8017108:	d8811d05 	stb	r2,1140(sp)
 801710c:	d8c11d45 	stb	r3,1141(sp)
 8017110:	ad400094 	ori	r21,r21,2
 8017114:	00800084 	movi	r2,2
 8017118:	003ec906 	br	8016c40 <__alt_data_end+0xfc016c40>
 801711c:	da812117 	ldw	r10,1156(sp)
 8017120:	04800044 	movi	r18,1
 8017124:	dac10004 	addi	r11,sp,1024
 8017128:	50800017 	ldw	r2,0(r10)
 801712c:	52800104 	addi	r10,r10,4
 8017130:	d8011d85 	stb	zero,1142(sp)
 8017134:	d8810005 	stb	r2,1024(sp)
 8017138:	da812115 	stw	r10,1156(sp)
 801713c:	9023883a 	mov	r17,r18
 8017140:	dac12415 	stw	r11,1168(sp)
 8017144:	0013883a 	mov	r9,zero
 8017148:	003ee206 	br	8016cd4 <__alt_data_end+0xfc016cd4>
 801714c:	ad402014 	ori	r21,r21,128
 8017150:	80c00007 	ldb	r3,0(r16)
 8017154:	003e3a06 	br	8016a40 <__alt_data_end+0xfc016a40>
 8017158:	8015883a 	mov	r10,r16
 801715c:	0027883a 	mov	r19,zero
 8017160:	18bff404 	addi	r2,r3,-48
 8017164:	50c00007 	ldb	r3,0(r10)
 8017168:	9cc002a4 	muli	r19,r19,10
 801716c:	84000044 	addi	r16,r16,1
 8017170:	8015883a 	mov	r10,r16
 8017174:	98a7883a 	add	r19,r19,r2
 8017178:	18bff404 	addi	r2,r3,-48
 801717c:	28bff92e 	bgeu	r5,r2,8017164 <__alt_data_end+0xfc017164>
 8017180:	003e3006 	br	8016a44 <__alt_data_end+0xfc016a44>
 8017184:	ad400414 	ori	r21,r21,16
 8017188:	d9811d85 	stb	r6,1142(sp)
 801718c:	a880080c 	andi	r2,r21,32
 8017190:	d8c12117 	ldw	r3,1156(sp)
 8017194:	10004b26 	beq	r2,zero,80172c4 <___vfiprintf_internal_r+0xa00>
 8017198:	da812117 	ldw	r10,1156(sp)
 801719c:	18800117 	ldw	r2,4(r3)
 80171a0:	1c800017 	ldw	r18,0(r3)
 80171a4:	52800204 	addi	r10,r10,8
 80171a8:	da812115 	stw	r10,1156(sp)
 80171ac:	102d883a 	mov	r22,r2
 80171b0:	1001f116 	blt	r2,zero,8017978 <___vfiprintf_internal_r+0x10b4>
 80171b4:	db011d83 	ldbu	r12,1142(sp)
 80171b8:	4823883a 	mov	r17,r9
 80171bc:	00800044 	movi	r2,1
 80171c0:	9588b03a 	or	r4,r18,r22
 80171c4:	003ea106 	br	8016c4c <__alt_data_end+0xfc016c4c>
 80171c8:	80c00007 	ldb	r3,0(r16)
 80171cc:	82800044 	addi	r10,r16,1
 80171d0:	1b027f26 	beq	r3,r12,8017bd0 <___vfiprintf_internal_r+0x130c>
 80171d4:	18bff404 	addi	r2,r3,-48
 80171d8:	5021883a 	mov	r16,r10
 80171dc:	0013883a 	mov	r9,zero
 80171e0:	28be1836 	bltu	r5,r2,8016a44 <__alt_data_end+0xfc016a44>
 80171e4:	80c00007 	ldb	r3,0(r16)
 80171e8:	4a4002a4 	muli	r9,r9,10
 80171ec:	84000044 	addi	r16,r16,1
 80171f0:	1253883a 	add	r9,r2,r9
 80171f4:	18bff404 	addi	r2,r3,-48
 80171f8:	28bffa2e 	bgeu	r5,r2,80171e4 <__alt_data_end+0xfc0171e4>
 80171fc:	483e110e 	bge	r9,zero,8016a44 <__alt_data_end+0xfc016a44>
 8017200:	027fffc4 	movi	r9,-1
 8017204:	003e0f06 	br	8016a44 <__alt_data_end+0xfc016a44>
 8017208:	d9811d85 	stb	r6,1142(sp)
 801720c:	a880080c 	andi	r2,r21,32
 8017210:	1001ee26 	beq	r2,zero,80179cc <___vfiprintf_internal_r+0x1108>
 8017214:	da812117 	ldw	r10,1156(sp)
 8017218:	dac12217 	ldw	r11,1160(sp)
 801721c:	50800017 	ldw	r2,0(r10)
 8017220:	5807d7fa 	srai	r3,r11,31
 8017224:	52800104 	addi	r10,r10,4
 8017228:	da812115 	stw	r10,1156(sp)
 801722c:	12c00015 	stw	r11,0(r2)
 8017230:	10c00115 	stw	r3,4(r2)
 8017234:	003dd806 	br	8016998 <__alt_data_end+0xfc016998>
 8017238:	30803fcc 	andi	r2,r6,255
 801723c:	1080201c 	xori	r2,r2,128
 8017240:	10bfe004 	addi	r2,r2,-128
 8017244:	1001df1e 	bne	r2,zero,80179c4 <___vfiprintf_internal_r+0x1100>
 8017248:	01800804 	movi	r6,32
 801724c:	80c00007 	ldb	r3,0(r16)
 8017250:	003dfb06 	br	8016a40 <__alt_data_end+0xfc016a40>
 8017254:	da812117 	ldw	r10,1156(sp)
 8017258:	dac12117 	ldw	r11,1156(sp)
 801725c:	d8011d85 	stb	zero,1142(sp)
 8017260:	52800017 	ldw	r10,0(r10)
 8017264:	5d800104 	addi	r22,r11,4
 8017268:	da812415 	stw	r10,1168(sp)
 801726c:	50023b26 	beq	r10,zero,8017b5c <___vfiprintf_internal_r+0x1298>
 8017270:	d9012417 	ldw	r4,1168(sp)
 8017274:	48021f16 	blt	r9,zero,8017af4 <___vfiprintf_internal_r+0x1230>
 8017278:	480d883a 	mov	r6,r9
 801727c:	000b883a 	mov	r5,zero
 8017280:	da012a15 	stw	r8,1192(sp)
 8017284:	da412b15 	stw	r9,1196(sp)
 8017288:	80137f80 	call	80137f8 <memchr>
 801728c:	da012a17 	ldw	r8,1192(sp)
 8017290:	da412b17 	ldw	r9,1196(sp)
 8017294:	10024726 	beq	r2,zero,8017bb4 <___vfiprintf_internal_r+0x12f0>
 8017298:	d8c12417 	ldw	r3,1168(sp)
 801729c:	10e3c83a 	sub	r17,r2,r3
 80172a0:	4c41f616 	blt	r9,r17,8017a7c <___vfiprintf_internal_r+0x11b8>
 80172a4:	db011d83 	ldbu	r12,1142(sp)
 80172a8:	dd812115 	stw	r22,1156(sp)
 80172ac:	0013883a 	mov	r9,zero
 80172b0:	003e8006 	br	8016cb4 <__alt_data_end+0xfc016cb4>
 80172b4:	d9811d85 	stb	r6,1142(sp)
 80172b8:	a880080c 	andi	r2,r21,32
 80172bc:	d8c12117 	ldw	r3,1156(sp)
 80172c0:	103fb51e 	bne	r2,zero,8017198 <__alt_data_end+0xfc017198>
 80172c4:	a880040c 	andi	r2,r21,16
 80172c8:	10015e1e 	bne	r2,zero,8017844 <___vfiprintf_internal_r+0xf80>
 80172cc:	a880100c 	andi	r2,r21,64
 80172d0:	10015c26 	beq	r2,zero,8017844 <___vfiprintf_internal_r+0xf80>
 80172d4:	1c80000f 	ldh	r18,0(r3)
 80172d8:	da812117 	ldw	r10,1156(sp)
 80172dc:	902dd7fa 	srai	r22,r18,31
 80172e0:	52800104 	addi	r10,r10,4
 80172e4:	da812115 	stw	r10,1156(sp)
 80172e8:	b005883a 	mov	r2,r22
 80172ec:	003fb006 	br	80171b0 <__alt_data_end+0xfc0171b0>
 80172f0:	da812117 	ldw	r10,1156(sp)
 80172f4:	00800c04 	movi	r2,48
 80172f8:	02c200b4 	movhi	r11,2050
 80172fc:	54800017 	ldw	r18,0(r10)
 8017300:	d8811d05 	stb	r2,1140(sp)
 8017304:	52800104 	addi	r10,r10,4
 8017308:	00801e04 	movi	r2,120
 801730c:	5adc9604 	addi	r11,r11,29272
 8017310:	d8811d45 	stb	r2,1141(sp)
 8017314:	002d883a 	mov	r22,zero
 8017318:	ad400094 	ori	r21,r21,2
 801731c:	da812115 	stw	r10,1156(sp)
 8017320:	dac12615 	stw	r11,1176(sp)
 8017324:	00800084 	movi	r2,2
 8017328:	9009883a 	mov	r4,r18
 801732c:	003e4406 	br	8016c40 <__alt_data_end+0xfc016c40>
 8017330:	ad400814 	ori	r21,r21,32
 8017334:	80c00007 	ldb	r3,0(r16)
 8017338:	003dc106 	br	8016a40 <__alt_data_end+0xfc016a40>
 801733c:	ad401014 	ori	r21,r21,64
 8017340:	80c00007 	ldb	r3,0(r16)
 8017344:	003dbe06 	br	8016a40 <__alt_data_end+0xfc016a40>
 8017348:	80c00007 	ldb	r3,0(r16)
 801734c:	19c1de26 	beq	r3,r7,8017ac8 <___vfiprintf_internal_r+0x1204>
 8017350:	ad400414 	ori	r21,r21,16
 8017354:	003dba06 	br	8016a40 <__alt_data_end+0xfc016a40>
 8017358:	008200b4 	movhi	r2,2050
 801735c:	109c9604 	addi	r2,r2,29272
 8017360:	d8812615 	stw	r2,1176(sp)
 8017364:	d9811d85 	stb	r6,1142(sp)
 8017368:	a900080c 	andi	r4,r21,32
 801736c:	d8812117 	ldw	r2,1156(sp)
 8017370:	203f5b1e 	bne	r4,zero,80170e0 <__alt_data_end+0xfc0170e0>
 8017374:	a900040c 	andi	r4,r21,16
 8017378:	2001a826 	beq	r4,zero,8017a1c <___vfiprintf_internal_r+0x1158>
 801737c:	dac12117 	ldw	r11,1156(sp)
 8017380:	14800017 	ldw	r18,0(r2)
 8017384:	002d883a 	mov	r22,zero
 8017388:	5ac00104 	addi	r11,r11,4
 801738c:	dac12115 	stw	r11,1156(sp)
 8017390:	003f5806 	br	80170f4 <__alt_data_end+0xfc0170f4>
 8017394:	da812117 	ldw	r10,1156(sp)
 8017398:	54c00017 	ldw	r19,0(r10)
 801739c:	50800104 	addi	r2,r10,4
 80173a0:	983f2f16 	blt	r19,zero,8017060 <__alt_data_end+0xfc017060>
 80173a4:	d8812115 	stw	r2,1156(sp)
 80173a8:	80c00007 	ldb	r3,0(r16)
 80173ac:	003da406 	br	8016a40 <__alt_data_end+0xfc016a40>
 80173b0:	01800ac4 	movi	r6,43
 80173b4:	80c00007 	ldb	r3,0(r16)
 80173b8:	003da106 	br	8016a40 <__alt_data_end+0xfc016a40>
 80173bc:	ad400054 	ori	r21,r21,1
 80173c0:	80c00007 	ldb	r3,0(r16)
 80173c4:	003d9e06 	br	8016a40 <__alt_data_end+0xfc016a40>
 80173c8:	d9811d85 	stb	r6,1142(sp)
 80173cc:	18007126 	beq	r3,zero,8017594 <___vfiprintf_internal_r+0xcd0>
 80173d0:	04800044 	movi	r18,1
 80173d4:	d8c10005 	stb	r3,1024(sp)
 80173d8:	d8c10004 	addi	r3,sp,1024
 80173dc:	d8011d85 	stb	zero,1142(sp)
 80173e0:	9023883a 	mov	r17,r18
 80173e4:	d8c12415 	stw	r3,1168(sp)
 80173e8:	003f5606 	br	8017144 <__alt_data_end+0xfc017144>
 80173ec:	dac12117 	ldw	r11,1156(sp)
 80173f0:	002d883a 	mov	r22,zero
 80173f4:	00800044 	movi	r2,1
 80173f8:	5c800017 	ldw	r18,0(r11)
 80173fc:	5ac00104 	addi	r11,r11,4
 8017400:	dac12115 	stw	r11,1156(sp)
 8017404:	9009883a 	mov	r4,r18
 8017408:	003e0d06 	br	8016c40 <__alt_data_end+0xfc016c40>
 801740c:	dac12117 	ldw	r11,1156(sp)
 8017410:	002d883a 	mov	r22,zero
 8017414:	0005883a 	mov	r2,zero
 8017418:	5c800017 	ldw	r18,0(r11)
 801741c:	5ac00104 	addi	r11,r11,4
 8017420:	dac12115 	stw	r11,1156(sp)
 8017424:	9009883a 	mov	r4,r18
 8017428:	003e0506 	br	8016c40 <__alt_data_end+0xfc016c40>
 801742c:	d9012017 	ldw	r4,1152(sp)
 8017430:	a00b883a 	mov	r5,r20
 8017434:	d9811a04 	addi	r6,sp,1128
 8017438:	d8c12a15 	stw	r3,1192(sp)
 801743c:	db012b15 	stw	r12,1196(sp)
 8017440:	80167b00 	call	80167b0 <__sprint_r.part.0>
 8017444:	d8c12a17 	ldw	r3,1192(sp)
 8017448:	db012b17 	ldw	r12,1196(sp)
 801744c:	1000571e 	bne	r2,zero,80175ac <___vfiprintf_internal_r+0xce8>
 8017450:	d9811b17 	ldw	r6,1132(sp)
 8017454:	d8811c17 	ldw	r2,1136(sp)
 8017458:	d811883a 	mov	r8,sp
 801745c:	31400044 	addi	r5,r6,1
 8017460:	003e3306 	br	8016d30 <__alt_data_end+0xfc016d30>
 8017464:	d9411b17 	ldw	r5,1132(sp)
 8017468:	d8c11c17 	ldw	r3,1136(sp)
 801746c:	28800044 	addi	r2,r5,1
 8017470:	d9011d87 	ldb	r4,1142(sp)
 8017474:	203e4d26 	beq	r4,zero,8016dac <__alt_data_end+0xfc016dac>
 8017478:	01000044 	movi	r4,1
 801747c:	d9411d84 	addi	r5,sp,1142
 8017480:	1907883a 	add	r3,r3,r4
 8017484:	41400015 	stw	r5,0(r8)
 8017488:	41000115 	stw	r4,4(r8)
 801748c:	d8c11c15 	stw	r3,1136(sp)
 8017490:	d8811b15 	stw	r2,1132(sp)
 8017494:	014001c4 	movi	r5,7
 8017498:	2880aa16 	blt	r5,r2,8017744 <___vfiprintf_internal_r+0xe80>
 801749c:	100b883a 	mov	r5,r2
 80174a0:	42000204 	addi	r8,r8,8
 80174a4:	10800044 	addi	r2,r2,1
 80174a8:	003e4006 	br	8016dac <__alt_data_end+0xfc016dac>
 80174ac:	d9012017 	ldw	r4,1152(sp)
 80174b0:	a00b883a 	mov	r5,r20
 80174b4:	d9811a04 	addi	r6,sp,1128
 80174b8:	d9c12a15 	stw	r7,1192(sp)
 80174bc:	db012b15 	stw	r12,1196(sp)
 80174c0:	80167b00 	call	80167b0 <__sprint_r.part.0>
 80174c4:	d9c12a17 	ldw	r7,1192(sp)
 80174c8:	db012b17 	ldw	r12,1196(sp)
 80174cc:	1000371e 	bne	r2,zero,80175ac <___vfiprintf_internal_r+0xce8>
 80174d0:	d9411b17 	ldw	r5,1132(sp)
 80174d4:	d8c11c17 	ldw	r3,1136(sp)
 80174d8:	d811883a 	mov	r8,sp
 80174dc:	28800044 	addi	r2,r5,1
 80174e0:	003e4d06 	br	8016e18 <__alt_data_end+0xfc016e18>
 80174e4:	10803fcc 	andi	r2,r2,255
 80174e8:	00c00044 	movi	r3,1
 80174ec:	10fddf1e 	bne	r2,r3,8016c6c <__alt_data_end+0xfc016c6c>
 80174f0:	b000021e 	bne	r22,zero,80174fc <___vfiprintf_internal_r+0xc38>
 80174f4:	00800244 	movi	r2,9
 80174f8:	1480202e 	bgeu	r2,r18,801757c <___vfiprintf_internal_r+0xcb8>
 80174fc:	dc012515 	stw	r16,1172(sp)
 8017500:	dc410a04 	addi	r17,sp,1064
 8017504:	9021883a 	mov	r16,r18
 8017508:	da012415 	stw	r8,1168(sp)
 801750c:	b025883a 	mov	r18,r22
 8017510:	da412315 	stw	r9,1164(sp)
 8017514:	602d883a 	mov	r22,r12
 8017518:	8009883a 	mov	r4,r16
 801751c:	900b883a 	mov	r5,r18
 8017520:	01800284 	movi	r6,10
 8017524:	000f883a 	mov	r7,zero
 8017528:	8018a780 	call	8018a78 <__umoddi3>
 801752c:	10800c04 	addi	r2,r2,48
 8017530:	8c7fffc4 	addi	r17,r17,-1
 8017534:	8009883a 	mov	r4,r16
 8017538:	900b883a 	mov	r5,r18
 801753c:	01800284 	movi	r6,10
 8017540:	000f883a 	mov	r7,zero
 8017544:	88800005 	stb	r2,0(r17)
 8017548:	80184b80 	call	80184b8 <__udivdi3>
 801754c:	1021883a 	mov	r16,r2
 8017550:	10c4b03a 	or	r2,r2,r3
 8017554:	1825883a 	mov	r18,r3
 8017558:	103fef1e 	bne	r2,zero,8017518 <__alt_data_end+0xfc017518>
 801755c:	da811e17 	ldw	r10,1144(sp)
 8017560:	da012417 	ldw	r8,1168(sp)
 8017564:	da412317 	ldw	r9,1164(sp)
 8017568:	dc412415 	stw	r17,1168(sp)
 801756c:	b019883a 	mov	r12,r22
 8017570:	dc012517 	ldw	r16,1172(sp)
 8017574:	5463c83a 	sub	r17,r10,r17
 8017578:	003dce06 	br	8016cb4 <__alt_data_end+0xfc016cb4>
 801757c:	94800c04 	addi	r18,r18,48
 8017580:	d8c109c4 	addi	r3,sp,1063
 8017584:	dc8109c5 	stb	r18,1063(sp)
 8017588:	dc412717 	ldw	r17,1180(sp)
 801758c:	d8c12415 	stw	r3,1168(sp)
 8017590:	003dc806 	br	8016cb4 <__alt_data_end+0xfc016cb4>
 8017594:	d8811c17 	ldw	r2,1136(sp)
 8017598:	10000426 	beq	r2,zero,80175ac <___vfiprintf_internal_r+0xce8>
 801759c:	d9012017 	ldw	r4,1152(sp)
 80175a0:	a00b883a 	mov	r5,r20
 80175a4:	d9811a04 	addi	r6,sp,1128
 80175a8:	80167b00 	call	80167b0 <__sprint_r.part.0>
 80175ac:	a080030b 	ldhu	r2,12(r20)
 80175b0:	1080100c 	andi	r2,r2,64
 80175b4:	103e9b1e 	bne	r2,zero,8017024 <__alt_data_end+0xfc017024>
 80175b8:	d8812217 	ldw	r2,1160(sp)
 80175bc:	003e9a06 	br	8017028 <__alt_data_end+0xfc017028>
 80175c0:	d9012017 	ldw	r4,1152(sp)
 80175c4:	a00b883a 	mov	r5,r20
 80175c8:	d9811a04 	addi	r6,sp,1128
 80175cc:	80167b00 	call	80167b0 <__sprint_r.part.0>
 80175d0:	103ff61e 	bne	r2,zero,80175ac <__alt_data_end+0xfc0175ac>
 80175d4:	d9011b17 	ldw	r4,1132(sp)
 80175d8:	d8c11c17 	ldw	r3,1136(sp)
 80175dc:	d811883a 	mov	r8,sp
 80175e0:	21400044 	addi	r5,r4,1
 80175e4:	003e4006 	br	8016ee8 <__alt_data_end+0xfc016ee8>
 80175e8:	1800d61e 	bne	r3,zero,8017944 <___vfiprintf_internal_r+0x1080>
 80175ec:	dac12417 	ldw	r11,1168(sp)
 80175f0:	00800044 	movi	r2,1
 80175f4:	dc400115 	stw	r17,4(sp)
 80175f8:	dac00015 	stw	r11,0(sp)
 80175fc:	dc411c15 	stw	r17,1136(sp)
 8017600:	d8811b15 	stw	r2,1132(sp)
 8017604:	8807883a 	mov	r3,r17
 8017608:	d811883a 	mov	r8,sp
 801760c:	42000204 	addi	r8,r8,8
 8017610:	aac0010c 	andi	r11,r21,4
 8017614:	58000226 	beq	r11,zero,8017620 <___vfiprintf_internal_r+0xd5c>
 8017618:	9ca3c83a 	sub	r17,r19,r18
 801761c:	047e2616 	blt	zero,r17,8016eb8 <__alt_data_end+0xfc016eb8>
 8017620:	94c0010e 	bge	r18,r19,8017628 <___vfiprintf_internal_r+0xd64>
 8017624:	9825883a 	mov	r18,r19
 8017628:	da812217 	ldw	r10,1160(sp)
 801762c:	5495883a 	add	r10,r10,r18
 8017630:	da812215 	stw	r10,1160(sp)
 8017634:	183e4826 	beq	r3,zero,8016f58 <__alt_data_end+0xfc016f58>
 8017638:	d9012017 	ldw	r4,1152(sp)
 801763c:	a00b883a 	mov	r5,r20
 8017640:	d9811a04 	addi	r6,sp,1128
 8017644:	80167b00 	call	80167b0 <__sprint_r.part.0>
 8017648:	103e4326 	beq	r2,zero,8016f58 <__alt_data_end+0xfc016f58>
 801764c:	003fd706 	br	80175ac <__alt_data_end+0xfc0175ac>
 8017650:	9cadc83a 	sub	r22,r19,r18
 8017654:	05bde40e 	bge	zero,r22,8016de8 <__alt_data_end+0xfc016de8>
 8017658:	03000404 	movi	r12,16
 801765c:	6581500e 	bge	r12,r22,8017ba0 <___vfiprintf_internal_r+0x12dc>
 8017660:	008200b4 	movhi	r2,2050
 8017664:	109d0604 	addi	r2,r2,29720
 8017668:	d8812315 	stw	r2,1164(sp)
 801766c:	8005883a 	mov	r2,r16
 8017670:	038001c4 	movi	r14,7
 8017674:	b021883a 	mov	r16,r22
 8017678:	da412515 	stw	r9,1172(sp)
 801767c:	102d883a 	mov	r22,r2
 8017680:	00000506 	br	8017698 <___vfiprintf_internal_r+0xdd4>
 8017684:	29000084 	addi	r4,r5,2
 8017688:	42000204 	addi	r8,r8,8
 801768c:	100b883a 	mov	r5,r2
 8017690:	843ffc04 	addi	r16,r16,-16
 8017694:	64000d0e 	bge	r12,r16,80176cc <___vfiprintf_internal_r+0xe08>
 8017698:	18c00404 	addi	r3,r3,16
 801769c:	28800044 	addi	r2,r5,1
 80176a0:	45c00015 	stw	r23,0(r8)
 80176a4:	43000115 	stw	r12,4(r8)
 80176a8:	d8c11c15 	stw	r3,1136(sp)
 80176ac:	d8811b15 	stw	r2,1132(sp)
 80176b0:	70bff40e 	bge	r14,r2,8017684 <__alt_data_end+0xfc017684>
 80176b4:	1800151e 	bne	r3,zero,801770c <___vfiprintf_internal_r+0xe48>
 80176b8:	843ffc04 	addi	r16,r16,-16
 80176bc:	000b883a 	mov	r5,zero
 80176c0:	01000044 	movi	r4,1
 80176c4:	d811883a 	mov	r8,sp
 80176c8:	643ff316 	blt	r12,r16,8017698 <__alt_data_end+0xfc017698>
 80176cc:	da412517 	ldw	r9,1172(sp)
 80176d0:	b005883a 	mov	r2,r22
 80176d4:	802d883a 	mov	r22,r16
 80176d8:	1021883a 	mov	r16,r2
 80176dc:	da812317 	ldw	r10,1164(sp)
 80176e0:	1d87883a 	add	r3,r3,r22
 80176e4:	45800115 	stw	r22,4(r8)
 80176e8:	42800015 	stw	r10,0(r8)
 80176ec:	d8c11c15 	stw	r3,1136(sp)
 80176f0:	d9011b15 	stw	r4,1132(sp)
 80176f4:	008001c4 	movi	r2,7
 80176f8:	11008d16 	blt	r2,r4,8017930 <___vfiprintf_internal_r+0x106c>
 80176fc:	42000204 	addi	r8,r8,8
 8017700:	20800044 	addi	r2,r4,1
 8017704:	200b883a 	mov	r5,r4
 8017708:	003db706 	br	8016de8 <__alt_data_end+0xfc016de8>
 801770c:	d9012017 	ldw	r4,1152(sp)
 8017710:	a00b883a 	mov	r5,r20
 8017714:	d9811a04 	addi	r6,sp,1128
 8017718:	db012b15 	stw	r12,1196(sp)
 801771c:	db812a15 	stw	r14,1192(sp)
 8017720:	80167b00 	call	80167b0 <__sprint_r.part.0>
 8017724:	db012b17 	ldw	r12,1196(sp)
 8017728:	db812a17 	ldw	r14,1192(sp)
 801772c:	103f9f1e 	bne	r2,zero,80175ac <__alt_data_end+0xfc0175ac>
 8017730:	d9411b17 	ldw	r5,1132(sp)
 8017734:	d8c11c17 	ldw	r3,1136(sp)
 8017738:	d811883a 	mov	r8,sp
 801773c:	29000044 	addi	r4,r5,1
 8017740:	003fd306 	br	8017690 <__alt_data_end+0xfc017690>
 8017744:	18006c1e 	bne	r3,zero,80178f8 <___vfiprintf_internal_r+0x1034>
 8017748:	70004f26 	beq	r14,zero,8017888 <___vfiprintf_internal_r+0xfc4>
 801774c:	d8811d04 	addi	r2,sp,1140
 8017750:	00c00084 	movi	r3,2
 8017754:	d8800015 	stw	r2,0(sp)
 8017758:	d8c00115 	stw	r3,4(sp)
 801775c:	2005883a 	mov	r2,r4
 8017760:	d811883a 	mov	r8,sp
 8017764:	003d9b06 	br	8016dd4 <__alt_data_end+0xfc016dd4>
 8017768:	1800571e 	bne	r3,zero,80178c8 <___vfiprintf_internal_r+0x1004>
 801776c:	000b883a 	mov	r5,zero
 8017770:	00800044 	movi	r2,1
 8017774:	d811883a 	mov	r8,sp
 8017778:	003d9906 	br	8016de0 <__alt_data_end+0xfc016de0>
 801777c:	10803fcc 	andi	r2,r2,255
 8017780:	1000251e 	bne	r2,zero,8017818 <___vfiprintf_internal_r+0xf54>
 8017784:	a880004c 	andi	r2,r21,1
 8017788:	10007826 	beq	r2,zero,801796c <___vfiprintf_internal_r+0x10a8>
 801778c:	00800c04 	movi	r2,48
 8017790:	d8c109c4 	addi	r3,sp,1063
 8017794:	d88109c5 	stb	r2,1063(sp)
 8017798:	dc412717 	ldw	r17,1180(sp)
 801779c:	d8c12415 	stw	r3,1168(sp)
 80177a0:	003d4406 	br	8016cb4 <__alt_data_end+0xfc016cb4>
 80177a4:	d9012617 	ldw	r4,1176(sp)
 80177a8:	dc410a04 	addi	r17,sp,1064
 80177ac:	908003cc 	andi	r2,r18,15
 80177b0:	b006973a 	slli	r3,r22,28
 80177b4:	2085883a 	add	r2,r4,r2
 80177b8:	9024d13a 	srli	r18,r18,4
 80177bc:	10800003 	ldbu	r2,0(r2)
 80177c0:	b02cd13a 	srli	r22,r22,4
 80177c4:	8c7fffc4 	addi	r17,r17,-1
 80177c8:	1ca4b03a 	or	r18,r3,r18
 80177cc:	88800005 	stb	r2,0(r17)
 80177d0:	9584b03a 	or	r2,r18,r22
 80177d4:	103ff51e 	bne	r2,zero,80177ac <__alt_data_end+0xfc0177ac>
 80177d8:	dac11e17 	ldw	r11,1144(sp)
 80177dc:	dc412415 	stw	r17,1168(sp)
 80177e0:	5c63c83a 	sub	r17,r11,r17
 80177e4:	003d3306 	br	8016cb4 <__alt_data_end+0xfc016cb4>
 80177e8:	1800941e 	bne	r3,zero,8017a3c <___vfiprintf_internal_r+0x1178>
 80177ec:	d8811d87 	ldb	r2,1142(sp)
 80177f0:	10006b26 	beq	r2,zero,80179a0 <___vfiprintf_internal_r+0x10dc>
 80177f4:	00c00044 	movi	r3,1
 80177f8:	d9011d84 	addi	r4,sp,1142
 80177fc:	1805883a 	mov	r2,r3
 8017800:	d9000015 	stw	r4,0(sp)
 8017804:	d8c00115 	stw	r3,4(sp)
 8017808:	d811883a 	mov	r8,sp
 801780c:	003f2306 	br	801749c <__alt_data_end+0xfc01749c>
 8017810:	8023883a 	mov	r17,r16
 8017814:	003c7d06 	br	8016a0c <__alt_data_end+0xfc016a0c>
 8017818:	da810a04 	addi	r10,sp,1064
 801781c:	da812415 	stw	r10,1168(sp)
 8017820:	003d2406 	br	8016cb4 <__alt_data_end+0xfc016cb4>
 8017824:	d9012017 	ldw	r4,1152(sp)
 8017828:	a00b883a 	mov	r5,r20
 801782c:	d9811a04 	addi	r6,sp,1128
 8017830:	80167b00 	call	80167b0 <__sprint_r.part.0>
 8017834:	103f5d1e 	bne	r2,zero,80175ac <__alt_data_end+0xfc0175ac>
 8017838:	d8c11c17 	ldw	r3,1136(sp)
 801783c:	d811883a 	mov	r8,sp
 8017840:	003f7306 	br	8017610 <__alt_data_end+0xfc017610>
 8017844:	1c800017 	ldw	r18,0(r3)
 8017848:	dac12117 	ldw	r11,1156(sp)
 801784c:	902dd7fa 	srai	r22,r18,31
 8017850:	5ac00104 	addi	r11,r11,4
 8017854:	dac12115 	stw	r11,1156(sp)
 8017858:	b005883a 	mov	r2,r22
 801785c:	003e5406 	br	80171b0 <__alt_data_end+0xfc0171b0>
 8017860:	00800084 	movi	r2,2
 8017864:	9588b03a 	or	r4,r18,r22
 8017868:	003cf506 	br	8016c40 <__alt_data_end+0xfc016c40>
 801786c:	d9012017 	ldw	r4,1152(sp)
 8017870:	a00b883a 	mov	r5,r20
 8017874:	d9811a04 	addi	r6,sp,1128
 8017878:	80167b00 	call	80167b0 <__sprint_r.part.0>
 801787c:	103f4b1e 	bne	r2,zero,80175ac <__alt_data_end+0xfc0175ac>
 8017880:	d811883a 	mov	r8,sp
 8017884:	003cd106 	br	8016bcc <__alt_data_end+0xfc016bcc>
 8017888:	000b883a 	mov	r5,zero
 801788c:	2005883a 	mov	r2,r4
 8017890:	d811883a 	mov	r8,sp
 8017894:	003d5206 	br	8016de0 <__alt_data_end+0xfc016de0>
 8017898:	10803fcc 	andi	r2,r2,255
 801789c:	1080201c 	xori	r2,r2,128
 80178a0:	10bfe004 	addi	r2,r2,-128
 80178a4:	01000c04 	movi	r4,48
 80178a8:	11008e26 	beq	r2,r4,8017ae4 <___vfiprintf_internal_r+0x1220>
 80178ac:	da812417 	ldw	r10,1168(sp)
 80178b0:	dac11e17 	ldw	r11,1144(sp)
 80178b4:	193fffc5 	stb	r4,-1(r3)
 80178b8:	52bfffc4 	addi	r10,r10,-1
 80178bc:	da812415 	stw	r10,1168(sp)
 80178c0:	5aa3c83a 	sub	r17,r11,r10
 80178c4:	003cfb06 	br	8016cb4 <__alt_data_end+0xfc016cb4>
 80178c8:	d9012017 	ldw	r4,1152(sp)
 80178cc:	a00b883a 	mov	r5,r20
 80178d0:	d9811a04 	addi	r6,sp,1128
 80178d4:	da412b15 	stw	r9,1196(sp)
 80178d8:	80167b00 	call	80167b0 <__sprint_r.part.0>
 80178dc:	da412b17 	ldw	r9,1196(sp)
 80178e0:	103f321e 	bne	r2,zero,80175ac <__alt_data_end+0xfc0175ac>
 80178e4:	d9411b17 	ldw	r5,1132(sp)
 80178e8:	d8c11c17 	ldw	r3,1136(sp)
 80178ec:	d811883a 	mov	r8,sp
 80178f0:	28800044 	addi	r2,r5,1
 80178f4:	003d3a06 	br	8016de0 <__alt_data_end+0xfc016de0>
 80178f8:	d9012017 	ldw	r4,1152(sp)
 80178fc:	a00b883a 	mov	r5,r20
 8017900:	d9811a04 	addi	r6,sp,1128
 8017904:	da412b15 	stw	r9,1196(sp)
 8017908:	db812a15 	stw	r14,1192(sp)
 801790c:	80167b00 	call	80167b0 <__sprint_r.part.0>
 8017910:	da412b17 	ldw	r9,1196(sp)
 8017914:	db812a17 	ldw	r14,1192(sp)
 8017918:	103f241e 	bne	r2,zero,80175ac <__alt_data_end+0xfc0175ac>
 801791c:	d9411b17 	ldw	r5,1132(sp)
 8017920:	d8c11c17 	ldw	r3,1136(sp)
 8017924:	d811883a 	mov	r8,sp
 8017928:	28800044 	addi	r2,r5,1
 801792c:	003d1f06 	br	8016dac <__alt_data_end+0xfc016dac>
 8017930:	1800781e 	bne	r3,zero,8017b14 <___vfiprintf_internal_r+0x1250>
 8017934:	000b883a 	mov	r5,zero
 8017938:	00800044 	movi	r2,1
 801793c:	d811883a 	mov	r8,sp
 8017940:	003d2906 	br	8016de8 <__alt_data_end+0xfc016de8>
 8017944:	d9012017 	ldw	r4,1152(sp)
 8017948:	a00b883a 	mov	r5,r20
 801794c:	d9811a04 	addi	r6,sp,1128
 8017950:	80167b00 	call	80167b0 <__sprint_r.part.0>
 8017954:	103f151e 	bne	r2,zero,80175ac <__alt_data_end+0xfc0175ac>
 8017958:	d8811b17 	ldw	r2,1132(sp)
 801795c:	d8c11c17 	ldw	r3,1136(sp)
 8017960:	d811883a 	mov	r8,sp
 8017964:	10800044 	addi	r2,r2,1
 8017968:	003d4406 	br	8016e7c <__alt_data_end+0xfc016e7c>
 801796c:	dac10a04 	addi	r11,sp,1064
 8017970:	dac12415 	stw	r11,1168(sp)
 8017974:	003ccf06 	br	8016cb4 <__alt_data_end+0xfc016cb4>
 8017978:	04a5c83a 	sub	r18,zero,r18
 801797c:	9004c03a 	cmpne	r2,r18,zero
 8017980:	05adc83a 	sub	r22,zero,r22
 8017984:	b0adc83a 	sub	r22,r22,r2
 8017988:	03000b44 	movi	r12,45
 801798c:	db011d85 	stb	r12,1142(sp)
 8017990:	4823883a 	mov	r17,r9
 8017994:	00800044 	movi	r2,1
 8017998:	9588b03a 	or	r4,r18,r22
 801799c:	003cab06 	br	8016c4c <__alt_data_end+0xfc016c4c>
 80179a0:	000b883a 	mov	r5,zero
 80179a4:	00800044 	movi	r2,1
 80179a8:	d811883a 	mov	r8,sp
 80179ac:	703d0c26 	beq	r14,zero,8016de0 <__alt_data_end+0xfc016de0>
 80179b0:	00c00084 	movi	r3,2
 80179b4:	d9011d04 	addi	r4,sp,1140
 80179b8:	d9000015 	stw	r4,0(sp)
 80179bc:	d8c00115 	stw	r3,4(sp)
 80179c0:	003d0406 	br	8016dd4 <__alt_data_end+0xfc016dd4>
 80179c4:	80c00007 	ldb	r3,0(r16)
 80179c8:	003c1d06 	br	8016a40 <__alt_data_end+0xfc016a40>
 80179cc:	a880040c 	andi	r2,r21,16
 80179d0:	1000091e 	bne	r2,zero,80179f8 <___vfiprintf_internal_r+0x1134>
 80179d4:	aac0100c 	andi	r11,r21,64
 80179d8:	58000726 	beq	r11,zero,80179f8 <___vfiprintf_internal_r+0x1134>
 80179dc:	da812117 	ldw	r10,1156(sp)
 80179e0:	dac12217 	ldw	r11,1160(sp)
 80179e4:	50800017 	ldw	r2,0(r10)
 80179e8:	52800104 	addi	r10,r10,4
 80179ec:	da812115 	stw	r10,1156(sp)
 80179f0:	12c0000d 	sth	r11,0(r2)
 80179f4:	003be806 	br	8016998 <__alt_data_end+0xfc016998>
 80179f8:	da812117 	ldw	r10,1156(sp)
 80179fc:	dac12217 	ldw	r11,1160(sp)
 8017a00:	50800017 	ldw	r2,0(r10)
 8017a04:	52800104 	addi	r10,r10,4
 8017a08:	da812115 	stw	r10,1156(sp)
 8017a0c:	12c00015 	stw	r11,0(r2)
 8017a10:	003be106 	br	8016998 <__alt_data_end+0xfc016998>
 8017a14:	00800084 	movi	r2,2
 8017a18:	003c8906 	br	8016c40 <__alt_data_end+0xfc016c40>
 8017a1c:	a900100c 	andi	r4,r21,64
 8017a20:	20001f26 	beq	r4,zero,8017aa0 <___vfiprintf_internal_r+0x11dc>
 8017a24:	da812117 	ldw	r10,1156(sp)
 8017a28:	1480000b 	ldhu	r18,0(r2)
 8017a2c:	002d883a 	mov	r22,zero
 8017a30:	52800104 	addi	r10,r10,4
 8017a34:	da812115 	stw	r10,1156(sp)
 8017a38:	003dae06 	br	80170f4 <__alt_data_end+0xfc0170f4>
 8017a3c:	d9012017 	ldw	r4,1152(sp)
 8017a40:	a00b883a 	mov	r5,r20
 8017a44:	d9811a04 	addi	r6,sp,1128
 8017a48:	da412b15 	stw	r9,1196(sp)
 8017a4c:	db812a15 	stw	r14,1192(sp)
 8017a50:	80167b00 	call	80167b0 <__sprint_r.part.0>
 8017a54:	da412b17 	ldw	r9,1196(sp)
 8017a58:	db812a17 	ldw	r14,1192(sp)
 8017a5c:	103ed31e 	bne	r2,zero,80175ac <__alt_data_end+0xfc0175ac>
 8017a60:	d9411b17 	ldw	r5,1132(sp)
 8017a64:	d8c11c17 	ldw	r3,1136(sp)
 8017a68:	d811883a 	mov	r8,sp
 8017a6c:	28800044 	addi	r2,r5,1
 8017a70:	003e7f06 	br	8017470 <__alt_data_end+0xfc017470>
 8017a74:	9825883a 	mov	r18,r19
 8017a78:	003d3406 	br	8016f4c <__alt_data_end+0xfc016f4c>
 8017a7c:	4823883a 	mov	r17,r9
 8017a80:	003e0806 	br	80172a4 <__alt_data_end+0xfc0172a4>
 8017a84:	d9012017 	ldw	r4,1152(sp)
 8017a88:	a00b883a 	mov	r5,r20
 8017a8c:	d9811a04 	addi	r6,sp,1128
 8017a90:	80167b00 	call	80167b0 <__sprint_r.part.0>
 8017a94:	103ec51e 	bne	r2,zero,80175ac <__alt_data_end+0xfc0175ac>
 8017a98:	d8c11c17 	ldw	r3,1136(sp)
 8017a9c:	003ee006 	br	8017620 <__alt_data_end+0xfc017620>
 8017aa0:	dac12117 	ldw	r11,1156(sp)
 8017aa4:	14800017 	ldw	r18,0(r2)
 8017aa8:	002d883a 	mov	r22,zero
 8017aac:	5ac00104 	addi	r11,r11,4
 8017ab0:	dac12115 	stw	r11,1156(sp)
 8017ab4:	003d8f06 	br	80170f4 <__alt_data_end+0xfc0170f4>
 8017ab8:	02c200b4 	movhi	r11,2050
 8017abc:	5add0604 	addi	r11,r11,29720
 8017ac0:	dac12315 	stw	r11,1164(sp)
 8017ac4:	003ce306 	br	8016e54 <__alt_data_end+0xfc016e54>
 8017ac8:	80c00043 	ldbu	r3,1(r16)
 8017acc:	ad400814 	ori	r21,r21,32
 8017ad0:	84000044 	addi	r16,r16,1
 8017ad4:	18c03fcc 	andi	r3,r3,255
 8017ad8:	18c0201c 	xori	r3,r3,128
 8017adc:	18ffe004 	addi	r3,r3,-128
 8017ae0:	003bd706 	br	8016a40 <__alt_data_end+0xfc016a40>
 8017ae4:	dac11e17 	ldw	r11,1144(sp)
 8017ae8:	d8c12417 	ldw	r3,1168(sp)
 8017aec:	58e3c83a 	sub	r17,r11,r3
 8017af0:	003c7006 	br	8016cb4 <__alt_data_end+0xfc016cb4>
 8017af4:	da012a15 	stw	r8,1192(sp)
 8017af8:	800ca6c0 	call	800ca6c <strlen>
 8017afc:	1023883a 	mov	r17,r2
 8017b00:	db011d83 	ldbu	r12,1142(sp)
 8017b04:	dd812115 	stw	r22,1156(sp)
 8017b08:	0013883a 	mov	r9,zero
 8017b0c:	da012a17 	ldw	r8,1192(sp)
 8017b10:	003c6806 	br	8016cb4 <__alt_data_end+0xfc016cb4>
 8017b14:	d9012017 	ldw	r4,1152(sp)
 8017b18:	a00b883a 	mov	r5,r20
 8017b1c:	d9811a04 	addi	r6,sp,1128
 8017b20:	da412b15 	stw	r9,1196(sp)
 8017b24:	80167b00 	call	80167b0 <__sprint_r.part.0>
 8017b28:	da412b17 	ldw	r9,1196(sp)
 8017b2c:	103e9f1e 	bne	r2,zero,80175ac <__alt_data_end+0xfc0175ac>
 8017b30:	d9411b17 	ldw	r5,1132(sp)
 8017b34:	d8c11c17 	ldw	r3,1136(sp)
 8017b38:	d811883a 	mov	r8,sp
 8017b3c:	28800044 	addi	r2,r5,1
 8017b40:	003ca906 	br	8016de8 <__alt_data_end+0xfc016de8>
 8017b44:	d9411b17 	ldw	r5,1132(sp)
 8017b48:	010200b4 	movhi	r4,2050
 8017b4c:	211d0a04 	addi	r4,r4,29736
 8017b50:	d9012315 	stw	r4,1164(sp)
 8017b54:	29400044 	addi	r5,r5,1
 8017b58:	003c8806 	br	8016d7c <__alt_data_end+0xfc016d7c>
 8017b5c:	00800184 	movi	r2,6
 8017b60:	1240012e 	bgeu	r2,r9,8017b68 <___vfiprintf_internal_r+0x12a4>
 8017b64:	1013883a 	mov	r9,r2
 8017b68:	4823883a 	mov	r17,r9
 8017b6c:	4825883a 	mov	r18,r9
 8017b70:	48001516 	blt	r9,zero,8017bc8 <___vfiprintf_internal_r+0x1304>
 8017b74:	008200b4 	movhi	r2,2050
 8017b78:	109c9b04 	addi	r2,r2,29292
 8017b7c:	dd812115 	stw	r22,1156(sp)
 8017b80:	d8812415 	stw	r2,1168(sp)
 8017b84:	003d6f06 	br	8017144 <__alt_data_end+0xfc017144>
 8017b88:	d9411b17 	ldw	r5,1132(sp)
 8017b8c:	02c200b4 	movhi	r11,2050
 8017b90:	5add0a04 	addi	r11,r11,29736
 8017b94:	dac12315 	stw	r11,1164(sp)
 8017b98:	29400044 	addi	r5,r5,1
 8017b9c:	003ce106 	br	8016f24 <__alt_data_end+0xfc016f24>
 8017ba0:	010200b4 	movhi	r4,2050
 8017ba4:	211d0604 	addi	r4,r4,29720
 8017ba8:	d9012315 	stw	r4,1164(sp)
 8017bac:	1009883a 	mov	r4,r2
 8017bb0:	003eca06 	br	80176dc <__alt_data_end+0xfc0176dc>
 8017bb4:	4823883a 	mov	r17,r9
 8017bb8:	db011d83 	ldbu	r12,1142(sp)
 8017bbc:	dd812115 	stw	r22,1156(sp)
 8017bc0:	0013883a 	mov	r9,zero
 8017bc4:	003c3b06 	br	8016cb4 <__alt_data_end+0xfc016cb4>
 8017bc8:	0025883a 	mov	r18,zero
 8017bcc:	003fe906 	br	8017b74 <__alt_data_end+0xfc017b74>
 8017bd0:	dac12117 	ldw	r11,1156(sp)
 8017bd4:	8005883a 	mov	r2,r16
 8017bd8:	5021883a 	mov	r16,r10
 8017bdc:	5a400017 	ldw	r9,0(r11)
 8017be0:	58c00104 	addi	r3,r11,4
 8017be4:	d8c12115 	stw	r3,1156(sp)
 8017be8:	48000a16 	blt	r9,zero,8017c14 <___vfiprintf_internal_r+0x1350>
 8017bec:	10c00047 	ldb	r3,1(r2)
 8017bf0:	003b9306 	br	8016a40 <__alt_data_end+0xfc016a40>
 8017bf4:	043fffc4 	movi	r16,-1
 8017bf8:	003d0206 	br	8017004 <__alt_data_end+0xfc017004>
 8017bfc:	94c0010e 	bge	r18,r19,8017c04 <___vfiprintf_internal_r+0x1340>
 8017c00:	9825883a 	mov	r18,r19
 8017c04:	da812217 	ldw	r10,1160(sp)
 8017c08:	5495883a 	add	r10,r10,r18
 8017c0c:	da812215 	stw	r10,1160(sp)
 8017c10:	003cd106 	br	8016f58 <__alt_data_end+0xfc016f58>
 8017c14:	027fffc4 	movi	r9,-1
 8017c18:	10c00047 	ldb	r3,1(r2)
 8017c1c:	003b8806 	br	8016a40 <__alt_data_end+0xfc016a40>

08017c20 <__vfiprintf_internal>:
 8017c20:	2007883a 	mov	r3,r4
 8017c24:	010200f4 	movhi	r4,2051
 8017c28:	2123ec04 	addi	r4,r4,-28752
 8017c2c:	21000017 	ldw	r4,0(r4)
 8017c30:	2805883a 	mov	r2,r5
 8017c34:	300f883a 	mov	r7,r6
 8017c38:	180b883a 	mov	r5,r3
 8017c3c:	100d883a 	mov	r6,r2
 8017c40:	80168c41 	jmpi	80168c4 <___vfiprintf_internal_r>

08017c44 <__swbuf_r>:
 8017c44:	defffc04 	addi	sp,sp,-16
 8017c48:	dc800215 	stw	r18,8(sp)
 8017c4c:	dc400115 	stw	r17,4(sp)
 8017c50:	dc000015 	stw	r16,0(sp)
 8017c54:	dfc00315 	stw	ra,12(sp)
 8017c58:	2025883a 	mov	r18,r4
 8017c5c:	2823883a 	mov	r17,r5
 8017c60:	3021883a 	mov	r16,r6
 8017c64:	20000226 	beq	r4,zero,8017c70 <__swbuf_r+0x2c>
 8017c68:	20800e17 	ldw	r2,56(r4)
 8017c6c:	10004126 	beq	r2,zero,8017d74 <__swbuf_r+0x130>
 8017c70:	80c00617 	ldw	r3,24(r16)
 8017c74:	8180030b 	ldhu	r6,12(r16)
 8017c78:	80c00215 	stw	r3,8(r16)
 8017c7c:	30c0020c 	andi	r3,r6,8
 8017c80:	18003526 	beq	r3,zero,8017d58 <__swbuf_r+0x114>
 8017c84:	80c00417 	ldw	r3,16(r16)
 8017c88:	18003326 	beq	r3,zero,8017d58 <__swbuf_r+0x114>
 8017c8c:	3088000c 	andi	r2,r6,8192
 8017c90:	8c403fcc 	andi	r17,r17,255
 8017c94:	10001726 	beq	r2,zero,8017cf4 <__swbuf_r+0xb0>
 8017c98:	80800017 	ldw	r2,0(r16)
 8017c9c:	81000517 	ldw	r4,20(r16)
 8017ca0:	10c7c83a 	sub	r3,r2,r3
 8017ca4:	19001d0e 	bge	r3,r4,8017d1c <__swbuf_r+0xd8>
 8017ca8:	18c00044 	addi	r3,r3,1
 8017cac:	81400217 	ldw	r5,8(r16)
 8017cb0:	11000044 	addi	r4,r2,1
 8017cb4:	81000015 	stw	r4,0(r16)
 8017cb8:	297fffc4 	addi	r5,r5,-1
 8017cbc:	81400215 	stw	r5,8(r16)
 8017cc0:	14400005 	stb	r17,0(r2)
 8017cc4:	80800517 	ldw	r2,20(r16)
 8017cc8:	10c01d26 	beq	r2,r3,8017d40 <__swbuf_r+0xfc>
 8017ccc:	8080030b 	ldhu	r2,12(r16)
 8017cd0:	1080004c 	andi	r2,r2,1
 8017cd4:	1000181e 	bne	r2,zero,8017d38 <__swbuf_r+0xf4>
 8017cd8:	8805883a 	mov	r2,r17
 8017cdc:	dfc00317 	ldw	ra,12(sp)
 8017ce0:	dc800217 	ldw	r18,8(sp)
 8017ce4:	dc400117 	ldw	r17,4(sp)
 8017ce8:	dc000017 	ldw	r16,0(sp)
 8017cec:	dec00404 	addi	sp,sp,16
 8017cf0:	f800283a 	ret
 8017cf4:	81001917 	ldw	r4,100(r16)
 8017cf8:	00b7ffc4 	movi	r2,-8193
 8017cfc:	31880014 	ori	r6,r6,8192
 8017d00:	2084703a 	and	r2,r4,r2
 8017d04:	80801915 	stw	r2,100(r16)
 8017d08:	80800017 	ldw	r2,0(r16)
 8017d0c:	81000517 	ldw	r4,20(r16)
 8017d10:	8180030d 	sth	r6,12(r16)
 8017d14:	10c7c83a 	sub	r3,r2,r3
 8017d18:	193fe316 	blt	r3,r4,8017ca8 <__alt_data_end+0xfc017ca8>
 8017d1c:	9009883a 	mov	r4,r18
 8017d20:	800b883a 	mov	r5,r16
 8017d24:	80125400 	call	8012540 <_fflush_r>
 8017d28:	1000091e 	bne	r2,zero,8017d50 <__swbuf_r+0x10c>
 8017d2c:	80800017 	ldw	r2,0(r16)
 8017d30:	00c00044 	movi	r3,1
 8017d34:	003fdd06 	br	8017cac <__alt_data_end+0xfc017cac>
 8017d38:	00800284 	movi	r2,10
 8017d3c:	88bfe61e 	bne	r17,r2,8017cd8 <__alt_data_end+0xfc017cd8>
 8017d40:	9009883a 	mov	r4,r18
 8017d44:	800b883a 	mov	r5,r16
 8017d48:	80125400 	call	8012540 <_fflush_r>
 8017d4c:	103fe226 	beq	r2,zero,8017cd8 <__alt_data_end+0xfc017cd8>
 8017d50:	00bfffc4 	movi	r2,-1
 8017d54:	003fe106 	br	8017cdc <__alt_data_end+0xfc017cdc>
 8017d58:	9009883a 	mov	r4,r18
 8017d5c:	800b883a 	mov	r5,r16
 8017d60:	8010ad00 	call	8010ad0 <__swsetup_r>
 8017d64:	1000051e 	bne	r2,zero,8017d7c <__swbuf_r+0x138>
 8017d68:	8180030b 	ldhu	r6,12(r16)
 8017d6c:	80c00417 	ldw	r3,16(r16)
 8017d70:	003fc606 	br	8017c8c <__alt_data_end+0xfc017c8c>
 8017d74:	8012ae80 	call	8012ae8 <__sinit>
 8017d78:	003fbd06 	br	8017c70 <__alt_data_end+0xfc017c70>
 8017d7c:	80c0030b 	ldhu	r3,12(r16)
 8017d80:	00bfffc4 	movi	r2,-1
 8017d84:	18c01014 	ori	r3,r3,64
 8017d88:	80c0030d 	sth	r3,12(r16)
 8017d8c:	00c00244 	movi	r3,9
 8017d90:	90c00015 	stw	r3,0(r18)
 8017d94:	003fd106 	br	8017cdc <__alt_data_end+0xfc017cdc>

08017d98 <__swbuf>:
 8017d98:	00c200f4 	movhi	r3,2051
 8017d9c:	18e3ec04 	addi	r3,r3,-28752
 8017da0:	2005883a 	mov	r2,r4
 8017da4:	19000017 	ldw	r4,0(r3)
 8017da8:	280d883a 	mov	r6,r5
 8017dac:	100b883a 	mov	r5,r2
 8017db0:	8017c441 	jmpi	8017c44 <__swbuf_r>

08017db4 <_write_r>:
 8017db4:	defffd04 	addi	sp,sp,-12
 8017db8:	dc000015 	stw	r16,0(sp)
 8017dbc:	040200f4 	movhi	r16,2051
 8017dc0:	dc400115 	stw	r17,4(sp)
 8017dc4:	842afa04 	addi	r16,r16,-21528
 8017dc8:	2023883a 	mov	r17,r4
 8017dcc:	2809883a 	mov	r4,r5
 8017dd0:	300b883a 	mov	r5,r6
 8017dd4:	380d883a 	mov	r6,r7
 8017dd8:	dfc00215 	stw	ra,8(sp)
 8017ddc:	80000015 	stw	zero,0(r16)
 8017de0:	8019e2c0 	call	8019e2c <write>
 8017de4:	00ffffc4 	movi	r3,-1
 8017de8:	10c00526 	beq	r2,r3,8017e00 <_write_r+0x4c>
 8017dec:	dfc00217 	ldw	ra,8(sp)
 8017df0:	dc400117 	ldw	r17,4(sp)
 8017df4:	dc000017 	ldw	r16,0(sp)
 8017df8:	dec00304 	addi	sp,sp,12
 8017dfc:	f800283a 	ret
 8017e00:	80c00017 	ldw	r3,0(r16)
 8017e04:	183ff926 	beq	r3,zero,8017dec <__alt_data_end+0xfc017dec>
 8017e08:	88c00015 	stw	r3,0(r17)
 8017e0c:	003ff706 	br	8017dec <__alt_data_end+0xfc017dec>

08017e10 <_close_r>:
 8017e10:	defffd04 	addi	sp,sp,-12
 8017e14:	dc000015 	stw	r16,0(sp)
 8017e18:	040200f4 	movhi	r16,2051
 8017e1c:	dc400115 	stw	r17,4(sp)
 8017e20:	842afa04 	addi	r16,r16,-21528
 8017e24:	2023883a 	mov	r17,r4
 8017e28:	2809883a 	mov	r4,r5
 8017e2c:	dfc00215 	stw	ra,8(sp)
 8017e30:	80000015 	stw	zero,0(r16)
 8017e34:	80190fc0 	call	80190fc <close>
 8017e38:	00ffffc4 	movi	r3,-1
 8017e3c:	10c00526 	beq	r2,r3,8017e54 <_close_r+0x44>
 8017e40:	dfc00217 	ldw	ra,8(sp)
 8017e44:	dc400117 	ldw	r17,4(sp)
 8017e48:	dc000017 	ldw	r16,0(sp)
 8017e4c:	dec00304 	addi	sp,sp,12
 8017e50:	f800283a 	ret
 8017e54:	80c00017 	ldw	r3,0(r16)
 8017e58:	183ff926 	beq	r3,zero,8017e40 <__alt_data_end+0xfc017e40>
 8017e5c:	88c00015 	stw	r3,0(r17)
 8017e60:	003ff706 	br	8017e40 <__alt_data_end+0xfc017e40>

08017e64 <_fclose_r>:
 8017e64:	28003226 	beq	r5,zero,8017f30 <_fclose_r+0xcc>
 8017e68:	defffc04 	addi	sp,sp,-16
 8017e6c:	dc400115 	stw	r17,4(sp)
 8017e70:	2023883a 	mov	r17,r4
 8017e74:	dc000015 	stw	r16,0(sp)
 8017e78:	dfc00315 	stw	ra,12(sp)
 8017e7c:	dc800215 	stw	r18,8(sp)
 8017e80:	2821883a 	mov	r16,r5
 8017e84:	8012af80 	call	8012af8 <__sfp_lock_acquire>
 8017e88:	88000226 	beq	r17,zero,8017e94 <_fclose_r+0x30>
 8017e8c:	88800e17 	ldw	r2,56(r17)
 8017e90:	10002926 	beq	r2,zero,8017f38 <_fclose_r+0xd4>
 8017e94:	8080030f 	ldh	r2,12(r16)
 8017e98:	10002226 	beq	r2,zero,8017f24 <_fclose_r+0xc0>
 8017e9c:	8809883a 	mov	r4,r17
 8017ea0:	800b883a 	mov	r5,r16
 8017ea4:	80125400 	call	8012540 <_fflush_r>
 8017ea8:	1025883a 	mov	r18,r2
 8017eac:	80800b17 	ldw	r2,44(r16)
 8017eb0:	10000426 	beq	r2,zero,8017ec4 <_fclose_r+0x60>
 8017eb4:	81400717 	ldw	r5,28(r16)
 8017eb8:	8809883a 	mov	r4,r17
 8017ebc:	103ee83a 	callr	r2
 8017ec0:	10002616 	blt	r2,zero,8017f5c <_fclose_r+0xf8>
 8017ec4:	8080030b 	ldhu	r2,12(r16)
 8017ec8:	1080200c 	andi	r2,r2,128
 8017ecc:	10001f1e 	bne	r2,zero,8017f4c <_fclose_r+0xe8>
 8017ed0:	81400c17 	ldw	r5,48(r16)
 8017ed4:	28000526 	beq	r5,zero,8017eec <_fclose_r+0x88>
 8017ed8:	80801004 	addi	r2,r16,64
 8017edc:	28800226 	beq	r5,r2,8017ee8 <_fclose_r+0x84>
 8017ee0:	8809883a 	mov	r4,r17
 8017ee4:	8012c5c0 	call	8012c5c <_free_r>
 8017ee8:	80000c15 	stw	zero,48(r16)
 8017eec:	81401117 	ldw	r5,68(r16)
 8017ef0:	28000326 	beq	r5,zero,8017f00 <_fclose_r+0x9c>
 8017ef4:	8809883a 	mov	r4,r17
 8017ef8:	8012c5c0 	call	8012c5c <_free_r>
 8017efc:	80001115 	stw	zero,68(r16)
 8017f00:	8000030d 	sth	zero,12(r16)
 8017f04:	8012afc0 	call	8012afc <__sfp_lock_release>
 8017f08:	9005883a 	mov	r2,r18
 8017f0c:	dfc00317 	ldw	ra,12(sp)
 8017f10:	dc800217 	ldw	r18,8(sp)
 8017f14:	dc400117 	ldw	r17,4(sp)
 8017f18:	dc000017 	ldw	r16,0(sp)
 8017f1c:	dec00404 	addi	sp,sp,16
 8017f20:	f800283a 	ret
 8017f24:	8012afc0 	call	8012afc <__sfp_lock_release>
 8017f28:	0005883a 	mov	r2,zero
 8017f2c:	003ff706 	br	8017f0c <__alt_data_end+0xfc017f0c>
 8017f30:	0005883a 	mov	r2,zero
 8017f34:	f800283a 	ret
 8017f38:	8809883a 	mov	r4,r17
 8017f3c:	8012ae80 	call	8012ae8 <__sinit>
 8017f40:	8080030f 	ldh	r2,12(r16)
 8017f44:	103fd51e 	bne	r2,zero,8017e9c <__alt_data_end+0xfc017e9c>
 8017f48:	003ff606 	br	8017f24 <__alt_data_end+0xfc017f24>
 8017f4c:	81400417 	ldw	r5,16(r16)
 8017f50:	8809883a 	mov	r4,r17
 8017f54:	8012c5c0 	call	8012c5c <_free_r>
 8017f58:	003fdd06 	br	8017ed0 <__alt_data_end+0xfc017ed0>
 8017f5c:	04bfffc4 	movi	r18,-1
 8017f60:	003fd806 	br	8017ec4 <__alt_data_end+0xfc017ec4>

08017f64 <fclose>:
 8017f64:	008200f4 	movhi	r2,2051
 8017f68:	10a3ec04 	addi	r2,r2,-28752
 8017f6c:	200b883a 	mov	r5,r4
 8017f70:	11000017 	ldw	r4,0(r2)
 8017f74:	8017e641 	jmpi	8017e64 <_fclose_r>

08017f78 <_fputwc_r>:
 8017f78:	3080030b 	ldhu	r2,12(r6)
 8017f7c:	defff804 	addi	sp,sp,-32
 8017f80:	dcc00415 	stw	r19,16(sp)
 8017f84:	dc800315 	stw	r18,12(sp)
 8017f88:	dc000115 	stw	r16,4(sp)
 8017f8c:	dfc00715 	stw	ra,28(sp)
 8017f90:	dd400615 	stw	r21,24(sp)
 8017f94:	dd000515 	stw	r20,20(sp)
 8017f98:	dc400215 	stw	r17,8(sp)
 8017f9c:	10c8000c 	andi	r3,r2,8192
 8017fa0:	3021883a 	mov	r16,r6
 8017fa4:	2027883a 	mov	r19,r4
 8017fa8:	2825883a 	mov	r18,r5
 8017fac:	1800051e 	bne	r3,zero,8017fc4 <_fputwc_r+0x4c>
 8017fb0:	30c01917 	ldw	r3,100(r6)
 8017fb4:	10880014 	ori	r2,r2,8192
 8017fb8:	3080030d 	sth	r2,12(r6)
 8017fbc:	18880014 	ori	r2,r3,8192
 8017fc0:	30801915 	stw	r2,100(r6)
 8017fc4:	80135e80 	call	80135e8 <__locale_mb_cur_max>
 8017fc8:	00c00044 	movi	r3,1
 8017fcc:	10c03e26 	beq	r2,r3,80180c8 <_fputwc_r+0x150>
 8017fd0:	9809883a 	mov	r4,r19
 8017fd4:	d80b883a 	mov	r5,sp
 8017fd8:	900d883a 	mov	r6,r18
 8017fdc:	81c01704 	addi	r7,r16,92
 8017fe0:	80182b80 	call	80182b8 <_wcrtomb_r>
 8017fe4:	1029883a 	mov	r20,r2
 8017fe8:	00bfffc4 	movi	r2,-1
 8017fec:	a0802026 	beq	r20,r2,8018070 <_fputwc_r+0xf8>
 8017ff0:	d9400003 	ldbu	r5,0(sp)
 8017ff4:	a0001c26 	beq	r20,zero,8018068 <_fputwc_r+0xf0>
 8017ff8:	0023883a 	mov	r17,zero
 8017ffc:	05400284 	movi	r21,10
 8018000:	00000906 	br	8018028 <_fputwc_r+0xb0>
 8018004:	80800017 	ldw	r2,0(r16)
 8018008:	11400005 	stb	r5,0(r2)
 801800c:	80c00017 	ldw	r3,0(r16)
 8018010:	18c00044 	addi	r3,r3,1
 8018014:	80c00015 	stw	r3,0(r16)
 8018018:	8c400044 	addi	r17,r17,1
 801801c:	dc45883a 	add	r2,sp,r17
 8018020:	8d00112e 	bgeu	r17,r20,8018068 <_fputwc_r+0xf0>
 8018024:	11400003 	ldbu	r5,0(r2)
 8018028:	80c00217 	ldw	r3,8(r16)
 801802c:	18ffffc4 	addi	r3,r3,-1
 8018030:	80c00215 	stw	r3,8(r16)
 8018034:	183ff30e 	bge	r3,zero,8018004 <__alt_data_end+0xfc018004>
 8018038:	80800617 	ldw	r2,24(r16)
 801803c:	18801916 	blt	r3,r2,80180a4 <_fputwc_r+0x12c>
 8018040:	80800017 	ldw	r2,0(r16)
 8018044:	11400005 	stb	r5,0(r2)
 8018048:	80800017 	ldw	r2,0(r16)
 801804c:	10c00003 	ldbu	r3,0(r2)
 8018050:	10800044 	addi	r2,r2,1
 8018054:	1d402326 	beq	r3,r21,80180e4 <_fputwc_r+0x16c>
 8018058:	80800015 	stw	r2,0(r16)
 801805c:	8c400044 	addi	r17,r17,1
 8018060:	dc45883a 	add	r2,sp,r17
 8018064:	8d3fef36 	bltu	r17,r20,8018024 <__alt_data_end+0xfc018024>
 8018068:	9005883a 	mov	r2,r18
 801806c:	00000406 	br	8018080 <_fputwc_r+0x108>
 8018070:	80c0030b 	ldhu	r3,12(r16)
 8018074:	a005883a 	mov	r2,r20
 8018078:	18c01014 	ori	r3,r3,64
 801807c:	80c0030d 	sth	r3,12(r16)
 8018080:	dfc00717 	ldw	ra,28(sp)
 8018084:	dd400617 	ldw	r21,24(sp)
 8018088:	dd000517 	ldw	r20,20(sp)
 801808c:	dcc00417 	ldw	r19,16(sp)
 8018090:	dc800317 	ldw	r18,12(sp)
 8018094:	dc400217 	ldw	r17,8(sp)
 8018098:	dc000117 	ldw	r16,4(sp)
 801809c:	dec00804 	addi	sp,sp,32
 80180a0:	f800283a 	ret
 80180a4:	9809883a 	mov	r4,r19
 80180a8:	29403fcc 	andi	r5,r5,255
 80180ac:	800d883a 	mov	r6,r16
 80180b0:	8017c440 	call	8017c44 <__swbuf_r>
 80180b4:	10bfffe0 	cmpeqi	r2,r2,-1
 80180b8:	10803fcc 	andi	r2,r2,255
 80180bc:	103fd626 	beq	r2,zero,8018018 <__alt_data_end+0xfc018018>
 80180c0:	00bfffc4 	movi	r2,-1
 80180c4:	003fee06 	br	8018080 <__alt_data_end+0xfc018080>
 80180c8:	90ffffc4 	addi	r3,r18,-1
 80180cc:	01003f84 	movi	r4,254
 80180d0:	20ffbf36 	bltu	r4,r3,8017fd0 <__alt_data_end+0xfc017fd0>
 80180d4:	900b883a 	mov	r5,r18
 80180d8:	dc800005 	stb	r18,0(sp)
 80180dc:	1029883a 	mov	r20,r2
 80180e0:	003fc506 	br	8017ff8 <__alt_data_end+0xfc017ff8>
 80180e4:	9809883a 	mov	r4,r19
 80180e8:	a80b883a 	mov	r5,r21
 80180ec:	800d883a 	mov	r6,r16
 80180f0:	8017c440 	call	8017c44 <__swbuf_r>
 80180f4:	10bfffe0 	cmpeqi	r2,r2,-1
 80180f8:	003fef06 	br	80180b8 <__alt_data_end+0xfc0180b8>

080180fc <fputwc>:
 80180fc:	defffc04 	addi	sp,sp,-16
 8018100:	dc000115 	stw	r16,4(sp)
 8018104:	040200f4 	movhi	r16,2051
 8018108:	8423ec04 	addi	r16,r16,-28752
 801810c:	dc400215 	stw	r17,8(sp)
 8018110:	2023883a 	mov	r17,r4
 8018114:	81000017 	ldw	r4,0(r16)
 8018118:	dfc00315 	stw	ra,12(sp)
 801811c:	280d883a 	mov	r6,r5
 8018120:	20000626 	beq	r4,zero,801813c <fputwc+0x40>
 8018124:	20800e17 	ldw	r2,56(r4)
 8018128:	1000041e 	bne	r2,zero,801813c <fputwc+0x40>
 801812c:	d9400015 	stw	r5,0(sp)
 8018130:	8012ae80 	call	8012ae8 <__sinit>
 8018134:	81000017 	ldw	r4,0(r16)
 8018138:	d9800017 	ldw	r6,0(sp)
 801813c:	880b883a 	mov	r5,r17
 8018140:	dfc00317 	ldw	ra,12(sp)
 8018144:	dc400217 	ldw	r17,8(sp)
 8018148:	dc000117 	ldw	r16,4(sp)
 801814c:	dec00404 	addi	sp,sp,16
 8018150:	8017f781 	jmpi	8017f78 <_fputwc_r>

08018154 <_fstat_r>:
 8018154:	defffd04 	addi	sp,sp,-12
 8018158:	dc000015 	stw	r16,0(sp)
 801815c:	040200f4 	movhi	r16,2051
 8018160:	dc400115 	stw	r17,4(sp)
 8018164:	842afa04 	addi	r16,r16,-21528
 8018168:	2023883a 	mov	r17,r4
 801816c:	2809883a 	mov	r4,r5
 8018170:	300b883a 	mov	r5,r6
 8018174:	dfc00215 	stw	ra,8(sp)
 8018178:	80000015 	stw	zero,0(r16)
 801817c:	801927c0 	call	801927c <fstat>
 8018180:	00ffffc4 	movi	r3,-1
 8018184:	10c00526 	beq	r2,r3,801819c <_fstat_r+0x48>
 8018188:	dfc00217 	ldw	ra,8(sp)
 801818c:	dc400117 	ldw	r17,4(sp)
 8018190:	dc000017 	ldw	r16,0(sp)
 8018194:	dec00304 	addi	sp,sp,12
 8018198:	f800283a 	ret
 801819c:	80c00017 	ldw	r3,0(r16)
 80181a0:	183ff926 	beq	r3,zero,8018188 <__alt_data_end+0xfc018188>
 80181a4:	88c00015 	stw	r3,0(r17)
 80181a8:	003ff706 	br	8018188 <__alt_data_end+0xfc018188>

080181ac <_isatty_r>:
 80181ac:	defffd04 	addi	sp,sp,-12
 80181b0:	dc000015 	stw	r16,0(sp)
 80181b4:	040200f4 	movhi	r16,2051
 80181b8:	dc400115 	stw	r17,4(sp)
 80181bc:	842afa04 	addi	r16,r16,-21528
 80181c0:	2023883a 	mov	r17,r4
 80181c4:	2809883a 	mov	r4,r5
 80181c8:	dfc00215 	stw	ra,8(sp)
 80181cc:	80000015 	stw	zero,0(r16)
 80181d0:	801966c0 	call	801966c <isatty>
 80181d4:	00ffffc4 	movi	r3,-1
 80181d8:	10c00526 	beq	r2,r3,80181f0 <_isatty_r+0x44>
 80181dc:	dfc00217 	ldw	ra,8(sp)
 80181e0:	dc400117 	ldw	r17,4(sp)
 80181e4:	dc000017 	ldw	r16,0(sp)
 80181e8:	dec00304 	addi	sp,sp,12
 80181ec:	f800283a 	ret
 80181f0:	80c00017 	ldw	r3,0(r16)
 80181f4:	183ff926 	beq	r3,zero,80181dc <__alt_data_end+0xfc0181dc>
 80181f8:	88c00015 	stw	r3,0(r17)
 80181fc:	003ff706 	br	80181dc <__alt_data_end+0xfc0181dc>

08018200 <_lseek_r>:
 8018200:	defffd04 	addi	sp,sp,-12
 8018204:	dc000015 	stw	r16,0(sp)
 8018208:	040200f4 	movhi	r16,2051
 801820c:	dc400115 	stw	r17,4(sp)
 8018210:	842afa04 	addi	r16,r16,-21528
 8018214:	2023883a 	mov	r17,r4
 8018218:	2809883a 	mov	r4,r5
 801821c:	300b883a 	mov	r5,r6
 8018220:	380d883a 	mov	r6,r7
 8018224:	dfc00215 	stw	ra,8(sp)
 8018228:	80000015 	stw	zero,0(r16)
 801822c:	80199c40 	call	80199c4 <lseek>
 8018230:	00ffffc4 	movi	r3,-1
 8018234:	10c00526 	beq	r2,r3,801824c <_lseek_r+0x4c>
 8018238:	dfc00217 	ldw	ra,8(sp)
 801823c:	dc400117 	ldw	r17,4(sp)
 8018240:	dc000017 	ldw	r16,0(sp)
 8018244:	dec00304 	addi	sp,sp,12
 8018248:	f800283a 	ret
 801824c:	80c00017 	ldw	r3,0(r16)
 8018250:	183ff926 	beq	r3,zero,8018238 <__alt_data_end+0xfc018238>
 8018254:	88c00015 	stw	r3,0(r17)
 8018258:	003ff706 	br	8018238 <__alt_data_end+0xfc018238>

0801825c <_read_r>:
 801825c:	defffd04 	addi	sp,sp,-12
 8018260:	dc000015 	stw	r16,0(sp)
 8018264:	040200f4 	movhi	r16,2051
 8018268:	dc400115 	stw	r17,4(sp)
 801826c:	842afa04 	addi	r16,r16,-21528
 8018270:	2023883a 	mov	r17,r4
 8018274:	2809883a 	mov	r4,r5
 8018278:	300b883a 	mov	r5,r6
 801827c:	380d883a 	mov	r6,r7
 8018280:	dfc00215 	stw	ra,8(sp)
 8018284:	80000015 	stw	zero,0(r16)
 8018288:	8019ba00 	call	8019ba0 <read>
 801828c:	00ffffc4 	movi	r3,-1
 8018290:	10c00526 	beq	r2,r3,80182a8 <_read_r+0x4c>
 8018294:	dfc00217 	ldw	ra,8(sp)
 8018298:	dc400117 	ldw	r17,4(sp)
 801829c:	dc000017 	ldw	r16,0(sp)
 80182a0:	dec00304 	addi	sp,sp,12
 80182a4:	f800283a 	ret
 80182a8:	80c00017 	ldw	r3,0(r16)
 80182ac:	183ff926 	beq	r3,zero,8018294 <__alt_data_end+0xfc018294>
 80182b0:	88c00015 	stw	r3,0(r17)
 80182b4:	003ff706 	br	8018294 <__alt_data_end+0xfc018294>

080182b8 <_wcrtomb_r>:
 80182b8:	defff604 	addi	sp,sp,-40
 80182bc:	008200f4 	movhi	r2,2051
 80182c0:	dc800815 	stw	r18,32(sp)
 80182c4:	dc400715 	stw	r17,28(sp)
 80182c8:	dc000615 	stw	r16,24(sp)
 80182cc:	10a3f004 	addi	r2,r2,-28736
 80182d0:	dfc00915 	stw	ra,36(sp)
 80182d4:	2021883a 	mov	r16,r4
 80182d8:	3823883a 	mov	r17,r7
 80182dc:	14800017 	ldw	r18,0(r2)
 80182e0:	28001426 	beq	r5,zero,8018334 <_wcrtomb_r+0x7c>
 80182e4:	d9400415 	stw	r5,16(sp)
 80182e8:	d9800515 	stw	r6,20(sp)
 80182ec:	80135dc0 	call	80135dc <__locale_charset>
 80182f0:	d9400417 	ldw	r5,16(sp)
 80182f4:	d9800517 	ldw	r6,20(sp)
 80182f8:	8009883a 	mov	r4,r16
 80182fc:	dc400015 	stw	r17,0(sp)
 8018300:	100f883a 	mov	r7,r2
 8018304:	903ee83a 	callr	r18
 8018308:	00ffffc4 	movi	r3,-1
 801830c:	10c0031e 	bne	r2,r3,801831c <_wcrtomb_r+0x64>
 8018310:	88000015 	stw	zero,0(r17)
 8018314:	00c02284 	movi	r3,138
 8018318:	80c00015 	stw	r3,0(r16)
 801831c:	dfc00917 	ldw	ra,36(sp)
 8018320:	dc800817 	ldw	r18,32(sp)
 8018324:	dc400717 	ldw	r17,28(sp)
 8018328:	dc000617 	ldw	r16,24(sp)
 801832c:	dec00a04 	addi	sp,sp,40
 8018330:	f800283a 	ret
 8018334:	80135dc0 	call	80135dc <__locale_charset>
 8018338:	8009883a 	mov	r4,r16
 801833c:	dc400015 	stw	r17,0(sp)
 8018340:	d9400104 	addi	r5,sp,4
 8018344:	000d883a 	mov	r6,zero
 8018348:	100f883a 	mov	r7,r2
 801834c:	903ee83a 	callr	r18
 8018350:	003fed06 	br	8018308 <__alt_data_end+0xfc018308>

08018354 <wcrtomb>:
 8018354:	defff504 	addi	sp,sp,-44
 8018358:	dc400515 	stw	r17,20(sp)
 801835c:	dc000415 	stw	r16,16(sp)
 8018360:	dfc00a15 	stw	ra,40(sp)
 8018364:	dd400915 	stw	r21,36(sp)
 8018368:	dd000815 	stw	r20,32(sp)
 801836c:	dcc00715 	stw	r19,28(sp)
 8018370:	dc800615 	stw	r18,24(sp)
 8018374:	2021883a 	mov	r16,r4
 8018378:	3023883a 	mov	r17,r6
 801837c:	20001d26 	beq	r4,zero,80183f4 <wcrtomb+0xa0>
 8018380:	048200f4 	movhi	r18,2051
 8018384:	94a3ec04 	addi	r18,r18,-28752
 8018388:	008200f4 	movhi	r2,2051
 801838c:	95400017 	ldw	r21,0(r18)
 8018390:	10a3f004 	addi	r2,r2,-28736
 8018394:	15000017 	ldw	r20,0(r2)
 8018398:	2827883a 	mov	r19,r5
 801839c:	80135dc0 	call	80135dc <__locale_charset>
 80183a0:	a809883a 	mov	r4,r21
 80183a4:	dc400015 	stw	r17,0(sp)
 80183a8:	800b883a 	mov	r5,r16
 80183ac:	980d883a 	mov	r6,r19
 80183b0:	100f883a 	mov	r7,r2
 80183b4:	a03ee83a 	callr	r20
 80183b8:	00ffffc4 	movi	r3,-1
 80183bc:	10c0041e 	bne	r2,r3,80183d0 <wcrtomb+0x7c>
 80183c0:	90c00017 	ldw	r3,0(r18)
 80183c4:	01002284 	movi	r4,138
 80183c8:	88000015 	stw	zero,0(r17)
 80183cc:	19000015 	stw	r4,0(r3)
 80183d0:	dfc00a17 	ldw	ra,40(sp)
 80183d4:	dd400917 	ldw	r21,36(sp)
 80183d8:	dd000817 	ldw	r20,32(sp)
 80183dc:	dcc00717 	ldw	r19,28(sp)
 80183e0:	dc800617 	ldw	r18,24(sp)
 80183e4:	dc400517 	ldw	r17,20(sp)
 80183e8:	dc000417 	ldw	r16,16(sp)
 80183ec:	dec00b04 	addi	sp,sp,44
 80183f0:	f800283a 	ret
 80183f4:	048200f4 	movhi	r18,2051
 80183f8:	94a3ec04 	addi	r18,r18,-28752
 80183fc:	008200f4 	movhi	r2,2051
 8018400:	94c00017 	ldw	r19,0(r18)
 8018404:	10a3f004 	addi	r2,r2,-28736
 8018408:	14000017 	ldw	r16,0(r2)
 801840c:	80135dc0 	call	80135dc <__locale_charset>
 8018410:	9809883a 	mov	r4,r19
 8018414:	dc400015 	stw	r17,0(sp)
 8018418:	d9400104 	addi	r5,sp,4
 801841c:	000d883a 	mov	r6,zero
 8018420:	100f883a 	mov	r7,r2
 8018424:	803ee83a 	callr	r16
 8018428:	003fe306 	br	80183b8 <__alt_data_end+0xfc0183b8>

0801842c <__ascii_wctomb>:
 801842c:	28000526 	beq	r5,zero,8018444 <__ascii_wctomb+0x18>
 8018430:	00803fc4 	movi	r2,255
 8018434:	11800536 	bltu	r2,r6,801844c <__ascii_wctomb+0x20>
 8018438:	29800005 	stb	r6,0(r5)
 801843c:	00800044 	movi	r2,1
 8018440:	f800283a 	ret
 8018444:	0005883a 	mov	r2,zero
 8018448:	f800283a 	ret
 801844c:	00802284 	movi	r2,138
 8018450:	20800015 	stw	r2,0(r4)
 8018454:	00bfffc4 	movi	r2,-1
 8018458:	f800283a 	ret

0801845c <_wctomb_r>:
 801845c:	008200f4 	movhi	r2,2051
 8018460:	defff904 	addi	sp,sp,-28
 8018464:	10a3f004 	addi	r2,r2,-28736
 8018468:	dfc00615 	stw	ra,24(sp)
 801846c:	dc400515 	stw	r17,20(sp)
 8018470:	dc000415 	stw	r16,16(sp)
 8018474:	3823883a 	mov	r17,r7
 8018478:	14000017 	ldw	r16,0(r2)
 801847c:	d9000115 	stw	r4,4(sp)
 8018480:	d9400215 	stw	r5,8(sp)
 8018484:	d9800315 	stw	r6,12(sp)
 8018488:	80135dc0 	call	80135dc <__locale_charset>
 801848c:	d9000117 	ldw	r4,4(sp)
 8018490:	d9400217 	ldw	r5,8(sp)
 8018494:	d9800317 	ldw	r6,12(sp)
 8018498:	dc400015 	stw	r17,0(sp)
 801849c:	100f883a 	mov	r7,r2
 80184a0:	803ee83a 	callr	r16
 80184a4:	dfc00617 	ldw	ra,24(sp)
 80184a8:	dc400517 	ldw	r17,20(sp)
 80184ac:	dc000417 	ldw	r16,16(sp)
 80184b0:	dec00704 	addi	sp,sp,28
 80184b4:	f800283a 	ret

080184b8 <__udivdi3>:
 80184b8:	defff504 	addi	sp,sp,-44
 80184bc:	dcc00415 	stw	r19,16(sp)
 80184c0:	dc000115 	stw	r16,4(sp)
 80184c4:	dfc00a15 	stw	ra,40(sp)
 80184c8:	df000915 	stw	fp,36(sp)
 80184cc:	ddc00815 	stw	r23,32(sp)
 80184d0:	dd800715 	stw	r22,28(sp)
 80184d4:	dd400615 	stw	r21,24(sp)
 80184d8:	dd000515 	stw	r20,20(sp)
 80184dc:	dc800315 	stw	r18,12(sp)
 80184e0:	dc400215 	stw	r17,8(sp)
 80184e4:	2027883a 	mov	r19,r4
 80184e8:	2821883a 	mov	r16,r5
 80184ec:	3800421e 	bne	r7,zero,80185f8 <__udivdi3+0x140>
 80184f0:	3025883a 	mov	r18,r6
 80184f4:	2023883a 	mov	r17,r4
 80184f8:	2980542e 	bgeu	r5,r6,801864c <__udivdi3+0x194>
 80184fc:	00bfffd4 	movui	r2,65535
 8018500:	282d883a 	mov	r22,r5
 8018504:	1180a836 	bltu	r2,r6,80187a8 <__udivdi3+0x2f0>
 8018508:	00803fc4 	movi	r2,255
 801850c:	1181422e 	bgeu	r2,r6,8018a18 <__udivdi3+0x560>
 8018510:	00800204 	movi	r2,8
 8018514:	1007883a 	mov	r3,r2
 8018518:	3084d83a 	srl	r2,r6,r2
 801851c:	010200b4 	movhi	r4,2050
 8018520:	211c3b04 	addi	r4,r4,28908
 8018524:	2085883a 	add	r2,r4,r2
 8018528:	10800003 	ldbu	r2,0(r2)
 801852c:	10c7883a 	add	r3,r2,r3
 8018530:	00800804 	movi	r2,32
 8018534:	10c5c83a 	sub	r2,r2,r3
 8018538:	10000526 	beq	r2,zero,8018550 <__udivdi3+0x98>
 801853c:	80a0983a 	sll	r16,r16,r2
 8018540:	98c6d83a 	srl	r3,r19,r3
 8018544:	30a4983a 	sll	r18,r6,r2
 8018548:	98a2983a 	sll	r17,r19,r2
 801854c:	80ecb03a 	or	r22,r16,r3
 8018550:	902ad43a 	srli	r21,r18,16
 8018554:	b009883a 	mov	r4,r22
 8018558:	953fffcc 	andi	r20,r18,65535
 801855c:	a80b883a 	mov	r5,r21
 8018560:	800bb280 	call	800bb28 <__umodsi3>
 8018564:	b009883a 	mov	r4,r22
 8018568:	a80b883a 	mov	r5,r21
 801856c:	1027883a 	mov	r19,r2
 8018570:	800bb200 	call	800bb20 <__udivsi3>
 8018574:	1021883a 	mov	r16,r2
 8018578:	8806d43a 	srli	r3,r17,16
 801857c:	9804943a 	slli	r2,r19,16
 8018580:	8527383a 	mul	r19,r16,r20
 8018584:	10c4b03a 	or	r2,r2,r3
 8018588:	14c0052e 	bgeu	r2,r19,80185a0 <__udivdi3+0xe8>
 801858c:	1485883a 	add	r2,r2,r18
 8018590:	80ffffc4 	addi	r3,r16,-1
 8018594:	14800136 	bltu	r2,r18,801859c <__udivdi3+0xe4>
 8018598:	14c13436 	bltu	r2,r19,8018a6c <__udivdi3+0x5b4>
 801859c:	1821883a 	mov	r16,r3
 80185a0:	14e7c83a 	sub	r19,r2,r19
 80185a4:	9809883a 	mov	r4,r19
 80185a8:	a80b883a 	mov	r5,r21
 80185ac:	800bb280 	call	800bb28 <__umodsi3>
 80185b0:	102d883a 	mov	r22,r2
 80185b4:	9809883a 	mov	r4,r19
 80185b8:	a80b883a 	mov	r5,r21
 80185bc:	800bb200 	call	800bb20 <__udivsi3>
 80185c0:	b02c943a 	slli	r22,r22,16
 80185c4:	1529383a 	mul	r20,r2,r20
 80185c8:	8c7fffcc 	andi	r17,r17,65535
 80185cc:	b462b03a 	or	r17,r22,r17
 80185d0:	8d00052e 	bgeu	r17,r20,80185e8 <__udivdi3+0x130>
 80185d4:	8ca3883a 	add	r17,r17,r18
 80185d8:	10ffffc4 	addi	r3,r2,-1
 80185dc:	8c80f636 	bltu	r17,r18,80189b8 <__udivdi3+0x500>
 80185e0:	8d00f52e 	bgeu	r17,r20,80189b8 <__udivdi3+0x500>
 80185e4:	10bfff84 	addi	r2,r2,-2
 80185e8:	8020943a 	slli	r16,r16,16
 80185ec:	0007883a 	mov	r3,zero
 80185f0:	1404b03a 	or	r2,r2,r16
 80185f4:	00005b06 	br	8018764 <__udivdi3+0x2ac>
 80185f8:	29c05836 	bltu	r5,r7,801875c <__udivdi3+0x2a4>
 80185fc:	00bfffd4 	movui	r2,65535
 8018600:	11c0642e 	bgeu	r2,r7,8018794 <__udivdi3+0x2dc>
 8018604:	00804034 	movhi	r2,256
 8018608:	10bfffc4 	addi	r2,r2,-1
 801860c:	11c0f32e 	bgeu	r2,r7,80189dc <__udivdi3+0x524>
 8018610:	00c00604 	movi	r3,24
 8018614:	180b883a 	mov	r5,r3
 8018618:	38c6d83a 	srl	r3,r7,r3
 801861c:	008200b4 	movhi	r2,2050
 8018620:	109c3b04 	addi	r2,r2,28908
 8018624:	10c7883a 	add	r3,r2,r3
 8018628:	18c00003 	ldbu	r3,0(r3)
 801862c:	01000804 	movi	r4,32
 8018630:	1947883a 	add	r3,r3,r5
 8018634:	20e5c83a 	sub	r18,r4,r3
 8018638:	9000661e 	bne	r18,zero,80187d4 <__udivdi3+0x31c>
 801863c:	3c00f936 	bltu	r7,r16,8018a24 <__udivdi3+0x56c>
 8018640:	9985403a 	cmpgeu	r2,r19,r6
 8018644:	0007883a 	mov	r3,zero
 8018648:	00004606 	br	8018764 <__udivdi3+0x2ac>
 801864c:	3000041e 	bne	r6,zero,8018660 <__udivdi3+0x1a8>
 8018650:	01000044 	movi	r4,1
 8018654:	000b883a 	mov	r5,zero
 8018658:	800bb200 	call	800bb20 <__udivsi3>
 801865c:	1025883a 	mov	r18,r2
 8018660:	00bfffd4 	movui	r2,65535
 8018664:	1480562e 	bgeu	r2,r18,80187c0 <__udivdi3+0x308>
 8018668:	00804034 	movhi	r2,256
 801866c:	10bfffc4 	addi	r2,r2,-1
 8018670:	1480e32e 	bgeu	r2,r18,8018a00 <__udivdi3+0x548>
 8018674:	00800604 	movi	r2,24
 8018678:	1007883a 	mov	r3,r2
 801867c:	9084d83a 	srl	r2,r18,r2
 8018680:	010200b4 	movhi	r4,2050
 8018684:	211c3b04 	addi	r4,r4,28908
 8018688:	2085883a 	add	r2,r4,r2
 801868c:	10800003 	ldbu	r2,0(r2)
 8018690:	10c5883a 	add	r2,r2,r3
 8018694:	00c00804 	movi	r3,32
 8018698:	1887c83a 	sub	r3,r3,r2
 801869c:	1800911e 	bne	r3,zero,80188e4 <__udivdi3+0x42c>
 80186a0:	9028d43a 	srli	r20,r18,16
 80186a4:	84a1c83a 	sub	r16,r16,r18
 80186a8:	957fffcc 	andi	r21,r18,65535
 80186ac:	00c00044 	movi	r3,1
 80186b0:	8009883a 	mov	r4,r16
 80186b4:	a00b883a 	mov	r5,r20
 80186b8:	d8c00015 	stw	r3,0(sp)
 80186bc:	800bb280 	call	800bb28 <__umodsi3>
 80186c0:	8009883a 	mov	r4,r16
 80186c4:	a00b883a 	mov	r5,r20
 80186c8:	1027883a 	mov	r19,r2
 80186cc:	800bb200 	call	800bb20 <__udivsi3>
 80186d0:	1021883a 	mov	r16,r2
 80186d4:	880cd43a 	srli	r6,r17,16
 80186d8:	9804943a 	slli	r2,r19,16
 80186dc:	8567383a 	mul	r19,r16,r21
 80186e0:	d8c00017 	ldw	r3,0(sp)
 80186e4:	1188b03a 	or	r4,r2,r6
 80186e8:	24c0052e 	bgeu	r4,r19,8018700 <__udivdi3+0x248>
 80186ec:	2489883a 	add	r4,r4,r18
 80186f0:	80bfffc4 	addi	r2,r16,-1
 80186f4:	24800136 	bltu	r4,r18,80186fc <__udivdi3+0x244>
 80186f8:	24c0d936 	bltu	r4,r19,8018a60 <__udivdi3+0x5a8>
 80186fc:	1021883a 	mov	r16,r2
 8018700:	24e7c83a 	sub	r19,r4,r19
 8018704:	9809883a 	mov	r4,r19
 8018708:	a00b883a 	mov	r5,r20
 801870c:	d8c00015 	stw	r3,0(sp)
 8018710:	800bb280 	call	800bb28 <__umodsi3>
 8018714:	102d883a 	mov	r22,r2
 8018718:	9809883a 	mov	r4,r19
 801871c:	a00b883a 	mov	r5,r20
 8018720:	800bb200 	call	800bb20 <__udivsi3>
 8018724:	b02c943a 	slli	r22,r22,16
 8018728:	156b383a 	mul	r21,r2,r21
 801872c:	8c7fffcc 	andi	r17,r17,65535
 8018730:	b462b03a 	or	r17,r22,r17
 8018734:	d8c00017 	ldw	r3,0(sp)
 8018738:	8d40052e 	bgeu	r17,r21,8018750 <__udivdi3+0x298>
 801873c:	8ca3883a 	add	r17,r17,r18
 8018740:	113fffc4 	addi	r4,r2,-1
 8018744:	8c809a36 	bltu	r17,r18,80189b0 <__udivdi3+0x4f8>
 8018748:	8d40992e 	bgeu	r17,r21,80189b0 <__udivdi3+0x4f8>
 801874c:	10bfff84 	addi	r2,r2,-2
 8018750:	8020943a 	slli	r16,r16,16
 8018754:	1404b03a 	or	r2,r2,r16
 8018758:	00000206 	br	8018764 <__udivdi3+0x2ac>
 801875c:	0007883a 	mov	r3,zero
 8018760:	0005883a 	mov	r2,zero
 8018764:	dfc00a17 	ldw	ra,40(sp)
 8018768:	df000917 	ldw	fp,36(sp)
 801876c:	ddc00817 	ldw	r23,32(sp)
 8018770:	dd800717 	ldw	r22,28(sp)
 8018774:	dd400617 	ldw	r21,24(sp)
 8018778:	dd000517 	ldw	r20,20(sp)
 801877c:	dcc00417 	ldw	r19,16(sp)
 8018780:	dc800317 	ldw	r18,12(sp)
 8018784:	dc400217 	ldw	r17,8(sp)
 8018788:	dc000117 	ldw	r16,4(sp)
 801878c:	dec00b04 	addi	sp,sp,44
 8018790:	f800283a 	ret
 8018794:	00803fc4 	movi	r2,255
 8018798:	11c0932e 	bgeu	r2,r7,80189e8 <__udivdi3+0x530>
 801879c:	00c00204 	movi	r3,8
 80187a0:	180b883a 	mov	r5,r3
 80187a4:	003f9c06 	br	8018618 <__alt_data_end+0xfc018618>
 80187a8:	00804034 	movhi	r2,256
 80187ac:	10bfffc4 	addi	r2,r2,-1
 80187b0:	1180902e 	bgeu	r2,r6,80189f4 <__udivdi3+0x53c>
 80187b4:	00800604 	movi	r2,24
 80187b8:	1007883a 	mov	r3,r2
 80187bc:	003f5606 	br	8018518 <__alt_data_end+0xfc018518>
 80187c0:	00803fc4 	movi	r2,255
 80187c4:	1480912e 	bgeu	r2,r18,8018a0c <__udivdi3+0x554>
 80187c8:	00800204 	movi	r2,8
 80187cc:	1007883a 	mov	r3,r2
 80187d0:	003faa06 	br	801867c <__alt_data_end+0xfc01867c>
 80187d4:	30eed83a 	srl	r23,r6,r3
 80187d8:	3c8e983a 	sll	r7,r7,r18
 80187dc:	80f8d83a 	srl	fp,r16,r3
 80187e0:	98c6d83a 	srl	r3,r19,r3
 80187e4:	3deeb03a 	or	r23,r7,r23
 80187e8:	b828d43a 	srli	r20,r23,16
 80187ec:	84a0983a 	sll	r16,r16,r18
 80187f0:	e009883a 	mov	r4,fp
 80187f4:	a00b883a 	mov	r5,r20
 80187f8:	80e2b03a 	or	r17,r16,r3
 80187fc:	34aa983a 	sll	r21,r6,r18
 8018800:	800bb280 	call	800bb28 <__umodsi3>
 8018804:	e009883a 	mov	r4,fp
 8018808:	a00b883a 	mov	r5,r20
 801880c:	102d883a 	mov	r22,r2
 8018810:	800bb200 	call	800bb20 <__udivsi3>
 8018814:	1021883a 	mov	r16,r2
 8018818:	bf3fffcc 	andi	fp,r23,65535
 801881c:	b004943a 	slli	r2,r22,16
 8018820:	8808d43a 	srli	r4,r17,16
 8018824:	872d383a 	mul	r22,r16,fp
 8018828:	1104b03a 	or	r2,r2,r4
 801882c:	1580042e 	bgeu	r2,r22,8018840 <__udivdi3+0x388>
 8018830:	15c5883a 	add	r2,r2,r23
 8018834:	80ffffc4 	addi	r3,r16,-1
 8018838:	15c0812e 	bgeu	r2,r23,8018a40 <__udivdi3+0x588>
 801883c:	1821883a 	mov	r16,r3
 8018840:	15adc83a 	sub	r22,r2,r22
 8018844:	b009883a 	mov	r4,r22
 8018848:	a00b883a 	mov	r5,r20
 801884c:	800bb280 	call	800bb28 <__umodsi3>
 8018850:	a00b883a 	mov	r5,r20
 8018854:	b009883a 	mov	r4,r22
 8018858:	d8800015 	stw	r2,0(sp)
 801885c:	800bb200 	call	800bb20 <__udivsi3>
 8018860:	d8c00017 	ldw	r3,0(sp)
 8018864:	170b383a 	mul	r5,r2,fp
 8018868:	8c7fffcc 	andi	r17,r17,65535
 801886c:	1806943a 	slli	r3,r3,16
 8018870:	1c46b03a 	or	r3,r3,r17
 8018874:	1940042e 	bgeu	r3,r5,8018888 <__udivdi3+0x3d0>
 8018878:	1dc7883a 	add	r3,r3,r23
 801887c:	113fffc4 	addi	r4,r2,-1
 8018880:	1dc06b2e 	bgeu	r3,r23,8018a30 <__udivdi3+0x578>
 8018884:	2005883a 	mov	r2,r4
 8018888:	8020943a 	slli	r16,r16,16
 801888c:	a9ffffcc 	andi	r7,r21,65535
 8018890:	a82ad43a 	srli	r21,r21,16
 8018894:	1404b03a 	or	r2,r2,r16
 8018898:	113fffcc 	andi	r4,r2,65535
 801889c:	100cd43a 	srli	r6,r2,16
 80188a0:	21d3383a 	mul	r9,r4,r7
 80188a4:	2549383a 	mul	r4,r4,r21
 80188a8:	31cf383a 	mul	r7,r6,r7
 80188ac:	4810d43a 	srli	r8,r9,16
 80188b0:	1947c83a 	sub	r3,r3,r5
 80188b4:	3909883a 	add	r4,r7,r4
 80188b8:	2209883a 	add	r4,r4,r8
 80188bc:	354d383a 	mul	r6,r6,r21
 80188c0:	21c0022e 	bgeu	r4,r7,80188cc <__udivdi3+0x414>
 80188c4:	01400074 	movhi	r5,1
 80188c8:	314d883a 	add	r6,r6,r5
 80188cc:	202ad43a 	srli	r21,r4,16
 80188d0:	354d883a 	add	r6,r6,r21
 80188d4:	19803f36 	bltu	r3,r6,80189d4 <__udivdi3+0x51c>
 80188d8:	19803926 	beq	r3,r6,80189c0 <__udivdi3+0x508>
 80188dc:	0007883a 	mov	r3,zero
 80188e0:	003fa006 	br	8018764 <__alt_data_end+0xfc018764>
 80188e4:	90e4983a 	sll	r18,r18,r3
 80188e8:	80aad83a 	srl	r21,r16,r2
 80188ec:	80e0983a 	sll	r16,r16,r3
 80188f0:	9028d43a 	srli	r20,r18,16
 80188f4:	9884d83a 	srl	r2,r19,r2
 80188f8:	a809883a 	mov	r4,r21
 80188fc:	a00b883a 	mov	r5,r20
 8018900:	80acb03a 	or	r22,r16,r2
 8018904:	98e2983a 	sll	r17,r19,r3
 8018908:	800bb280 	call	800bb28 <__umodsi3>
 801890c:	a809883a 	mov	r4,r21
 8018910:	a00b883a 	mov	r5,r20
 8018914:	1021883a 	mov	r16,r2
 8018918:	800bb200 	call	800bb20 <__udivsi3>
 801891c:	957fffcc 	andi	r21,r18,65535
 8018920:	8020943a 	slli	r16,r16,16
 8018924:	b00ad43a 	srli	r5,r22,16
 8018928:	1567383a 	mul	r19,r2,r21
 801892c:	102f883a 	mov	r23,r2
 8018930:	8148b03a 	or	r4,r16,r5
 8018934:	24c0062e 	bgeu	r4,r19,8018950 <__udivdi3+0x498>
 8018938:	2489883a 	add	r4,r4,r18
 801893c:	10bfffc4 	addi	r2,r2,-1
 8018940:	24804536 	bltu	r4,r18,8018a58 <__udivdi3+0x5a0>
 8018944:	24c0442e 	bgeu	r4,r19,8018a58 <__udivdi3+0x5a0>
 8018948:	bdffff84 	addi	r23,r23,-2
 801894c:	2489883a 	add	r4,r4,r18
 8018950:	24e7c83a 	sub	r19,r4,r19
 8018954:	9809883a 	mov	r4,r19
 8018958:	a00b883a 	mov	r5,r20
 801895c:	800bb280 	call	800bb28 <__umodsi3>
 8018960:	1021883a 	mov	r16,r2
 8018964:	9809883a 	mov	r4,r19
 8018968:	a00b883a 	mov	r5,r20
 801896c:	800bb200 	call	800bb20 <__udivsi3>
 8018970:	8020943a 	slli	r16,r16,16
 8018974:	1007883a 	mov	r3,r2
 8018978:	1545383a 	mul	r2,r2,r21
 801897c:	b13fffcc 	andi	r4,r22,65535
 8018980:	8108b03a 	or	r4,r16,r4
 8018984:	2080062e 	bgeu	r4,r2,80189a0 <__udivdi3+0x4e8>
 8018988:	2489883a 	add	r4,r4,r18
 801898c:	197fffc4 	addi	r5,r3,-1
 8018990:	24802f36 	bltu	r4,r18,8018a50 <__udivdi3+0x598>
 8018994:	20802e2e 	bgeu	r4,r2,8018a50 <__udivdi3+0x598>
 8018998:	18ffff84 	addi	r3,r3,-2
 801899c:	2489883a 	add	r4,r4,r18
 80189a0:	b82e943a 	slli	r23,r23,16
 80189a4:	20a1c83a 	sub	r16,r4,r2
 80189a8:	1dc6b03a 	or	r3,r3,r23
 80189ac:	003f4006 	br	80186b0 <__alt_data_end+0xfc0186b0>
 80189b0:	2005883a 	mov	r2,r4
 80189b4:	003f6606 	br	8018750 <__alt_data_end+0xfc018750>
 80189b8:	1805883a 	mov	r2,r3
 80189bc:	003f0a06 	br	80185e8 <__alt_data_end+0xfc0185e8>
 80189c0:	2006943a 	slli	r3,r4,16
 80189c4:	9c88983a 	sll	r4,r19,r18
 80189c8:	4a7fffcc 	andi	r9,r9,65535
 80189cc:	1a47883a 	add	r3,r3,r9
 80189d0:	20ffc22e 	bgeu	r4,r3,80188dc <__alt_data_end+0xfc0188dc>
 80189d4:	10bfffc4 	addi	r2,r2,-1
 80189d8:	003fc006 	br	80188dc <__alt_data_end+0xfc0188dc>
 80189dc:	00c00404 	movi	r3,16
 80189e0:	180b883a 	mov	r5,r3
 80189e4:	003f0c06 	br	8018618 <__alt_data_end+0xfc018618>
 80189e8:	0007883a 	mov	r3,zero
 80189ec:	000b883a 	mov	r5,zero
 80189f0:	003f0906 	br	8018618 <__alt_data_end+0xfc018618>
 80189f4:	00800404 	movi	r2,16
 80189f8:	1007883a 	mov	r3,r2
 80189fc:	003ec606 	br	8018518 <__alt_data_end+0xfc018518>
 8018a00:	00800404 	movi	r2,16
 8018a04:	1007883a 	mov	r3,r2
 8018a08:	003f1c06 	br	801867c <__alt_data_end+0xfc01867c>
 8018a0c:	0005883a 	mov	r2,zero
 8018a10:	0007883a 	mov	r3,zero
 8018a14:	003f1906 	br	801867c <__alt_data_end+0xfc01867c>
 8018a18:	0005883a 	mov	r2,zero
 8018a1c:	0007883a 	mov	r3,zero
 8018a20:	003ebd06 	br	8018518 <__alt_data_end+0xfc018518>
 8018a24:	0007883a 	mov	r3,zero
 8018a28:	00800044 	movi	r2,1
 8018a2c:	003f4d06 	br	8018764 <__alt_data_end+0xfc018764>
 8018a30:	197f942e 	bgeu	r3,r5,8018884 <__alt_data_end+0xfc018884>
 8018a34:	10bfff84 	addi	r2,r2,-2
 8018a38:	1dc7883a 	add	r3,r3,r23
 8018a3c:	003f9206 	br	8018888 <__alt_data_end+0xfc018888>
 8018a40:	15bf7e2e 	bgeu	r2,r22,801883c <__alt_data_end+0xfc01883c>
 8018a44:	843fff84 	addi	r16,r16,-2
 8018a48:	15c5883a 	add	r2,r2,r23
 8018a4c:	003f7c06 	br	8018840 <__alt_data_end+0xfc018840>
 8018a50:	2807883a 	mov	r3,r5
 8018a54:	003fd206 	br	80189a0 <__alt_data_end+0xfc0189a0>
 8018a58:	102f883a 	mov	r23,r2
 8018a5c:	003fbc06 	br	8018950 <__alt_data_end+0xfc018950>
 8018a60:	843fff84 	addi	r16,r16,-2
 8018a64:	2489883a 	add	r4,r4,r18
 8018a68:	003f2506 	br	8018700 <__alt_data_end+0xfc018700>
 8018a6c:	843fff84 	addi	r16,r16,-2
 8018a70:	1485883a 	add	r2,r2,r18
 8018a74:	003eca06 	br	80185a0 <__alt_data_end+0xfc0185a0>

08018a78 <__umoddi3>:
 8018a78:	defff404 	addi	sp,sp,-48
 8018a7c:	ddc00915 	stw	r23,36(sp)
 8018a80:	dc400315 	stw	r17,12(sp)
 8018a84:	dc000215 	stw	r16,8(sp)
 8018a88:	dfc00b15 	stw	ra,44(sp)
 8018a8c:	df000a15 	stw	fp,40(sp)
 8018a90:	dd800815 	stw	r22,32(sp)
 8018a94:	dd400715 	stw	r21,28(sp)
 8018a98:	dd000615 	stw	r20,24(sp)
 8018a9c:	dcc00515 	stw	r19,20(sp)
 8018aa0:	dc800415 	stw	r18,16(sp)
 8018aa4:	2021883a 	mov	r16,r4
 8018aa8:	2823883a 	mov	r17,r5
 8018aac:	282f883a 	mov	r23,r5
 8018ab0:	3800381e 	bne	r7,zero,8018b94 <__umoddi3+0x11c>
 8018ab4:	3027883a 	mov	r19,r6
 8018ab8:	2029883a 	mov	r20,r4
 8018abc:	29804e2e 	bgeu	r5,r6,8018bf8 <__umoddi3+0x180>
 8018ac0:	00bfffd4 	movui	r2,65535
 8018ac4:	11809c36 	bltu	r2,r6,8018d38 <__umoddi3+0x2c0>
 8018ac8:	00803fc4 	movi	r2,255
 8018acc:	11813b2e 	bgeu	r2,r6,8018fbc <__umoddi3+0x544>
 8018ad0:	01400204 	movi	r5,8
 8018ad4:	2805883a 	mov	r2,r5
 8018ad8:	314ad83a 	srl	r5,r6,r5
 8018adc:	00c200b4 	movhi	r3,2050
 8018ae0:	18dc3b04 	addi	r3,r3,28908
 8018ae4:	194b883a 	add	r5,r3,r5
 8018ae8:	29000003 	ldbu	r4,0(r5)
 8018aec:	2089883a 	add	r4,r4,r2
 8018af0:	00800804 	movi	r2,32
 8018af4:	1105c83a 	sub	r2,r2,r4
 8018af8:	1000ec26 	beq	r2,zero,8018eac <__umoddi3+0x434>
 8018afc:	88a2983a 	sll	r17,r17,r2
 8018b00:	8108d83a 	srl	r4,r16,r4
 8018b04:	30a6983a 	sll	r19,r6,r2
 8018b08:	80a8983a 	sll	r20,r16,r2
 8018b0c:	1025883a 	mov	r18,r2
 8018b10:	892eb03a 	or	r23,r17,r4
 8018b14:	982cd43a 	srli	r22,r19,16
 8018b18:	b809883a 	mov	r4,r23
 8018b1c:	9d7fffcc 	andi	r21,r19,65535
 8018b20:	b00b883a 	mov	r5,r22
 8018b24:	800bb280 	call	800bb28 <__umodsi3>
 8018b28:	b809883a 	mov	r4,r23
 8018b2c:	b00b883a 	mov	r5,r22
 8018b30:	1021883a 	mov	r16,r2
 8018b34:	800bb200 	call	800bb20 <__udivsi3>
 8018b38:	8020943a 	slli	r16,r16,16
 8018b3c:	a00cd43a 	srli	r6,r20,16
 8018b40:	1545383a 	mul	r2,r2,r21
 8018b44:	8188b03a 	or	r4,r16,r6
 8018b48:	2080042e 	bgeu	r4,r2,8018b5c <__umoddi3+0xe4>
 8018b4c:	24c9883a 	add	r4,r4,r19
 8018b50:	24c00236 	bltu	r4,r19,8018b5c <__umoddi3+0xe4>
 8018b54:	2080012e 	bgeu	r4,r2,8018b5c <__umoddi3+0xe4>
 8018b58:	24c9883a 	add	r4,r4,r19
 8018b5c:	20a3c83a 	sub	r17,r4,r2
 8018b60:	8809883a 	mov	r4,r17
 8018b64:	b00b883a 	mov	r5,r22
 8018b68:	800bb280 	call	800bb28 <__umodsi3>
 8018b6c:	8809883a 	mov	r4,r17
 8018b70:	b00b883a 	mov	r5,r22
 8018b74:	1021883a 	mov	r16,r2
 8018b78:	800bb200 	call	800bb20 <__udivsi3>
 8018b7c:	8006943a 	slli	r3,r16,16
 8018b80:	1545383a 	mul	r2,r2,r21
 8018b84:	a13fffcc 	andi	r4,r20,65535
 8018b88:	1906b03a 	or	r3,r3,r4
 8018b8c:	1880532e 	bgeu	r3,r2,8018cdc <__umoddi3+0x264>
 8018b90:	00004e06 	br	8018ccc <__umoddi3+0x254>
 8018b94:	29c05536 	bltu	r5,r7,8018cec <__umoddi3+0x274>
 8018b98:	00bfffd4 	movui	r2,65535
 8018b9c:	11c0612e 	bgeu	r2,r7,8018d24 <__umoddi3+0x2ac>
 8018ba0:	00804034 	movhi	r2,256
 8018ba4:	10bfffc4 	addi	r2,r2,-1
 8018ba8:	11c0f82e 	bgeu	r2,r7,8018f8c <__umoddi3+0x514>
 8018bac:	01400604 	movi	r5,24
 8018bb0:	282b883a 	mov	r21,r5
 8018bb4:	394ad83a 	srl	r5,r7,r5
 8018bb8:	00c200b4 	movhi	r3,2050
 8018bbc:	18dc3b04 	addi	r3,r3,28908
 8018bc0:	194b883a 	add	r5,r3,r5
 8018bc4:	28800003 	ldbu	r2,0(r5)
 8018bc8:	00c00804 	movi	r3,32
 8018bcc:	156b883a 	add	r21,r2,r21
 8018bd0:	1d69c83a 	sub	r20,r3,r21
 8018bd4:	a000631e 	bne	r20,zero,8018d64 <__umoddi3+0x2ec>
 8018bd8:	3c400136 	bltu	r7,r17,8018be0 <__umoddi3+0x168>
 8018bdc:	81810436 	bltu	r16,r6,8018ff0 <__umoddi3+0x578>
 8018be0:	8185c83a 	sub	r2,r16,r6
 8018be4:	89e3c83a 	sub	r17,r17,r7
 8018be8:	8087803a 	cmpltu	r3,r16,r2
 8018bec:	88efc83a 	sub	r23,r17,r3
 8018bf0:	b807883a 	mov	r3,r23
 8018bf4:	00003f06 	br	8018cf4 <__umoddi3+0x27c>
 8018bf8:	3000041e 	bne	r6,zero,8018c0c <__umoddi3+0x194>
 8018bfc:	01000044 	movi	r4,1
 8018c00:	000b883a 	mov	r5,zero
 8018c04:	800bb200 	call	800bb20 <__udivsi3>
 8018c08:	1027883a 	mov	r19,r2
 8018c0c:	00bfffd4 	movui	r2,65535
 8018c10:	14c04f2e 	bgeu	r2,r19,8018d50 <__umoddi3+0x2d8>
 8018c14:	00804034 	movhi	r2,256
 8018c18:	10bfffc4 	addi	r2,r2,-1
 8018c1c:	14c0e42e 	bgeu	r2,r19,8018fb0 <__umoddi3+0x538>
 8018c20:	00800604 	movi	r2,24
 8018c24:	1007883a 	mov	r3,r2
 8018c28:	9884d83a 	srl	r2,r19,r2
 8018c2c:	010200b4 	movhi	r4,2050
 8018c30:	211c3b04 	addi	r4,r4,28908
 8018c34:	2085883a 	add	r2,r4,r2
 8018c38:	11000003 	ldbu	r4,0(r2)
 8018c3c:	00800804 	movi	r2,32
 8018c40:	20c7883a 	add	r3,r4,r3
 8018c44:	10c5c83a 	sub	r2,r2,r3
 8018c48:	10009a1e 	bne	r2,zero,8018eb4 <__umoddi3+0x43c>
 8018c4c:	982cd43a 	srli	r22,r19,16
 8018c50:	8ce3c83a 	sub	r17,r17,r19
 8018c54:	9c3fffcc 	andi	r16,r19,65535
 8018c58:	0025883a 	mov	r18,zero
 8018c5c:	8809883a 	mov	r4,r17
 8018c60:	b00b883a 	mov	r5,r22
 8018c64:	800bb280 	call	800bb28 <__umodsi3>
 8018c68:	8809883a 	mov	r4,r17
 8018c6c:	b00b883a 	mov	r5,r22
 8018c70:	102b883a 	mov	r21,r2
 8018c74:	800bb200 	call	800bb20 <__udivsi3>
 8018c78:	a806943a 	slli	r3,r21,16
 8018c7c:	a008d43a 	srli	r4,r20,16
 8018c80:	1405383a 	mul	r2,r2,r16
 8018c84:	190cb03a 	or	r6,r3,r4
 8018c88:	3080032e 	bgeu	r6,r2,8018c98 <__umoddi3+0x220>
 8018c8c:	34cd883a 	add	r6,r6,r19
 8018c90:	34c00136 	bltu	r6,r19,8018c98 <__umoddi3+0x220>
 8018c94:	3080d436 	bltu	r6,r2,8018fe8 <__umoddi3+0x570>
 8018c98:	30abc83a 	sub	r21,r6,r2
 8018c9c:	a809883a 	mov	r4,r21
 8018ca0:	b00b883a 	mov	r5,r22
 8018ca4:	800bb280 	call	800bb28 <__umodsi3>
 8018ca8:	1023883a 	mov	r17,r2
 8018cac:	a809883a 	mov	r4,r21
 8018cb0:	b00b883a 	mov	r5,r22
 8018cb4:	800bb200 	call	800bb20 <__udivsi3>
 8018cb8:	8822943a 	slli	r17,r17,16
 8018cbc:	1405383a 	mul	r2,r2,r16
 8018cc0:	a13fffcc 	andi	r4,r20,65535
 8018cc4:	8906b03a 	or	r3,r17,r4
 8018cc8:	1880042e 	bgeu	r3,r2,8018cdc <__umoddi3+0x264>
 8018ccc:	1cc7883a 	add	r3,r3,r19
 8018cd0:	1cc00236 	bltu	r3,r19,8018cdc <__umoddi3+0x264>
 8018cd4:	1880012e 	bgeu	r3,r2,8018cdc <__umoddi3+0x264>
 8018cd8:	1cc7883a 	add	r3,r3,r19
 8018cdc:	1887c83a 	sub	r3,r3,r2
 8018ce0:	1c84d83a 	srl	r2,r3,r18
 8018ce4:	0007883a 	mov	r3,zero
 8018ce8:	00000206 	br	8018cf4 <__umoddi3+0x27c>
 8018cec:	2005883a 	mov	r2,r4
 8018cf0:	2807883a 	mov	r3,r5
 8018cf4:	dfc00b17 	ldw	ra,44(sp)
 8018cf8:	df000a17 	ldw	fp,40(sp)
 8018cfc:	ddc00917 	ldw	r23,36(sp)
 8018d00:	dd800817 	ldw	r22,32(sp)
 8018d04:	dd400717 	ldw	r21,28(sp)
 8018d08:	dd000617 	ldw	r20,24(sp)
 8018d0c:	dcc00517 	ldw	r19,20(sp)
 8018d10:	dc800417 	ldw	r18,16(sp)
 8018d14:	dc400317 	ldw	r17,12(sp)
 8018d18:	dc000217 	ldw	r16,8(sp)
 8018d1c:	dec00c04 	addi	sp,sp,48
 8018d20:	f800283a 	ret
 8018d24:	00803fc4 	movi	r2,255
 8018d28:	11c0952e 	bgeu	r2,r7,8018f80 <__umoddi3+0x508>
 8018d2c:	01400204 	movi	r5,8
 8018d30:	282b883a 	mov	r21,r5
 8018d34:	003f9f06 	br	8018bb4 <__alt_data_end+0xfc018bb4>
 8018d38:	00804034 	movhi	r2,256
 8018d3c:	10bfffc4 	addi	r2,r2,-1
 8018d40:	1180952e 	bgeu	r2,r6,8018f98 <__umoddi3+0x520>
 8018d44:	01400604 	movi	r5,24
 8018d48:	2805883a 	mov	r2,r5
 8018d4c:	003f6206 	br	8018ad8 <__alt_data_end+0xfc018ad8>
 8018d50:	00803fc4 	movi	r2,255
 8018d54:	14c0932e 	bgeu	r2,r19,8018fa4 <__umoddi3+0x52c>
 8018d58:	00800204 	movi	r2,8
 8018d5c:	1007883a 	mov	r3,r2
 8018d60:	003fb106 	br	8018c28 <__alt_data_end+0xfc018c28>
 8018d64:	3548d83a 	srl	r4,r6,r21
 8018d68:	3d0e983a 	sll	r7,r7,r20
 8018d6c:	8d10983a 	sll	r8,r17,r20
 8018d70:	8d6cd83a 	srl	r22,r17,r21
 8018d74:	3922b03a 	or	r17,r7,r4
 8018d78:	882ed43a 	srli	r23,r17,16
 8018d7c:	8564d83a 	srl	r18,r16,r21
 8018d80:	b009883a 	mov	r4,r22
 8018d84:	b80b883a 	mov	r5,r23
 8018d88:	44a4b03a 	or	r18,r8,r18
 8018d8c:	3526983a 	sll	r19,r6,r20
 8018d90:	800bb280 	call	800bb28 <__umodsi3>
 8018d94:	b009883a 	mov	r4,r22
 8018d98:	b80b883a 	mov	r5,r23
 8018d9c:	1039883a 	mov	fp,r2
 8018da0:	800bb200 	call	800bb20 <__udivsi3>
 8018da4:	102d883a 	mov	r22,r2
 8018da8:	8a3fffcc 	andi	r8,r17,65535
 8018dac:	e004943a 	slli	r2,fp,16
 8018db0:	900cd43a 	srli	r6,r18,16
 8018db4:	b239383a 	mul	fp,r22,r8
 8018db8:	8520983a 	sll	r16,r16,r20
 8018dbc:	118ab03a 	or	r5,r2,r6
 8018dc0:	2f00042e 	bgeu	r5,fp,8018dd4 <__umoddi3+0x35c>
 8018dc4:	2c4b883a 	add	r5,r5,r17
 8018dc8:	b0bfffc4 	addi	r2,r22,-1
 8018dcc:	2c40822e 	bgeu	r5,r17,8018fd8 <__umoddi3+0x560>
 8018dd0:	102d883a 	mov	r22,r2
 8018dd4:	2f39c83a 	sub	fp,r5,fp
 8018dd8:	e009883a 	mov	r4,fp
 8018ddc:	b80b883a 	mov	r5,r23
 8018de0:	da000115 	stw	r8,4(sp)
 8018de4:	800bb280 	call	800bb28 <__umodsi3>
 8018de8:	e009883a 	mov	r4,fp
 8018dec:	b80b883a 	mov	r5,r23
 8018df0:	d8800015 	stw	r2,0(sp)
 8018df4:	800bb200 	call	800bb20 <__udivsi3>
 8018df8:	d9800017 	ldw	r6,0(sp)
 8018dfc:	da000117 	ldw	r8,4(sp)
 8018e00:	94bfffcc 	andi	r18,r18,65535
 8018e04:	300c943a 	slli	r6,r6,16
 8018e08:	1209383a 	mul	r4,r2,r8
 8018e0c:	3490b03a 	or	r8,r6,r18
 8018e10:	4100042e 	bgeu	r8,r4,8018e24 <__umoddi3+0x3ac>
 8018e14:	4451883a 	add	r8,r8,r17
 8018e18:	10ffffc4 	addi	r3,r2,-1
 8018e1c:	44406a2e 	bgeu	r8,r17,8018fc8 <__umoddi3+0x550>
 8018e20:	1805883a 	mov	r2,r3
 8018e24:	b012943a 	slli	r9,r22,16
 8018e28:	9abfffcc 	andi	r10,r19,65535
 8018e2c:	980ed43a 	srli	r7,r19,16
 8018e30:	124ab03a 	or	r5,r2,r9
 8018e34:	2a7fffcc 	andi	r9,r5,65535
 8018e38:	280ad43a 	srli	r5,r5,16
 8018e3c:	4a8d383a 	mul	r6,r9,r10
 8018e40:	49d3383a 	mul	r9,r9,r7
 8018e44:	2a95383a 	mul	r10,r5,r10
 8018e48:	3004d43a 	srli	r2,r6,16
 8018e4c:	4111c83a 	sub	r8,r8,r4
 8018e50:	5253883a 	add	r9,r10,r9
 8018e54:	4893883a 	add	r9,r9,r2
 8018e58:	29cb383a 	mul	r5,r5,r7
 8018e5c:	4a80022e 	bgeu	r9,r10,8018e68 <__umoddi3+0x3f0>
 8018e60:	00800074 	movhi	r2,1
 8018e64:	288b883a 	add	r5,r5,r2
 8018e68:	4808d43a 	srli	r4,r9,16
 8018e6c:	4812943a 	slli	r9,r9,16
 8018e70:	31bfffcc 	andi	r6,r6,65535
 8018e74:	290b883a 	add	r5,r5,r4
 8018e78:	498d883a 	add	r6,r9,r6
 8018e7c:	41403a36 	bltu	r8,r5,8018f68 <__umoddi3+0x4f0>
 8018e80:	41405d26 	beq	r8,r5,8018ff8 <__umoddi3+0x580>
 8018e84:	4149c83a 	sub	r4,r8,r5
 8018e88:	300f883a 	mov	r7,r6
 8018e8c:	81cfc83a 	sub	r7,r16,r7
 8018e90:	81c7803a 	cmpltu	r3,r16,r7
 8018e94:	20c7c83a 	sub	r3,r4,r3
 8018e98:	1d44983a 	sll	r2,r3,r21
 8018e9c:	3d0ed83a 	srl	r7,r7,r20
 8018ea0:	1d06d83a 	srl	r3,r3,r20
 8018ea4:	11c4b03a 	or	r2,r2,r7
 8018ea8:	003f9206 	br	8018cf4 <__alt_data_end+0xfc018cf4>
 8018eac:	0025883a 	mov	r18,zero
 8018eb0:	003f1806 	br	8018b14 <__alt_data_end+0xfc018b14>
 8018eb4:	98a6983a 	sll	r19,r19,r2
 8018eb8:	88e8d83a 	srl	r20,r17,r3
 8018ebc:	80c6d83a 	srl	r3,r16,r3
 8018ec0:	982cd43a 	srli	r22,r19,16
 8018ec4:	88a2983a 	sll	r17,r17,r2
 8018ec8:	a009883a 	mov	r4,r20
 8018ecc:	b00b883a 	mov	r5,r22
 8018ed0:	88eab03a 	or	r21,r17,r3
 8018ed4:	1025883a 	mov	r18,r2
 8018ed8:	800bb280 	call	800bb28 <__umodsi3>
 8018edc:	a009883a 	mov	r4,r20
 8018ee0:	b00b883a 	mov	r5,r22
 8018ee4:	1023883a 	mov	r17,r2
 8018ee8:	800bb200 	call	800bb20 <__udivsi3>
 8018eec:	9f3fffcc 	andi	fp,r19,65535
 8018ef0:	8822943a 	slli	r17,r17,16
 8018ef4:	a80ad43a 	srli	r5,r21,16
 8018ef8:	1705383a 	mul	r2,r2,fp
 8018efc:	84a8983a 	sll	r20,r16,r18
 8018f00:	8948b03a 	or	r4,r17,r5
 8018f04:	2080042e 	bgeu	r4,r2,8018f18 <__umoddi3+0x4a0>
 8018f08:	24c9883a 	add	r4,r4,r19
 8018f0c:	24c00236 	bltu	r4,r19,8018f18 <__umoddi3+0x4a0>
 8018f10:	2080012e 	bgeu	r4,r2,8018f18 <__umoddi3+0x4a0>
 8018f14:	24c9883a 	add	r4,r4,r19
 8018f18:	20afc83a 	sub	r23,r4,r2
 8018f1c:	b809883a 	mov	r4,r23
 8018f20:	b00b883a 	mov	r5,r22
 8018f24:	800bb280 	call	800bb28 <__umodsi3>
 8018f28:	1023883a 	mov	r17,r2
 8018f2c:	b809883a 	mov	r4,r23
 8018f30:	b00b883a 	mov	r5,r22
 8018f34:	800bb200 	call	800bb20 <__udivsi3>
 8018f38:	8822943a 	slli	r17,r17,16
 8018f3c:	1705383a 	mul	r2,r2,fp
 8018f40:	a93fffcc 	andi	r4,r21,65535
 8018f44:	8908b03a 	or	r4,r17,r4
 8018f48:	2080042e 	bgeu	r4,r2,8018f5c <__umoddi3+0x4e4>
 8018f4c:	24c9883a 	add	r4,r4,r19
 8018f50:	24c00236 	bltu	r4,r19,8018f5c <__umoddi3+0x4e4>
 8018f54:	2080012e 	bgeu	r4,r2,8018f5c <__umoddi3+0x4e4>
 8018f58:	24c9883a 	add	r4,r4,r19
 8018f5c:	20a3c83a 	sub	r17,r4,r2
 8018f60:	e021883a 	mov	r16,fp
 8018f64:	003f3d06 	br	8018c5c <__alt_data_end+0xfc018c5c>
 8018f68:	34cfc83a 	sub	r7,r6,r19
 8018f6c:	2c4bc83a 	sub	r5,r5,r17
 8018f70:	31cd803a 	cmpltu	r6,r6,r7
 8018f74:	298dc83a 	sub	r6,r5,r6
 8018f78:	4189c83a 	sub	r4,r8,r6
 8018f7c:	003fc306 	br	8018e8c <__alt_data_end+0xfc018e8c>
 8018f80:	000b883a 	mov	r5,zero
 8018f84:	002b883a 	mov	r21,zero
 8018f88:	003f0a06 	br	8018bb4 <__alt_data_end+0xfc018bb4>
 8018f8c:	01400404 	movi	r5,16
 8018f90:	282b883a 	mov	r21,r5
 8018f94:	003f0706 	br	8018bb4 <__alt_data_end+0xfc018bb4>
 8018f98:	01400404 	movi	r5,16
 8018f9c:	2805883a 	mov	r2,r5
 8018fa0:	003ecd06 	br	8018ad8 <__alt_data_end+0xfc018ad8>
 8018fa4:	0005883a 	mov	r2,zero
 8018fa8:	0007883a 	mov	r3,zero
 8018fac:	003f1e06 	br	8018c28 <__alt_data_end+0xfc018c28>
 8018fb0:	00800404 	movi	r2,16
 8018fb4:	1007883a 	mov	r3,r2
 8018fb8:	003f1b06 	br	8018c28 <__alt_data_end+0xfc018c28>
 8018fbc:	000b883a 	mov	r5,zero
 8018fc0:	0005883a 	mov	r2,zero
 8018fc4:	003ec406 	br	8018ad8 <__alt_data_end+0xfc018ad8>
 8018fc8:	413f952e 	bgeu	r8,r4,8018e20 <__alt_data_end+0xfc018e20>
 8018fcc:	10bfff84 	addi	r2,r2,-2
 8018fd0:	4451883a 	add	r8,r8,r17
 8018fd4:	003f9306 	br	8018e24 <__alt_data_end+0xfc018e24>
 8018fd8:	2f3f7d2e 	bgeu	r5,fp,8018dd0 <__alt_data_end+0xfc018dd0>
 8018fdc:	b5bfff84 	addi	r22,r22,-2
 8018fe0:	2c4b883a 	add	r5,r5,r17
 8018fe4:	003f7b06 	br	8018dd4 <__alt_data_end+0xfc018dd4>
 8018fe8:	34cd883a 	add	r6,r6,r19
 8018fec:	003f2a06 	br	8018c98 <__alt_data_end+0xfc018c98>
 8018ff0:	8005883a 	mov	r2,r16
 8018ff4:	003efe06 	br	8018bf0 <__alt_data_end+0xfc018bf0>
 8018ff8:	81bfdb36 	bltu	r16,r6,8018f68 <__alt_data_end+0xfc018f68>
 8018ffc:	300f883a 	mov	r7,r6
 8019000:	0009883a 	mov	r4,zero
 8019004:	003fa106 	br	8018e8c <__alt_data_end+0xfc018e8c>

08019008 <__floatunsidf>:
 8019008:	defffe04 	addi	sp,sp,-8
 801900c:	dc000015 	stw	r16,0(sp)
 8019010:	dfc00115 	stw	ra,4(sp)
 8019014:	2021883a 	mov	r16,r4
 8019018:	20001026 	beq	r4,zero,801905c <__floatunsidf+0x54>
 801901c:	800b9a00 	call	800b9a0 <__clzsi2>
 8019020:	01410784 	movi	r5,1054
 8019024:	100d883a 	mov	r6,r2
 8019028:	288bc83a 	sub	r5,r5,r2
 801902c:	00800284 	movi	r2,10
 8019030:	11801616 	blt	r2,r6,801908c <__floatunsidf+0x84>
 8019034:	008002c4 	movi	r2,11
 8019038:	1185c83a 	sub	r2,r2,r6
 801903c:	8084d83a 	srl	r2,r16,r2
 8019040:	00c00434 	movhi	r3,16
 8019044:	31c00544 	addi	r7,r6,21
 8019048:	18ffffc4 	addi	r3,r3,-1
 801904c:	81e0983a 	sll	r16,r16,r7
 8019050:	10cc703a 	and	r6,r2,r3
 8019054:	2941ffcc 	andi	r5,r5,2047
 8019058:	00000206 	br	8019064 <__floatunsidf+0x5c>
 801905c:	000b883a 	mov	r5,zero
 8019060:	000d883a 	mov	r6,zero
 8019064:	280a953a 	slli	r5,r5,20
 8019068:	00c00434 	movhi	r3,16
 801906c:	18ffffc4 	addi	r3,r3,-1
 8019070:	30c6703a 	and	r3,r6,r3
 8019074:	8005883a 	mov	r2,r16
 8019078:	1946b03a 	or	r3,r3,r5
 801907c:	dfc00117 	ldw	ra,4(sp)
 8019080:	dc000017 	ldw	r16,0(sp)
 8019084:	dec00204 	addi	sp,sp,8
 8019088:	f800283a 	ret
 801908c:	31bffd44 	addi	r6,r6,-11
 8019090:	818c983a 	sll	r6,r16,r6
 8019094:	00800434 	movhi	r2,16
 8019098:	10bfffc4 	addi	r2,r2,-1
 801909c:	2941ffcc 	andi	r5,r5,2047
 80190a0:	0021883a 	mov	r16,zero
 80190a4:	308c703a 	and	r6,r6,r2
 80190a8:	003fee06 	br	8019064 <__alt_data_end+0xfc019064>

080190ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80190ac:	defffe04 	addi	sp,sp,-8
 80190b0:	dfc00115 	stw	ra,4(sp)
 80190b4:	df000015 	stw	fp,0(sp)
 80190b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80190bc:	008200f4 	movhi	r2,2051
 80190c0:	10a3f604 	addi	r2,r2,-28712
 80190c4:	10800017 	ldw	r2,0(r2)
 80190c8:	10000526 	beq	r2,zero,80190e0 <alt_get_errno+0x34>
 80190cc:	008200f4 	movhi	r2,2051
 80190d0:	10a3f604 	addi	r2,r2,-28712
 80190d4:	10800017 	ldw	r2,0(r2)
 80190d8:	103ee83a 	callr	r2
 80190dc:	00000206 	br	80190e8 <alt_get_errno+0x3c>
 80190e0:	008200f4 	movhi	r2,2051
 80190e4:	10aafa04 	addi	r2,r2,-21528
}
 80190e8:	e037883a 	mov	sp,fp
 80190ec:	dfc00117 	ldw	ra,4(sp)
 80190f0:	df000017 	ldw	fp,0(sp)
 80190f4:	dec00204 	addi	sp,sp,8
 80190f8:	f800283a 	ret

080190fc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 80190fc:	defffb04 	addi	sp,sp,-20
 8019100:	dfc00415 	stw	ra,16(sp)
 8019104:	df000315 	stw	fp,12(sp)
 8019108:	df000304 	addi	fp,sp,12
 801910c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8019110:	e0bfff17 	ldw	r2,-4(fp)
 8019114:	10000616 	blt	r2,zero,8019130 <close+0x34>
 8019118:	e0bfff17 	ldw	r2,-4(fp)
 801911c:	10c00324 	muli	r3,r2,12
 8019120:	008200b4 	movhi	r2,2050
 8019124:	109f5404 	addi	r2,r2,32080
 8019128:	1885883a 	add	r2,r3,r2
 801912c:	00000106 	br	8019134 <close+0x38>
 8019130:	0005883a 	mov	r2,zero
 8019134:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8019138:	e0bffd17 	ldw	r2,-12(fp)
 801913c:	10001926 	beq	r2,zero,80191a4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8019140:	e0bffd17 	ldw	r2,-12(fp)
 8019144:	10800017 	ldw	r2,0(r2)
 8019148:	10800417 	ldw	r2,16(r2)
 801914c:	10000626 	beq	r2,zero,8019168 <close+0x6c>
 8019150:	e0bffd17 	ldw	r2,-12(fp)
 8019154:	10800017 	ldw	r2,0(r2)
 8019158:	10800417 	ldw	r2,16(r2)
 801915c:	e13ffd17 	ldw	r4,-12(fp)
 8019160:	103ee83a 	callr	r2
 8019164:	00000106 	br	801916c <close+0x70>
 8019168:	0005883a 	mov	r2,zero
 801916c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8019170:	e13fff17 	ldw	r4,-4(fp)
 8019174:	8019c9c0 	call	8019c9c <alt_release_fd>
    if (rval < 0)
 8019178:	e0bffe17 	ldw	r2,-8(fp)
 801917c:	1000070e 	bge	r2,zero,801919c <close+0xa0>
    {
      ALT_ERRNO = -rval;
 8019180:	80190ac0 	call	80190ac <alt_get_errno>
 8019184:	1007883a 	mov	r3,r2
 8019188:	e0bffe17 	ldw	r2,-8(fp)
 801918c:	0085c83a 	sub	r2,zero,r2
 8019190:	18800015 	stw	r2,0(r3)
      return -1;
 8019194:	00bfffc4 	movi	r2,-1
 8019198:	00000706 	br	80191b8 <close+0xbc>
    }
    return 0;
 801919c:	0005883a 	mov	r2,zero
 80191a0:	00000506 	br	80191b8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80191a4:	80190ac0 	call	80190ac <alt_get_errno>
 80191a8:	1007883a 	mov	r3,r2
 80191ac:	00801444 	movi	r2,81
 80191b0:	18800015 	stw	r2,0(r3)
    return -1;
 80191b4:	00bfffc4 	movi	r2,-1
  }
}
 80191b8:	e037883a 	mov	sp,fp
 80191bc:	dfc00117 	ldw	ra,4(sp)
 80191c0:	df000017 	ldw	fp,0(sp)
 80191c4:	dec00204 	addi	sp,sp,8
 80191c8:	f800283a 	ret

080191cc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 80191cc:	defffc04 	addi	sp,sp,-16
 80191d0:	df000315 	stw	fp,12(sp)
 80191d4:	df000304 	addi	fp,sp,12
 80191d8:	e13ffd15 	stw	r4,-12(fp)
 80191dc:	e17ffe15 	stw	r5,-8(fp)
 80191e0:	e1bfff15 	stw	r6,-4(fp)
  return len;
 80191e4:	e0bfff17 	ldw	r2,-4(fp)
}
 80191e8:	e037883a 	mov	sp,fp
 80191ec:	df000017 	ldw	fp,0(sp)
 80191f0:	dec00104 	addi	sp,sp,4
 80191f4:	f800283a 	ret

080191f8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 80191f8:	defffd04 	addi	sp,sp,-12
 80191fc:	df000215 	stw	fp,8(sp)
 8019200:	df000204 	addi	fp,sp,8
 8019204:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8019208:	0001883a 	nop
 801920c:	e0bfff17 	ldw	r2,-4(fp)
 8019210:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8019214:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8019218:	10000226 	beq	r2,zero,8019224 <_exit+0x2c>
    ALT_SIM_FAIL();
 801921c:	002af070 	cmpltui	zero,zero,43969
 8019220:	00000106 	br	8019228 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8019224:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8019228:	003fff06 	br	8019228 <__alt_data_end+0xfc019228>

0801922c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801922c:	defffe04 	addi	sp,sp,-8
 8019230:	dfc00115 	stw	ra,4(sp)
 8019234:	df000015 	stw	fp,0(sp)
 8019238:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801923c:	008200f4 	movhi	r2,2051
 8019240:	10a3f604 	addi	r2,r2,-28712
 8019244:	10800017 	ldw	r2,0(r2)
 8019248:	10000526 	beq	r2,zero,8019260 <alt_get_errno+0x34>
 801924c:	008200f4 	movhi	r2,2051
 8019250:	10a3f604 	addi	r2,r2,-28712
 8019254:	10800017 	ldw	r2,0(r2)
 8019258:	103ee83a 	callr	r2
 801925c:	00000206 	br	8019268 <alt_get_errno+0x3c>
 8019260:	008200f4 	movhi	r2,2051
 8019264:	10aafa04 	addi	r2,r2,-21528
}
 8019268:	e037883a 	mov	sp,fp
 801926c:	dfc00117 	ldw	ra,4(sp)
 8019270:	df000017 	ldw	fp,0(sp)
 8019274:	dec00204 	addi	sp,sp,8
 8019278:	f800283a 	ret

0801927c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 801927c:	defffb04 	addi	sp,sp,-20
 8019280:	dfc00415 	stw	ra,16(sp)
 8019284:	df000315 	stw	fp,12(sp)
 8019288:	df000304 	addi	fp,sp,12
 801928c:	e13ffe15 	stw	r4,-8(fp)
 8019290:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8019294:	e0bffe17 	ldw	r2,-8(fp)
 8019298:	10000616 	blt	r2,zero,80192b4 <fstat+0x38>
 801929c:	e0bffe17 	ldw	r2,-8(fp)
 80192a0:	10c00324 	muli	r3,r2,12
 80192a4:	008200b4 	movhi	r2,2050
 80192a8:	109f5404 	addi	r2,r2,32080
 80192ac:	1885883a 	add	r2,r3,r2
 80192b0:	00000106 	br	80192b8 <fstat+0x3c>
 80192b4:	0005883a 	mov	r2,zero
 80192b8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 80192bc:	e0bffd17 	ldw	r2,-12(fp)
 80192c0:	10001026 	beq	r2,zero,8019304 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 80192c4:	e0bffd17 	ldw	r2,-12(fp)
 80192c8:	10800017 	ldw	r2,0(r2)
 80192cc:	10800817 	ldw	r2,32(r2)
 80192d0:	10000726 	beq	r2,zero,80192f0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 80192d4:	e0bffd17 	ldw	r2,-12(fp)
 80192d8:	10800017 	ldw	r2,0(r2)
 80192dc:	10800817 	ldw	r2,32(r2)
 80192e0:	e13ffd17 	ldw	r4,-12(fp)
 80192e4:	e17fff17 	ldw	r5,-4(fp)
 80192e8:	103ee83a 	callr	r2
 80192ec:	00000a06 	br	8019318 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 80192f0:	e0bfff17 	ldw	r2,-4(fp)
 80192f4:	00c80004 	movi	r3,8192
 80192f8:	10c00115 	stw	r3,4(r2)
      return 0;
 80192fc:	0005883a 	mov	r2,zero
 8019300:	00000506 	br	8019318 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8019304:	801922c0 	call	801922c <alt_get_errno>
 8019308:	1007883a 	mov	r3,r2
 801930c:	00801444 	movi	r2,81
 8019310:	18800015 	stw	r2,0(r3)
    return -1;
 8019314:	00bfffc4 	movi	r2,-1
  }
}
 8019318:	e037883a 	mov	sp,fp
 801931c:	dfc00117 	ldw	ra,4(sp)
 8019320:	df000017 	ldw	fp,0(sp)
 8019324:	dec00204 	addi	sp,sp,8
 8019328:	f800283a 	ret

0801932c <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 801932c:	deffff04 	addi	sp,sp,-4
 8019330:	df000015 	stw	fp,0(sp)
 8019334:	d839883a 	mov	fp,sp
  return 0;
 8019338:	0005883a 	mov	r2,zero
}
 801933c:	e037883a 	mov	sp,fp
 8019340:	df000017 	ldw	fp,0(sp)
 8019344:	dec00104 	addi	sp,sp,4
 8019348:	f800283a 	ret

0801934c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 801934c:	defff904 	addi	sp,sp,-28
 8019350:	dfc00615 	stw	ra,24(sp)
 8019354:	df000515 	stw	fp,20(sp)
 8019358:	df000504 	addi	fp,sp,20
 801935c:	e13ffc15 	stw	r4,-16(fp)
 8019360:	e17ffd15 	stw	r5,-12(fp)
 8019364:	e1bffe15 	stw	r6,-8(fp)
 8019368:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 801936c:	e0800217 	ldw	r2,8(fp)
 8019370:	d8800015 	stw	r2,0(sp)
 8019374:	e13ffc17 	ldw	r4,-16(fp)
 8019378:	e17ffd17 	ldw	r5,-12(fp)
 801937c:	e1bffe17 	ldw	r6,-8(fp)
 8019380:	e1ffff17 	ldw	r7,-4(fp)
 8019384:	801952c0 	call	801952c <alt_iic_isr_register>
}  
 8019388:	e037883a 	mov	sp,fp
 801938c:	dfc00117 	ldw	ra,4(sp)
 8019390:	df000017 	ldw	fp,0(sp)
 8019394:	dec00204 	addi	sp,sp,8
 8019398:	f800283a 	ret

0801939c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 801939c:	defff904 	addi	sp,sp,-28
 80193a0:	df000615 	stw	fp,24(sp)
 80193a4:	df000604 	addi	fp,sp,24
 80193a8:	e13ffe15 	stw	r4,-8(fp)
 80193ac:	e17fff15 	stw	r5,-4(fp)
 80193b0:	e0bfff17 	ldw	r2,-4(fp)
 80193b4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80193b8:	0005303a 	rdctl	r2,status
 80193bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80193c0:	e0fffb17 	ldw	r3,-20(fp)
 80193c4:	00bfff84 	movi	r2,-2
 80193c8:	1884703a 	and	r2,r3,r2
 80193cc:	1001703a 	wrctl	status,r2
  
  return context;
 80193d0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 80193d4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 80193d8:	e0bffa17 	ldw	r2,-24(fp)
 80193dc:	00c00044 	movi	r3,1
 80193e0:	1884983a 	sll	r2,r3,r2
 80193e4:	1007883a 	mov	r3,r2
 80193e8:	008200f4 	movhi	r2,2051
 80193ec:	10aafe04 	addi	r2,r2,-21512
 80193f0:	10800017 	ldw	r2,0(r2)
 80193f4:	1886b03a 	or	r3,r3,r2
 80193f8:	008200f4 	movhi	r2,2051
 80193fc:	10aafe04 	addi	r2,r2,-21512
 8019400:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8019404:	008200f4 	movhi	r2,2051
 8019408:	10aafe04 	addi	r2,r2,-21512
 801940c:	10800017 	ldw	r2,0(r2)
 8019410:	100170fa 	wrctl	ienable,r2
 8019414:	e0bffc17 	ldw	r2,-16(fp)
 8019418:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801941c:	e0bffd17 	ldw	r2,-12(fp)
 8019420:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8019424:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8019428:	0001883a 	nop
}
 801942c:	e037883a 	mov	sp,fp
 8019430:	df000017 	ldw	fp,0(sp)
 8019434:	dec00104 	addi	sp,sp,4
 8019438:	f800283a 	ret

0801943c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 801943c:	defff904 	addi	sp,sp,-28
 8019440:	df000615 	stw	fp,24(sp)
 8019444:	df000604 	addi	fp,sp,24
 8019448:	e13ffe15 	stw	r4,-8(fp)
 801944c:	e17fff15 	stw	r5,-4(fp)
 8019450:	e0bfff17 	ldw	r2,-4(fp)
 8019454:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8019458:	0005303a 	rdctl	r2,status
 801945c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8019460:	e0fffb17 	ldw	r3,-20(fp)
 8019464:	00bfff84 	movi	r2,-2
 8019468:	1884703a 	and	r2,r3,r2
 801946c:	1001703a 	wrctl	status,r2
  
  return context;
 8019470:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8019474:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8019478:	e0bffa17 	ldw	r2,-24(fp)
 801947c:	00c00044 	movi	r3,1
 8019480:	1884983a 	sll	r2,r3,r2
 8019484:	0084303a 	nor	r2,zero,r2
 8019488:	1007883a 	mov	r3,r2
 801948c:	008200f4 	movhi	r2,2051
 8019490:	10aafe04 	addi	r2,r2,-21512
 8019494:	10800017 	ldw	r2,0(r2)
 8019498:	1886703a 	and	r3,r3,r2
 801949c:	008200f4 	movhi	r2,2051
 80194a0:	10aafe04 	addi	r2,r2,-21512
 80194a4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80194a8:	008200f4 	movhi	r2,2051
 80194ac:	10aafe04 	addi	r2,r2,-21512
 80194b0:	10800017 	ldw	r2,0(r2)
 80194b4:	100170fa 	wrctl	ienable,r2
 80194b8:	e0bffc17 	ldw	r2,-16(fp)
 80194bc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80194c0:	e0bffd17 	ldw	r2,-12(fp)
 80194c4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 80194c8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 80194cc:	0001883a 	nop
}
 80194d0:	e037883a 	mov	sp,fp
 80194d4:	df000017 	ldw	fp,0(sp)
 80194d8:	dec00104 	addi	sp,sp,4
 80194dc:	f800283a 	ret

080194e0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 80194e0:	defffc04 	addi	sp,sp,-16
 80194e4:	df000315 	stw	fp,12(sp)
 80194e8:	df000304 	addi	fp,sp,12
 80194ec:	e13ffe15 	stw	r4,-8(fp)
 80194f0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 80194f4:	000530fa 	rdctl	r2,ienable
 80194f8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 80194fc:	e0bfff17 	ldw	r2,-4(fp)
 8019500:	00c00044 	movi	r3,1
 8019504:	1884983a 	sll	r2,r3,r2
 8019508:	1007883a 	mov	r3,r2
 801950c:	e0bffd17 	ldw	r2,-12(fp)
 8019510:	1884703a 	and	r2,r3,r2
 8019514:	1004c03a 	cmpne	r2,r2,zero
 8019518:	10803fcc 	andi	r2,r2,255
}
 801951c:	e037883a 	mov	sp,fp
 8019520:	df000017 	ldw	fp,0(sp)
 8019524:	dec00104 	addi	sp,sp,4
 8019528:	f800283a 	ret

0801952c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 801952c:	defff504 	addi	sp,sp,-44
 8019530:	dfc00a15 	stw	ra,40(sp)
 8019534:	df000915 	stw	fp,36(sp)
 8019538:	df000904 	addi	fp,sp,36
 801953c:	e13ffc15 	stw	r4,-16(fp)
 8019540:	e17ffd15 	stw	r5,-12(fp)
 8019544:	e1bffe15 	stw	r6,-8(fp)
 8019548:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 801954c:	00bffa84 	movi	r2,-22
 8019550:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8019554:	e0bffd17 	ldw	r2,-12(fp)
 8019558:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 801955c:	e0bff817 	ldw	r2,-32(fp)
 8019560:	10800808 	cmpgei	r2,r2,32
 8019564:	1000271e 	bne	r2,zero,8019604 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8019568:	0005303a 	rdctl	r2,status
 801956c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8019570:	e0fffa17 	ldw	r3,-24(fp)
 8019574:	00bfff84 	movi	r2,-2
 8019578:	1884703a 	and	r2,r3,r2
 801957c:	1001703a 	wrctl	status,r2
  
  return context;
 8019580:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8019584:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 8019588:	008200f4 	movhi	r2,2051
 801958c:	10ab1e04 	addi	r2,r2,-21384
 8019590:	e0fff817 	ldw	r3,-32(fp)
 8019594:	180690fa 	slli	r3,r3,3
 8019598:	10c5883a 	add	r2,r2,r3
 801959c:	e0fffe17 	ldw	r3,-8(fp)
 80195a0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 80195a4:	008200f4 	movhi	r2,2051
 80195a8:	10ab1e04 	addi	r2,r2,-21384
 80195ac:	e0fff817 	ldw	r3,-32(fp)
 80195b0:	180690fa 	slli	r3,r3,3
 80195b4:	10c5883a 	add	r2,r2,r3
 80195b8:	10800104 	addi	r2,r2,4
 80195bc:	e0ffff17 	ldw	r3,-4(fp)
 80195c0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 80195c4:	e0bffe17 	ldw	r2,-8(fp)
 80195c8:	10000526 	beq	r2,zero,80195e0 <alt_iic_isr_register+0xb4>
 80195cc:	e0bff817 	ldw	r2,-32(fp)
 80195d0:	e13ffc17 	ldw	r4,-16(fp)
 80195d4:	100b883a 	mov	r5,r2
 80195d8:	801939c0 	call	801939c <alt_ic_irq_enable>
 80195dc:	00000406 	br	80195f0 <alt_iic_isr_register+0xc4>
 80195e0:	e0bff817 	ldw	r2,-32(fp)
 80195e4:	e13ffc17 	ldw	r4,-16(fp)
 80195e8:	100b883a 	mov	r5,r2
 80195ec:	801943c0 	call	801943c <alt_ic_irq_disable>
 80195f0:	e0bff715 	stw	r2,-36(fp)
 80195f4:	e0bff917 	ldw	r2,-28(fp)
 80195f8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80195fc:	e0bffb17 	ldw	r2,-20(fp)
 8019600:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8019604:	e0bff717 	ldw	r2,-36(fp)
}
 8019608:	e037883a 	mov	sp,fp
 801960c:	dfc00117 	ldw	ra,4(sp)
 8019610:	df000017 	ldw	fp,0(sp)
 8019614:	dec00204 	addi	sp,sp,8
 8019618:	f800283a 	ret

0801961c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801961c:	defffe04 	addi	sp,sp,-8
 8019620:	dfc00115 	stw	ra,4(sp)
 8019624:	df000015 	stw	fp,0(sp)
 8019628:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801962c:	008200f4 	movhi	r2,2051
 8019630:	10a3f604 	addi	r2,r2,-28712
 8019634:	10800017 	ldw	r2,0(r2)
 8019638:	10000526 	beq	r2,zero,8019650 <alt_get_errno+0x34>
 801963c:	008200f4 	movhi	r2,2051
 8019640:	10a3f604 	addi	r2,r2,-28712
 8019644:	10800017 	ldw	r2,0(r2)
 8019648:	103ee83a 	callr	r2
 801964c:	00000206 	br	8019658 <alt_get_errno+0x3c>
 8019650:	008200f4 	movhi	r2,2051
 8019654:	10aafa04 	addi	r2,r2,-21528
}
 8019658:	e037883a 	mov	sp,fp
 801965c:	dfc00117 	ldw	ra,4(sp)
 8019660:	df000017 	ldw	fp,0(sp)
 8019664:	dec00204 	addi	sp,sp,8
 8019668:	f800283a 	ret

0801966c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 801966c:	deffed04 	addi	sp,sp,-76
 8019670:	dfc01215 	stw	ra,72(sp)
 8019674:	df001115 	stw	fp,68(sp)
 8019678:	df001104 	addi	fp,sp,68
 801967c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8019680:	e0bfff17 	ldw	r2,-4(fp)
 8019684:	10000616 	blt	r2,zero,80196a0 <isatty+0x34>
 8019688:	e0bfff17 	ldw	r2,-4(fp)
 801968c:	10c00324 	muli	r3,r2,12
 8019690:	008200b4 	movhi	r2,2050
 8019694:	109f5404 	addi	r2,r2,32080
 8019698:	1885883a 	add	r2,r3,r2
 801969c:	00000106 	br	80196a4 <isatty+0x38>
 80196a0:	0005883a 	mov	r2,zero
 80196a4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 80196a8:	e0bfef17 	ldw	r2,-68(fp)
 80196ac:	10000e26 	beq	r2,zero,80196e8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 80196b0:	e0bfef17 	ldw	r2,-68(fp)
 80196b4:	10800017 	ldw	r2,0(r2)
 80196b8:	10800817 	ldw	r2,32(r2)
 80196bc:	1000021e 	bne	r2,zero,80196c8 <isatty+0x5c>
    {
      return 1;
 80196c0:	00800044 	movi	r2,1
 80196c4:	00000d06 	br	80196fc <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 80196c8:	e0bff004 	addi	r2,fp,-64
 80196cc:	e13fff17 	ldw	r4,-4(fp)
 80196d0:	100b883a 	mov	r5,r2
 80196d4:	801927c0 	call	801927c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 80196d8:	e0bff117 	ldw	r2,-60(fp)
 80196dc:	10880020 	cmpeqi	r2,r2,8192
 80196e0:	10803fcc 	andi	r2,r2,255
 80196e4:	00000506 	br	80196fc <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80196e8:	801961c0 	call	801961c <alt_get_errno>
 80196ec:	1007883a 	mov	r3,r2
 80196f0:	00801444 	movi	r2,81
 80196f4:	18800015 	stw	r2,0(r3)
    return 0;
 80196f8:	0005883a 	mov	r2,zero
  }
}
 80196fc:	e037883a 	mov	sp,fp
 8019700:	dfc00117 	ldw	ra,4(sp)
 8019704:	df000017 	ldw	fp,0(sp)
 8019708:	dec00204 	addi	sp,sp,8
 801970c:	f800283a 	ret

08019710 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8019710:	defffe04 	addi	sp,sp,-8
 8019714:	dfc00115 	stw	ra,4(sp)
 8019718:	df000015 	stw	fp,0(sp)
 801971c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8019720:	008200f4 	movhi	r2,2051
 8019724:	10a3f604 	addi	r2,r2,-28712
 8019728:	10800017 	ldw	r2,0(r2)
 801972c:	10000526 	beq	r2,zero,8019744 <alt_get_errno+0x34>
 8019730:	008200f4 	movhi	r2,2051
 8019734:	10a3f604 	addi	r2,r2,-28712
 8019738:	10800017 	ldw	r2,0(r2)
 801973c:	103ee83a 	callr	r2
 8019740:	00000206 	br	801974c <alt_get_errno+0x3c>
 8019744:	008200f4 	movhi	r2,2051
 8019748:	10aafa04 	addi	r2,r2,-21528
}
 801974c:	e037883a 	mov	sp,fp
 8019750:	dfc00117 	ldw	ra,4(sp)
 8019754:	df000017 	ldw	fp,0(sp)
 8019758:	dec00204 	addi	sp,sp,8
 801975c:	f800283a 	ret

08019760 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 8019760:	defffb04 	addi	sp,sp,-20
 8019764:	dfc00415 	stw	ra,16(sp)
 8019768:	df000315 	stw	fp,12(sp)
 801976c:	df000304 	addi	fp,sp,12
 8019770:	e13ffe15 	stw	r4,-8(fp)
 8019774:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
 8019778:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
 801977c:	e0bffe17 	ldw	r2,-8(fp)
 8019780:	00803116 	blt	zero,r2,8019848 <kill+0xe8>
  {
    switch (sig)
 8019784:	e0bfff17 	ldw	r2,-4(fp)
 8019788:	10800828 	cmpgeui	r2,r2,32
 801978c:	1000291e 	bne	r2,zero,8019834 <kill+0xd4>
 8019790:	e0bfff17 	ldw	r2,-4(fp)
 8019794:	100690ba 	slli	r3,r2,2
 8019798:	008200b4 	movhi	r2,2050
 801979c:	10a5eb04 	addi	r2,r2,-26708
 80197a0:	1885883a 	add	r2,r3,r2
 80197a4:	10800017 	ldw	r2,0(r2)
 80197a8:	1000683a 	jmp	r2
 80197ac:	08019840 	call	801984 <__reset-0x77fe67c>
 80197b0:	08019834 	orhi	zero,at,1632
 80197b4:	08019834 	orhi	zero,at,1632
 80197b8:	0801982c 	andhi	zero,at,1632
 80197bc:	0801982c 	andhi	zero,at,1632
 80197c0:	0801982c 	andhi	zero,at,1632
 80197c4:	0801982c 	andhi	zero,at,1632
 80197c8:	08019834 	orhi	zero,at,1632
 80197cc:	0801982c 	andhi	zero,at,1632
 80197d0:	0801982c 	andhi	zero,at,1632
 80197d4:	0801982c 	andhi	zero,at,1632
 80197d8:	0801982c 	andhi	zero,at,1632
 80197dc:	0801982c 	andhi	zero,at,1632
 80197e0:	0801982c 	andhi	zero,at,1632
 80197e4:	0801982c 	andhi	zero,at,1632
 80197e8:	0801982c 	andhi	zero,at,1632
 80197ec:	08019840 	call	801984 <__reset-0x77fe67c>
 80197f0:	08019834 	orhi	zero,at,1632
 80197f4:	08019834 	orhi	zero,at,1632
 80197f8:	08019834 	orhi	zero,at,1632
 80197fc:	08019840 	call	801984 <__reset-0x77fe67c>
 8019800:	08019834 	orhi	zero,at,1632
 8019804:	08019834 	orhi	zero,at,1632
 8019808:	0801982c 	andhi	zero,at,1632
 801980c:	0801982c 	andhi	zero,at,1632
 8019810:	0801982c 	andhi	zero,at,1632
 8019814:	0801982c 	andhi	zero,at,1632
 8019818:	0801982c 	andhi	zero,at,1632
 801981c:	08019834 	orhi	zero,at,1632
 8019820:	08019834 	orhi	zero,at,1632
 8019824:	0801982c 	andhi	zero,at,1632
 8019828:	0801982c 	andhi	zero,at,1632
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 801982c:	0009883a 	mov	r4,zero
 8019830:	80191f80 	call	80191f8 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 8019834:	00800584 	movi	r2,22
 8019838:	e0bffd15 	stw	r2,-12(fp)
 801983c:	00000606 	br	8019858 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
 8019840:	0001883a 	nop
 8019844:	00000406 	br	8019858 <kill+0xf8>

      status = EINVAL;
    }
  }

  else if (pid > 0)
 8019848:	e0bffe17 	ldw	r2,-8(fp)
 801984c:	0080020e 	bge	zero,r2,8019858 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 8019850:	008000c4 	movi	r2,3
 8019854:	e0bffd15 	stw	r2,-12(fp)
  }

  if (status)
 8019858:	e0bffd17 	ldw	r2,-12(fp)
 801985c:	10000626 	beq	r2,zero,8019878 <kill+0x118>
  {
    ALT_ERRNO = status;
 8019860:	80197100 	call	8019710 <alt_get_errno>
 8019864:	1007883a 	mov	r3,r2
 8019868:	e0bffd17 	ldw	r2,-12(fp)
 801986c:	18800015 	stw	r2,0(r3)
    return -1;
 8019870:	00bfffc4 	movi	r2,-1
 8019874:	00000106 	br	801987c <kill+0x11c>
  }

  return 0;
 8019878:	0005883a 	mov	r2,zero
}
 801987c:	e037883a 	mov	sp,fp
 8019880:	dfc00117 	ldw	ra,4(sp)
 8019884:	df000017 	ldw	fp,0(sp)
 8019888:	dec00204 	addi	sp,sp,8
 801988c:	f800283a 	ret

08019890 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 8019890:	defffc04 	addi	sp,sp,-16
 8019894:	df000315 	stw	fp,12(sp)
 8019898:	df000304 	addi	fp,sp,12
 801989c:	e13ffd15 	stw	r4,-12(fp)
 80198a0:	e17ffe15 	stw	r5,-8(fp)
 80198a4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 80198a8:	e0fffe17 	ldw	r3,-8(fp)
 80198ac:	e0bffd17 	ldw	r2,-12(fp)
 80198b0:	18800c26 	beq	r3,r2,80198e4 <alt_load_section+0x54>
  {
    while( to != end )
 80198b4:	00000806 	br	80198d8 <alt_load_section+0x48>
    {
      *to++ = *from++;
 80198b8:	e0bffe17 	ldw	r2,-8(fp)
 80198bc:	10c00104 	addi	r3,r2,4
 80198c0:	e0fffe15 	stw	r3,-8(fp)
 80198c4:	e0fffd17 	ldw	r3,-12(fp)
 80198c8:	19000104 	addi	r4,r3,4
 80198cc:	e13ffd15 	stw	r4,-12(fp)
 80198d0:	18c00017 	ldw	r3,0(r3)
 80198d4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 80198d8:	e0fffe17 	ldw	r3,-8(fp)
 80198dc:	e0bfff17 	ldw	r2,-4(fp)
 80198e0:	18bff51e 	bne	r3,r2,80198b8 <__alt_data_end+0xfc0198b8>
    {
      *to++ = *from++;
    }
  }
}
 80198e4:	e037883a 	mov	sp,fp
 80198e8:	df000017 	ldw	fp,0(sp)
 80198ec:	dec00104 	addi	sp,sp,4
 80198f0:	f800283a 	ret

080198f4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 80198f4:	defffe04 	addi	sp,sp,-8
 80198f8:	dfc00115 	stw	ra,4(sp)
 80198fc:	df000015 	stw	fp,0(sp)
 8019900:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 8019904:	010200f4 	movhi	r4,2051
 8019908:	2123fb04 	addi	r4,r4,-28692
 801990c:	014200b4 	movhi	r5,2050
 8019910:	295d2104 	addi	r5,r5,29828
 8019914:	018200f4 	movhi	r6,2051
 8019918:	31a3fb04 	addi	r6,r6,-28692
 801991c:	80198900 	call	8019890 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 8019920:	01020034 	movhi	r4,2048
 8019924:	21000804 	addi	r4,r4,32
 8019928:	01420034 	movhi	r5,2048
 801992c:	29400804 	addi	r5,r5,32
 8019930:	01820034 	movhi	r6,2048
 8019934:	31806f04 	addi	r6,r6,444
 8019938:	80198900 	call	8019890 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 801993c:	010200b4 	movhi	r4,2050
 8019940:	21300f04 	addi	r4,r4,-16324
 8019944:	014200b4 	movhi	r5,2050
 8019948:	29700f04 	addi	r5,r5,-16324
 801994c:	018200b4 	movhi	r6,2050
 8019950:	319d2104 	addi	r6,r6,29828
 8019954:	80198900 	call	8019890 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8019958:	801b2880 	call	801b288 <alt_dcache_flush_all>
  alt_icache_flush_all();
 801995c:	801b4e00 	call	801b4e0 <alt_icache_flush_all>
}
 8019960:	e037883a 	mov	sp,fp
 8019964:	dfc00117 	ldw	ra,4(sp)
 8019968:	df000017 	ldw	fp,0(sp)
 801996c:	dec00204 	addi	sp,sp,8
 8019970:	f800283a 	ret

08019974 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8019974:	defffe04 	addi	sp,sp,-8
 8019978:	dfc00115 	stw	ra,4(sp)
 801997c:	df000015 	stw	fp,0(sp)
 8019980:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8019984:	008200f4 	movhi	r2,2051
 8019988:	10a3f604 	addi	r2,r2,-28712
 801998c:	10800017 	ldw	r2,0(r2)
 8019990:	10000526 	beq	r2,zero,80199a8 <alt_get_errno+0x34>
 8019994:	008200f4 	movhi	r2,2051
 8019998:	10a3f604 	addi	r2,r2,-28712
 801999c:	10800017 	ldw	r2,0(r2)
 80199a0:	103ee83a 	callr	r2
 80199a4:	00000206 	br	80199b0 <alt_get_errno+0x3c>
 80199a8:	008200f4 	movhi	r2,2051
 80199ac:	10aafa04 	addi	r2,r2,-21528
}
 80199b0:	e037883a 	mov	sp,fp
 80199b4:	dfc00117 	ldw	ra,4(sp)
 80199b8:	df000017 	ldw	fp,0(sp)
 80199bc:	dec00204 	addi	sp,sp,8
 80199c0:	f800283a 	ret

080199c4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 80199c4:	defff904 	addi	sp,sp,-28
 80199c8:	dfc00615 	stw	ra,24(sp)
 80199cc:	df000515 	stw	fp,20(sp)
 80199d0:	df000504 	addi	fp,sp,20
 80199d4:	e13ffd15 	stw	r4,-12(fp)
 80199d8:	e17ffe15 	stw	r5,-8(fp)
 80199dc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 80199e0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80199e4:	e0bffd17 	ldw	r2,-12(fp)
 80199e8:	10000616 	blt	r2,zero,8019a04 <lseek+0x40>
 80199ec:	e0bffd17 	ldw	r2,-12(fp)
 80199f0:	10c00324 	muli	r3,r2,12
 80199f4:	008200b4 	movhi	r2,2050
 80199f8:	109f5404 	addi	r2,r2,32080
 80199fc:	1885883a 	add	r2,r3,r2
 8019a00:	00000106 	br	8019a08 <lseek+0x44>
 8019a04:	0005883a 	mov	r2,zero
 8019a08:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 8019a0c:	e0bffc17 	ldw	r2,-16(fp)
 8019a10:	10001026 	beq	r2,zero,8019a54 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 8019a14:	e0bffc17 	ldw	r2,-16(fp)
 8019a18:	10800017 	ldw	r2,0(r2)
 8019a1c:	10800717 	ldw	r2,28(r2)
 8019a20:	10000926 	beq	r2,zero,8019a48 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 8019a24:	e0bffc17 	ldw	r2,-16(fp)
 8019a28:	10800017 	ldw	r2,0(r2)
 8019a2c:	10800717 	ldw	r2,28(r2)
 8019a30:	e13ffc17 	ldw	r4,-16(fp)
 8019a34:	e17ffe17 	ldw	r5,-8(fp)
 8019a38:	e1bfff17 	ldw	r6,-4(fp)
 8019a3c:	103ee83a 	callr	r2
 8019a40:	e0bffb15 	stw	r2,-20(fp)
 8019a44:	00000506 	br	8019a5c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 8019a48:	00bfde84 	movi	r2,-134
 8019a4c:	e0bffb15 	stw	r2,-20(fp)
 8019a50:	00000206 	br	8019a5c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 8019a54:	00bfebc4 	movi	r2,-81
 8019a58:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 8019a5c:	e0bffb17 	ldw	r2,-20(fp)
 8019a60:	1000070e 	bge	r2,zero,8019a80 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 8019a64:	80199740 	call	8019974 <alt_get_errno>
 8019a68:	1007883a 	mov	r3,r2
 8019a6c:	e0bffb17 	ldw	r2,-20(fp)
 8019a70:	0085c83a 	sub	r2,zero,r2
 8019a74:	18800015 	stw	r2,0(r3)
    rc = -1;
 8019a78:	00bfffc4 	movi	r2,-1
 8019a7c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 8019a80:	e0bffb17 	ldw	r2,-20(fp)
}
 8019a84:	e037883a 	mov	sp,fp
 8019a88:	dfc00117 	ldw	ra,4(sp)
 8019a8c:	df000017 	ldw	fp,0(sp)
 8019a90:	dec00204 	addi	sp,sp,8
 8019a94:	f800283a 	ret

08019a98 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8019a98:	defffd04 	addi	sp,sp,-12
 8019a9c:	dfc00215 	stw	ra,8(sp)
 8019aa0:	df000115 	stw	fp,4(sp)
 8019aa4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8019aa8:	0009883a 	mov	r4,zero
 8019aac:	8019f5c0 	call	8019f5c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 8019ab0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8019ab4:	8019f900 	call	8019f90 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 8019ab8:	010200b4 	movhi	r4,2050
 8019abc:	211d1104 	addi	r4,r4,29764
 8019ac0:	014200b4 	movhi	r5,2050
 8019ac4:	295d1104 	addi	r5,r5,29764
 8019ac8:	018200b4 	movhi	r6,2050
 8019acc:	319d1104 	addi	r6,r6,29764
 8019ad0:	801b5d00 	call	801b5d0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 8019ad4:	801b3980 	call	801b398 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 8019ad8:	010200b4 	movhi	r4,2050
 8019adc:	212cfd04 	addi	r4,r4,-19468
 8019ae0:	801bccc0 	call	801bccc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8019ae4:	d1272817 	ldw	r4,-25440(gp)
 8019ae8:	d0e72917 	ldw	r3,-25436(gp)
 8019aec:	d0a72a17 	ldw	r2,-25432(gp)
 8019af0:	180b883a 	mov	r5,r3
 8019af4:	100d883a 	mov	r6,r2
 8019af8:	8004b840 	call	8004b84 <main>
 8019afc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8019b00:	01000044 	movi	r4,1
 8019b04:	80190fc0 	call	80190fc <close>
  exit (result);
 8019b08:	e13fff17 	ldw	r4,-4(fp)
 8019b0c:	801bce00 	call	801bce0 <exit>

08019b10 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 8019b10:	defffe04 	addi	sp,sp,-8
 8019b14:	df000115 	stw	fp,4(sp)
 8019b18:	df000104 	addi	fp,sp,4
 8019b1c:	e13fff15 	stw	r4,-4(fp)
}
 8019b20:	e037883a 	mov	sp,fp
 8019b24:	df000017 	ldw	fp,0(sp)
 8019b28:	dec00104 	addi	sp,sp,4
 8019b2c:	f800283a 	ret

08019b30 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 8019b30:	defffe04 	addi	sp,sp,-8
 8019b34:	df000115 	stw	fp,4(sp)
 8019b38:	df000104 	addi	fp,sp,4
 8019b3c:	e13fff15 	stw	r4,-4(fp)
}
 8019b40:	e037883a 	mov	sp,fp
 8019b44:	df000017 	ldw	fp,0(sp)
 8019b48:	dec00104 	addi	sp,sp,4
 8019b4c:	f800283a 	ret

08019b50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8019b50:	defffe04 	addi	sp,sp,-8
 8019b54:	dfc00115 	stw	ra,4(sp)
 8019b58:	df000015 	stw	fp,0(sp)
 8019b5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8019b60:	008200f4 	movhi	r2,2051
 8019b64:	10a3f604 	addi	r2,r2,-28712
 8019b68:	10800017 	ldw	r2,0(r2)
 8019b6c:	10000526 	beq	r2,zero,8019b84 <alt_get_errno+0x34>
 8019b70:	008200f4 	movhi	r2,2051
 8019b74:	10a3f604 	addi	r2,r2,-28712
 8019b78:	10800017 	ldw	r2,0(r2)
 8019b7c:	103ee83a 	callr	r2
 8019b80:	00000206 	br	8019b8c <alt_get_errno+0x3c>
 8019b84:	008200f4 	movhi	r2,2051
 8019b88:	10aafa04 	addi	r2,r2,-21528
}
 8019b8c:	e037883a 	mov	sp,fp
 8019b90:	dfc00117 	ldw	ra,4(sp)
 8019b94:	df000017 	ldw	fp,0(sp)
 8019b98:	dec00204 	addi	sp,sp,8
 8019b9c:	f800283a 	ret

08019ba0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 8019ba0:	defff904 	addi	sp,sp,-28
 8019ba4:	dfc00615 	stw	ra,24(sp)
 8019ba8:	df000515 	stw	fp,20(sp)
 8019bac:	df000504 	addi	fp,sp,20
 8019bb0:	e13ffd15 	stw	r4,-12(fp)
 8019bb4:	e17ffe15 	stw	r5,-8(fp)
 8019bb8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8019bbc:	e0bffd17 	ldw	r2,-12(fp)
 8019bc0:	10000616 	blt	r2,zero,8019bdc <read+0x3c>
 8019bc4:	e0bffd17 	ldw	r2,-12(fp)
 8019bc8:	10c00324 	muli	r3,r2,12
 8019bcc:	008200b4 	movhi	r2,2050
 8019bd0:	109f5404 	addi	r2,r2,32080
 8019bd4:	1885883a 	add	r2,r3,r2
 8019bd8:	00000106 	br	8019be0 <read+0x40>
 8019bdc:	0005883a 	mov	r2,zero
 8019be0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8019be4:	e0bffb17 	ldw	r2,-20(fp)
 8019be8:	10002226 	beq	r2,zero,8019c74 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8019bec:	e0bffb17 	ldw	r2,-20(fp)
 8019bf0:	10800217 	ldw	r2,8(r2)
 8019bf4:	108000cc 	andi	r2,r2,3
 8019bf8:	10800060 	cmpeqi	r2,r2,1
 8019bfc:	1000181e 	bne	r2,zero,8019c60 <read+0xc0>
        (fd->dev->read))
 8019c00:	e0bffb17 	ldw	r2,-20(fp)
 8019c04:	10800017 	ldw	r2,0(r2)
 8019c08:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8019c0c:	10001426 	beq	r2,zero,8019c60 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 8019c10:	e0bffb17 	ldw	r2,-20(fp)
 8019c14:	10800017 	ldw	r2,0(r2)
 8019c18:	10800517 	ldw	r2,20(r2)
 8019c1c:	e0ffff17 	ldw	r3,-4(fp)
 8019c20:	e13ffb17 	ldw	r4,-20(fp)
 8019c24:	e17ffe17 	ldw	r5,-8(fp)
 8019c28:	180d883a 	mov	r6,r3
 8019c2c:	103ee83a 	callr	r2
 8019c30:	e0bffc15 	stw	r2,-16(fp)
 8019c34:	e0bffc17 	ldw	r2,-16(fp)
 8019c38:	1000070e 	bge	r2,zero,8019c58 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 8019c3c:	8019b500 	call	8019b50 <alt_get_errno>
 8019c40:	1007883a 	mov	r3,r2
 8019c44:	e0bffc17 	ldw	r2,-16(fp)
 8019c48:	0085c83a 	sub	r2,zero,r2
 8019c4c:	18800015 	stw	r2,0(r3)
          return -1;
 8019c50:	00bfffc4 	movi	r2,-1
 8019c54:	00000c06 	br	8019c88 <read+0xe8>
        }
        return rval;
 8019c58:	e0bffc17 	ldw	r2,-16(fp)
 8019c5c:	00000a06 	br	8019c88 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 8019c60:	8019b500 	call	8019b50 <alt_get_errno>
 8019c64:	1007883a 	mov	r3,r2
 8019c68:	00800344 	movi	r2,13
 8019c6c:	18800015 	stw	r2,0(r3)
 8019c70:	00000406 	br	8019c84 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 8019c74:	8019b500 	call	8019b50 <alt_get_errno>
 8019c78:	1007883a 	mov	r3,r2
 8019c7c:	00801444 	movi	r2,81
 8019c80:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8019c84:	00bfffc4 	movi	r2,-1
}
 8019c88:	e037883a 	mov	sp,fp
 8019c8c:	dfc00117 	ldw	ra,4(sp)
 8019c90:	df000017 	ldw	fp,0(sp)
 8019c94:	dec00204 	addi	sp,sp,8
 8019c98:	f800283a 	ret

08019c9c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8019c9c:	defffe04 	addi	sp,sp,-8
 8019ca0:	df000115 	stw	fp,4(sp)
 8019ca4:	df000104 	addi	fp,sp,4
 8019ca8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 8019cac:	e0bfff17 	ldw	r2,-4(fp)
 8019cb0:	108000d0 	cmplti	r2,r2,3
 8019cb4:	10000d1e 	bne	r2,zero,8019cec <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 8019cb8:	008200b4 	movhi	r2,2050
 8019cbc:	109f5404 	addi	r2,r2,32080
 8019cc0:	e0ffff17 	ldw	r3,-4(fp)
 8019cc4:	18c00324 	muli	r3,r3,12
 8019cc8:	10c5883a 	add	r2,r2,r3
 8019ccc:	10800204 	addi	r2,r2,8
 8019cd0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8019cd4:	008200b4 	movhi	r2,2050
 8019cd8:	109f5404 	addi	r2,r2,32080
 8019cdc:	e0ffff17 	ldw	r3,-4(fp)
 8019ce0:	18c00324 	muli	r3,r3,12
 8019ce4:	10c5883a 	add	r2,r2,r3
 8019ce8:	10000015 	stw	zero,0(r2)
  }
}
 8019cec:	e037883a 	mov	sp,fp
 8019cf0:	df000017 	ldw	fp,0(sp)
 8019cf4:	dec00104 	addi	sp,sp,4
 8019cf8:	f800283a 	ret

08019cfc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 8019cfc:	defff904 	addi	sp,sp,-28
 8019d00:	df000615 	stw	fp,24(sp)
 8019d04:	df000604 	addi	fp,sp,24
 8019d08:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8019d0c:	0005303a 	rdctl	r2,status
 8019d10:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8019d14:	e0fffc17 	ldw	r3,-16(fp)
 8019d18:	00bfff84 	movi	r2,-2
 8019d1c:	1884703a 	and	r2,r3,r2
 8019d20:	1001703a 	wrctl	status,r2
  
  return context;
 8019d24:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 8019d28:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 8019d2c:	d0a02117 	ldw	r2,-32636(gp)
 8019d30:	10c000c4 	addi	r3,r2,3
 8019d34:	00bfff04 	movi	r2,-4
 8019d38:	1884703a 	and	r2,r3,r2
 8019d3c:	d0a02115 	stw	r2,-32636(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8019d40:	d0e02117 	ldw	r3,-32636(gp)
 8019d44:	e0bfff17 	ldw	r2,-4(fp)
 8019d48:	1887883a 	add	r3,r3,r2
 8019d4c:	00830034 	movhi	r2,3072
 8019d50:	10800004 	addi	r2,r2,0
 8019d54:	10c0062e 	bgeu	r2,r3,8019d70 <sbrk+0x74>
 8019d58:	e0bffa17 	ldw	r2,-24(fp)
 8019d5c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8019d60:	e0bffd17 	ldw	r2,-12(fp)
 8019d64:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 8019d68:	00bfffc4 	movi	r2,-1
 8019d6c:	00000b06 	br	8019d9c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 8019d70:	d0a02117 	ldw	r2,-32636(gp)
 8019d74:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 8019d78:	d0e02117 	ldw	r3,-32636(gp)
 8019d7c:	e0bfff17 	ldw	r2,-4(fp)
 8019d80:	1885883a 	add	r2,r3,r2
 8019d84:	d0a02115 	stw	r2,-32636(gp)
 8019d88:	e0bffa17 	ldw	r2,-24(fp)
 8019d8c:	e0bffe15 	stw	r2,-8(fp)
 8019d90:	e0bffe17 	ldw	r2,-8(fp)
 8019d94:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 8019d98:	e0bffb17 	ldw	r2,-20(fp)
} 
 8019d9c:	e037883a 	mov	sp,fp
 8019da0:	df000017 	ldw	fp,0(sp)
 8019da4:	dec00104 	addi	sp,sp,4
 8019da8:	f800283a 	ret

08019dac <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 8019dac:	defffd04 	addi	sp,sp,-12
 8019db0:	dfc00215 	stw	ra,8(sp)
 8019db4:	df000115 	stw	fp,4(sp)
 8019db8:	df000104 	addi	fp,sp,4
 8019dbc:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 8019dc0:	e13fff17 	ldw	r4,-4(fp)
 8019dc4:	801b1600 	call	801b160 <alt_busy_sleep>
}
 8019dc8:	e037883a 	mov	sp,fp
 8019dcc:	dfc00117 	ldw	ra,4(sp)
 8019dd0:	df000017 	ldw	fp,0(sp)
 8019dd4:	dec00204 	addi	sp,sp,8
 8019dd8:	f800283a 	ret

08019ddc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8019ddc:	defffe04 	addi	sp,sp,-8
 8019de0:	dfc00115 	stw	ra,4(sp)
 8019de4:	df000015 	stw	fp,0(sp)
 8019de8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8019dec:	008200f4 	movhi	r2,2051
 8019df0:	10a3f604 	addi	r2,r2,-28712
 8019df4:	10800017 	ldw	r2,0(r2)
 8019df8:	10000526 	beq	r2,zero,8019e10 <alt_get_errno+0x34>
 8019dfc:	008200f4 	movhi	r2,2051
 8019e00:	10a3f604 	addi	r2,r2,-28712
 8019e04:	10800017 	ldw	r2,0(r2)
 8019e08:	103ee83a 	callr	r2
 8019e0c:	00000206 	br	8019e18 <alt_get_errno+0x3c>
 8019e10:	008200f4 	movhi	r2,2051
 8019e14:	10aafa04 	addi	r2,r2,-21528
}
 8019e18:	e037883a 	mov	sp,fp
 8019e1c:	dfc00117 	ldw	ra,4(sp)
 8019e20:	df000017 	ldw	fp,0(sp)
 8019e24:	dec00204 	addi	sp,sp,8
 8019e28:	f800283a 	ret

08019e2c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8019e2c:	defff904 	addi	sp,sp,-28
 8019e30:	dfc00615 	stw	ra,24(sp)
 8019e34:	df000515 	stw	fp,20(sp)
 8019e38:	df000504 	addi	fp,sp,20
 8019e3c:	e13ffd15 	stw	r4,-12(fp)
 8019e40:	e17ffe15 	stw	r5,-8(fp)
 8019e44:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8019e48:	e0bffd17 	ldw	r2,-12(fp)
 8019e4c:	10000616 	blt	r2,zero,8019e68 <write+0x3c>
 8019e50:	e0bffd17 	ldw	r2,-12(fp)
 8019e54:	10c00324 	muli	r3,r2,12
 8019e58:	008200b4 	movhi	r2,2050
 8019e5c:	109f5404 	addi	r2,r2,32080
 8019e60:	1885883a 	add	r2,r3,r2
 8019e64:	00000106 	br	8019e6c <write+0x40>
 8019e68:	0005883a 	mov	r2,zero
 8019e6c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8019e70:	e0bffb17 	ldw	r2,-20(fp)
 8019e74:	10002126 	beq	r2,zero,8019efc <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8019e78:	e0bffb17 	ldw	r2,-20(fp)
 8019e7c:	10800217 	ldw	r2,8(r2)
 8019e80:	108000cc 	andi	r2,r2,3
 8019e84:	10001826 	beq	r2,zero,8019ee8 <write+0xbc>
 8019e88:	e0bffb17 	ldw	r2,-20(fp)
 8019e8c:	10800017 	ldw	r2,0(r2)
 8019e90:	10800617 	ldw	r2,24(r2)
 8019e94:	10001426 	beq	r2,zero,8019ee8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8019e98:	e0bffb17 	ldw	r2,-20(fp)
 8019e9c:	10800017 	ldw	r2,0(r2)
 8019ea0:	10800617 	ldw	r2,24(r2)
 8019ea4:	e0ffff17 	ldw	r3,-4(fp)
 8019ea8:	e13ffb17 	ldw	r4,-20(fp)
 8019eac:	e17ffe17 	ldw	r5,-8(fp)
 8019eb0:	180d883a 	mov	r6,r3
 8019eb4:	103ee83a 	callr	r2
 8019eb8:	e0bffc15 	stw	r2,-16(fp)
 8019ebc:	e0bffc17 	ldw	r2,-16(fp)
 8019ec0:	1000070e 	bge	r2,zero,8019ee0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 8019ec4:	8019ddc0 	call	8019ddc <alt_get_errno>
 8019ec8:	1007883a 	mov	r3,r2
 8019ecc:	e0bffc17 	ldw	r2,-16(fp)
 8019ed0:	0085c83a 	sub	r2,zero,r2
 8019ed4:	18800015 	stw	r2,0(r3)
        return -1;
 8019ed8:	00bfffc4 	movi	r2,-1
 8019edc:	00000c06 	br	8019f10 <write+0xe4>
      }
      return rval;
 8019ee0:	e0bffc17 	ldw	r2,-16(fp)
 8019ee4:	00000a06 	br	8019f10 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8019ee8:	8019ddc0 	call	8019ddc <alt_get_errno>
 8019eec:	1007883a 	mov	r3,r2
 8019ef0:	00800344 	movi	r2,13
 8019ef4:	18800015 	stw	r2,0(r3)
 8019ef8:	00000406 	br	8019f0c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8019efc:	8019ddc0 	call	8019ddc <alt_get_errno>
 8019f00:	1007883a 	mov	r3,r2
 8019f04:	00801444 	movi	r2,81
 8019f08:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8019f0c:	00bfffc4 	movi	r2,-1
}
 8019f10:	e037883a 	mov	sp,fp
 8019f14:	dfc00117 	ldw	ra,4(sp)
 8019f18:	df000017 	ldw	fp,0(sp)
 8019f1c:	dec00204 	addi	sp,sp,8
 8019f20:	f800283a 	ret

08019f24 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8019f24:	defffd04 	addi	sp,sp,-12
 8019f28:	dfc00215 	stw	ra,8(sp)
 8019f2c:	df000115 	stw	fp,4(sp)
 8019f30:	df000104 	addi	fp,sp,4
 8019f34:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8019f38:	e13fff17 	ldw	r4,-4(fp)
 8019f3c:	014200f4 	movhi	r5,2051
 8019f40:	2963f304 	addi	r5,r5,-28724
 8019f44:	801b2f40 	call	801b2f4 <alt_dev_llist_insert>
}
 8019f48:	e037883a 	mov	sp,fp
 8019f4c:	dfc00117 	ldw	ra,4(sp)
 8019f50:	df000017 	ldw	fp,0(sp)
 8019f54:	dec00204 	addi	sp,sp,8
 8019f58:	f800283a 	ret

08019f5c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8019f5c:	defffd04 	addi	sp,sp,-12
 8019f60:	dfc00215 	stw	ra,8(sp)
 8019f64:	df000115 	stw	fp,4(sp)
 8019f68:	df000104 	addi	fp,sp,4
 8019f6c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 8019f70:	801ba580 	call	801ba58 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8019f74:	00800044 	movi	r2,1
 8019f78:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8019f7c:	e037883a 	mov	sp,fp
 8019f80:	dfc00117 	ldw	ra,4(sp)
 8019f84:	df000017 	ldw	fp,0(sp)
 8019f88:	dec00204 	addi	sp,sp,8
 8019f8c:	f800283a 	ret

08019f90 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8019f90:	defffe04 	addi	sp,sp,-8
 8019f94:	dfc00115 	stw	ra,4(sp)
 8019f98:	df000015 	stw	fp,0(sp)
 8019f9c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 8019fa0:	01082004 	movi	r4,8320
 8019fa4:	000b883a 	mov	r5,zero
 8019fa8:	01800104 	movi	r6,4
 8019fac:	01c0fa04 	movi	r7,1000
 8019fb0:	801aac00 	call	801aac0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8019fb4:	010200b4 	movhi	r4,2050
 8019fb8:	211fbe04 	addi	r4,r4,32504
 8019fbc:	000b883a 	mov	r5,zero
 8019fc0:	01800144 	movi	r6,5
 8019fc4:	801a1640 	call	801a164 <altera_avalon_jtag_uart_init>
 8019fc8:	010200b4 	movhi	r4,2050
 8019fcc:	211fb404 	addi	r4,r4,32464
 8019fd0:	8019f240 	call	8019f24 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 8019fd4:	010200f4 	movhi	r4,2051
 8019fd8:	2123cc04 	addi	r4,r4,-28880
 8019fdc:	801abf80 	call	801abf8 <alt_up_character_lcd_init>
 8019fe0:	010200f4 	movhi	r4,2051
 8019fe4:	2123cc04 	addi	r4,r4,-28880
 8019fe8:	8019f240 	call	8019f24 <alt_dev_reg>
}
 8019fec:	e037883a 	mov	sp,fp
 8019ff0:	dfc00117 	ldw	ra,4(sp)
 8019ff4:	df000017 	ldw	fp,0(sp)
 8019ff8:	dec00204 	addi	sp,sp,8
 8019ffc:	f800283a 	ret

0801a000 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 801a000:	defffa04 	addi	sp,sp,-24
 801a004:	dfc00515 	stw	ra,20(sp)
 801a008:	df000415 	stw	fp,16(sp)
 801a00c:	df000404 	addi	fp,sp,16
 801a010:	e13ffd15 	stw	r4,-12(fp)
 801a014:	e17ffe15 	stw	r5,-8(fp)
 801a018:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 801a01c:	e0bffd17 	ldw	r2,-12(fp)
 801a020:	10800017 	ldw	r2,0(r2)
 801a024:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 801a028:	e0bffc17 	ldw	r2,-16(fp)
 801a02c:	10c00a04 	addi	r3,r2,40
 801a030:	e0bffd17 	ldw	r2,-12(fp)
 801a034:	10800217 	ldw	r2,8(r2)
 801a038:	1809883a 	mov	r4,r3
 801a03c:	e17ffe17 	ldw	r5,-8(fp)
 801a040:	e1bfff17 	ldw	r6,-4(fp)
 801a044:	100f883a 	mov	r7,r2
 801a048:	801a6280 	call	801a628 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 801a04c:	e037883a 	mov	sp,fp
 801a050:	dfc00117 	ldw	ra,4(sp)
 801a054:	df000017 	ldw	fp,0(sp)
 801a058:	dec00204 	addi	sp,sp,8
 801a05c:	f800283a 	ret

0801a060 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 801a060:	defffa04 	addi	sp,sp,-24
 801a064:	dfc00515 	stw	ra,20(sp)
 801a068:	df000415 	stw	fp,16(sp)
 801a06c:	df000404 	addi	fp,sp,16
 801a070:	e13ffd15 	stw	r4,-12(fp)
 801a074:	e17ffe15 	stw	r5,-8(fp)
 801a078:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 801a07c:	e0bffd17 	ldw	r2,-12(fp)
 801a080:	10800017 	ldw	r2,0(r2)
 801a084:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 801a088:	e0bffc17 	ldw	r2,-16(fp)
 801a08c:	10c00a04 	addi	r3,r2,40
 801a090:	e0bffd17 	ldw	r2,-12(fp)
 801a094:	10800217 	ldw	r2,8(r2)
 801a098:	1809883a 	mov	r4,r3
 801a09c:	e17ffe17 	ldw	r5,-8(fp)
 801a0a0:	e1bfff17 	ldw	r6,-4(fp)
 801a0a4:	100f883a 	mov	r7,r2
 801a0a8:	801a8340 	call	801a834 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 801a0ac:	e037883a 	mov	sp,fp
 801a0b0:	dfc00117 	ldw	ra,4(sp)
 801a0b4:	df000017 	ldw	fp,0(sp)
 801a0b8:	dec00204 	addi	sp,sp,8
 801a0bc:	f800283a 	ret

0801a0c0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 801a0c0:	defffc04 	addi	sp,sp,-16
 801a0c4:	dfc00315 	stw	ra,12(sp)
 801a0c8:	df000215 	stw	fp,8(sp)
 801a0cc:	df000204 	addi	fp,sp,8
 801a0d0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 801a0d4:	e0bfff17 	ldw	r2,-4(fp)
 801a0d8:	10800017 	ldw	r2,0(r2)
 801a0dc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 801a0e0:	e0bffe17 	ldw	r2,-8(fp)
 801a0e4:	10c00a04 	addi	r3,r2,40
 801a0e8:	e0bfff17 	ldw	r2,-4(fp)
 801a0ec:	10800217 	ldw	r2,8(r2)
 801a0f0:	1809883a 	mov	r4,r3
 801a0f4:	100b883a 	mov	r5,r2
 801a0f8:	801a4d40 	call	801a4d4 <altera_avalon_jtag_uart_close>
}
 801a0fc:	e037883a 	mov	sp,fp
 801a100:	dfc00117 	ldw	ra,4(sp)
 801a104:	df000017 	ldw	fp,0(sp)
 801a108:	dec00204 	addi	sp,sp,8
 801a10c:	f800283a 	ret

0801a110 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 801a110:	defffa04 	addi	sp,sp,-24
 801a114:	dfc00515 	stw	ra,20(sp)
 801a118:	df000415 	stw	fp,16(sp)
 801a11c:	df000404 	addi	fp,sp,16
 801a120:	e13ffd15 	stw	r4,-12(fp)
 801a124:	e17ffe15 	stw	r5,-8(fp)
 801a128:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 801a12c:	e0bffd17 	ldw	r2,-12(fp)
 801a130:	10800017 	ldw	r2,0(r2)
 801a134:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 801a138:	e0bffc17 	ldw	r2,-16(fp)
 801a13c:	10800a04 	addi	r2,r2,40
 801a140:	1009883a 	mov	r4,r2
 801a144:	e17ffe17 	ldw	r5,-8(fp)
 801a148:	e1bfff17 	ldw	r6,-4(fp)
 801a14c:	801a53c0 	call	801a53c <altera_avalon_jtag_uart_ioctl>
}
 801a150:	e037883a 	mov	sp,fp
 801a154:	dfc00117 	ldw	ra,4(sp)
 801a158:	df000017 	ldw	fp,0(sp)
 801a15c:	dec00204 	addi	sp,sp,8
 801a160:	f800283a 	ret

0801a164 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 801a164:	defffa04 	addi	sp,sp,-24
 801a168:	dfc00515 	stw	ra,20(sp)
 801a16c:	df000415 	stw	fp,16(sp)
 801a170:	df000404 	addi	fp,sp,16
 801a174:	e13ffd15 	stw	r4,-12(fp)
 801a178:	e17ffe15 	stw	r5,-8(fp)
 801a17c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 801a180:	e0bffd17 	ldw	r2,-12(fp)
 801a184:	00c00044 	movi	r3,1
 801a188:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 801a18c:	e0bffd17 	ldw	r2,-12(fp)
 801a190:	10800017 	ldw	r2,0(r2)
 801a194:	10800104 	addi	r2,r2,4
 801a198:	1007883a 	mov	r3,r2
 801a19c:	e0bffd17 	ldw	r2,-12(fp)
 801a1a0:	10800817 	ldw	r2,32(r2)
 801a1a4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 801a1a8:	e0fffe17 	ldw	r3,-8(fp)
 801a1ac:	e0bfff17 	ldw	r2,-4(fp)
 801a1b0:	d8000015 	stw	zero,0(sp)
 801a1b4:	1809883a 	mov	r4,r3
 801a1b8:	100b883a 	mov	r5,r2
 801a1bc:	018200b4 	movhi	r6,2050
 801a1c0:	31a88a04 	addi	r6,r6,-24024
 801a1c4:	e1fffd17 	ldw	r7,-12(fp)
 801a1c8:	801934c0 	call	801934c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 801a1cc:	e0bffd17 	ldw	r2,-12(fp)
 801a1d0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 801a1d4:	e0bffd17 	ldw	r2,-12(fp)
 801a1d8:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 801a1dc:	008200f4 	movhi	r2,2051
 801a1e0:	10ab0204 	addi	r2,r2,-21496
 801a1e4:	10800017 	ldw	r2,0(r2)
 801a1e8:	1809883a 	mov	r4,r3
 801a1ec:	100b883a 	mov	r5,r2
 801a1f0:	018200b4 	movhi	r6,2050
 801a1f4:	31a90b04 	addi	r6,r6,-23508
 801a1f8:	e1fffd17 	ldw	r7,-12(fp)
 801a1fc:	801b0200 	call	801b020 <alt_alarm_start>
 801a200:	1000040e 	bge	r2,zero,801a214 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 801a204:	e0fffd17 	ldw	r3,-12(fp)
 801a208:	00a00034 	movhi	r2,32768
 801a20c:	10bfffc4 	addi	r2,r2,-1
 801a210:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 801a214:	e037883a 	mov	sp,fp
 801a218:	dfc00117 	ldw	ra,4(sp)
 801a21c:	df000017 	ldw	fp,0(sp)
 801a220:	dec00204 	addi	sp,sp,8
 801a224:	f800283a 	ret

0801a228 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 801a228:	defff804 	addi	sp,sp,-32
 801a22c:	df000715 	stw	fp,28(sp)
 801a230:	df000704 	addi	fp,sp,28
 801a234:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 801a238:	e0bfff17 	ldw	r2,-4(fp)
 801a23c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 801a240:	e0bffb17 	ldw	r2,-20(fp)
 801a244:	10800017 	ldw	r2,0(r2)
 801a248:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 801a24c:	e0bffc17 	ldw	r2,-16(fp)
 801a250:	10800104 	addi	r2,r2,4
 801a254:	10800037 	ldwio	r2,0(r2)
 801a258:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 801a25c:	e0bffd17 	ldw	r2,-12(fp)
 801a260:	1080c00c 	andi	r2,r2,768
 801a264:	1000011e 	bne	r2,zero,801a26c <altera_avalon_jtag_uart_irq+0x44>
      break;
 801a268:	00006c06 	br	801a41c <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 801a26c:	e0bffd17 	ldw	r2,-12(fp)
 801a270:	1080400c 	andi	r2,r2,256
 801a274:	10003426 	beq	r2,zero,801a348 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 801a278:	00800074 	movhi	r2,1
 801a27c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801a280:	e0bffb17 	ldw	r2,-20(fp)
 801a284:	10800a17 	ldw	r2,40(r2)
 801a288:	10800044 	addi	r2,r2,1
 801a28c:	1081ffcc 	andi	r2,r2,2047
 801a290:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 801a294:	e0bffb17 	ldw	r2,-20(fp)
 801a298:	10c00b17 	ldw	r3,44(r2)
 801a29c:	e0bffe17 	ldw	r2,-8(fp)
 801a2a0:	1880011e 	bne	r3,r2,801a2a8 <altera_avalon_jtag_uart_irq+0x80>
          break;
 801a2a4:	00001606 	br	801a300 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 801a2a8:	e0bffc17 	ldw	r2,-16(fp)
 801a2ac:	10800037 	ldwio	r2,0(r2)
 801a2b0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 801a2b4:	e0bff917 	ldw	r2,-28(fp)
 801a2b8:	10a0000c 	andi	r2,r2,32768
 801a2bc:	1000011e 	bne	r2,zero,801a2c4 <altera_avalon_jtag_uart_irq+0x9c>
          break;
 801a2c0:	00000f06 	br	801a300 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 801a2c4:	e0bffb17 	ldw	r2,-20(fp)
 801a2c8:	10800a17 	ldw	r2,40(r2)
 801a2cc:	e0fff917 	ldw	r3,-28(fp)
 801a2d0:	1809883a 	mov	r4,r3
 801a2d4:	e0fffb17 	ldw	r3,-20(fp)
 801a2d8:	1885883a 	add	r2,r3,r2
 801a2dc:	10800e04 	addi	r2,r2,56
 801a2e0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801a2e4:	e0bffb17 	ldw	r2,-20(fp)
 801a2e8:	10800a17 	ldw	r2,40(r2)
 801a2ec:	10800044 	addi	r2,r2,1
 801a2f0:	10c1ffcc 	andi	r3,r2,2047
 801a2f4:	e0bffb17 	ldw	r2,-20(fp)
 801a2f8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 801a2fc:	003fe006 	br	801a280 <__alt_data_end+0xfc01a280>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 801a300:	e0bff917 	ldw	r2,-28(fp)
 801a304:	10bfffec 	andhi	r2,r2,65535
 801a308:	10000f26 	beq	r2,zero,801a348 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 801a30c:	e0bffb17 	ldw	r2,-20(fp)
 801a310:	10c00817 	ldw	r3,32(r2)
 801a314:	00bfff84 	movi	r2,-2
 801a318:	1886703a 	and	r3,r3,r2
 801a31c:	e0bffb17 	ldw	r2,-20(fp)
 801a320:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 801a324:	e0bffc17 	ldw	r2,-16(fp)
 801a328:	10800104 	addi	r2,r2,4
 801a32c:	1007883a 	mov	r3,r2
 801a330:	e0bffb17 	ldw	r2,-20(fp)
 801a334:	10800817 	ldw	r2,32(r2)
 801a338:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 801a33c:	e0bffc17 	ldw	r2,-16(fp)
 801a340:	10800104 	addi	r2,r2,4
 801a344:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 801a348:	e0bffd17 	ldw	r2,-12(fp)
 801a34c:	1080800c 	andi	r2,r2,512
 801a350:	10003126 	beq	r2,zero,801a418 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 801a354:	e0bffd17 	ldw	r2,-12(fp)
 801a358:	1004d43a 	srli	r2,r2,16
 801a35c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 801a360:	00001406 	br	801a3b4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 801a364:	e0bffc17 	ldw	r2,-16(fp)
 801a368:	e0fffb17 	ldw	r3,-20(fp)
 801a36c:	18c00d17 	ldw	r3,52(r3)
 801a370:	e13ffb17 	ldw	r4,-20(fp)
 801a374:	20c7883a 	add	r3,r4,r3
 801a378:	18c20e04 	addi	r3,r3,2104
 801a37c:	18c00003 	ldbu	r3,0(r3)
 801a380:	18c03fcc 	andi	r3,r3,255
 801a384:	18c0201c 	xori	r3,r3,128
 801a388:	18ffe004 	addi	r3,r3,-128
 801a38c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801a390:	e0bffb17 	ldw	r2,-20(fp)
 801a394:	10800d17 	ldw	r2,52(r2)
 801a398:	10800044 	addi	r2,r2,1
 801a39c:	10c1ffcc 	andi	r3,r2,2047
 801a3a0:	e0bffb17 	ldw	r2,-20(fp)
 801a3a4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 801a3a8:	e0bffa17 	ldw	r2,-24(fp)
 801a3ac:	10bfffc4 	addi	r2,r2,-1
 801a3b0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 801a3b4:	e0bffa17 	ldw	r2,-24(fp)
 801a3b8:	10000526 	beq	r2,zero,801a3d0 <altera_avalon_jtag_uart_irq+0x1a8>
 801a3bc:	e0bffb17 	ldw	r2,-20(fp)
 801a3c0:	10c00d17 	ldw	r3,52(r2)
 801a3c4:	e0bffb17 	ldw	r2,-20(fp)
 801a3c8:	10800c17 	ldw	r2,48(r2)
 801a3cc:	18bfe51e 	bne	r3,r2,801a364 <__alt_data_end+0xfc01a364>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 801a3d0:	e0bffa17 	ldw	r2,-24(fp)
 801a3d4:	10001026 	beq	r2,zero,801a418 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 801a3d8:	e0bffb17 	ldw	r2,-20(fp)
 801a3dc:	10c00817 	ldw	r3,32(r2)
 801a3e0:	00bfff44 	movi	r2,-3
 801a3e4:	1886703a 	and	r3,r3,r2
 801a3e8:	e0bffb17 	ldw	r2,-20(fp)
 801a3ec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 801a3f0:	e0bffb17 	ldw	r2,-20(fp)
 801a3f4:	10800017 	ldw	r2,0(r2)
 801a3f8:	10800104 	addi	r2,r2,4
 801a3fc:	1007883a 	mov	r3,r2
 801a400:	e0bffb17 	ldw	r2,-20(fp)
 801a404:	10800817 	ldw	r2,32(r2)
 801a408:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 801a40c:	e0bffc17 	ldw	r2,-16(fp)
 801a410:	10800104 	addi	r2,r2,4
 801a414:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 801a418:	003f8c06 	br	801a24c <__alt_data_end+0xfc01a24c>
}
 801a41c:	e037883a 	mov	sp,fp
 801a420:	df000017 	ldw	fp,0(sp)
 801a424:	dec00104 	addi	sp,sp,4
 801a428:	f800283a 	ret

0801a42c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 801a42c:	defff804 	addi	sp,sp,-32
 801a430:	df000715 	stw	fp,28(sp)
 801a434:	df000704 	addi	fp,sp,28
 801a438:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 801a43c:	e0bffb17 	ldw	r2,-20(fp)
 801a440:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 801a444:	e0bff917 	ldw	r2,-28(fp)
 801a448:	10800017 	ldw	r2,0(r2)
 801a44c:	10800104 	addi	r2,r2,4
 801a450:	10800037 	ldwio	r2,0(r2)
 801a454:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 801a458:	e0bffa17 	ldw	r2,-24(fp)
 801a45c:	1081000c 	andi	r2,r2,1024
 801a460:	10000b26 	beq	r2,zero,801a490 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 801a464:	e0bff917 	ldw	r2,-28(fp)
 801a468:	10800017 	ldw	r2,0(r2)
 801a46c:	10800104 	addi	r2,r2,4
 801a470:	1007883a 	mov	r3,r2
 801a474:	e0bff917 	ldw	r2,-28(fp)
 801a478:	10800817 	ldw	r2,32(r2)
 801a47c:	10810014 	ori	r2,r2,1024
 801a480:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 801a484:	e0bff917 	ldw	r2,-28(fp)
 801a488:	10000915 	stw	zero,36(r2)
 801a48c:	00000a06 	br	801a4b8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 801a490:	e0bff917 	ldw	r2,-28(fp)
 801a494:	10c00917 	ldw	r3,36(r2)
 801a498:	00a00034 	movhi	r2,32768
 801a49c:	10bfff04 	addi	r2,r2,-4
 801a4a0:	10c00536 	bltu	r2,r3,801a4b8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 801a4a4:	e0bff917 	ldw	r2,-28(fp)
 801a4a8:	10800917 	ldw	r2,36(r2)
 801a4ac:	10c00044 	addi	r3,r2,1
 801a4b0:	e0bff917 	ldw	r2,-28(fp)
 801a4b4:	10c00915 	stw	r3,36(r2)
 801a4b8:	008200f4 	movhi	r2,2051
 801a4bc:	10ab0204 	addi	r2,r2,-21496
 801a4c0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 801a4c4:	e037883a 	mov	sp,fp
 801a4c8:	df000017 	ldw	fp,0(sp)
 801a4cc:	dec00104 	addi	sp,sp,4
 801a4d0:	f800283a 	ret

0801a4d4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 801a4d4:	defffd04 	addi	sp,sp,-12
 801a4d8:	df000215 	stw	fp,8(sp)
 801a4dc:	df000204 	addi	fp,sp,8
 801a4e0:	e13ffe15 	stw	r4,-8(fp)
 801a4e4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 801a4e8:	00000506 	br	801a500 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 801a4ec:	e0bfff17 	ldw	r2,-4(fp)
 801a4f0:	1090000c 	andi	r2,r2,16384
 801a4f4:	10000226 	beq	r2,zero,801a500 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 801a4f8:	00bffd44 	movi	r2,-11
 801a4fc:	00000b06 	br	801a52c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 801a500:	e0bffe17 	ldw	r2,-8(fp)
 801a504:	10c00d17 	ldw	r3,52(r2)
 801a508:	e0bffe17 	ldw	r2,-8(fp)
 801a50c:	10800c17 	ldw	r2,48(r2)
 801a510:	18800526 	beq	r3,r2,801a528 <altera_avalon_jtag_uart_close+0x54>
 801a514:	e0bffe17 	ldw	r2,-8(fp)
 801a518:	10c00917 	ldw	r3,36(r2)
 801a51c:	e0bffe17 	ldw	r2,-8(fp)
 801a520:	10800117 	ldw	r2,4(r2)
 801a524:	18bff136 	bltu	r3,r2,801a4ec <__alt_data_end+0xfc01a4ec>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 801a528:	0005883a 	mov	r2,zero
}
 801a52c:	e037883a 	mov	sp,fp
 801a530:	df000017 	ldw	fp,0(sp)
 801a534:	dec00104 	addi	sp,sp,4
 801a538:	f800283a 	ret

0801a53c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 801a53c:	defffa04 	addi	sp,sp,-24
 801a540:	df000515 	stw	fp,20(sp)
 801a544:	df000504 	addi	fp,sp,20
 801a548:	e13ffd15 	stw	r4,-12(fp)
 801a54c:	e17ffe15 	stw	r5,-8(fp)
 801a550:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 801a554:	00bff9c4 	movi	r2,-25
 801a558:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 801a55c:	e0bffe17 	ldw	r2,-8(fp)
 801a560:	10da8060 	cmpeqi	r3,r2,27137
 801a564:	1800031e 	bne	r3,zero,801a574 <altera_avalon_jtag_uart_ioctl+0x38>
 801a568:	109a80a0 	cmpeqi	r2,r2,27138
 801a56c:	1000191e 	bne	r2,zero,801a5d4 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 801a570:	00002806 	br	801a614 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 801a574:	e0bffd17 	ldw	r2,-12(fp)
 801a578:	10c00117 	ldw	r3,4(r2)
 801a57c:	00a00034 	movhi	r2,32768
 801a580:	10bfffc4 	addi	r2,r2,-1
 801a584:	18801226 	beq	r3,r2,801a5d0 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 801a588:	e0bfff17 	ldw	r2,-4(fp)
 801a58c:	10800017 	ldw	r2,0(r2)
 801a590:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 801a594:	e0bffc17 	ldw	r2,-16(fp)
 801a598:	10800090 	cmplti	r2,r2,2
 801a59c:	1000061e 	bne	r2,zero,801a5b8 <altera_avalon_jtag_uart_ioctl+0x7c>
 801a5a0:	e0fffc17 	ldw	r3,-16(fp)
 801a5a4:	00a00034 	movhi	r2,32768
 801a5a8:	10bfffc4 	addi	r2,r2,-1
 801a5ac:	18800226 	beq	r3,r2,801a5b8 <altera_avalon_jtag_uart_ioctl+0x7c>
 801a5b0:	e0bffc17 	ldw	r2,-16(fp)
 801a5b4:	00000206 	br	801a5c0 <altera_avalon_jtag_uart_ioctl+0x84>
 801a5b8:	00a00034 	movhi	r2,32768
 801a5bc:	10bfff84 	addi	r2,r2,-2
 801a5c0:	e0fffd17 	ldw	r3,-12(fp)
 801a5c4:	18800115 	stw	r2,4(r3)
      rc = 0;
 801a5c8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 801a5cc:	00001106 	br	801a614 <altera_avalon_jtag_uart_ioctl+0xd8>
 801a5d0:	00001006 	br	801a614 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 801a5d4:	e0bffd17 	ldw	r2,-12(fp)
 801a5d8:	10c00117 	ldw	r3,4(r2)
 801a5dc:	00a00034 	movhi	r2,32768
 801a5e0:	10bfffc4 	addi	r2,r2,-1
 801a5e4:	18800a26 	beq	r3,r2,801a610 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 801a5e8:	e0bffd17 	ldw	r2,-12(fp)
 801a5ec:	10c00917 	ldw	r3,36(r2)
 801a5f0:	e0bffd17 	ldw	r2,-12(fp)
 801a5f4:	10800117 	ldw	r2,4(r2)
 801a5f8:	1885803a 	cmpltu	r2,r3,r2
 801a5fc:	10c03fcc 	andi	r3,r2,255
 801a600:	e0bfff17 	ldw	r2,-4(fp)
 801a604:	10c00015 	stw	r3,0(r2)
      rc = 0;
 801a608:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 801a60c:	00000006 	br	801a610 <altera_avalon_jtag_uart_ioctl+0xd4>
 801a610:	0001883a 	nop

  default:
    break;
  }

  return rc;
 801a614:	e0bffb17 	ldw	r2,-20(fp)
}
 801a618:	e037883a 	mov	sp,fp
 801a61c:	df000017 	ldw	fp,0(sp)
 801a620:	dec00104 	addi	sp,sp,4
 801a624:	f800283a 	ret

0801a628 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 801a628:	defff304 	addi	sp,sp,-52
 801a62c:	dfc00c15 	stw	ra,48(sp)
 801a630:	df000b15 	stw	fp,44(sp)
 801a634:	df000b04 	addi	fp,sp,44
 801a638:	e13ffc15 	stw	r4,-16(fp)
 801a63c:	e17ffd15 	stw	r5,-12(fp)
 801a640:	e1bffe15 	stw	r6,-8(fp)
 801a644:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 801a648:	e0bffd17 	ldw	r2,-12(fp)
 801a64c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 801a650:	00004906 	br	801a778 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 801a654:	e0bffc17 	ldw	r2,-16(fp)
 801a658:	10800a17 	ldw	r2,40(r2)
 801a65c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 801a660:	e0bffc17 	ldw	r2,-16(fp)
 801a664:	10800b17 	ldw	r2,44(r2)
 801a668:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 801a66c:	e0fff717 	ldw	r3,-36(fp)
 801a670:	e0bff817 	ldw	r2,-32(fp)
 801a674:	18800536 	bltu	r3,r2,801a68c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 801a678:	e0fff717 	ldw	r3,-36(fp)
 801a67c:	e0bff817 	ldw	r2,-32(fp)
 801a680:	1885c83a 	sub	r2,r3,r2
 801a684:	e0bff615 	stw	r2,-40(fp)
 801a688:	00000406 	br	801a69c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 801a68c:	00c20004 	movi	r3,2048
 801a690:	e0bff817 	ldw	r2,-32(fp)
 801a694:	1885c83a 	sub	r2,r3,r2
 801a698:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 801a69c:	e0bff617 	ldw	r2,-40(fp)
 801a6a0:	1000011e 	bne	r2,zero,801a6a8 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 801a6a4:	00001d06 	br	801a71c <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 801a6a8:	e0fffe17 	ldw	r3,-8(fp)
 801a6ac:	e0bff617 	ldw	r2,-40(fp)
 801a6b0:	1880022e 	bgeu	r3,r2,801a6bc <altera_avalon_jtag_uart_read+0x94>
        n = space;
 801a6b4:	e0bffe17 	ldw	r2,-8(fp)
 801a6b8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 801a6bc:	e0bff817 	ldw	r2,-32(fp)
 801a6c0:	10800e04 	addi	r2,r2,56
 801a6c4:	e0fffc17 	ldw	r3,-16(fp)
 801a6c8:	1885883a 	add	r2,r3,r2
 801a6cc:	e13ff517 	ldw	r4,-44(fp)
 801a6d0:	100b883a 	mov	r5,r2
 801a6d4:	e1bff617 	ldw	r6,-40(fp)
 801a6d8:	800c5000 	call	800c500 <memcpy>
      ptr   += n;
 801a6dc:	e0fff517 	ldw	r3,-44(fp)
 801a6e0:	e0bff617 	ldw	r2,-40(fp)
 801a6e4:	1885883a 	add	r2,r3,r2
 801a6e8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 801a6ec:	e0fffe17 	ldw	r3,-8(fp)
 801a6f0:	e0bff617 	ldw	r2,-40(fp)
 801a6f4:	1885c83a 	sub	r2,r3,r2
 801a6f8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801a6fc:	e0fff817 	ldw	r3,-32(fp)
 801a700:	e0bff617 	ldw	r2,-40(fp)
 801a704:	1885883a 	add	r2,r3,r2
 801a708:	10c1ffcc 	andi	r3,r2,2047
 801a70c:	e0bffc17 	ldw	r2,-16(fp)
 801a710:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 801a714:	e0bffe17 	ldw	r2,-8(fp)
 801a718:	00bfce16 	blt	zero,r2,801a654 <__alt_data_end+0xfc01a654>

    /* If we read any data then return it */
    if (ptr != buffer)
 801a71c:	e0fff517 	ldw	r3,-44(fp)
 801a720:	e0bffd17 	ldw	r2,-12(fp)
 801a724:	18800126 	beq	r3,r2,801a72c <altera_avalon_jtag_uart_read+0x104>
      break;
 801a728:	00001506 	br	801a780 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 801a72c:	e0bfff17 	ldw	r2,-4(fp)
 801a730:	1090000c 	andi	r2,r2,16384
 801a734:	10000126 	beq	r2,zero,801a73c <altera_avalon_jtag_uart_read+0x114>
      break;
 801a738:	00001106 	br	801a780 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 801a73c:	0001883a 	nop
 801a740:	e0bffc17 	ldw	r2,-16(fp)
 801a744:	10c00a17 	ldw	r3,40(r2)
 801a748:	e0bff717 	ldw	r2,-36(fp)
 801a74c:	1880051e 	bne	r3,r2,801a764 <altera_avalon_jtag_uart_read+0x13c>
 801a750:	e0bffc17 	ldw	r2,-16(fp)
 801a754:	10c00917 	ldw	r3,36(r2)
 801a758:	e0bffc17 	ldw	r2,-16(fp)
 801a75c:	10800117 	ldw	r2,4(r2)
 801a760:	18bff736 	bltu	r3,r2,801a740 <__alt_data_end+0xfc01a740>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 801a764:	e0bffc17 	ldw	r2,-16(fp)
 801a768:	10c00a17 	ldw	r3,40(r2)
 801a76c:	e0bff717 	ldw	r2,-36(fp)
 801a770:	1880011e 	bne	r3,r2,801a778 <altera_avalon_jtag_uart_read+0x150>
      break;
 801a774:	00000206 	br	801a780 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 801a778:	e0bffe17 	ldw	r2,-8(fp)
 801a77c:	00bfb516 	blt	zero,r2,801a654 <__alt_data_end+0xfc01a654>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 801a780:	e0fff517 	ldw	r3,-44(fp)
 801a784:	e0bffd17 	ldw	r2,-12(fp)
 801a788:	18801826 	beq	r3,r2,801a7ec <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801a78c:	0005303a 	rdctl	r2,status
 801a790:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801a794:	e0fffa17 	ldw	r3,-24(fp)
 801a798:	00bfff84 	movi	r2,-2
 801a79c:	1884703a 	and	r2,r3,r2
 801a7a0:	1001703a 	wrctl	status,r2
  
  return context;
 801a7a4:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 801a7a8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 801a7ac:	e0bffc17 	ldw	r2,-16(fp)
 801a7b0:	10800817 	ldw	r2,32(r2)
 801a7b4:	10c00054 	ori	r3,r2,1
 801a7b8:	e0bffc17 	ldw	r2,-16(fp)
 801a7bc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 801a7c0:	e0bffc17 	ldw	r2,-16(fp)
 801a7c4:	10800017 	ldw	r2,0(r2)
 801a7c8:	10800104 	addi	r2,r2,4
 801a7cc:	1007883a 	mov	r3,r2
 801a7d0:	e0bffc17 	ldw	r2,-16(fp)
 801a7d4:	10800817 	ldw	r2,32(r2)
 801a7d8:	18800035 	stwio	r2,0(r3)
 801a7dc:	e0bff917 	ldw	r2,-28(fp)
 801a7e0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801a7e4:	e0bffb17 	ldw	r2,-20(fp)
 801a7e8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 801a7ec:	e0fff517 	ldw	r3,-44(fp)
 801a7f0:	e0bffd17 	ldw	r2,-12(fp)
 801a7f4:	18800426 	beq	r3,r2,801a808 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 801a7f8:	e0fff517 	ldw	r3,-44(fp)
 801a7fc:	e0bffd17 	ldw	r2,-12(fp)
 801a800:	1885c83a 	sub	r2,r3,r2
 801a804:	00000606 	br	801a820 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 801a808:	e0bfff17 	ldw	r2,-4(fp)
 801a80c:	1090000c 	andi	r2,r2,16384
 801a810:	10000226 	beq	r2,zero,801a81c <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 801a814:	00bffd44 	movi	r2,-11
 801a818:	00000106 	br	801a820 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 801a81c:	00bffec4 	movi	r2,-5
}
 801a820:	e037883a 	mov	sp,fp
 801a824:	dfc00117 	ldw	ra,4(sp)
 801a828:	df000017 	ldw	fp,0(sp)
 801a82c:	dec00204 	addi	sp,sp,8
 801a830:	f800283a 	ret

0801a834 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 801a834:	defff304 	addi	sp,sp,-52
 801a838:	dfc00c15 	stw	ra,48(sp)
 801a83c:	df000b15 	stw	fp,44(sp)
 801a840:	df000b04 	addi	fp,sp,44
 801a844:	e13ffc15 	stw	r4,-16(fp)
 801a848:	e17ffd15 	stw	r5,-12(fp)
 801a84c:	e1bffe15 	stw	r6,-8(fp)
 801a850:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 801a854:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 801a858:	e0bffd17 	ldw	r2,-12(fp)
 801a85c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 801a860:	00003806 	br	801a944 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 801a864:	e0bffc17 	ldw	r2,-16(fp)
 801a868:	10800c17 	ldw	r2,48(r2)
 801a86c:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 801a870:	e0bffc17 	ldw	r2,-16(fp)
 801a874:	10800d17 	ldw	r2,52(r2)
 801a878:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 801a87c:	e0fff817 	ldw	r3,-32(fp)
 801a880:	e0bff517 	ldw	r2,-44(fp)
 801a884:	1880062e 	bgeu	r3,r2,801a8a0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 801a888:	e0fff517 	ldw	r3,-44(fp)
 801a88c:	e0bff817 	ldw	r2,-32(fp)
 801a890:	1885c83a 	sub	r2,r3,r2
 801a894:	10bfffc4 	addi	r2,r2,-1
 801a898:	e0bff615 	stw	r2,-40(fp)
 801a89c:	00000b06 	br	801a8cc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 801a8a0:	e0bff517 	ldw	r2,-44(fp)
 801a8a4:	10000526 	beq	r2,zero,801a8bc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 801a8a8:	00c20004 	movi	r3,2048
 801a8ac:	e0bff817 	ldw	r2,-32(fp)
 801a8b0:	1885c83a 	sub	r2,r3,r2
 801a8b4:	e0bff615 	stw	r2,-40(fp)
 801a8b8:	00000406 	br	801a8cc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 801a8bc:	00c1ffc4 	movi	r3,2047
 801a8c0:	e0bff817 	ldw	r2,-32(fp)
 801a8c4:	1885c83a 	sub	r2,r3,r2
 801a8c8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 801a8cc:	e0bff617 	ldw	r2,-40(fp)
 801a8d0:	1000011e 	bne	r2,zero,801a8d8 <altera_avalon_jtag_uart_write+0xa4>
        break;
 801a8d4:	00001d06 	br	801a94c <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 801a8d8:	e0fffe17 	ldw	r3,-8(fp)
 801a8dc:	e0bff617 	ldw	r2,-40(fp)
 801a8e0:	1880022e 	bgeu	r3,r2,801a8ec <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 801a8e4:	e0bffe17 	ldw	r2,-8(fp)
 801a8e8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 801a8ec:	e0bff817 	ldw	r2,-32(fp)
 801a8f0:	10820e04 	addi	r2,r2,2104
 801a8f4:	e0fffc17 	ldw	r3,-16(fp)
 801a8f8:	1885883a 	add	r2,r3,r2
 801a8fc:	1009883a 	mov	r4,r2
 801a900:	e17ffd17 	ldw	r5,-12(fp)
 801a904:	e1bff617 	ldw	r6,-40(fp)
 801a908:	800c5000 	call	800c500 <memcpy>
      ptr   += n;
 801a90c:	e0fffd17 	ldw	r3,-12(fp)
 801a910:	e0bff617 	ldw	r2,-40(fp)
 801a914:	1885883a 	add	r2,r3,r2
 801a918:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 801a91c:	e0fffe17 	ldw	r3,-8(fp)
 801a920:	e0bff617 	ldw	r2,-40(fp)
 801a924:	1885c83a 	sub	r2,r3,r2
 801a928:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801a92c:	e0fff817 	ldw	r3,-32(fp)
 801a930:	e0bff617 	ldw	r2,-40(fp)
 801a934:	1885883a 	add	r2,r3,r2
 801a938:	10c1ffcc 	andi	r3,r2,2047
 801a93c:	e0bffc17 	ldw	r2,-16(fp)
 801a940:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 801a944:	e0bffe17 	ldw	r2,-8(fp)
 801a948:	00bfc616 	blt	zero,r2,801a864 <__alt_data_end+0xfc01a864>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801a94c:	0005303a 	rdctl	r2,status
 801a950:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801a954:	e0fffa17 	ldw	r3,-24(fp)
 801a958:	00bfff84 	movi	r2,-2
 801a95c:	1884703a 	and	r2,r3,r2
 801a960:	1001703a 	wrctl	status,r2
  
  return context;
 801a964:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 801a968:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 801a96c:	e0bffc17 	ldw	r2,-16(fp)
 801a970:	10800817 	ldw	r2,32(r2)
 801a974:	10c00094 	ori	r3,r2,2
 801a978:	e0bffc17 	ldw	r2,-16(fp)
 801a97c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 801a980:	e0bffc17 	ldw	r2,-16(fp)
 801a984:	10800017 	ldw	r2,0(r2)
 801a988:	10800104 	addi	r2,r2,4
 801a98c:	1007883a 	mov	r3,r2
 801a990:	e0bffc17 	ldw	r2,-16(fp)
 801a994:	10800817 	ldw	r2,32(r2)
 801a998:	18800035 	stwio	r2,0(r3)
 801a99c:	e0bff917 	ldw	r2,-28(fp)
 801a9a0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801a9a4:	e0bffb17 	ldw	r2,-20(fp)
 801a9a8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 801a9ac:	e0bffe17 	ldw	r2,-8(fp)
 801a9b0:	0080120e 	bge	zero,r2,801a9fc <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 801a9b4:	e0bfff17 	ldw	r2,-4(fp)
 801a9b8:	1090000c 	andi	r2,r2,16384
 801a9bc:	10000126 	beq	r2,zero,801a9c4 <altera_avalon_jtag_uart_write+0x190>
        break;
 801a9c0:	00001006 	br	801aa04 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 801a9c4:	0001883a 	nop
 801a9c8:	e0bffc17 	ldw	r2,-16(fp)
 801a9cc:	10c00d17 	ldw	r3,52(r2)
 801a9d0:	e0bff517 	ldw	r2,-44(fp)
 801a9d4:	1880051e 	bne	r3,r2,801a9ec <altera_avalon_jtag_uart_write+0x1b8>
 801a9d8:	e0bffc17 	ldw	r2,-16(fp)
 801a9dc:	10c00917 	ldw	r3,36(r2)
 801a9e0:	e0bffc17 	ldw	r2,-16(fp)
 801a9e4:	10800117 	ldw	r2,4(r2)
 801a9e8:	18bff736 	bltu	r3,r2,801a9c8 <__alt_data_end+0xfc01a9c8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 801a9ec:	e0bffc17 	ldw	r2,-16(fp)
 801a9f0:	10800917 	ldw	r2,36(r2)
 801a9f4:	10000126 	beq	r2,zero,801a9fc <altera_avalon_jtag_uart_write+0x1c8>
         break;
 801a9f8:	00000206 	br	801aa04 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 801a9fc:	e0bffe17 	ldw	r2,-8(fp)
 801aa00:	00bf9716 	blt	zero,r2,801a860 <__alt_data_end+0xfc01a860>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 801aa04:	e0fffd17 	ldw	r3,-12(fp)
 801aa08:	e0bff717 	ldw	r2,-36(fp)
 801aa0c:	18800426 	beq	r3,r2,801aa20 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 801aa10:	e0fffd17 	ldw	r3,-12(fp)
 801aa14:	e0bff717 	ldw	r2,-36(fp)
 801aa18:	1885c83a 	sub	r2,r3,r2
 801aa1c:	00000606 	br	801aa38 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 801aa20:	e0bfff17 	ldw	r2,-4(fp)
 801aa24:	1090000c 	andi	r2,r2,16384
 801aa28:	10000226 	beq	r2,zero,801aa34 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 801aa2c:	00bffd44 	movi	r2,-11
 801aa30:	00000106 	br	801aa38 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 801aa34:	00bffec4 	movi	r2,-5
}
 801aa38:	e037883a 	mov	sp,fp
 801aa3c:	dfc00117 	ldw	ra,4(sp)
 801aa40:	df000017 	ldw	fp,0(sp)
 801aa44:	dec00204 	addi	sp,sp,8
 801aa48:	f800283a 	ret

0801aa4c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 801aa4c:	defffa04 	addi	sp,sp,-24
 801aa50:	dfc00515 	stw	ra,20(sp)
 801aa54:	df000415 	stw	fp,16(sp)
 801aa58:	df000404 	addi	fp,sp,16
 801aa5c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 801aa60:	0007883a 	mov	r3,zero
 801aa64:	e0bfff17 	ldw	r2,-4(fp)
 801aa68:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 801aa6c:	e0bfff17 	ldw	r2,-4(fp)
 801aa70:	10800104 	addi	r2,r2,4
 801aa74:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801aa78:	0005303a 	rdctl	r2,status
 801aa7c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801aa80:	e0fffd17 	ldw	r3,-12(fp)
 801aa84:	00bfff84 	movi	r2,-2
 801aa88:	1884703a 	and	r2,r3,r2
 801aa8c:	1001703a 	wrctl	status,r2
  
  return context;
 801aa90:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 801aa94:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 801aa98:	801b9540 	call	801b954 <alt_tick>
 801aa9c:	e0bffc17 	ldw	r2,-16(fp)
 801aaa0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801aaa4:	e0bffe17 	ldw	r2,-8(fp)
 801aaa8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 801aaac:	e037883a 	mov	sp,fp
 801aab0:	dfc00117 	ldw	ra,4(sp)
 801aab4:	df000017 	ldw	fp,0(sp)
 801aab8:	dec00204 	addi	sp,sp,8
 801aabc:	f800283a 	ret

0801aac0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 801aac0:	defff804 	addi	sp,sp,-32
 801aac4:	dfc00715 	stw	ra,28(sp)
 801aac8:	df000615 	stw	fp,24(sp)
 801aacc:	df000604 	addi	fp,sp,24
 801aad0:	e13ffc15 	stw	r4,-16(fp)
 801aad4:	e17ffd15 	stw	r5,-12(fp)
 801aad8:	e1bffe15 	stw	r6,-8(fp)
 801aadc:	e1ffff15 	stw	r7,-4(fp)
 801aae0:	e0bfff17 	ldw	r2,-4(fp)
 801aae4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 801aae8:	008200f4 	movhi	r2,2051
 801aaec:	10ab0204 	addi	r2,r2,-21496
 801aaf0:	10800017 	ldw	r2,0(r2)
 801aaf4:	1000041e 	bne	r2,zero,801ab08 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 801aaf8:	008200f4 	movhi	r2,2051
 801aafc:	10ab0204 	addi	r2,r2,-21496
 801ab00:	e0fffb17 	ldw	r3,-20(fp)
 801ab04:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 801ab08:	e0bffc17 	ldw	r2,-16(fp)
 801ab0c:	10800104 	addi	r2,r2,4
 801ab10:	00c001c4 	movi	r3,7
 801ab14:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 801ab18:	d8000015 	stw	zero,0(sp)
 801ab1c:	e13ffd17 	ldw	r4,-12(fp)
 801ab20:	e17ffe17 	ldw	r5,-8(fp)
 801ab24:	018200b4 	movhi	r6,2050
 801ab28:	31aa9304 	addi	r6,r6,-21940
 801ab2c:	e1fffc17 	ldw	r7,-16(fp)
 801ab30:	801934c0 	call	801934c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 801ab34:	e037883a 	mov	sp,fp
 801ab38:	dfc00117 	ldw	ra,4(sp)
 801ab3c:	df000017 	ldw	fp,0(sp)
 801ab40:	dec00204 	addi	sp,sp,8
 801ab44:	f800283a 	ret

0801ab48 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 801ab48:	defffc04 	addi	sp,sp,-16
 801ab4c:	df000315 	stw	fp,12(sp)
 801ab50:	df000304 	addi	fp,sp,12
 801ab54:	e13ffe15 	stw	r4,-8(fp)
 801ab58:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 801ab5c:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 801ab60:	e0bfff17 	ldw	r2,-4(fp)
 801ab64:	1000061e 	bne	r2,zero,801ab80 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
 801ab68:	e0bffe17 	ldw	r2,-8(fp)
 801ab6c:	1007883a 	mov	r3,r2
 801ab70:	e0bffd03 	ldbu	r2,-12(fp)
 801ab74:	1884b03a 	or	r2,r3,r2
 801ab78:	e0bffd05 	stb	r2,-12(fp)
 801ab7c:	00000806 	br	801aba0 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
 801ab80:	e0bffe17 	ldw	r2,-8(fp)
 801ab84:	1007883a 	mov	r3,r2
 801ab88:	e0bffd03 	ldbu	r2,-12(fp)
 801ab8c:	1884b03a 	or	r2,r3,r2
 801ab90:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 801ab94:	e0bffd03 	ldbu	r2,-12(fp)
 801ab98:	10801014 	ori	r2,r2,64
 801ab9c:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 801aba0:	e0fffd03 	ldbu	r3,-12(fp)
 801aba4:	00bfe004 	movi	r2,-128
 801aba8:	1884b03a 	or	r2,r3,r2
}
 801abac:	e037883a 	mov	sp,fp
 801abb0:	df000017 	ldw	fp,0(sp)
 801abb4:	dec00104 	addi	sp,sp,4
 801abb8:	f800283a 	ret

0801abbc <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 801abbc:	defffd04 	addi	sp,sp,-12
 801abc0:	df000215 	stw	fp,8(sp)
 801abc4:	df000204 	addi	fp,sp,8
 801abc8:	e13ffe15 	stw	r4,-8(fp)
 801abcc:	2805883a 	mov	r2,r5
 801abd0:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 801abd4:	e0bffe17 	ldw	r2,-8(fp)
 801abd8:	10800a17 	ldw	r2,40(r2)
 801abdc:	1007883a 	mov	r3,r2
 801abe0:	e0bfff03 	ldbu	r2,-4(fp)
 801abe4:	18800025 	stbio	r2,0(r3)
}
 801abe8:	e037883a 	mov	sp,fp
 801abec:	df000017 	ldw	fp,0(sp)
 801abf0:	dec00104 	addi	sp,sp,4
 801abf4:	f800283a 	ret

0801abf8 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 801abf8:	defffe04 	addi	sp,sp,-8
 801abfc:	df000115 	stw	fp,4(sp)
 801ac00:	df000104 	addi	fp,sp,4
 801ac04:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 801ac08:	e0bfff17 	ldw	r2,-4(fp)
 801ac0c:	10800a17 	ldw	r2,40(r2)
 801ac10:	1007883a 	mov	r3,r2
 801ac14:	00800044 	movi	r2,1
 801ac18:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 801ac1c:	e037883a 	mov	sp,fp
 801ac20:	df000017 	ldw	fp,0(sp)
 801ac24:	dec00104 	addi	sp,sp,4
 801ac28:	f800283a 	ret

0801ac2c <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 801ac2c:	defffc04 	addi	sp,sp,-16
 801ac30:	dfc00315 	stw	ra,12(sp)
 801ac34:	df000215 	stw	fp,8(sp)
 801ac38:	df000204 	addi	fp,sp,8
 801ac3c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 801ac40:	e13fff17 	ldw	r4,-4(fp)
 801ac44:	014200f4 	movhi	r5,2051
 801ac48:	2963f304 	addi	r5,r5,-28724
 801ac4c:	801b4500 	call	801b450 <alt_find_dev>
 801ac50:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 801ac54:	e0bffe17 	ldw	r2,-8(fp)
}
 801ac58:	e037883a 	mov	sp,fp
 801ac5c:	dfc00117 	ldw	ra,4(sp)
 801ac60:	df000017 	ldw	fp,0(sp)
 801ac64:	dec00204 	addi	sp,sp,8
 801ac68:	f800283a 	ret

0801ac6c <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 801ac6c:	defffb04 	addi	sp,sp,-20
 801ac70:	df000415 	stw	fp,16(sp)
 801ac74:	df000404 	addi	fp,sp,16
 801ac78:	e13ffd15 	stw	r4,-12(fp)
 801ac7c:	e17ffe15 	stw	r5,-8(fp)
 801ac80:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 801ac84:	e03ffc15 	stw	zero,-16(fp)
 801ac88:	00000f06 	br	801acc8 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 801ac8c:	e0bffd17 	ldw	r2,-12(fp)
 801ac90:	10800a17 	ldw	r2,40(r2)
 801ac94:	10800044 	addi	r2,r2,1
 801ac98:	1009883a 	mov	r4,r2
 801ac9c:	e0fffe17 	ldw	r3,-8(fp)
 801aca0:	e0bffc17 	ldw	r2,-16(fp)
 801aca4:	1885883a 	add	r2,r3,r2
 801aca8:	10800003 	ldbu	r2,0(r2)
 801acac:	10803fcc 	andi	r2,r2,255
 801acb0:	1080201c 	xori	r2,r2,128
 801acb4:	10bfe004 	addi	r2,r2,-128
 801acb8:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 801acbc:	e0bffc17 	ldw	r2,-16(fp)
 801acc0:	10800044 	addi	r2,r2,1
 801acc4:	e0bffc15 	stw	r2,-16(fp)
 801acc8:	e0fffc17 	ldw	r3,-16(fp)
 801accc:	e0bfff17 	ldw	r2,-4(fp)
 801acd0:	18bfee36 	bltu	r3,r2,801ac8c <__alt_data_end+0xfc01ac8c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 801acd4:	e037883a 	mov	sp,fp
 801acd8:	df000017 	ldw	fp,0(sp)
 801acdc:	dec00104 	addi	sp,sp,4
 801ace0:	f800283a 	ret

0801ace4 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 801ace4:	defffd04 	addi	sp,sp,-12
 801ace8:	df000215 	stw	fp,8(sp)
 801acec:	df000204 	addi	fp,sp,8
 801acf0:	e13ffe15 	stw	r4,-8(fp)
 801acf4:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 801acf8:	00000d06 	br	801ad30 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 801acfc:	e0bffe17 	ldw	r2,-8(fp)
 801ad00:	10800a17 	ldw	r2,40(r2)
 801ad04:	10800044 	addi	r2,r2,1
 801ad08:	1007883a 	mov	r3,r2
 801ad0c:	e0bfff17 	ldw	r2,-4(fp)
 801ad10:	10800003 	ldbu	r2,0(r2)
 801ad14:	10803fcc 	andi	r2,r2,255
 801ad18:	1080201c 	xori	r2,r2,128
 801ad1c:	10bfe004 	addi	r2,r2,-128
 801ad20:	18800025 	stbio	r2,0(r3)
		++ptr;
 801ad24:	e0bfff17 	ldw	r2,-4(fp)
 801ad28:	10800044 	addi	r2,r2,1
 801ad2c:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 801ad30:	e0bfff17 	ldw	r2,-4(fp)
 801ad34:	10800003 	ldbu	r2,0(r2)
 801ad38:	10803fcc 	andi	r2,r2,255
 801ad3c:	1080201c 	xori	r2,r2,128
 801ad40:	10bfe004 	addi	r2,r2,-128
 801ad44:	103fed1e 	bne	r2,zero,801acfc <__alt_data_end+0xfc01acfc>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 801ad48:	e037883a 	mov	sp,fp
 801ad4c:	df000017 	ldw	fp,0(sp)
 801ad50:	dec00104 	addi	sp,sp,4
 801ad54:	f800283a 	ret

0801ad58 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 801ad58:	defffb04 	addi	sp,sp,-20
 801ad5c:	dfc00415 	stw	ra,16(sp)
 801ad60:	df000315 	stw	fp,12(sp)
 801ad64:	df000304 	addi	fp,sp,12
 801ad68:	e13ffd15 	stw	r4,-12(fp)
 801ad6c:	e17ffe15 	stw	r5,-8(fp)
 801ad70:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 801ad74:	e0bffd17 	ldw	r2,-12(fp)
 801ad78:	10c00017 	ldw	r3,0(r2)
 801ad7c:	e0bfff17 	ldw	r2,-4(fp)
 801ad80:	1809883a 	mov	r4,r3
 801ad84:	e17ffe17 	ldw	r5,-8(fp)
 801ad88:	100d883a 	mov	r6,r2
 801ad8c:	801ac6c0 	call	801ac6c <alt_up_character_lcd_write>
	return 0;
 801ad90:	0005883a 	mov	r2,zero
}
 801ad94:	e037883a 	mov	sp,fp
 801ad98:	dfc00117 	ldw	ra,4(sp)
 801ad9c:	df000017 	ldw	fp,0(sp)
 801ada0:	dec00204 	addi	sp,sp,8
 801ada4:	f800283a 	ret

0801ada8 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 801ada8:	defffa04 	addi	sp,sp,-24
 801adac:	dfc00515 	stw	ra,20(sp)
 801adb0:	df000415 	stw	fp,16(sp)
 801adb4:	df000404 	addi	fp,sp,16
 801adb8:	e13ffd15 	stw	r4,-12(fp)
 801adbc:	e17ffe15 	stw	r5,-8(fp)
 801adc0:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 801adc4:	e0bffe17 	ldw	r2,-8(fp)
 801adc8:	10800a28 	cmpgeui	r2,r2,40
 801adcc:	1000031e 	bne	r2,zero,801addc <alt_up_character_lcd_set_cursor_pos+0x34>
 801add0:	e0bfff17 	ldw	r2,-4(fp)
 801add4:	108000b0 	cmpltui	r2,r2,2
 801add8:	1000021e 	bne	r2,zero,801ade4 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
 801addc:	00bfffc4 	movi	r2,-1
 801ade0:	00000906 	br	801ae08 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 801ade4:	e13ffe17 	ldw	r4,-8(fp)
 801ade8:	e17fff17 	ldw	r5,-4(fp)
 801adec:	801ab480 	call	801ab48 <get_DDRAM_addr>
 801adf0:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 801adf4:	e0bffc03 	ldbu	r2,-16(fp)
 801adf8:	e13ffd17 	ldw	r4,-12(fp)
 801adfc:	100b883a 	mov	r5,r2
 801ae00:	801abbc0 	call	801abbc <alt_up_character_lcd_send_cmd>
	return 0;
 801ae04:	0005883a 	mov	r2,zero
}
 801ae08:	e037883a 	mov	sp,fp
 801ae0c:	dfc00117 	ldw	ra,4(sp)
 801ae10:	df000017 	ldw	fp,0(sp)
 801ae14:	dec00204 	addi	sp,sp,8
 801ae18:	f800283a 	ret

0801ae1c <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 801ae1c:	defffb04 	addi	sp,sp,-20
 801ae20:	dfc00415 	stw	ra,16(sp)
 801ae24:	df000315 	stw	fp,12(sp)
 801ae28:	df000304 	addi	fp,sp,12
 801ae2c:	e13ffe15 	stw	r4,-8(fp)
 801ae30:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 801ae34:	e0bfff17 	ldw	r2,-4(fp)
 801ae38:	1000011e 	bne	r2,zero,801ae40 <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
 801ae3c:	00001406 	br	801ae90 <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 801ae40:	e0bfff17 	ldw	r2,-4(fp)
 801ae44:	0080020e 	bge	zero,r2,801ae50 <alt_up_character_lcd_shift_cursor+0x34>
 801ae48:	00800504 	movi	r2,20
 801ae4c:	00000106 	br	801ae54 <alt_up_character_lcd_shift_cursor+0x38>
 801ae50:	00800404 	movi	r2,16
 801ae54:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 801ae58:	e0bfff17 	ldw	r2,-4(fp)
 801ae5c:	1000010e 	bge	r2,zero,801ae64 <alt_up_character_lcd_shift_cursor+0x48>
 801ae60:	0085c83a 	sub	r2,zero,r2
 801ae64:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 801ae68:	00000406 	br	801ae7c <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 801ae6c:	e0bffd43 	ldbu	r2,-11(fp)
 801ae70:	e13ffe17 	ldw	r4,-8(fp)
 801ae74:	100b883a 	mov	r5,r2
 801ae78:	801abbc0 	call	801abbc <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 801ae7c:	e0bffd03 	ldbu	r2,-12(fp)
 801ae80:	10ffffc4 	addi	r3,r2,-1
 801ae84:	e0fffd05 	stb	r3,-12(fp)
 801ae88:	10803fcc 	andi	r2,r2,255
 801ae8c:	103ff71e 	bne	r2,zero,801ae6c <__alt_data_end+0xfc01ae6c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 801ae90:	e037883a 	mov	sp,fp
 801ae94:	dfc00117 	ldw	ra,4(sp)
 801ae98:	df000017 	ldw	fp,0(sp)
 801ae9c:	dec00204 	addi	sp,sp,8
 801aea0:	f800283a 	ret

0801aea4 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 801aea4:	defffb04 	addi	sp,sp,-20
 801aea8:	dfc00415 	stw	ra,16(sp)
 801aeac:	df000315 	stw	fp,12(sp)
 801aeb0:	df000304 	addi	fp,sp,12
 801aeb4:	e13ffe15 	stw	r4,-8(fp)
 801aeb8:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 801aebc:	e0bfff17 	ldw	r2,-4(fp)
 801aec0:	1000011e 	bne	r2,zero,801aec8 <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
 801aec4:	00001406 	br	801af18 <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 801aec8:	e0bfff17 	ldw	r2,-4(fp)
 801aecc:	0080020e 	bge	zero,r2,801aed8 <alt_up_character_lcd_shift_display+0x34>
 801aed0:	00800704 	movi	r2,28
 801aed4:	00000106 	br	801aedc <alt_up_character_lcd_shift_display+0x38>
 801aed8:	00800604 	movi	r2,24
 801aedc:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 801aee0:	e0bfff17 	ldw	r2,-4(fp)
 801aee4:	1000010e 	bge	r2,zero,801aeec <alt_up_character_lcd_shift_display+0x48>
 801aee8:	0085c83a 	sub	r2,zero,r2
 801aeec:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 801aef0:	00000406 	br	801af04 <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 801aef4:	e0bffd43 	ldbu	r2,-11(fp)
 801aef8:	e13ffe17 	ldw	r4,-8(fp)
 801aefc:	100b883a 	mov	r5,r2
 801af00:	801abbc0 	call	801abbc <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 801af04:	e0bffd03 	ldbu	r2,-12(fp)
 801af08:	10ffffc4 	addi	r3,r2,-1
 801af0c:	e0fffd05 	stb	r3,-12(fp)
 801af10:	10803fcc 	andi	r2,r2,255
 801af14:	103ff71e 	bne	r2,zero,801aef4 <__alt_data_end+0xfc01aef4>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 801af18:	e037883a 	mov	sp,fp
 801af1c:	dfc00117 	ldw	ra,4(sp)
 801af20:	df000017 	ldw	fp,0(sp)
 801af24:	dec00204 	addi	sp,sp,8
 801af28:	f800283a 	ret

0801af2c <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 801af2c:	defffa04 	addi	sp,sp,-24
 801af30:	dfc00515 	stw	ra,20(sp)
 801af34:	df000415 	stw	fp,16(sp)
 801af38:	df000404 	addi	fp,sp,16
 801af3c:	e13ffd15 	stw	r4,-12(fp)
 801af40:	e17ffe15 	stw	r5,-8(fp)
 801af44:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 801af48:	e0bffe17 	ldw	r2,-8(fp)
 801af4c:	10800a28 	cmpgeui	r2,r2,40
 801af50:	1000031e 	bne	r2,zero,801af60 <alt_up_character_lcd_erase_pos+0x34>
 801af54:	e0bfff17 	ldw	r2,-4(fp)
 801af58:	108000b0 	cmpltui	r2,r2,2
 801af5c:	1000021e 	bne	r2,zero,801af68 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
 801af60:	00bfffc4 	movi	r2,-1
 801af64:	00000f06 	br	801afa4 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 801af68:	e13ffe17 	ldw	r4,-8(fp)
 801af6c:	e17fff17 	ldw	r5,-4(fp)
 801af70:	801ab480 	call	801ab48 <get_DDRAM_addr>
 801af74:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 801af78:	e0bffc03 	ldbu	r2,-16(fp)
 801af7c:	e13ffd17 	ldw	r4,-12(fp)
 801af80:	100b883a 	mov	r5,r2
 801af84:	801abbc0 	call	801abbc <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 801af88:	e0bffd17 	ldw	r2,-12(fp)
 801af8c:	10800a17 	ldw	r2,40(r2)
 801af90:	10800044 	addi	r2,r2,1
 801af94:	1007883a 	mov	r3,r2
 801af98:	00800084 	movi	r2,2
 801af9c:	18800025 	stbio	r2,0(r3)
	return 0;
 801afa0:	0005883a 	mov	r2,zero
}
 801afa4:	e037883a 	mov	sp,fp
 801afa8:	dfc00117 	ldw	ra,4(sp)
 801afac:	df000017 	ldw	fp,0(sp)
 801afb0:	dec00204 	addi	sp,sp,8
 801afb4:	f800283a 	ret

0801afb8 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 801afb8:	defffd04 	addi	sp,sp,-12
 801afbc:	dfc00215 	stw	ra,8(sp)
 801afc0:	df000115 	stw	fp,4(sp)
 801afc4:	df000104 	addi	fp,sp,4
 801afc8:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 801afcc:	e13fff17 	ldw	r4,-4(fp)
 801afd0:	01400304 	movi	r5,12
 801afd4:	801abbc0 	call	801abbc <alt_up_character_lcd_send_cmd>
}
 801afd8:	e037883a 	mov	sp,fp
 801afdc:	dfc00117 	ldw	ra,4(sp)
 801afe0:	df000017 	ldw	fp,0(sp)
 801afe4:	dec00204 	addi	sp,sp,8
 801afe8:	f800283a 	ret

0801afec <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 801afec:	defffd04 	addi	sp,sp,-12
 801aff0:	dfc00215 	stw	ra,8(sp)
 801aff4:	df000115 	stw	fp,4(sp)
 801aff8:	df000104 	addi	fp,sp,4
 801affc:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 801b000:	e13fff17 	ldw	r4,-4(fp)
 801b004:	014003c4 	movi	r5,15
 801b008:	801abbc0 	call	801abbc <alt_up_character_lcd_send_cmd>
}
 801b00c:	e037883a 	mov	sp,fp
 801b010:	dfc00117 	ldw	ra,4(sp)
 801b014:	df000017 	ldw	fp,0(sp)
 801b018:	dec00204 	addi	sp,sp,8
 801b01c:	f800283a 	ret

0801b020 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 801b020:	defff504 	addi	sp,sp,-44
 801b024:	df000a15 	stw	fp,40(sp)
 801b028:	df000a04 	addi	fp,sp,40
 801b02c:	e13ffc15 	stw	r4,-16(fp)
 801b030:	e17ffd15 	stw	r5,-12(fp)
 801b034:	e1bffe15 	stw	r6,-8(fp)
 801b038:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 801b03c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 801b040:	008200f4 	movhi	r2,2051
 801b044:	10ab0204 	addi	r2,r2,-21496
 801b048:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 801b04c:	10003f26 	beq	r2,zero,801b14c <alt_alarm_start+0x12c>
  {
    if (alarm)
 801b050:	e0bffc17 	ldw	r2,-16(fp)
 801b054:	10003b26 	beq	r2,zero,801b144 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 801b058:	e0bffc17 	ldw	r2,-16(fp)
 801b05c:	e0fffe17 	ldw	r3,-8(fp)
 801b060:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 801b064:	e0bffc17 	ldw	r2,-16(fp)
 801b068:	e0ffff17 	ldw	r3,-4(fp)
 801b06c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801b070:	0005303a 	rdctl	r2,status
 801b074:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801b078:	e0fff817 	ldw	r3,-32(fp)
 801b07c:	00bfff84 	movi	r2,-2
 801b080:	1884703a 	and	r2,r3,r2
 801b084:	1001703a 	wrctl	status,r2
  
  return context;
 801b088:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 801b08c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 801b090:	008200f4 	movhi	r2,2051
 801b094:	10ab0304 	addi	r2,r2,-21492
 801b098:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 801b09c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 801b0a0:	e0fffd17 	ldw	r3,-12(fp)
 801b0a4:	e0bff617 	ldw	r2,-40(fp)
 801b0a8:	1885883a 	add	r2,r3,r2
 801b0ac:	10c00044 	addi	r3,r2,1
 801b0b0:	e0bffc17 	ldw	r2,-16(fp)
 801b0b4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 801b0b8:	e0bffc17 	ldw	r2,-16(fp)
 801b0bc:	10c00217 	ldw	r3,8(r2)
 801b0c0:	e0bff617 	ldw	r2,-40(fp)
 801b0c4:	1880042e 	bgeu	r3,r2,801b0d8 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 801b0c8:	e0bffc17 	ldw	r2,-16(fp)
 801b0cc:	00c00044 	movi	r3,1
 801b0d0:	10c00405 	stb	r3,16(r2)
 801b0d4:	00000206 	br	801b0e0 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 801b0d8:	e0bffc17 	ldw	r2,-16(fp)
 801b0dc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 801b0e0:	e0fffc17 	ldw	r3,-16(fp)
 801b0e4:	008200f4 	movhi	r2,2051
 801b0e8:	10a3f904 	addi	r2,r2,-28700
 801b0ec:	e0bff915 	stw	r2,-28(fp)
 801b0f0:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 801b0f4:	e0bffa17 	ldw	r2,-24(fp)
 801b0f8:	e0fff917 	ldw	r3,-28(fp)
 801b0fc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 801b100:	e0bff917 	ldw	r2,-28(fp)
 801b104:	10c00017 	ldw	r3,0(r2)
 801b108:	e0bffa17 	ldw	r2,-24(fp)
 801b10c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 801b110:	e0bff917 	ldw	r2,-28(fp)
 801b114:	10800017 	ldw	r2,0(r2)
 801b118:	e0fffa17 	ldw	r3,-24(fp)
 801b11c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 801b120:	e0bff917 	ldw	r2,-28(fp)
 801b124:	e0fffa17 	ldw	r3,-24(fp)
 801b128:	10c00015 	stw	r3,0(r2)
 801b12c:	e0bff717 	ldw	r2,-36(fp)
 801b130:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801b134:	e0bffb17 	ldw	r2,-20(fp)
 801b138:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 801b13c:	0005883a 	mov	r2,zero
 801b140:	00000306 	br	801b150 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 801b144:	00bffa84 	movi	r2,-22
 801b148:	00000106 	br	801b150 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 801b14c:	00bfde84 	movi	r2,-134
  }
}
 801b150:	e037883a 	mov	sp,fp
 801b154:	df000017 	ldw	fp,0(sp)
 801b158:	dec00104 	addi	sp,sp,4
 801b15c:	f800283a 	ret

0801b160 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 801b160:	defffb04 	addi	sp,sp,-20
 801b164:	df000415 	stw	fp,16(sp)
 801b168:	df000404 	addi	fp,sp,16
 801b16c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 801b170:	008000c4 	movi	r2,3
 801b174:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 801b178:	e0fffd17 	ldw	r3,-12(fp)
 801b17c:	008003f4 	movhi	r2,15
 801b180:	10909004 	addi	r2,r2,16960
 801b184:	1887383a 	mul	r3,r3,r2
 801b188:	0080bef4 	movhi	r2,763
 801b18c:	10bc2004 	addi	r2,r2,-3968
 801b190:	10c7203a 	divu	r3,r2,r3
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 801b194:	00a00034 	movhi	r2,32768
 801b198:	10bfffc4 	addi	r2,r2,-1
 801b19c:	10c5203a 	divu	r2,r2,r3
 801b1a0:	e0ffff17 	ldw	r3,-4(fp)
 801b1a4:	1885203a 	divu	r2,r3,r2
 801b1a8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 801b1ac:	e0bffe17 	ldw	r2,-8(fp)
 801b1b0:	10002526 	beq	r2,zero,801b248 <alt_busy_sleep+0xe8>
  {
    for(i=0;i<big_loops;i++)
 801b1b4:	e03ffc15 	stw	zero,-16(fp)
 801b1b8:	00001406 	br	801b20c <alt_busy_sleep+0xac>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 801b1bc:	00a00034 	movhi	r2,32768
 801b1c0:	10bfffc4 	addi	r2,r2,-1
 801b1c4:	10bfffc4 	addi	r2,r2,-1
 801b1c8:	103ffe1e 	bne	r2,zero,801b1c4 <__alt_data_end+0xfc01b1c4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 801b1cc:	e0fffd17 	ldw	r3,-12(fp)
 801b1d0:	008003f4 	movhi	r2,15
 801b1d4:	10909004 	addi	r2,r2,16960
 801b1d8:	1887383a 	mul	r3,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 801b1dc:	0080bef4 	movhi	r2,763
 801b1e0:	10bc2004 	addi	r2,r2,-3968
 801b1e4:	10c7203a 	divu	r3,r2,r3
 801b1e8:	00a00034 	movhi	r2,32768
 801b1ec:	10bfffc4 	addi	r2,r2,-1
 801b1f0:	10c5203a 	divu	r2,r2,r3
 801b1f4:	e0ffff17 	ldw	r3,-4(fp)
 801b1f8:	1885c83a 	sub	r2,r3,r2
 801b1fc:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 801b200:	e0bffc17 	ldw	r2,-16(fp)
 801b204:	10800044 	addi	r2,r2,1
 801b208:	e0bffc15 	stw	r2,-16(fp)
 801b20c:	e0fffc17 	ldw	r3,-16(fp)
 801b210:	e0bffe17 	ldw	r2,-8(fp)
 801b214:	18bfe916 	blt	r3,r2,801b1bc <__alt_data_end+0xfc01b1bc>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 801b218:	e0fffd17 	ldw	r3,-12(fp)
 801b21c:	008003f4 	movhi	r2,15
 801b220:	10909004 	addi	r2,r2,16960
 801b224:	1887383a 	mul	r3,r3,r2
 801b228:	0080bef4 	movhi	r2,763
 801b22c:	10bc2004 	addi	r2,r2,-3968
 801b230:	10c7203a 	divu	r3,r2,r3
 801b234:	e0bfff17 	ldw	r2,-4(fp)
 801b238:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 801b23c:	10bfffc4 	addi	r2,r2,-1
 801b240:	103ffe1e 	bne	r2,zero,801b23c <__alt_data_end+0xfc01b23c>
 801b244:	00000b06 	br	801b274 <alt_busy_sleep+0x114>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 801b248:	e0fffd17 	ldw	r3,-12(fp)
 801b24c:	008003f4 	movhi	r2,15
 801b250:	10909004 	addi	r2,r2,16960
 801b254:	1887383a 	mul	r3,r3,r2
 801b258:	0080bef4 	movhi	r2,763
 801b25c:	10bc2004 	addi	r2,r2,-3968
 801b260:	10c7203a 	divu	r3,r2,r3
 801b264:	e0bfff17 	ldw	r2,-4(fp)
 801b268:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 801b26c:	10bfffc4 	addi	r2,r2,-1
 801b270:	00bffe16 	blt	zero,r2,801b26c <__alt_data_end+0xfc01b26c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 801b274:	0005883a 	mov	r2,zero
}
 801b278:	e037883a 	mov	sp,fp
 801b27c:	df000017 	ldw	fp,0(sp)
 801b280:	dec00104 	addi	sp,sp,4
 801b284:	f800283a 	ret

0801b288 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 801b288:	deffff04 	addi	sp,sp,-4
 801b28c:	df000015 	stw	fp,0(sp)
 801b290:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 801b294:	e037883a 	mov	sp,fp
 801b298:	df000017 	ldw	fp,0(sp)
 801b29c:	dec00104 	addi	sp,sp,4
 801b2a0:	f800283a 	ret

0801b2a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801b2a4:	defffe04 	addi	sp,sp,-8
 801b2a8:	dfc00115 	stw	ra,4(sp)
 801b2ac:	df000015 	stw	fp,0(sp)
 801b2b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801b2b4:	008200f4 	movhi	r2,2051
 801b2b8:	10a3f604 	addi	r2,r2,-28712
 801b2bc:	10800017 	ldw	r2,0(r2)
 801b2c0:	10000526 	beq	r2,zero,801b2d8 <alt_get_errno+0x34>
 801b2c4:	008200f4 	movhi	r2,2051
 801b2c8:	10a3f604 	addi	r2,r2,-28712
 801b2cc:	10800017 	ldw	r2,0(r2)
 801b2d0:	103ee83a 	callr	r2
 801b2d4:	00000206 	br	801b2e0 <alt_get_errno+0x3c>
 801b2d8:	008200f4 	movhi	r2,2051
 801b2dc:	10aafa04 	addi	r2,r2,-21528
}
 801b2e0:	e037883a 	mov	sp,fp
 801b2e4:	dfc00117 	ldw	ra,4(sp)
 801b2e8:	df000017 	ldw	fp,0(sp)
 801b2ec:	dec00204 	addi	sp,sp,8
 801b2f0:	f800283a 	ret

0801b2f4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 801b2f4:	defffa04 	addi	sp,sp,-24
 801b2f8:	dfc00515 	stw	ra,20(sp)
 801b2fc:	df000415 	stw	fp,16(sp)
 801b300:	df000404 	addi	fp,sp,16
 801b304:	e13ffe15 	stw	r4,-8(fp)
 801b308:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 801b30c:	e0bffe17 	ldw	r2,-8(fp)
 801b310:	10000326 	beq	r2,zero,801b320 <alt_dev_llist_insert+0x2c>
 801b314:	e0bffe17 	ldw	r2,-8(fp)
 801b318:	10800217 	ldw	r2,8(r2)
 801b31c:	1000061e 	bne	r2,zero,801b338 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 801b320:	801b2a40 	call	801b2a4 <alt_get_errno>
 801b324:	1007883a 	mov	r3,r2
 801b328:	00800584 	movi	r2,22
 801b32c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 801b330:	00bffa84 	movi	r2,-22
 801b334:	00001306 	br	801b384 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 801b338:	e0bffe17 	ldw	r2,-8(fp)
 801b33c:	e0ffff17 	ldw	r3,-4(fp)
 801b340:	e0fffc15 	stw	r3,-16(fp)
 801b344:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 801b348:	e0bffd17 	ldw	r2,-12(fp)
 801b34c:	e0fffc17 	ldw	r3,-16(fp)
 801b350:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 801b354:	e0bffc17 	ldw	r2,-16(fp)
 801b358:	10c00017 	ldw	r3,0(r2)
 801b35c:	e0bffd17 	ldw	r2,-12(fp)
 801b360:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 801b364:	e0bffc17 	ldw	r2,-16(fp)
 801b368:	10800017 	ldw	r2,0(r2)
 801b36c:	e0fffd17 	ldw	r3,-12(fp)
 801b370:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 801b374:	e0bffc17 	ldw	r2,-16(fp)
 801b378:	e0fffd17 	ldw	r3,-12(fp)
 801b37c:	10c00015 	stw	r3,0(r2)

  return 0;  
 801b380:	0005883a 	mov	r2,zero
}
 801b384:	e037883a 	mov	sp,fp
 801b388:	dfc00117 	ldw	ra,4(sp)
 801b38c:	df000017 	ldw	fp,0(sp)
 801b390:	dec00204 	addi	sp,sp,8
 801b394:	f800283a 	ret

0801b398 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 801b398:	defffd04 	addi	sp,sp,-12
 801b39c:	dfc00215 	stw	ra,8(sp)
 801b3a0:	df000115 	stw	fp,4(sp)
 801b3a4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 801b3a8:	008200b4 	movhi	r2,2050
 801b3ac:	10b00e04 	addi	r2,r2,-16328
 801b3b0:	e0bfff15 	stw	r2,-4(fp)
 801b3b4:	00000606 	br	801b3d0 <_do_ctors+0x38>
        (*ctor) (); 
 801b3b8:	e0bfff17 	ldw	r2,-4(fp)
 801b3bc:	10800017 	ldw	r2,0(r2)
 801b3c0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 801b3c4:	e0bfff17 	ldw	r2,-4(fp)
 801b3c8:	10bfff04 	addi	r2,r2,-4
 801b3cc:	e0bfff15 	stw	r2,-4(fp)
 801b3d0:	e0ffff17 	ldw	r3,-4(fp)
 801b3d4:	008200b4 	movhi	r2,2050
 801b3d8:	10b00f04 	addi	r2,r2,-16324
 801b3dc:	18bff62e 	bgeu	r3,r2,801b3b8 <__alt_data_end+0xfc01b3b8>
        (*ctor) (); 
}
 801b3e0:	e037883a 	mov	sp,fp
 801b3e4:	dfc00117 	ldw	ra,4(sp)
 801b3e8:	df000017 	ldw	fp,0(sp)
 801b3ec:	dec00204 	addi	sp,sp,8
 801b3f0:	f800283a 	ret

0801b3f4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 801b3f4:	defffd04 	addi	sp,sp,-12
 801b3f8:	dfc00215 	stw	ra,8(sp)
 801b3fc:	df000115 	stw	fp,4(sp)
 801b400:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 801b404:	008200b4 	movhi	r2,2050
 801b408:	10b00e04 	addi	r2,r2,-16328
 801b40c:	e0bfff15 	stw	r2,-4(fp)
 801b410:	00000606 	br	801b42c <_do_dtors+0x38>
        (*dtor) (); 
 801b414:	e0bfff17 	ldw	r2,-4(fp)
 801b418:	10800017 	ldw	r2,0(r2)
 801b41c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 801b420:	e0bfff17 	ldw	r2,-4(fp)
 801b424:	10bfff04 	addi	r2,r2,-4
 801b428:	e0bfff15 	stw	r2,-4(fp)
 801b42c:	e0ffff17 	ldw	r3,-4(fp)
 801b430:	008200b4 	movhi	r2,2050
 801b434:	10b00f04 	addi	r2,r2,-16324
 801b438:	18bff62e 	bgeu	r3,r2,801b414 <__alt_data_end+0xfc01b414>
        (*dtor) (); 
}
 801b43c:	e037883a 	mov	sp,fp
 801b440:	dfc00117 	ldw	ra,4(sp)
 801b444:	df000017 	ldw	fp,0(sp)
 801b448:	dec00204 	addi	sp,sp,8
 801b44c:	f800283a 	ret

0801b450 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 801b450:	defffa04 	addi	sp,sp,-24
 801b454:	dfc00515 	stw	ra,20(sp)
 801b458:	df000415 	stw	fp,16(sp)
 801b45c:	df000404 	addi	fp,sp,16
 801b460:	e13ffe15 	stw	r4,-8(fp)
 801b464:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 801b468:	e0bfff17 	ldw	r2,-4(fp)
 801b46c:	10800017 	ldw	r2,0(r2)
 801b470:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 801b474:	e13ffe17 	ldw	r4,-8(fp)
 801b478:	800ca6c0 	call	800ca6c <strlen>
 801b47c:	10800044 	addi	r2,r2,1
 801b480:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 801b484:	00000d06 	br	801b4bc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 801b488:	e0bffc17 	ldw	r2,-16(fp)
 801b48c:	10c00217 	ldw	r3,8(r2)
 801b490:	e0bffd17 	ldw	r2,-12(fp)
 801b494:	1809883a 	mov	r4,r3
 801b498:	e17ffe17 	ldw	r5,-8(fp)
 801b49c:	100d883a 	mov	r6,r2
 801b4a0:	801bd180 	call	801bd18 <memcmp>
 801b4a4:	1000021e 	bne	r2,zero,801b4b0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 801b4a8:	e0bffc17 	ldw	r2,-16(fp)
 801b4ac:	00000706 	br	801b4cc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 801b4b0:	e0bffc17 	ldw	r2,-16(fp)
 801b4b4:	10800017 	ldw	r2,0(r2)
 801b4b8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 801b4bc:	e0fffc17 	ldw	r3,-16(fp)
 801b4c0:	e0bfff17 	ldw	r2,-4(fp)
 801b4c4:	18bff01e 	bne	r3,r2,801b488 <__alt_data_end+0xfc01b488>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 801b4c8:	0005883a 	mov	r2,zero
}
 801b4cc:	e037883a 	mov	sp,fp
 801b4d0:	dfc00117 	ldw	ra,4(sp)
 801b4d4:	df000017 	ldw	fp,0(sp)
 801b4d8:	dec00204 	addi	sp,sp,8
 801b4dc:	f800283a 	ret

0801b4e0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 801b4e0:	defffe04 	addi	sp,sp,-8
 801b4e4:	dfc00115 	stw	ra,4(sp)
 801b4e8:	df000015 	stw	fp,0(sp)
 801b4ec:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 801b4f0:	0009883a 	mov	r4,zero
 801b4f4:	01440004 	movi	r5,4096
 801b4f8:	801bc400 	call	801bc40 <alt_icache_flush>
#endif
}
 801b4fc:	e037883a 	mov	sp,fp
 801b500:	dfc00117 	ldw	ra,4(sp)
 801b504:	df000017 	ldw	fp,0(sp)
 801b508:	dec00204 	addi	sp,sp,8
 801b50c:	f800283a 	ret

0801b510 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 801b510:	defff904 	addi	sp,sp,-28
 801b514:	dfc00615 	stw	ra,24(sp)
 801b518:	df000515 	stw	fp,20(sp)
 801b51c:	df000504 	addi	fp,sp,20
 801b520:	e13ffc15 	stw	r4,-16(fp)
 801b524:	e17ffd15 	stw	r5,-12(fp)
 801b528:	e1bffe15 	stw	r6,-8(fp)
 801b52c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 801b530:	e13ffd17 	ldw	r4,-12(fp)
 801b534:	e17ffe17 	ldw	r5,-8(fp)
 801b538:	e1bfff17 	ldw	r6,-4(fp)
 801b53c:	801b7640 	call	801b764 <open>
 801b540:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 801b544:	e0bffb17 	ldw	r2,-20(fp)
 801b548:	10001c16 	blt	r2,zero,801b5bc <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 801b54c:	008200b4 	movhi	r2,2050
 801b550:	109f5404 	addi	r2,r2,32080
 801b554:	e0fffb17 	ldw	r3,-20(fp)
 801b558:	18c00324 	muli	r3,r3,12
 801b55c:	10c5883a 	add	r2,r2,r3
 801b560:	10c00017 	ldw	r3,0(r2)
 801b564:	e0bffc17 	ldw	r2,-16(fp)
 801b568:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 801b56c:	008200b4 	movhi	r2,2050
 801b570:	109f5404 	addi	r2,r2,32080
 801b574:	e0fffb17 	ldw	r3,-20(fp)
 801b578:	18c00324 	muli	r3,r3,12
 801b57c:	10c5883a 	add	r2,r2,r3
 801b580:	10800104 	addi	r2,r2,4
 801b584:	10c00017 	ldw	r3,0(r2)
 801b588:	e0bffc17 	ldw	r2,-16(fp)
 801b58c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 801b590:	008200b4 	movhi	r2,2050
 801b594:	109f5404 	addi	r2,r2,32080
 801b598:	e0fffb17 	ldw	r3,-20(fp)
 801b59c:	18c00324 	muli	r3,r3,12
 801b5a0:	10c5883a 	add	r2,r2,r3
 801b5a4:	10800204 	addi	r2,r2,8
 801b5a8:	10c00017 	ldw	r3,0(r2)
 801b5ac:	e0bffc17 	ldw	r2,-16(fp)
 801b5b0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 801b5b4:	e13ffb17 	ldw	r4,-20(fp)
 801b5b8:	8019c9c0 	call	8019c9c <alt_release_fd>
  }
} 
 801b5bc:	e037883a 	mov	sp,fp
 801b5c0:	dfc00117 	ldw	ra,4(sp)
 801b5c4:	df000017 	ldw	fp,0(sp)
 801b5c8:	dec00204 	addi	sp,sp,8
 801b5cc:	f800283a 	ret

0801b5d0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 801b5d0:	defffb04 	addi	sp,sp,-20
 801b5d4:	dfc00415 	stw	ra,16(sp)
 801b5d8:	df000315 	stw	fp,12(sp)
 801b5dc:	df000304 	addi	fp,sp,12
 801b5e0:	e13ffd15 	stw	r4,-12(fp)
 801b5e4:	e17ffe15 	stw	r5,-8(fp)
 801b5e8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 801b5ec:	010200b4 	movhi	r4,2050
 801b5f0:	211f5704 	addi	r4,r4,32092
 801b5f4:	e17ffd17 	ldw	r5,-12(fp)
 801b5f8:	01800044 	movi	r6,1
 801b5fc:	01c07fc4 	movi	r7,511
 801b600:	801b5100 	call	801b510 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 801b604:	010200b4 	movhi	r4,2050
 801b608:	211f5404 	addi	r4,r4,32080
 801b60c:	e17ffe17 	ldw	r5,-8(fp)
 801b610:	000d883a 	mov	r6,zero
 801b614:	01c07fc4 	movi	r7,511
 801b618:	801b5100 	call	801b510 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 801b61c:	010200b4 	movhi	r4,2050
 801b620:	211f5a04 	addi	r4,r4,32104
 801b624:	e17fff17 	ldw	r5,-4(fp)
 801b628:	01800044 	movi	r6,1
 801b62c:	01c07fc4 	movi	r7,511
 801b630:	801b5100 	call	801b510 <alt_open_fd>
}  
 801b634:	e037883a 	mov	sp,fp
 801b638:	dfc00117 	ldw	ra,4(sp)
 801b63c:	df000017 	ldw	fp,0(sp)
 801b640:	dec00204 	addi	sp,sp,8
 801b644:	f800283a 	ret

0801b648 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801b648:	defffe04 	addi	sp,sp,-8
 801b64c:	dfc00115 	stw	ra,4(sp)
 801b650:	df000015 	stw	fp,0(sp)
 801b654:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801b658:	008200f4 	movhi	r2,2051
 801b65c:	10a3f604 	addi	r2,r2,-28712
 801b660:	10800017 	ldw	r2,0(r2)
 801b664:	10000526 	beq	r2,zero,801b67c <alt_get_errno+0x34>
 801b668:	008200f4 	movhi	r2,2051
 801b66c:	10a3f604 	addi	r2,r2,-28712
 801b670:	10800017 	ldw	r2,0(r2)
 801b674:	103ee83a 	callr	r2
 801b678:	00000206 	br	801b684 <alt_get_errno+0x3c>
 801b67c:	008200f4 	movhi	r2,2051
 801b680:	10aafa04 	addi	r2,r2,-21528
}
 801b684:	e037883a 	mov	sp,fp
 801b688:	dfc00117 	ldw	ra,4(sp)
 801b68c:	df000017 	ldw	fp,0(sp)
 801b690:	dec00204 	addi	sp,sp,8
 801b694:	f800283a 	ret

0801b698 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 801b698:	defffd04 	addi	sp,sp,-12
 801b69c:	df000215 	stw	fp,8(sp)
 801b6a0:	df000204 	addi	fp,sp,8
 801b6a4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 801b6a8:	e0bfff17 	ldw	r2,-4(fp)
 801b6ac:	10800217 	ldw	r2,8(r2)
 801b6b0:	10d00034 	orhi	r3,r2,16384
 801b6b4:	e0bfff17 	ldw	r2,-4(fp)
 801b6b8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 801b6bc:	e03ffe15 	stw	zero,-8(fp)
 801b6c0:	00001d06 	br	801b738 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 801b6c4:	008200b4 	movhi	r2,2050
 801b6c8:	109f5404 	addi	r2,r2,32080
 801b6cc:	e0fffe17 	ldw	r3,-8(fp)
 801b6d0:	18c00324 	muli	r3,r3,12
 801b6d4:	10c5883a 	add	r2,r2,r3
 801b6d8:	10c00017 	ldw	r3,0(r2)
 801b6dc:	e0bfff17 	ldw	r2,-4(fp)
 801b6e0:	10800017 	ldw	r2,0(r2)
 801b6e4:	1880111e 	bne	r3,r2,801b72c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 801b6e8:	008200b4 	movhi	r2,2050
 801b6ec:	109f5404 	addi	r2,r2,32080
 801b6f0:	e0fffe17 	ldw	r3,-8(fp)
 801b6f4:	18c00324 	muli	r3,r3,12
 801b6f8:	10c5883a 	add	r2,r2,r3
 801b6fc:	10800204 	addi	r2,r2,8
 801b700:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 801b704:	1000090e 	bge	r2,zero,801b72c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 801b708:	e0bffe17 	ldw	r2,-8(fp)
 801b70c:	10c00324 	muli	r3,r2,12
 801b710:	008200b4 	movhi	r2,2050
 801b714:	109f5404 	addi	r2,r2,32080
 801b718:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 801b71c:	e0bfff17 	ldw	r2,-4(fp)
 801b720:	18800226 	beq	r3,r2,801b72c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 801b724:	00bffcc4 	movi	r2,-13
 801b728:	00000a06 	br	801b754 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 801b72c:	e0bffe17 	ldw	r2,-8(fp)
 801b730:	10800044 	addi	r2,r2,1
 801b734:	e0bffe15 	stw	r2,-8(fp)
 801b738:	008200f4 	movhi	r2,2051
 801b73c:	10a3f504 	addi	r2,r2,-28716
 801b740:	10800017 	ldw	r2,0(r2)
 801b744:	1007883a 	mov	r3,r2
 801b748:	e0bffe17 	ldw	r2,-8(fp)
 801b74c:	18bfdd2e 	bgeu	r3,r2,801b6c4 <__alt_data_end+0xfc01b6c4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 801b750:	0005883a 	mov	r2,zero
}
 801b754:	e037883a 	mov	sp,fp
 801b758:	df000017 	ldw	fp,0(sp)
 801b75c:	dec00104 	addi	sp,sp,4
 801b760:	f800283a 	ret

0801b764 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 801b764:	defff604 	addi	sp,sp,-40
 801b768:	dfc00915 	stw	ra,36(sp)
 801b76c:	df000815 	stw	fp,32(sp)
 801b770:	df000804 	addi	fp,sp,32
 801b774:	e13ffd15 	stw	r4,-12(fp)
 801b778:	e17ffe15 	stw	r5,-8(fp)
 801b77c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 801b780:	00bfffc4 	movi	r2,-1
 801b784:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 801b788:	00bffb44 	movi	r2,-19
 801b78c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 801b790:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 801b794:	e13ffd17 	ldw	r4,-12(fp)
 801b798:	014200f4 	movhi	r5,2051
 801b79c:	2963f304 	addi	r5,r5,-28724
 801b7a0:	801b4500 	call	801b450 <alt_find_dev>
 801b7a4:	e0bff815 	stw	r2,-32(fp)
 801b7a8:	e0bff817 	ldw	r2,-32(fp)
 801b7ac:	1000051e 	bne	r2,zero,801b7c4 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 801b7b0:	e13ffd17 	ldw	r4,-12(fp)
 801b7b4:	801ba780 	call	801ba78 <alt_find_file>
 801b7b8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 801b7bc:	00800044 	movi	r2,1
 801b7c0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 801b7c4:	e0bff817 	ldw	r2,-32(fp)
 801b7c8:	10002926 	beq	r2,zero,801b870 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 801b7cc:	e13ff817 	ldw	r4,-32(fp)
 801b7d0:	801bb8c0 	call	801bb8c <alt_get_fd>
 801b7d4:	e0bff915 	stw	r2,-28(fp)
 801b7d8:	e0bff917 	ldw	r2,-28(fp)
 801b7dc:	1000030e 	bge	r2,zero,801b7ec <open+0x88>
    {
      status = index;
 801b7e0:	e0bff917 	ldw	r2,-28(fp)
 801b7e4:	e0bffa15 	stw	r2,-24(fp)
 801b7e8:	00002306 	br	801b878 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 801b7ec:	e0bff917 	ldw	r2,-28(fp)
 801b7f0:	10c00324 	muli	r3,r2,12
 801b7f4:	008200b4 	movhi	r2,2050
 801b7f8:	109f5404 	addi	r2,r2,32080
 801b7fc:	1885883a 	add	r2,r3,r2
 801b800:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 801b804:	e0fffe17 	ldw	r3,-8(fp)
 801b808:	00900034 	movhi	r2,16384
 801b80c:	10bfffc4 	addi	r2,r2,-1
 801b810:	1886703a 	and	r3,r3,r2
 801b814:	e0bffc17 	ldw	r2,-16(fp)
 801b818:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 801b81c:	e0bffb17 	ldw	r2,-20(fp)
 801b820:	1000051e 	bne	r2,zero,801b838 <open+0xd4>
 801b824:	e13ffc17 	ldw	r4,-16(fp)
 801b828:	801b6980 	call	801b698 <alt_file_locked>
 801b82c:	e0bffa15 	stw	r2,-24(fp)
 801b830:	e0bffa17 	ldw	r2,-24(fp)
 801b834:	10001016 	blt	r2,zero,801b878 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 801b838:	e0bff817 	ldw	r2,-32(fp)
 801b83c:	10800317 	ldw	r2,12(r2)
 801b840:	10000826 	beq	r2,zero,801b864 <open+0x100>
 801b844:	e0bff817 	ldw	r2,-32(fp)
 801b848:	10800317 	ldw	r2,12(r2)
 801b84c:	e13ffc17 	ldw	r4,-16(fp)
 801b850:	e17ffd17 	ldw	r5,-12(fp)
 801b854:	e1bffe17 	ldw	r6,-8(fp)
 801b858:	e1ffff17 	ldw	r7,-4(fp)
 801b85c:	103ee83a 	callr	r2
 801b860:	00000106 	br	801b868 <open+0x104>
 801b864:	0005883a 	mov	r2,zero
 801b868:	e0bffa15 	stw	r2,-24(fp)
 801b86c:	00000206 	br	801b878 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 801b870:	00bffb44 	movi	r2,-19
 801b874:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 801b878:	e0bffa17 	ldw	r2,-24(fp)
 801b87c:	1000090e 	bge	r2,zero,801b8a4 <open+0x140>
  {
    alt_release_fd (index);  
 801b880:	e13ff917 	ldw	r4,-28(fp)
 801b884:	8019c9c0 	call	8019c9c <alt_release_fd>
    ALT_ERRNO = -status;
 801b888:	801b6480 	call	801b648 <alt_get_errno>
 801b88c:	1007883a 	mov	r3,r2
 801b890:	e0bffa17 	ldw	r2,-24(fp)
 801b894:	0085c83a 	sub	r2,zero,r2
 801b898:	18800015 	stw	r2,0(r3)
    return -1;
 801b89c:	00bfffc4 	movi	r2,-1
 801b8a0:	00000106 	br	801b8a8 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 801b8a4:	e0bff917 	ldw	r2,-28(fp)
}
 801b8a8:	e037883a 	mov	sp,fp
 801b8ac:	dfc00117 	ldw	ra,4(sp)
 801b8b0:	df000017 	ldw	fp,0(sp)
 801b8b4:	dec00204 	addi	sp,sp,8
 801b8b8:	f800283a 	ret

0801b8bc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 801b8bc:	defffa04 	addi	sp,sp,-24
 801b8c0:	df000515 	stw	fp,20(sp)
 801b8c4:	df000504 	addi	fp,sp,20
 801b8c8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801b8cc:	0005303a 	rdctl	r2,status
 801b8d0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801b8d4:	e0fffc17 	ldw	r3,-16(fp)
 801b8d8:	00bfff84 	movi	r2,-2
 801b8dc:	1884703a 	and	r2,r3,r2
 801b8e0:	1001703a 	wrctl	status,r2
  
  return context;
 801b8e4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 801b8e8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 801b8ec:	e0bfff17 	ldw	r2,-4(fp)
 801b8f0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 801b8f4:	e0bffd17 	ldw	r2,-12(fp)
 801b8f8:	10800017 	ldw	r2,0(r2)
 801b8fc:	e0fffd17 	ldw	r3,-12(fp)
 801b900:	18c00117 	ldw	r3,4(r3)
 801b904:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 801b908:	e0bffd17 	ldw	r2,-12(fp)
 801b90c:	10800117 	ldw	r2,4(r2)
 801b910:	e0fffd17 	ldw	r3,-12(fp)
 801b914:	18c00017 	ldw	r3,0(r3)
 801b918:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 801b91c:	e0bffd17 	ldw	r2,-12(fp)
 801b920:	e0fffd17 	ldw	r3,-12(fp)
 801b924:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 801b928:	e0bffd17 	ldw	r2,-12(fp)
 801b92c:	e0fffd17 	ldw	r3,-12(fp)
 801b930:	10c00015 	stw	r3,0(r2)
 801b934:	e0bffb17 	ldw	r2,-20(fp)
 801b938:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801b93c:	e0bffe17 	ldw	r2,-8(fp)
 801b940:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 801b944:	e037883a 	mov	sp,fp
 801b948:	df000017 	ldw	fp,0(sp)
 801b94c:	dec00104 	addi	sp,sp,4
 801b950:	f800283a 	ret

0801b954 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 801b954:	defffb04 	addi	sp,sp,-20
 801b958:	dfc00415 	stw	ra,16(sp)
 801b95c:	df000315 	stw	fp,12(sp)
 801b960:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 801b964:	d0a02217 	ldw	r2,-32632(gp)
 801b968:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 801b96c:	d0a72c17 	ldw	r2,-25424(gp)
 801b970:	10800044 	addi	r2,r2,1
 801b974:	d0a72c15 	stw	r2,-25424(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 801b978:	00002e06 	br	801ba34 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 801b97c:	e0bffd17 	ldw	r2,-12(fp)
 801b980:	10800017 	ldw	r2,0(r2)
 801b984:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 801b988:	e0bffd17 	ldw	r2,-12(fp)
 801b98c:	10800403 	ldbu	r2,16(r2)
 801b990:	10803fcc 	andi	r2,r2,255
 801b994:	10000426 	beq	r2,zero,801b9a8 <alt_tick+0x54>
 801b998:	d0a72c17 	ldw	r2,-25424(gp)
 801b99c:	1000021e 	bne	r2,zero,801b9a8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 801b9a0:	e0bffd17 	ldw	r2,-12(fp)
 801b9a4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 801b9a8:	e0bffd17 	ldw	r2,-12(fp)
 801b9ac:	10800217 	ldw	r2,8(r2)
 801b9b0:	d0e72c17 	ldw	r3,-25424(gp)
 801b9b4:	18801d36 	bltu	r3,r2,801ba2c <alt_tick+0xd8>
 801b9b8:	e0bffd17 	ldw	r2,-12(fp)
 801b9bc:	10800403 	ldbu	r2,16(r2)
 801b9c0:	10803fcc 	andi	r2,r2,255
 801b9c4:	1000191e 	bne	r2,zero,801ba2c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 801b9c8:	e0bffd17 	ldw	r2,-12(fp)
 801b9cc:	10800317 	ldw	r2,12(r2)
 801b9d0:	e0fffd17 	ldw	r3,-12(fp)
 801b9d4:	18c00517 	ldw	r3,20(r3)
 801b9d8:	1809883a 	mov	r4,r3
 801b9dc:	103ee83a 	callr	r2
 801b9e0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 801b9e4:	e0bfff17 	ldw	r2,-4(fp)
 801b9e8:	1000031e 	bne	r2,zero,801b9f8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 801b9ec:	e13ffd17 	ldw	r4,-12(fp)
 801b9f0:	801b8bc0 	call	801b8bc <alt_alarm_stop>
 801b9f4:	00000d06 	br	801ba2c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 801b9f8:	e0bffd17 	ldw	r2,-12(fp)
 801b9fc:	10c00217 	ldw	r3,8(r2)
 801ba00:	e0bfff17 	ldw	r2,-4(fp)
 801ba04:	1887883a 	add	r3,r3,r2
 801ba08:	e0bffd17 	ldw	r2,-12(fp)
 801ba0c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 801ba10:	e0bffd17 	ldw	r2,-12(fp)
 801ba14:	10c00217 	ldw	r3,8(r2)
 801ba18:	d0a72c17 	ldw	r2,-25424(gp)
 801ba1c:	1880032e 	bgeu	r3,r2,801ba2c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 801ba20:	e0bffd17 	ldw	r2,-12(fp)
 801ba24:	00c00044 	movi	r3,1
 801ba28:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 801ba2c:	e0bffe17 	ldw	r2,-8(fp)
 801ba30:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 801ba34:	e0fffd17 	ldw	r3,-12(fp)
 801ba38:	d0a02204 	addi	r2,gp,-32632
 801ba3c:	18bfcf1e 	bne	r3,r2,801b97c <__alt_data_end+0xfc01b97c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 801ba40:	0001883a 	nop
}
 801ba44:	e037883a 	mov	sp,fp
 801ba48:	dfc00117 	ldw	ra,4(sp)
 801ba4c:	df000017 	ldw	fp,0(sp)
 801ba50:	dec00204 	addi	sp,sp,8
 801ba54:	f800283a 	ret

0801ba58 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 801ba58:	deffff04 	addi	sp,sp,-4
 801ba5c:	df000015 	stw	fp,0(sp)
 801ba60:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 801ba64:	000170fa 	wrctl	ienable,zero
}
 801ba68:	e037883a 	mov	sp,fp
 801ba6c:	df000017 	ldw	fp,0(sp)
 801ba70:	dec00104 	addi	sp,sp,4
 801ba74:	f800283a 	ret

0801ba78 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 801ba78:	defffb04 	addi	sp,sp,-20
 801ba7c:	dfc00415 	stw	ra,16(sp)
 801ba80:	df000315 	stw	fp,12(sp)
 801ba84:	df000304 	addi	fp,sp,12
 801ba88:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 801ba8c:	008200f4 	movhi	r2,2051
 801ba90:	10a3f104 	addi	r2,r2,-28732
 801ba94:	10800017 	ldw	r2,0(r2)
 801ba98:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 801ba9c:	00003106 	br	801bb64 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 801baa0:	e0bffd17 	ldw	r2,-12(fp)
 801baa4:	10800217 	ldw	r2,8(r2)
 801baa8:	1009883a 	mov	r4,r2
 801baac:	800ca6c0 	call	800ca6c <strlen>
 801bab0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 801bab4:	e0bffd17 	ldw	r2,-12(fp)
 801bab8:	10c00217 	ldw	r3,8(r2)
 801babc:	e0bffe17 	ldw	r2,-8(fp)
 801bac0:	10bfffc4 	addi	r2,r2,-1
 801bac4:	1885883a 	add	r2,r3,r2
 801bac8:	10800003 	ldbu	r2,0(r2)
 801bacc:	10803fcc 	andi	r2,r2,255
 801bad0:	1080201c 	xori	r2,r2,128
 801bad4:	10bfe004 	addi	r2,r2,-128
 801bad8:	10800bd8 	cmpnei	r2,r2,47
 801badc:	1000031e 	bne	r2,zero,801baec <alt_find_file+0x74>
    {
      len -= 1;
 801bae0:	e0bffe17 	ldw	r2,-8(fp)
 801bae4:	10bfffc4 	addi	r2,r2,-1
 801bae8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 801baec:	e0bffe17 	ldw	r2,-8(fp)
 801baf0:	e0ffff17 	ldw	r3,-4(fp)
 801baf4:	1885883a 	add	r2,r3,r2
 801baf8:	10800003 	ldbu	r2,0(r2)
 801bafc:	10803fcc 	andi	r2,r2,255
 801bb00:	1080201c 	xori	r2,r2,128
 801bb04:	10bfe004 	addi	r2,r2,-128
 801bb08:	10800be0 	cmpeqi	r2,r2,47
 801bb0c:	1000081e 	bne	r2,zero,801bb30 <alt_find_file+0xb8>
 801bb10:	e0bffe17 	ldw	r2,-8(fp)
 801bb14:	e0ffff17 	ldw	r3,-4(fp)
 801bb18:	1885883a 	add	r2,r3,r2
 801bb1c:	10800003 	ldbu	r2,0(r2)
 801bb20:	10803fcc 	andi	r2,r2,255
 801bb24:	1080201c 	xori	r2,r2,128
 801bb28:	10bfe004 	addi	r2,r2,-128
 801bb2c:	10000a1e 	bne	r2,zero,801bb58 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 801bb30:	e0bffd17 	ldw	r2,-12(fp)
 801bb34:	10c00217 	ldw	r3,8(r2)
 801bb38:	e0bffe17 	ldw	r2,-8(fp)
 801bb3c:	1809883a 	mov	r4,r3
 801bb40:	e17fff17 	ldw	r5,-4(fp)
 801bb44:	100d883a 	mov	r6,r2
 801bb48:	801bd180 	call	801bd18 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 801bb4c:	1000021e 	bne	r2,zero,801bb58 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 801bb50:	e0bffd17 	ldw	r2,-12(fp)
 801bb54:	00000806 	br	801bb78 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 801bb58:	e0bffd17 	ldw	r2,-12(fp)
 801bb5c:	10800017 	ldw	r2,0(r2)
 801bb60:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 801bb64:	e0fffd17 	ldw	r3,-12(fp)
 801bb68:	008200f4 	movhi	r2,2051
 801bb6c:	10a3f104 	addi	r2,r2,-28732
 801bb70:	18bfcb1e 	bne	r3,r2,801baa0 <__alt_data_end+0xfc01baa0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 801bb74:	0005883a 	mov	r2,zero
}
 801bb78:	e037883a 	mov	sp,fp
 801bb7c:	dfc00117 	ldw	ra,4(sp)
 801bb80:	df000017 	ldw	fp,0(sp)
 801bb84:	dec00204 	addi	sp,sp,8
 801bb88:	f800283a 	ret

0801bb8c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 801bb8c:	defffc04 	addi	sp,sp,-16
 801bb90:	df000315 	stw	fp,12(sp)
 801bb94:	df000304 	addi	fp,sp,12
 801bb98:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 801bb9c:	00bffa04 	movi	r2,-24
 801bba0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 801bba4:	e03ffd15 	stw	zero,-12(fp)
 801bba8:	00001d06 	br	801bc20 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 801bbac:	008200b4 	movhi	r2,2050
 801bbb0:	109f5404 	addi	r2,r2,32080
 801bbb4:	e0fffd17 	ldw	r3,-12(fp)
 801bbb8:	18c00324 	muli	r3,r3,12
 801bbbc:	10c5883a 	add	r2,r2,r3
 801bbc0:	10800017 	ldw	r2,0(r2)
 801bbc4:	1000131e 	bne	r2,zero,801bc14 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 801bbc8:	008200b4 	movhi	r2,2050
 801bbcc:	109f5404 	addi	r2,r2,32080
 801bbd0:	e0fffd17 	ldw	r3,-12(fp)
 801bbd4:	18c00324 	muli	r3,r3,12
 801bbd8:	10c5883a 	add	r2,r2,r3
 801bbdc:	e0ffff17 	ldw	r3,-4(fp)
 801bbe0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 801bbe4:	008200f4 	movhi	r2,2051
 801bbe8:	10a3f504 	addi	r2,r2,-28716
 801bbec:	10c00017 	ldw	r3,0(r2)
 801bbf0:	e0bffd17 	ldw	r2,-12(fp)
 801bbf4:	1880040e 	bge	r3,r2,801bc08 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 801bbf8:	008200f4 	movhi	r2,2051
 801bbfc:	10a3f504 	addi	r2,r2,-28716
 801bc00:	e0fffd17 	ldw	r3,-12(fp)
 801bc04:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 801bc08:	e0bffd17 	ldw	r2,-12(fp)
 801bc0c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 801bc10:	00000606 	br	801bc2c <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 801bc14:	e0bffd17 	ldw	r2,-12(fp)
 801bc18:	10800044 	addi	r2,r2,1
 801bc1c:	e0bffd15 	stw	r2,-12(fp)
 801bc20:	e0bffd17 	ldw	r2,-12(fp)
 801bc24:	10800810 	cmplti	r2,r2,32
 801bc28:	103fe01e 	bne	r2,zero,801bbac <__alt_data_end+0xfc01bbac>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 801bc2c:	e0bffe17 	ldw	r2,-8(fp)
}
 801bc30:	e037883a 	mov	sp,fp
 801bc34:	df000017 	ldw	fp,0(sp)
 801bc38:	dec00104 	addi	sp,sp,4
 801bc3c:	f800283a 	ret

0801bc40 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 801bc40:	defffb04 	addi	sp,sp,-20
 801bc44:	df000415 	stw	fp,16(sp)
 801bc48:	df000404 	addi	fp,sp,16
 801bc4c:	e13ffe15 	stw	r4,-8(fp)
 801bc50:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 801bc54:	e0bfff17 	ldw	r2,-4(fp)
 801bc58:	10840070 	cmpltui	r2,r2,4097
 801bc5c:	1000021e 	bne	r2,zero,801bc68 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 801bc60:	00840004 	movi	r2,4096
 801bc64:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 801bc68:	e0fffe17 	ldw	r3,-8(fp)
 801bc6c:	e0bfff17 	ldw	r2,-4(fp)
 801bc70:	1885883a 	add	r2,r3,r2
 801bc74:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 801bc78:	e0bffe17 	ldw	r2,-8(fp)
 801bc7c:	e0bffc15 	stw	r2,-16(fp)
 801bc80:	00000506 	br	801bc98 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 801bc84:	e0bffc17 	ldw	r2,-16(fp)
 801bc88:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 801bc8c:	e0bffc17 	ldw	r2,-16(fp)
 801bc90:	10800804 	addi	r2,r2,32
 801bc94:	e0bffc15 	stw	r2,-16(fp)
 801bc98:	e0fffc17 	ldw	r3,-16(fp)
 801bc9c:	e0bffd17 	ldw	r2,-12(fp)
 801bca0:	18bff836 	bltu	r3,r2,801bc84 <__alt_data_end+0xfc01bc84>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 801bca4:	e0bffe17 	ldw	r2,-8(fp)
 801bca8:	108007cc 	andi	r2,r2,31
 801bcac:	10000226 	beq	r2,zero,801bcb8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 801bcb0:	e0bffc17 	ldw	r2,-16(fp)
 801bcb4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 801bcb8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 801bcbc:	e037883a 	mov	sp,fp
 801bcc0:	df000017 	ldw	fp,0(sp)
 801bcc4:	dec00104 	addi	sp,sp,4
 801bcc8:	f800283a 	ret

0801bccc <atexit>:
 801bccc:	200b883a 	mov	r5,r4
 801bcd0:	000d883a 	mov	r6,zero
 801bcd4:	0009883a 	mov	r4,zero
 801bcd8:	000f883a 	mov	r7,zero
 801bcdc:	801bd941 	jmpi	801bd94 <__register_exitproc>

0801bce0 <exit>:
 801bce0:	defffe04 	addi	sp,sp,-8
 801bce4:	000b883a 	mov	r5,zero
 801bce8:	dc000015 	stw	r16,0(sp)
 801bcec:	dfc00115 	stw	ra,4(sp)
 801bcf0:	2021883a 	mov	r16,r4
 801bcf4:	801bea80 	call	801bea8 <__call_exitprocs>
 801bcf8:	008200f4 	movhi	r2,2051
 801bcfc:	10a3eb04 	addi	r2,r2,-28756
 801bd00:	11000017 	ldw	r4,0(r2)
 801bd04:	20800f17 	ldw	r2,60(r4)
 801bd08:	10000126 	beq	r2,zero,801bd10 <exit+0x30>
 801bd0c:	103ee83a 	callr	r2
 801bd10:	8009883a 	mov	r4,r16
 801bd14:	80191f80 	call	80191f8 <_exit>

0801bd18 <memcmp>:
 801bd18:	01c000c4 	movi	r7,3
 801bd1c:	3980192e 	bgeu	r7,r6,801bd84 <memcmp+0x6c>
 801bd20:	2144b03a 	or	r2,r4,r5
 801bd24:	11c4703a 	and	r2,r2,r7
 801bd28:	10000f26 	beq	r2,zero,801bd68 <memcmp+0x50>
 801bd2c:	20800003 	ldbu	r2,0(r4)
 801bd30:	28c00003 	ldbu	r3,0(r5)
 801bd34:	10c0151e 	bne	r2,r3,801bd8c <memcmp+0x74>
 801bd38:	31bfff84 	addi	r6,r6,-2
 801bd3c:	01ffffc4 	movi	r7,-1
 801bd40:	00000406 	br	801bd54 <memcmp+0x3c>
 801bd44:	20800003 	ldbu	r2,0(r4)
 801bd48:	28c00003 	ldbu	r3,0(r5)
 801bd4c:	31bfffc4 	addi	r6,r6,-1
 801bd50:	10c00e1e 	bne	r2,r3,801bd8c <memcmp+0x74>
 801bd54:	21000044 	addi	r4,r4,1
 801bd58:	29400044 	addi	r5,r5,1
 801bd5c:	31fff91e 	bne	r6,r7,801bd44 <__alt_data_end+0xfc01bd44>
 801bd60:	0005883a 	mov	r2,zero
 801bd64:	f800283a 	ret
 801bd68:	20c00017 	ldw	r3,0(r4)
 801bd6c:	28800017 	ldw	r2,0(r5)
 801bd70:	1880041e 	bne	r3,r2,801bd84 <memcmp+0x6c>
 801bd74:	31bfff04 	addi	r6,r6,-4
 801bd78:	21000104 	addi	r4,r4,4
 801bd7c:	29400104 	addi	r5,r5,4
 801bd80:	39bff936 	bltu	r7,r6,801bd68 <__alt_data_end+0xfc01bd68>
 801bd84:	303fe91e 	bne	r6,zero,801bd2c <__alt_data_end+0xfc01bd2c>
 801bd88:	003ff506 	br	801bd60 <__alt_data_end+0xfc01bd60>
 801bd8c:	10c5c83a 	sub	r2,r2,r3
 801bd90:	f800283a 	ret

0801bd94 <__register_exitproc>:
 801bd94:	008200f4 	movhi	r2,2051
 801bd98:	defffa04 	addi	sp,sp,-24
 801bd9c:	10a3eb04 	addi	r2,r2,-28756
 801bda0:	dc000315 	stw	r16,12(sp)
 801bda4:	14000017 	ldw	r16,0(r2)
 801bda8:	dc400415 	stw	r17,16(sp)
 801bdac:	dfc00515 	stw	ra,20(sp)
 801bdb0:	80805217 	ldw	r2,328(r16)
 801bdb4:	2023883a 	mov	r17,r4
 801bdb8:	10003626 	beq	r2,zero,801be94 <__register_exitproc+0x100>
 801bdbc:	10c00117 	ldw	r3,4(r2)
 801bdc0:	010007c4 	movi	r4,31
 801bdc4:	20c00e16 	blt	r4,r3,801be00 <__register_exitproc+0x6c>
 801bdc8:	1a400044 	addi	r9,r3,1
 801bdcc:	8800211e 	bne	r17,zero,801be54 <__register_exitproc+0xc0>
 801bdd0:	18c00084 	addi	r3,r3,2
 801bdd4:	18c7883a 	add	r3,r3,r3
 801bdd8:	18c7883a 	add	r3,r3,r3
 801bddc:	12400115 	stw	r9,4(r2)
 801bde0:	10c7883a 	add	r3,r2,r3
 801bde4:	19400015 	stw	r5,0(r3)
 801bde8:	0005883a 	mov	r2,zero
 801bdec:	dfc00517 	ldw	ra,20(sp)
 801bdf0:	dc400417 	ldw	r17,16(sp)
 801bdf4:	dc000317 	ldw	r16,12(sp)
 801bdf8:	dec00604 	addi	sp,sp,24
 801bdfc:	f800283a 	ret
 801be00:	00820074 	movhi	r2,2049
 801be04:	10af4c04 	addi	r2,r2,-17104
 801be08:	10002526 	beq	r2,zero,801bea0 <__register_exitproc+0x10c>
 801be0c:	01006404 	movi	r4,400
 801be10:	d9400015 	stw	r5,0(sp)
 801be14:	d9800115 	stw	r6,4(sp)
 801be18:	d9c00215 	stw	r7,8(sp)
 801be1c:	800bd300 	call	800bd30 <malloc>
 801be20:	d9400017 	ldw	r5,0(sp)
 801be24:	d9800117 	ldw	r6,4(sp)
 801be28:	d9c00217 	ldw	r7,8(sp)
 801be2c:	10001c26 	beq	r2,zero,801bea0 <__register_exitproc+0x10c>
 801be30:	80c05217 	ldw	r3,328(r16)
 801be34:	10000115 	stw	zero,4(r2)
 801be38:	02400044 	movi	r9,1
 801be3c:	10c00015 	stw	r3,0(r2)
 801be40:	80805215 	stw	r2,328(r16)
 801be44:	10006215 	stw	zero,392(r2)
 801be48:	10006315 	stw	zero,396(r2)
 801be4c:	0007883a 	mov	r3,zero
 801be50:	883fdf26 	beq	r17,zero,801bdd0 <__alt_data_end+0xfc01bdd0>
 801be54:	18d1883a 	add	r8,r3,r3
 801be58:	4211883a 	add	r8,r8,r8
 801be5c:	1211883a 	add	r8,r2,r8
 801be60:	41802215 	stw	r6,136(r8)
 801be64:	01000044 	movi	r4,1
 801be68:	11806217 	ldw	r6,392(r2)
 801be6c:	20c8983a 	sll	r4,r4,r3
 801be70:	310cb03a 	or	r6,r6,r4
 801be74:	11806215 	stw	r6,392(r2)
 801be78:	41c04215 	stw	r7,264(r8)
 801be7c:	01800084 	movi	r6,2
 801be80:	89bfd31e 	bne	r17,r6,801bdd0 <__alt_data_end+0xfc01bdd0>
 801be84:	11806317 	ldw	r6,396(r2)
 801be88:	3108b03a 	or	r4,r6,r4
 801be8c:	11006315 	stw	r4,396(r2)
 801be90:	003fcf06 	br	801bdd0 <__alt_data_end+0xfc01bdd0>
 801be94:	80805304 	addi	r2,r16,332
 801be98:	80805215 	stw	r2,328(r16)
 801be9c:	003fc706 	br	801bdbc <__alt_data_end+0xfc01bdbc>
 801bea0:	00bfffc4 	movi	r2,-1
 801bea4:	003fd106 	br	801bdec <__alt_data_end+0xfc01bdec>

0801bea8 <__call_exitprocs>:
 801bea8:	008200f4 	movhi	r2,2051
 801beac:	10a3eb04 	addi	r2,r2,-28756
 801beb0:	10800017 	ldw	r2,0(r2)
 801beb4:	defff404 	addi	sp,sp,-48
 801beb8:	dd800815 	stw	r22,32(sp)
 801bebc:	d8800015 	stw	r2,0(sp)
 801bec0:	10805204 	addi	r2,r2,328
 801bec4:	dd000615 	stw	r20,24(sp)
 801bec8:	dc800415 	stw	r18,16(sp)
 801becc:	dfc00b15 	stw	ra,44(sp)
 801bed0:	df000a15 	stw	fp,40(sp)
 801bed4:	ddc00915 	stw	r23,36(sp)
 801bed8:	dd400715 	stw	r21,28(sp)
 801bedc:	dcc00515 	stw	r19,20(sp)
 801bee0:	dc400315 	stw	r17,12(sp)
 801bee4:	dc000215 	stw	r16,8(sp)
 801bee8:	2025883a 	mov	r18,r4
 801beec:	2829883a 	mov	r20,r5
 801bef0:	d8800115 	stw	r2,4(sp)
 801bef4:	05bfffc4 	movi	r22,-1
 801bef8:	d8800017 	ldw	r2,0(sp)
 801befc:	14c05217 	ldw	r19,328(r2)
 801bf00:	98001d26 	beq	r19,zero,801bf78 <__call_exitprocs+0xd0>
 801bf04:	dd400117 	ldw	r21,4(sp)
 801bf08:	98800117 	ldw	r2,4(r19)
 801bf0c:	173fffc4 	addi	fp,r2,-1
 801bf10:	e0000d16 	blt	fp,zero,801bf48 <__call_exitprocs+0xa0>
 801bf14:	14000044 	addi	r16,r2,1
 801bf18:	8421883a 	add	r16,r16,r16
 801bf1c:	8421883a 	add	r16,r16,r16
 801bf20:	84402004 	addi	r17,r16,128
 801bf24:	9c63883a 	add	r17,r19,r17
 801bf28:	9c21883a 	add	r16,r19,r16
 801bf2c:	a0001e26 	beq	r20,zero,801bfa8 <__call_exitprocs+0x100>
 801bf30:	80804017 	ldw	r2,256(r16)
 801bf34:	15001c26 	beq	r2,r20,801bfa8 <__call_exitprocs+0x100>
 801bf38:	e73fffc4 	addi	fp,fp,-1
 801bf3c:	843fff04 	addi	r16,r16,-4
 801bf40:	8c7fff04 	addi	r17,r17,-4
 801bf44:	e5bff91e 	bne	fp,r22,801bf2c <__alt_data_end+0xfc01bf2c>
 801bf48:	00820074 	movhi	r2,2049
 801bf4c:	10af5104 	addi	r2,r2,-17084
 801bf50:	10000926 	beq	r2,zero,801bf78 <__call_exitprocs+0xd0>
 801bf54:	98800117 	ldw	r2,4(r19)
 801bf58:	1000311e 	bne	r2,zero,801c020 <__call_exitprocs+0x178>
 801bf5c:	98800017 	ldw	r2,0(r19)
 801bf60:	10003426 	beq	r2,zero,801c034 <__call_exitprocs+0x18c>
 801bf64:	9809883a 	mov	r4,r19
 801bf68:	a8800015 	stw	r2,0(r21)
 801bf6c:	800bd440 	call	800bd44 <free>
 801bf70:	acc00017 	ldw	r19,0(r21)
 801bf74:	983fe41e 	bne	r19,zero,801bf08 <__alt_data_end+0xfc01bf08>
 801bf78:	dfc00b17 	ldw	ra,44(sp)
 801bf7c:	df000a17 	ldw	fp,40(sp)
 801bf80:	ddc00917 	ldw	r23,36(sp)
 801bf84:	dd800817 	ldw	r22,32(sp)
 801bf88:	dd400717 	ldw	r21,28(sp)
 801bf8c:	dd000617 	ldw	r20,24(sp)
 801bf90:	dcc00517 	ldw	r19,20(sp)
 801bf94:	dc800417 	ldw	r18,16(sp)
 801bf98:	dc400317 	ldw	r17,12(sp)
 801bf9c:	dc000217 	ldw	r16,8(sp)
 801bfa0:	dec00c04 	addi	sp,sp,48
 801bfa4:	f800283a 	ret
 801bfa8:	98800117 	ldw	r2,4(r19)
 801bfac:	80c00017 	ldw	r3,0(r16)
 801bfb0:	10bfffc4 	addi	r2,r2,-1
 801bfb4:	17001526 	beq	r2,fp,801c00c <__call_exitprocs+0x164>
 801bfb8:	80000015 	stw	zero,0(r16)
 801bfbc:	183fde26 	beq	r3,zero,801bf38 <__alt_data_end+0xfc01bf38>
 801bfc0:	00800044 	movi	r2,1
 801bfc4:	1708983a 	sll	r4,r2,fp
 801bfc8:	98806217 	ldw	r2,392(r19)
 801bfcc:	9dc00117 	ldw	r23,4(r19)
 801bfd0:	2084703a 	and	r2,r4,r2
 801bfd4:	1000061e 	bne	r2,zero,801bff0 <__call_exitprocs+0x148>
 801bfd8:	183ee83a 	callr	r3
 801bfdc:	98800117 	ldw	r2,4(r19)
 801bfe0:	15ffc51e 	bne	r2,r23,801bef8 <__alt_data_end+0xfc01bef8>
 801bfe4:	a8800017 	ldw	r2,0(r21)
 801bfe8:	14ffd326 	beq	r2,r19,801bf38 <__alt_data_end+0xfc01bf38>
 801bfec:	003fc206 	br	801bef8 <__alt_data_end+0xfc01bef8>
 801bff0:	98806317 	ldw	r2,396(r19)
 801bff4:	2084703a 	and	r2,r4,r2
 801bff8:	1000061e 	bne	r2,zero,801c014 <__call_exitprocs+0x16c>
 801bffc:	89400017 	ldw	r5,0(r17)
 801c000:	9009883a 	mov	r4,r18
 801c004:	183ee83a 	callr	r3
 801c008:	003ff406 	br	801bfdc <__alt_data_end+0xfc01bfdc>
 801c00c:	9f000115 	stw	fp,4(r19)
 801c010:	003fea06 	br	801bfbc <__alt_data_end+0xfc01bfbc>
 801c014:	89000017 	ldw	r4,0(r17)
 801c018:	183ee83a 	callr	r3
 801c01c:	003fef06 	br	801bfdc <__alt_data_end+0xfc01bfdc>
 801c020:	98800017 	ldw	r2,0(r19)
 801c024:	982b883a 	mov	r21,r19
 801c028:	1027883a 	mov	r19,r2
 801c02c:	983fb61e 	bne	r19,zero,801bf08 <__alt_data_end+0xfc01bf08>
 801c030:	003fd106 	br	801bf78 <__alt_data_end+0xfc01bf78>
 801c034:	0005883a 	mov	r2,zero
 801c038:	003ffa06 	br	801c024 <__alt_data_end+0xfc01c024>
